流的概念
    尽管物理设备不尽相同，但是所有流的行为具有同样的方式。
    Java中流的实现是在java.io包定义的类层次结构内部的。
    输入/输出是相对于程序来说的，程序在使用数据时所扮演的角色有两个：一个是源，一个是目的。
    
输入/输出类
　　在java.io包中提供了60多个类（流）。
　　从功能上分为两大类：输入流和输出流。
　　从流结构上可分为字节流（Byte Streams，以字节为处理单位或称面向字节）和字符流（Character Streams，以字符为处理单位或称面向字符）。
　　字节流的输入流和输出流基础是InputStream和OutputStream这两个抽象类，字节流的输入输出操作由这两个类的子类实现。
　　字符流输入输出的基础是抽象类Reader和Writer。
　　在最底层，所有的输入/输出都是字节形式的。基于字符的流只为处理字符提供方便有效的方法。    

另一种流的分类

　　节点流：从特定的地方读写的流类。例如，磁盘或一块内存区域。
　　过滤流：使用节点流作为输入或输出。过滤流是使用一个已经存在的输入流或输出流连接创建的。
　　与目标相连的一定是节点流。

InputStream
　　三个基本的读方法：
　　abstract int read() 
　　抽象方法，所以InputStream是一个抽象类。读取输入流的下一个字节数据，并返回读到的数据，如果返回-1，表示读到了输入流的末尾。
　　int read(byte[] b) 
　　从输入流读入一些字节数据，把它们放进一个数组b，返回实际读取的字节数，如果返回-1，表示读到了输入流的末尾。
　　int read(byte[] b, int off, int len) 
　　将数据读入一个字节数组，同时返回实际读取的字节数。如果返回-1，表示读到了输入流的末尾。
    off指定在数组b中存放数据的起始偏移位置；len指定读取的最大字节数。
　　为什么只有第一个read方法是抽象的，而其余两个read方法都是具体的？
　　因为第二个read方法依靠第三个read方法来实现，而第三个read方法又依靠第一个read方法来实现。
    所以说只有第一个read方法是与具体的I/O设备相关的，它需要InputStream的子类来实现。    
    
