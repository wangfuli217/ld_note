Reflection机制 ... ...
所谓依赖注入，即在运行期由容器将依赖关系注入到组件之中。


首先，Spring涵盖了应用系统开发所涉及的大多数技术范畴，包括MVC、ORM以及Remote 
Interface等，这些技术往往贯穿了大多数应用系统的开发过程。Spring从开发者的角度对这些技术内
容进行了进一步的封装和抽象，使得应用开发更为简便。在笔者的开发工作中，借助Spring提供的丰富
类库，相对传统开发模式，大大节省了编码量（平均1/3强，对于ORM和Remote层也许更多）。 
 
其次，Spring并非一个强制性框架，它提供了很多独立的组件可供选择。如笔者在一些项目中，就
仅引用了Spring的ORM模板机制对数据存取层进行处理，并取得了相当理想的效果。 
 
评定一个框架是否优良的条件固然有很多种，但是笔者始终认为，对于应用系统开发而言，我们面
临着来自诸多方面的压力，此时，最能提高生产力的技术，也就是最有价值的技术。很高兴，Spring让
笔者找到了这样的感觉。 


IoC，用白话来讲，就是由容器控制程序之间的关系，而非传统实现中，由程序代码直接操控。这也
就是所谓“控制反转”的概念所在：控制权由应用代码中转到了外部容器，控制权的转移，是所谓反转。

相对IoC而言，“依赖注入”的确更加准确的描述了这种古老而又时兴的设计理念。从名字上理解，
所谓依赖注入，即组件之间的依赖关系由容器在运行期决定，形象的来说，即由容器动态的将某种依赖关
系注入到组件之中。

依赖注入的目标并非为软件系统带来更多的功能，而是为了提升组件重用的概率，并为系统搭建
一个灵活、可扩展的平台。

Type1 接口注入：我们常常借助接口来将调用者与实现者分离。
Type2 构造子注入 ：构造子注入，即通过构造函数完成依赖关系的设定，
Type3 设值注入 ：在各种类型的依赖注入模式中，设值注入模式在实际开发中得到了最广泛的应用（其中很大一部分得
力于Spring框架的影响）。 基于设置模式的依赖注入机制更加直观、也更加自然。

可见，Type2和Type3模式各有千秋，而Spring、PicoContainer都对Type2和Type3类型的依赖注
入机制提供了良好支持。这也就为我们提供了更多的选择余地。理论上，以Type2类型为主，辅之以Type3
类型机制作为补充，可以达到最好的依赖注入效果，不过对于基于Spring Framework开发的应用而言，
Type3使用更加广泛。 

org.springframework.beans包中包括了这些核心组件的实现类，核心中的核心为BeanWrapper
和BeanFactory类。这两个类从技术角度而言并不复杂，但对于Spring框架而言，却是关键所在，如果
有时间，建议对其源码进行研读，必有所获。