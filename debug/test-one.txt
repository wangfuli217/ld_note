linker: http://blog.csdn.net/ieearth/article/details/78070182
方法
    从是否关心软件内部结构和具体实现的角度划分：
        ――白盒测试。
        ――黑盒测试。
        ――灰盒测试。
    从是否执行程序的角度划分：
        ――静态测试。
        ――动态测试。
    从软件开发的过程按阶段划分：
        ――单元测试。
        ――集成测试。
        ――确认测试。
        ――系统测试。
        ――验收测试。
        ――回归测试。
        ――Alpha测试。
        ――Beta测试。
白盒测试
    白盒测试又称结构测试、透明盒测试、逻辑驱动测试或基于代码的测试。白盒测试是一种测试用例设
    计方法，盒子指的是被测试的软件，白盒指的是盒子是可视的，你清楚盒子内部的东西以及里面是如
    何运作的。白盒法要全面了解程序内部逻辑结构，对所有逻辑路径进行测试，是穷举路径测试。在使
    用这一方案时，测试者必须检查程序的内部结构，从检查程序的逻辑着手，得出测试数据，贯穿程序
    的独立路径数可能天文数字。
    
    常用的软件测试方法有两大类：静态测试方法和动态测试方法。其中软件的静态测试不要求在计算机
    上实际执行所测程序，主要以一些人工的模拟技术对软件进行分析和测试；而软件的动态测试是通过
    输入一组预先按照一定的测试准则构造的实例数据来动态运行程序，而达到发现程序错误的过程。静
    态方法如代码检查法、静态结构分析法、静态质量度量法等，动态测试如逻辑覆盖法、基本路径测试
    法、域测试、符号测试、路径覆盖、程序变异等。
    
    白盒测试法的覆盖标准有逻辑覆盖、循环覆盖和基本路径测试。其中逻辑覆盖包括语句覆盖、判定覆
    盖、条件覆盖、判定/条件覆盖、条件组合覆盖和路径覆盖，这六种覆盖测试方法属于动态方法。
    
黑盒测试
    黑盒测试也称功能测试，它是通过测试来检测每个功能是否都能正常使用。在测试中，把程序看作一
    个不能打开的黑盒子，在完全不考虑程序内部结构和内部特性的情况下，在程序接口进行测试，它只
    检查程序功能是否按照需求规格说明书的规定正常使用，程序是否能适当地接收输入数据而产生正确
    的输出信息。黑盒测试着眼于程序外部结构，不考虑内部逻辑结构，主要针对软件界面和软件功能进
    行测试。黑盒测试是以用户的角度，从输入数据与输出数据的对应关系出发进行测试的。很明显，如
    果外部特性本身设计有问题或规格说明的规定有误，用黑盒测试方法是发现不了的。
    
    具体的黑盒测试用例设计方法包括等价类划分法、边界值分析法、错误推测法、因果图法、判定表驱
    动法、正交试验设计法、功能图法、场景法等。
    
灰盒测试
    灰盒测试，是介于白盒测试与黑盒测试之间的一种测试，灰盒测试多用于集成测试阶段，不仅关注输
    出、输入的正确性，同时也关注程序内部的情况。灰盒测试不像白盒那样详细、完整，但又比黑盒测
    试更关注程序的内部逻辑，常常是通过一些表征性的现象、事件、标志来判断内部的运行状态。
    
静态测试
    静态方法是指不运行被测程序本身，仅通过分析或检查源程序的语法、结构、过程、接口等来检查程
    序的正确性。对需求规格说明书、软件设计说明书、源程序做结构分析、流程图分析、符号执行来找
    错。静态方法通过程序静态特性的分析，找出欠缺和可疑之处，例如不匹配的参数、不适当的循环嵌
    套和分支嵌套、不允许的递归、未使用过的变量、空指针的引用和可疑的计算等。静态测试结果可用
    于进一步的查错，并为测试用例选取提供指导。
    
动态测试
    动态测试方法是指通过运行被测程序，检查运行结果与预期结果的差异，并分析运行效率、正确性和
    健壮性等性能。这种方法由三部分组成：构造测试用例、执行程序、分析程序的输出结果。
    
单元测试
    单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。对于单元测试中单元的含
    义，一般来说，要根据实际情况去判定其具体含义，如C语言中单元指一个函数，Java里单元指一个
    类，图形化的软件中可以指一个窗口或一个菜单等，总的来说，单元就是人为规定的最小的被测功能
    模块。单元测试是在软件开发过程中要进行的最低级别的测试活动，软件的独立单元将在与程序的其
    他部分相隔离的情况下进行测试。
    
集成测试
    集成测试，也叫组装测试或联合测试。在单元测试的基础上，将所有模块按照设计要求（如根据结构图）
    组装成为子系统或系统，进行集成测试。实践表明，一些模块虽然能够单独地工作，但并不能保证连接
    起来也能正常的工作。一些局部反映不出来的问题，在全局上很可能暴露出来。
    
确认测试
    确认测试的目的是向未来的用户表明系统能够像预定要求那样工作。经集成测试后，已经按照设计把所有
    的模块组装成一个完整的软件系统，接口错误也已经基本排除了，接着就应该进一步验证软件的有效性，
    这就是确认测试的任务，即软件的功能和性能如同用户所合理期待的那样。
    
系统测试
    系统测试，英文是System Testing。是将已经确认的软件、计算机硬件、外设、网络等其他元素结合在一起，
    进行信息系统的各种组装测试和确认测试，系统测试是针对整个产品系统进行的测试，目的是验证系统是否
    满足了需求规格的定义，找出与需求规格不符或与之矛盾的地方，从而提出更加完善的方案。
    系统测试发现问题之后要经过调试找出错误原因和位置，然后进行改正。是基于系统整体需求说明书的黑盒类
    测试，应覆盖系统所有联合的部件。对象不仅仅包括需测试的软件，还要包含软件所依赖的硬件、外设甚至
    包括某些数据、某些支持软件及其接口等。测试内容包括功能测试、健壮性测试（容错与恢复能力）、安全
    测试、压力测试等。
    
验收测试
    验收测试是部署软件之前的最后一个测试操作。在软件产品完成了单元测试、集成测试和系统测试之后，
    产品发布之前所进行的软件测试活动。它是技术测试的最后一个阶段，也称为交付测试。验收测
    试的目的是确保软件准备就绪，并且可以让最终用户将其用于执行软件的既定功能和任务。验收测试
    是向未来的用户表明系统能够像预定要求那样工作。经集成测试后，已经按照设计把所有的模块组装
    成一个完整的软件系统，接口错误也已经基本排除了，接着就应该进一步验证软件的有效性，这就是
    验收测试的任务，即软件的功能和性能如同用户所合理期待的那样。验收测试，系统开发生命周期方
    系统用户决定是否接收系统。它是一项确定产品是否能够满足合同或用户所规定需求的测试。这是管
    理性和防御性控制。
    
回归测试
    回归测试是指修改了旧代码后，重新进行测试以确认修改没有引入新的错误或导致其他代码产生错误。
    自动回归测试将大幅降低系统测试、维护升级等阶段的成本。回归测试作为软件生命周期的一个组成部分，
    在整个软件测试过程中占有很大的工作量比重，软件开发的各个阶段都会进行多次回归测试。
    在渐进和快速迭代开发中，新版本的连续发布使回归测试进行的更加频繁，而在极端编程方法中，
    更是要求每天都进行若干次回归测试。因此，通过选择正确的回归测试策略来改进回归测试的效率和有效性是很有意义的。
    
α测试
    α测试是由一个用户在开发环境下进行的测试，也可以是公司内部的用户在模拟实际操作环境下进行的测试。
    α测试的目的是评价软件产品的FLURPS(即功能、局域化、可用性、可靠性、性能和支持)。
    尤其注重产品的界面和特色。α测试可以从软件产品编码结束之时开始，或在模块(子系统)测试完成之后开始，
    也可以在确认测试过程中产品达到一定的稳定和可靠程度之后再开始。α测试即为非正式验收测试。
    
β测试
    Beta测试是一种验收测试。所谓验收测试是软件产品完成了功能测试和系统测试之后，在产品发布之
    前所进行的软件测试活动，它是技术测试的最后一个阶段，通过了验收测试，产品就会进入发布阶段。
    验收测试一般根据产品规格说明书严格检查产品，逐行逐字地对照说明书上对软件产品所做出的各方面要求，
    确保所开发的软件产品符合用户的各项要求。 通过综合测试之后，软件已完全组装起来，接口方面的错误也已排除，
    软件测试的最后一步――验收测试即可开始。验收测试应检查软件能否按合同要求进行工作，即是否满足软件需求说明书中的确认标准。
    
    