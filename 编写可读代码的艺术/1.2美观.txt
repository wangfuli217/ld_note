审美 == 格式化 == 提高可读性
三条原则 - 好的审美与好的设计是两个独立的思想。最好是同时在两个方向上努力做到更好。
  1. 使用一致的布局，让读者很快就习惯这种风格
  2. 让相似的代码看上去相似
  3. 把相关的代码行分组，形成代码块
  4. 一致的风格比正确的风格更重要

美观的重要性 - 使用从审美角度将让人愉悦的代码更容易
  整洁的代码能让读者花更少的时间理解代码

提高代码美观
  1. 重新安排换行来保持一致和紧凑
    public class PerformanceTester{
    // TcpConnectionsSimulator(throughput, latenct, jitter, packet_loss)
    //                          [Kbps]       [ms]    [ms]    [percent]

    public static final TcpConnectionSimulator wifi = 
        new TcpConnectionSimulator(500,80,200,1);

    public static final TcpConnectionSimulator t3_fiber = 
        new TcpConnectionSimulator(45000,10,0,0);

    public static final TcpConnectionSimulator cell = 
        new TcpConnectionSimulator(100,400,250,5);
    }
    相对于
    public class PerformanceTester{
    // TcpConnectionsSimulator(throughput, latenct, jitter, packet_loss)
    //                          [Kbps]       [ms]    [ms]    [percent]

    public static final TcpConnectionSimulator wifi = new TcpConnectionSimulator
    (500, /* Kbps */
     80,  /* ms */
     200, /* ms */
     1    /* percent */);

    public static final TcpConnectionSimulator t3_fiber = 
        new TcpConnectionSimulator(
        45000, /* Kbps */
        10,    /* ms */
        0,     /* ms */
        0      /* percent */);

    public static final TcpConnectionSimulator cell =  new TcpConnectionSimulator(
    100, /* Kbps */
    400, /* ms */
    250, /* ms */
    5    /* percent */);
    }
    2. 用方法（函数）来整理不规则的代码
       进一步抽象过程|函数
    3. 可以考虑使用列对齐，例如：
    #Extract POST parameters to local variables
    details  = request.POST.get('details')
    location = request.POST.get('location')
    phone    = request.POST.get('phone')
    email    = request.POST.get('email')
    url      = request.POST.get('url')

    选一个有意义的顺序，始终如一的使用它
    details  = request.POST.get('details')
    location = request.POST.get('location')
    phone    = equest.POST.get('phone')
    email    = request.POST.get('email')
    url      = request.POST.get('url')
      让变量的顺序与对应的HTML表单中<input>字段的顺序相匹配
      从最重要到最不重要
      按字母顺序排序
    把声明按块组织起来
    /////////////////////////
    class FrontendServer {
        public:
            FrontendServer();
            ~FrontendServer();
        
            // Handlers
            void ViewProfi1e(HttpRequest* request);
            void SaveProfile(HttpRequest* request);
            void FindFriends(HttpRequest* request);
        
            // Request/ Reply
            string ExtractQueryParam(HttpRequest* request, string param);
            void ReplyOK(HttpRequest* request, string html);
            void ReplyNotFound(HttpRequest* request, string error);
        
            // Database Helpers
            void OpenDatabase(string location, string user);
            void CloseDatabase(string location);
    };
    把代码分成有逻辑的段落：把相似的想法放在一起并与其他想法分开
      它是一种把相似的想法放在一起并与其他想法分开的想法
      他提供了可见的脚印，如果没有它，会很容易找不到你读到哪里了
      它便于段落之间导航
      
    