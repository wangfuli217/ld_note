关键思想：代码应当易于理解 -> 大师级程序员把系统当故事来讲，而不是当做程序来写
  1. 可读性 == 可测试性 == 代码质量 == 代码优雅 == 
  2. 代码的必要性：将需求明确到机器可以执行的细节程度，就是编程要做的事，这种规约就是代码。
  3. 知和行。应当习得有关原则、模式和实践的知识，穷尽应知之事，并且要对其了如指掌，通过刻苦实践掌握它。
  4. 沃德原则:如果每个历程都让你感到深和己意，那就是整洁的代码
关键思想：代码的写法应当使别人理解它所需的时间最小化
  1. 要把理解代码所需的时间最小化而不是减少代码，比如一条注释尽管增加了代码的长度，但是能让你更快的理解代码
  2. 先从表面改进：起好名字、写好注释、整洁的代码格式
  3. 整洁代码应当有单元测试和验收测试。它使用有意义的命名，代码通过其字面表达含义。
  
编写可读代码的艺术
    主题：代码写法使其被理解的所需时间最小化
    表面层次的改进：选择好的名字、写好的注释以及把代码整洁地写成更好的格式。

    从代码的排版
      类的结构
      方法的布局
      变量的命名
    
选择代码样式 1 
for(Node *node = list->head; node != NULL; node = node->next)
   Print(node->data)
选择代码样式 2   
node = list->head;
while(node != NULL){
   Print(node->data);
   node = node->next;
}
选择代码样式 3
node = &(list->head);
    while ((eptr=*node)) {
    if (eptr->mode == KILL) {
        // free
        *kptr = eptr->next;
    }
    else{
        node = &(eptr->next);
    }
}

勒布朗法则：稍后等于永不(Later equals never).
  什么是整洁代码
    优雅：外表或举止令人愉悦的优美和雅观；令人愉悦的精致和简单。
    效率
    整洁的代码只干一件事
  减少重复代码，提高表达力，提早构建简单抽象，这是写整洁代码的方法
  童子军军规
    让营地比你来时更干净
    
What is Clean Code?
    Function/Method just does one thing
    Broken Window Theory: a broken window allows more window to be broken
    "Matter of fact" as opposed to "Speculative"
    Code is not clean without tests
    No duplication
    Tiny abstractions
    Readability: time spent reading vs writing i s 10 : 1
    
Attitude
    Managers may defend schedule and requirement
    Programmers defend the code with equal passion