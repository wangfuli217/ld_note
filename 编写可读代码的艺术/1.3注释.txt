关键思想：注释的目的是尽量帮助读者了解得和作者一样多
          a. 别给糟糕的代码加注释—重新写吧
          b. 有注释的地方基本就宣告着失败。
  1. 当你在写代码时，你的脑海里会有很多有价值的信息。当其他人读你的代码时，这些信息已经丢失
      他们所见到的只是眼前的代码。
  2. 注释应当有很高的信息|空间率
  
  注释：解释数据结构的细节、算法的特例以及异常情况。
    
什么不需要注释
    不要为了那些从代码本身就能快速推断的事实写注释
    不要为了注释而注释，没有提供比代码本身更多信息的注释要么删除，要么改进
    不要给不好的名字加注释---应该把名字改好，好代码>坏代码+好注释 -- 用来粉饰烂代码的拐杖式注释
      // Release the handle for this key. Alert: this function don't modify the actual registry
      void registry_delete(registry_key *key);
      void registry_handle_release(registry_key *key);

什么需要注释
  记录你写代码时重要的想法 -- 对于为什么代码写成这样而不是那样的内在理由(指导性批注)
  记录对代码有价值的见解，例如：解释代码没法修复的缺陷、代码不整洁的原因
  为代码中的瑕疵写注释，比如有如下几种标记：
    标记        通畅的意义                                 次要的缺陷
    TODO:       我还没有处理的事情                         todo
    FIXME:      已知的无法运行的代码                       fixme
    HACK:       对一个问题不得不采用的比较粗糙的解决方案   hack
    XXX:        危险！这里有重要的问题                     xxx

    1. 给常量加注释，记下决定这个常量值时的想法 -- 常量背后的故事，为什么是这个值
    站在读者的角度
      考虑读者阅读这段代码时可能出现提问，并将提问的答案写在注释中
      公布可能的陷阱
      编写文件级别的注释，让读者熟悉代码库 -- 文件级别的注释
      在一个类或者函数内部编写总结性的注释

    克服"作者心理阻滞"，
        不管心里想什么，先把它写下来
        读一下这段注释，看看有没有什么可以改进的地方
        不断改进

    当你经常写注释，你会发现步骤1所产生的注释会越来越好，就越不需要后面两步了
写出言简意赅的注释
    让注释保持紧凑         -- 映射解释
    避免使用不明确的代词， -- 避免使用it this the等代词
    润色粗糙的句子
    精确的描述函数的行为
      // Return the number of lines in this file 
      int CountLines(string filename) { ... } 
      // Count how many newline bytes ('\n') are in the file 
      int CountLines(string filename) { ... }
    行： 1. 空文件            - 0行或1行?
         2. hello             - 0行或1行?
         3. hello\n           - 1行或2行?
         3. hello\n world     - 1行或2行?
         3. hello\n\r world\r - 2行、3行或4行?
         
    对于输入输出，精心挑选一个例子就够了
      // Remove the suffix/prefix of 'chars' from the input 
      String Strip(String src, String chars) { ... } 
      // Remove the suffix/prefix of 'chars' from the input 
      // Example: Strip("abba/a/ba", "ab") returns "/a/" 
      String Strip(String src, String chars) { ... }
    
    声明代码的意图
    "具名"函数的参数，就是用注释标明函数参数的含义，用来解释难以理解的函数参数
      void Connect(int timeout_ms, bool use_encryption) { ... } 
      Connect(10, false); 
      Connect(/* timeout_ms = */ 10, /* use_encryption = */ false);
    
    采用信息含量高的词
    
注释会撒谎 : 注释存在的时间越久，就离其所描述的代码越远，
    a. 注释不能美化糟糕的代码 : 用代码来描述
    b. 好注释
        1. 法律信息
        2. 提供信息的注释
        3. 对意图的解释 决定的意图
            阐释：将某些晦涩难懂的参数或返回值的意义翻译为某种可读形式
        4. 警示:警告会出现某种后果。
        5. TODO 注释
        6. 放大某种不合理之物的重要性
    c. 坏注释
        1. 喃喃自语:如果你觉得应该或者因为过程需要注释就添加注释，是无谓之举。
        2. 多余的注释
        3. 注释掉的代码