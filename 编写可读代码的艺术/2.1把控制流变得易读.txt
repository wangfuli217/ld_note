把控制流变得易读
    关键思想：把条件、循环、以及其他对控制流的改变做的越"自然"越好。让读者不用停下来重读代码。
    保护语句放在代码块的前面，包括return continue break 和 goto
    变量放在判断前面，常量放在判断后面
    
条件语句
  if(length >= 10)                        if(10 <= length)
  while(bytes_received < bytes_expected)  while(bytes_received > bytes_expected) 
  条件语句中比较参数的顺序，有以下指导原则：
                  比较的左侧                     比较的右侧
  "被问询的"表达式，它的值更倾向于不断变化       用来做比较的表达式，它的值更倾向于常量
  这是和日常语言习惯是一致的，我们会很自然的说："如果你的年收入至少是10万"
  
  编译器可以告警 -- 此种编写方式已经过时
  "尤达表示法"：在有些语言中（包括C++和C，不包括Java）为了防止if(obj==NULL)被写成if(obj=NULL)，
  出现了if(NULL==obj)这样的写法，但是这样不利于理解，与上一条相悖，现代编译器已经能对if(obj=NULL)
  给出警告，所以这个写法已经过时了。
  
  if/else语句块的顺序：
    1. 首先处理正逻辑而不是负逻辑的情况。例如，用if(debug)而不是if(!debug)
    2. 先处理掉简单的情况。这种方式可能还会让if和else在屏幕内都可见
    3. 先处理有趣的或者是可疑的情况
    
    不要为了减少代码行数而使用三目运算符，它只适用于从两个简单的值中作出选择的情况，例如：
    time_str += (hour >= 12) ? "pm" : "am";
    因为带有复杂逻辑的三目运算符反而增加了代码的阅读时间
    
循环
    避免do/while循环，它的continue语句会让人迷惑，while循环相对更加易读。
    实践中，大多数do/while循环都可以写成while循环
    
从函数提前返回
    函数中使用多条return语句是没有问题的；
      有些程序员认为函数中永远不应该出现多次return语句，这是胡说八道，从函数中提前返回没有问题，而且常常很受欢迎。
    实现函数结尾的清理代码的更为精细的方式
      如果一个大函数有很多清理代码，提前返回可能很难做到没有问题。 - > 重构或者goto cleanup

    语言  清理代码的结构化术语
    C++             析构函数
    Java、Python    try finally   -- 使用异常·try/catch`替代返回错误码
    Python          with
    C#              using
    goto语句对程序易读性的破坏

    结构化编程 ：每个函数都应该有一个入口、一个出口。出口为正确的退出位置，不包括错误、异常退出位置。
    
嵌套
    深层次的嵌套严重影响代码的可读性
    嵌套一开始是很简单的，但是后来的改动会加深嵌套
    通过提早返回来减少嵌套
    减少循环内的嵌套，与提早返回类似的技术是使用continue
      与if(..)return; 在函数中所扮演的保护语句一样，这些if(..)continue;语句是循环中的保护语句。
代码流程
    编程语言和库的结构让代码在"幕后运行"，或者让代码难以理解，如：
      编程结构                高层次程序流程是如何变得不清晰的
      --------                 ------------------------------
      线程                    不清楚什么时间执行什么代码
      信号量/中断处理程序     有些代码随时有可能执行
      异常                    可能会从多个函数调用中向上冒泡一样地执行
      函数指针和匿名函数      很难知道到底会执行什么代码，因为在编译时还没有决定
      虚方法                  object.virtualMethod()可能会调用一个未知子类的代码