重新组织代码
    抽取不相关的子问题
    代码应当一次只做一件事情
    把想法变成代码
    少写代码
    
1. 过程式代码（使用数据结构的代码）便于在不改动既有数据结构的前提下添加新的函数。
2. 面向对象代码便于在不改动既有函数的前提下添加新类。反

3. 过来讲也说的通,过程式代码难以添加新数据结构，因为必须修改所有函数，
4. 面向对象代码难以添加新函数，因为必须修改所有类。

    
函数:  https://github.com/ybbdaidai/reading-notes/issues/18
    短小
    只做一件事
        编写函数是为了把大一些的概念拆分为另一个抽象层上的一系列步骤。（函数降维）
    函数内的语句要在同一抽象层级上
        函数中混杂不同的抽象层级就会使得读者无法判断表达式是基础概念还是细节
    switch语句
        使用抽象工厂，从应用代码移走
        注意要将switch埋藏在较低的抽象层级
    分隔指令与询问。函数要么做什么事，要么回答什么事，但二者不可得兼。
    函数参数
        1. 最理想的参数数量是0
        2. 最理想是没有返回值，因为也会增大理解难度，去理解输出的参数是什么
        3. 调用0参函数与调用有参函数相比，参数会和调用的函数不在同一抽象层次。（导致理解难度增加）
        4. 参数少容易设置测试
        5. 一元函数的普遍形式
            问关于参数的问题
            将其转换为其他什么东西，在输出之
            应当区别这两种用法，并在一致的上下文使用
            还有一种不那么普遍但极有用的形式，就是事件，一元参数无返回值
        6.规避标志参数
            明确说明要分情况，不是一件事
            正确的做法分为两个函数
        a. 参数名，最好和函数名有联系。这样可以，大大减轻记忆参数的负担
        b. 禁止把布尔值传入函数。这样做，意味着，宣称本函数不只做一件事：true时做一件事，false时则在做另外一件事。
        c. 函数参数尽量是单个值的有序组成部份，或者多个有序的值，有序性是很重要的。
            如果函数参数之间无序，你无法很快知道某个参数的作用。
        e. 如果函数的参数有多个的话，可能需要将参数封装成对象，重要。
        f. 应该避免使用输出参数（重要，后面的grade即是输出参数）。
    参数对象
        参数列表本身是一个概念的，可以封装成对象
        可变参数同理（String... args）
        方法名和参数就好像 动词与关键字
    无副作用
        副作用是一种谎言，函数承诺只做一件事。
        尽量避免使用输出参数，如果修改某种状态，就修改所属对象的状态
    分割指令与询问
        指令就是指令，不要把指令的返回值当作下一步的判断值，返回值很容易被混淆，如set(fieldName, value)的返回值是属性是否已经有值，有则返回false。这就需要很多知识。所以应该分开。
    使用异常替代返回错误码
        从指令式函数返回错误码轻微违反了指令与询问分隔的规则。
        更导致了更深的嵌套结构
        如果使用异常替代它，错误处理代码就能从主路径代码中分离出来
        错误码会产生枚举或者错误类，这会导致许多类引用它们，一旦枚举发生变化，所有类都要重新编译
        使用继承异常类取代这种方式
    错误处理
        1. 使用异常而非返回错误码.
        2. try-catch-finally, log出错信息.
        3. 不要返回null，不要传递null。

    a. 函数编写细则
    一定不要重复自己，重复的代码难以修复，且可读性差，应该把重复的代码写成函数。
    函数应该只做一件事，当做了多件事的时候就很容易产生副作用。
        有的时候副作用往往是致命的，因为它的隐蔽性很强，不容易察觉，而又确实造成了影响。
        在对函数测试的时候，函数应该剔除所有副作用。
    函数要么"做什么事"，要么"回答什么事"。即是将指令和询问分隔开来。
    抽离try/catch代码块，他们会搞乱了代码结构，把错误处理和正常流程混为一谈。所以应该把其主体部分抽离出来，另外写成函数。错误处理的代码应该就是包含它的函数的所有代码。