关键思想：把超长表达式拆分成更容易理解的小块

  1. 解释变量
    引入一个额外的变量，使之成为一个小一点的子表达式
  2. 总结变量
    用一个很短的名字来代替一大块代码，会更容易管理和思考
  3. 使用德摩根定理
    分别进行取反、转换与/或，反向操作是提取出"反因子"
     not (a or b or c) == (not a) and (not b) and (not c) 
     not (a and b and c) == (not a) or (not b) or (not c) 
     
不滥用短路操作
    短路操作虽然可以很智能的运用在某些场景，使之成为条件控制的效果，但是影响代码的理解
    但短路操作在很多情况下也能达到简洁的目的

拆分巨大的语句 
    复杂的逻辑会产生复杂的表达式，表达式复杂会增加代码的阅读难度，解决它需要转换思维，用更优雅的方式
    巨大的语句的拆分需要找到重复的部分，进行简化
    有时需要把问题"反向"或者考虑目标的对立面
    --- 引入变量，简化判断
    --- 通过宏，简化表达式长度
    