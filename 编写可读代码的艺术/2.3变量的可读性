变量的可读性 -- 速战速决是一种好的策略
主要问题：
  变量越多，就越难全部跟踪它们的动向
  变量的作用域越大，就需要跟踪它的动向越久
  变量改变得越频繁，就越难以跟踪它的当前值

  减少不能改进可读性的变量
  减少没有价值的临时变量，比如
    没有拆分任何复杂的表达式
    没有做更多的解释
    只用过一次，因此没有压缩任何冗余代码
  减少中间结果
  减少控制流变量 将break变成return
    done = false;
    while(/*condition*/&&!done){
      if(...){
        done = true;
        continue;
      }
    }
    done就是控制流变量，可以通过更好的运用结构化编程而消除：
    while(/*condition*/){
      if(...){
        break;
      }
    }

  当有多个嵌套的循环时，一个break可能不够，通常的解决方案是把代码挪到一个新方法中
  缩小变量的作用域
    避免滥用全局变量
    让你的代码对尽量少的代码行可见
      Payment *info = database.ReadPaymentInfo(); -- info后面可能还用
      if(info){
        ...
      }
      
      if(Payment *info = database.ReadPaymentInfo()){ -- info后面明确不再使用
        ...
      }
      LUA | Python | Javascript使用闭包，避免限定全局变量范围。
    把定义往下移，变量定义在使用之前即可
      定义紧跟逻辑块，需要才定义。 这样随着代码膨胀可以很容易对代码进行重构。

    
  只写一次的变量更好 -- 永久固定的变量更容易理解
    那些只设置一次值的变量（或者const、final、常量）使得代码更容易理解
    就算不能让变量只写一次，让变量在较少的地方改动仍有帮助
    操作一个变量的地方越多，越难确定它的当前值