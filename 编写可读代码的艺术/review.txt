1. 语言特性是为了服务我们的编程思想，而不是去迎合某个语言特性来编程。
2. 设计很重要：变量命名、接口设计、对象封装
3. 好的变量名是可读的，易记的和恰如其分的。
4. 变量和变量名就本质而言是同一事物, 变量的好与坏就在很大程度上取决于它的命名的好坏。
4. 名字要完全、准确地描述出该变量所代表的事物, 获得好名字的一种实用技巧就是用文字表达变量所代表的是什么。
   通常，对变量的描述就是最佳的变量名。这种名字很容易阅读，因为其中并不包含晦涩的缩写，同时也没有歧义。
   因为它是对事物的完全描述，因此不会和其他事物混淆。另外，由于这一名字与所表达的概念相似，因此也很容易记忆。


使用标准的缩写（列在字典中的那些常见缩写）。
去掉所有非前置元音。（computer 变 cmptr，screen 变成 scrn，apple 变成 appl，integer 变成 intgr）
去掉虚词 and，or，the等。
使用每个单词的第一个或前几个字母。
统一地在每个单词的第一、第二或者第三个（选择最合适的一个）字母后截断。
保留每个单词的第一和最后一个字母。
使用名字中的每一个重要单词，最多不超过三个。
去除无用的后缀 ―― ing，ed 等。
确保不要改变变量的含义。
反复使用上述技术，直到你把每个变量名的长度缩减到了 8 到 20 个字符，或者达到你所用的编程语言对变量名的限制字符数。


不要用从每个单词中删除一个字符的方式来缩写。 键入一个字符算不上是什么额外工作，而节省一个字符带来的便利却很难抵消由此而造成的可读性损失。这就像日历中的 “Jun” 和 “Jul”。你只有在非常着急的情况才有必要把 June 拼成 “Jun”。对于大多数删除一个字母的做法而言，你很难回忆起自己是不是删了一个字符。所以要么删除不止一个字符，要么就把单词拼写完整。
缩写要一致 应该一直使用相同的缩写。例如，要么全用 Num，要么全用 No，不要两个都用。与之类似，不要在一些名字里缩写某个单词而在其他名字里不缩写。比如，不要在有些地方使用完整的单词 Number，同时在其他地方使用 Num 缩写。
创建你能读出来的名字 用 xPstn,用 needsCompu 而不用 ndsCmptg。此处可以借助电话来测试 ―― 如果你无法在电话中向他人读出你的代码，就请重新给变量起一个更清晰的名字吧。
避免使用容易看错或者读错的字符组合 为了表示 B 的结尾，ENDB 要比 BEND 更好。如果你使用了一种好的分隔技术，那么就不需要这一条原则，因为 B_END、BEnd 或者 b_end 都不会被读错。
使用辞典来解决命名冲突 创建简短名字会带来的一项麻烦技术命名冲突 ―― 缩写后名字相同。例如，如果命名长度被限制为 3 个字符，并且你需要在程序中的同一代吗使用 fired 和 full revenue disbursal，你可能会不经意地把缩写都写出了 frd。 避免命名冲突的一种简单做法是使用含义相同的不同单词，这样一来，有一部辞典就显得很方便。在本例中，可以用 dismissed 来代替 fired，以及用 complete revenue disbursal 来代替 full revenue disbursal。这样，3 个字母的缩写就分别变成了 dsm 和 crd，从而消除了命名冲突。
在代码里用缩写对照表解释极短的名字的含义 当编程语言只允许用非常短的名字的时候，增加一张缩写对照表来为用户提升更多的变量含义。把该表格作为注释加到一段代码的开始。

   
   
不整洁的代码，阅读体验是这样的：
    1.乱（组织乱，职责乱，名称乱起）
    2.逻辑不清晰（if-else 太多）
    3.绕弯子（简单的事写的很复杂）
    4.看不懂（只有写的人能理解）
    5.难修改（耦合严重，各种写死）


整洁的代码，阅读体验是这样的：
    1.清晰（是什么，做了什么，一眼看得出来）
    2.简单（职责少，代码少，逻辑少）
    3.干净（没有多余的逻辑）
    4.好拓展（依赖的比较少，修改不会影响很多）
接下来介绍一些写整洁代码的方法。


坏命名具有这样的特点：
1.使用缩写（让使用者误解其用途）
2.描述性差（通过命名无法理解他的作用）
3.相似（使用类似的、难分辨的名称）
4.使用专业术语做名称
容易误会，比如使用 Activity 表达活动，容易被理解成安卓里的组件
5.需要借注释解释
名称本身就是解释，如果还需要借助注释，就已经说明这个命名有问题，对应的类、函数、属性职责不清晰

好的命名具有这样的特点：
1.名副其实
阅读名称就知道它为什么存在、做什么事、应该怎么用，如果需要通过注释来回答，那就不算名副其实
2.不容易混淆
避免使用非常相似的名称，尤其是类型还相同，比如小写 l 和1、o 和 0、专有名词
3.读的出来
不要因为害怕名称过长而使用缩写，那样不便于和别人讨论
4.方便搜索
名称长度和其作用范围成正比，作用范围比较大的，长名称也可以，只要能表达清楚

让函数再整洁一点
    函数的第一要则：短小 （多短才算可以？不超过 10 行，缩进层级不该大于两层）
    只做一件事 （要判断函数是否做了不止一件事，就看它里面的代码，是否能再拆出一个函数）
    函数变大的头号凶手：switch 语句 
    switch 语句天生要做多件事，我们能做的，就是减少 switch 语句的次数，把它埋藏在较低的抽象层级，同时不重复使用 switch 
    如果有类似的 switch 出现多次，就要考虑使用多态来减少 switch 语句出现的次数
    定义的函数的参数越多，你耗费函数使用者的青春就越多，使用者需要花时间搞清楚每个参数的具体含义和顺序 
    最理想的参数数量是 1~2 
    从测试的角度看，参数越多，可能出现的用例就越多，就越容易出错 
    保持参数列表短小的方法: 参数升为全局变量、多个参数封装成一个类
    不要有副作用（副作用就是做了名称以外的工作

注释的好与坏
在这些场景下，使用注释比较好：
1.弥补代码表达意图的失败
代码本身无法说明意图，这时使用注释，说明这段代码需要被修改
2.提供信息
提供代码以外的信息，比如产品相关信息
3.复杂实现的简要概括
让阅读者快速了解某个复杂的系统
4.警示、提醒
比如某个不起眼的代码是为了解决某个 bug，防止别人误删
5.TODO
IDE可以定位 TODO 注释，我们需要定期查看这些注释，删除不再需要的，让代码整洁


这些注释是坏注释：
1.令人费解的注释
读懂花费的时间比看代码的时间还长，差评
2.误导性注释，老旧的注释
代码才是真相，注释有可能是谎言，还是要”少写注释！“
3.日志型注释
比如记录修改日志，放到 git commit 日志里吧
4.废话注释
变量名、函数名已经很清晰，就不需要注释，注释里不要放一些奇怪的东西，比如如来佛祖
5.注释掉的代码
没用的代码及时删除


格式化 Coding Style
1.团队最好统一格式化标准
    那样就可以避免某人只修改了一点，但顺手格式化了一下，整个类都产生了变动，那样会覆盖真正的提交日志。
2.一行代码列数不超过 100
    Android Studio 里的竖线默认是 100，不要超过这条线。
3.代码抽象层级逐渐递减
    最顶应该给出高层次概念和算法，向下逐渐展开细节。
4.用好空行
    每个空行代表思路的重新开始，用空白行隔开思路和不同作用的代码，和写文章一样，及时分段。
5.物以类聚
    关系密切的代码应该靠近。





