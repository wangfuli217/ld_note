http://www.cnblogs.com/heiyue/p/7299038.html

usb(概念){
USB的重要关键概念:
1、 端点：位于USB设备或主机上的一个数据缓冲区，用来存放和发送USB的各种数据，每一个端点都有惟一的确定地址，有不同的传输特性（如输入端点、输出端点、配置端点、批量传输端点）
2、 帧：时间概念，在USB中，一帧就是1MS，它是一个独立的单元，包含了一系列总线动作，USB将1帧分为好几份，每一份中是一个USB的传输动作。
3、upstream、downstream(上行、下行)：设备到主机为上行，主机到设备为下行

面以一问一答的形式开始学习吧：

问题一：USB的传输线结构是如何的呢？

答案一：一条USB的传输线分别由地线、电源线、D+、D-四条线构成，D+和D-是差分输入线，它使用的是3.3V的电压（注意哦，与CMOS的 5V电平不同），而电源线和地线可向设备提供5V电压，最大电流为500MA

问题二：数据是如何在USB传输线里面传送的

答案二：数据在USB线里传送是由低位到高位发送的。

问题三：USB的编码方案？

答案三：USB采用不归零取反来传输数据，当传输线上的差分数据输入0时就取反，输入1时就保持原值，为了确保信号发送的准确性，当在USB总线上发送一个包时，传输设备就要进行位插入***作（即在数据流中每连续6个1后就插入一个0），从而强迫NRZI码发生变化。这个了解就行了，这些是由专门硬件处理的。

问题四：USB的数据格式是怎么样的呢？

答案四：和其他的一样，USB数据是由二进制数字串构成的，首先数字串构成域（有七种），域再构成包，包再构成事务（IN、OUT、SETUP），事务最后构成传输（中断传输、并行传输、批量传输和控制传输）。下面简单介绍一下域、包、事务、传输，请注意他们之间的关系。
（一）域：是USB数据最小的单位，由若干位组成（至于是多少位由具体的域决定），域可分为七个类型：
1、同步域（SYNC），八位，值固定为0000 0001，用于本地时钟与输入同步
2、标识域（PID），由四位标识符+四位标识符反码构成，表明包的类型和格式，这是一个很重要的部分，这里可以计算出，USB的标识码有16种，具体分类请看问题五。
3、地址域（ADDR）：七位地址，代表了设备在主机上的地址，地址000 0000被命名为零地址，是任何一个设备第一次连接到主机时，在被主机配置、枚举前的默认地址，由此可以知道为什么一个USB主机只能接127个设备的原因。
4、端点域（ENDP），四位，由此可知一个USB设备有的端点数量最大为16个
5、帧号域（FRAM），11位，每一个帧都有一个特定的帧号，帧号域最大容量0x800，对于同步传输有重要意义（同步传输为四种传输类型之一，请看下面）。
6、数据域（DATA）：长度为0~1023字节，在不同的传输类型中，数据域的长度各不相同，但必须为整数个字节的长度
7、校验域（CRC）：对令牌包和数据包（对于包的分类请看下面）中非PID域进行校验的一种方法，CRC校验在通讯中应用很泛，是一种很好的校验方法，至于具体的校验方法这里就不多说，请查阅相关资料，只须注意CRC码的除法是模2运算，不同于10进制中的除法。
（二）包：由域构成的包有四种类型，分别是令牌包、数据包、握手包和特殊包，前面三种是重要的包，不同的包的域结构不同，介绍如下
1、令牌包：可分为输入包、输出包、设置包和帧起始包（注意这里的输入包是用于设置输入命令的，输出包是用来设置输出命令的，而不是放据数的）
其中输入包、输出包和设置包的格式都是一样的：
SYNC+PID+ADDR+ENDP+CRC5（五位的校验码）
帧起始包的格式：
SYNC+PID+11位FRAM+CRC5（五位的校验码）
2、数据包：分为DATA0包和DATA1包，当USB发送数据的时候，当一次发送的数据长度大于相应端点的容量时，就需要把数据包分为好几个包，分批发送，DATA0包和DATA1包交替发送，即如果第一个数据包是 DATA0，那第二个数据包就是DATA1。但也有例外情况，在同步传输中（四类传输类型中之一），所有的数据包都是为DATA0，格式如下：
SYNC+PID+0~1023字节+CRC16
3、握手包：结构最为简单的包，格式如下
SYNC+PID

USB的四种传输类型：

1.  控制传输：
      控制传输是一种可靠的双向传输，一次控制传输可分为三个阶段。第一阶段为从HOST到Device的SETUP事务传输，这个阶段指定了此次控制传输的请求类型；
      第二阶段为数据阶段，也有些请求没有数据阶段；第三阶段为状态阶段，通过一次IN/OUT 传输表明请求是否成功完成。
      控制传输通过控制管道在应用软件和 Device 的控制端点之间进行，控制传输过程中传输的数据是有格式定义的，USB 设备或主机可根据格式定义解析获得的数据含义。
      其他三种传输类型都没有格式定义。
      控制传输对于最大包长度有固定的要求。对于高速设备该值为 64Byte；对于低速设备该值为 8；全速设备可以是 8或 16或 32或 64。
      最大包长度 表征了一个端点单次接收/发送数据的能力，实际上反应的是该端点对应的Buffer 的大小。Buffer 越大，单次可接收/发送的数据包越大，反之亦反。
      当通过一个端点进行数据传输时，  若数据的大小超过该端点的最大包长度时，需要将数据分成若干个数据包传输，并且要求除最后一个包外，所有的包长度均等于该最大包长度。
      这也就是说如果一个端点收到/发送了一个长度小于最大包长度的包，即意味着数据传输结束。
      控制传输在访问总线时也受到一些限制，如：
        a. 高速端点的控制传输不能占用超过 20%的微帧，全速和低速的则不能超过 10%。
        b. 在一帧内如果有多余的未用时间，并且没有同步和中断传输，可以用来进行控制传输。

2.  中断传输：
      中断传输是一种轮询的传输方式，是一种单向的传输，HOST通过固定的间隔对中断端点进行查询，若有数据传输或可以接收数据则返回数据或发送数据，否则返回NAK，表示尚未准备好。
      中断传输的延迟有保证，但并非实时传输，它是一种延迟有限的可靠传输，支持错误重传。
      对于高速/全速/低速端点，最大包长度分别可以达到1024/64/8 Bytes。
      高速中断传输不得占用超过 80%的微帧时间，全速和低速不得超过 90%。
      中断端点的轮询间隔由在端点描述符中定义，全速端点的轮询间隔可以是1~255mS，低速端点为10~255mS，高速端点为(2interval-1)*125uS，其中 interval取 1到 16之间的值。
      除高速高带宽中断端点外，一个微帧内仅允许一次中断事务传输，高速高带宽端点最多可以在一个微帧内进行三次中断事务传输，传输高达 3072 字节的数据。
      所谓单向传输，并不是说该传输只支持一个方向的传输，而是指在某个端点上该传输仅支持一个方向，或输出，或输入。如果需要在两个方向上进行某种单向传输，需要占用两个端点，
      分别配置成不同的方向，可以拥有相同的端点编号。

3.  批量传输：
      批量传输是一种可靠的单向传输，但延迟没有保证，它尽量利用可以利用的带宽来完成传输，适合数据量比较大的传输。
      低速 USB 设备不支持批量传输，高速批量端点的最大包长度为 512，全速批量端点的最大包长度可以为 8、16、32、64。
      批量传输在访问 USB 总线时，相对其他传输类型具有最低的优先级，USB HOST 总是优先安排其他类型的传输，当总线带宽有富余时才安排批量传输。
      高速的批量端点必须支持PING 操作，向主机报告端点的状态，NYET 表示否定应答，没有准备好接收下一个数据包，ACK 表示肯定应答，已经准备好接收下一个数据包。

4.  同步传输：
      同步传输是一种实时的、不可靠的传输，不支持错误重发机制。只有高速和全速端点支持同步传输，高速同步端点的最大包长度为 1024，低速的为 1023。
      除高速高带宽同步端点外，一个微帧内仅允许一次同步事务传输，高速高带宽端点最多可以在一个微帧内进行三次同步事务传输，传输高达 3072 字节的数据。
      全速同步传输不得占用超过 80%的帧时间，高速同步传输不得占用超过 90%的微帧时间。 同步端点的访问也和中断端点一样，有固定的时间间隔限制。
      在主机控制器和 USB  HUB 之间还有另外一种传输——分离传输（Split  Transaction），它仅在主机控制器和 HUB之间执行，通过分离传输，可以允许全速/低速设备连接到高速主机。
      分离传输对于USB 设备来说是透明的、不可见的。
      分离传输：顾名思义就是把一次完整的事务传输分成两个事务传输来完成。其出发点是高速传输和全速/低速传输的速度不相等，如果使用一次完整的事务来传输，势必会造成比较长的等待时间，
      从而降低了高速 USB 总线的利用率。通过将一次传输分成两此，将令牌（和数据）的传输与响应数据（和握手）的传输分开，这样就可以在中间插入其他高速传输，从而提高总线的利用率。

总结：USB的最小单元是“域”，
    由“域”构成了“包”，
    在由“包”构成了“事务”，
    最后由“事务”构成了“传输”，
    在应用层面，我们看到的只是传输，所以USB协议栈就需要完成传输以下的所有事情。这对标准的USB协议栈提出了最基本的要求。
端点：

端点位于USB 外设内部，所有通信数据的来源或目的都基于这些端点，是一个可寻址的FIFO。

每个USB 外设有一个唯一的地址，可能包含最多十六个端点。主机通过发出器件地址和每次数据传输的端点号，向一个具体端点(FIFO)发送数据。

每个端点的地址为0 到15，一个端点地址对应一个方向。所以，端点2-IN 与端点2-OUT 完全不同。 每个器件有一个默认的双向控制端点0，因此不存在端点0-IN 和端点0-OUT。

USB四种传输模式

控制传输、批量传输、中断传输、同步传输

USB 有上述四种传输类型。枚举期间外设告诉主机每个端点支持哪种传输类型。

USB设备驱动向USB控制器驱动请求的每次传输被称为一个事务（Transaction），

事务有四种类型：Bulk Transaction、Control Transaction、Interrupt Transaction和Isochronous Transaction。

数据包包含部分：

每次事务都会分解成若干个数据包在USB总线上传输。每次传输必须历经两个或三个部分，第一部分——USB控制器向USB设备发出命令，

第二部分——USB控制器和USB设备之间传递读写请求，其方向主要看第一部分的命令是读还是写，第二部分有时候可以没有。

第三部分——握手信号。

批量(Bulk)传输事务

作用：主要应用在数据大量数据传输和接受数据上同时又没有带宽和间隔时间要求的情况下；

特点：要求保证传输。打印机和扫描仪属于这种类型这种类型的设备

适合于传输非常慢和大量被延迟的传输，可以等到所有其它类型的数据的传输完成之后再传输和接收数据。

批量数据传输分三个阶段：

第一部分——令牌阶段。

Host端发出一个Bulk的令牌请求。

如果令牌是IN请求 ，则是从Device到Host的请求；

如果令牌是OUT请求，则是从Host到Device端的请求。

第二部分——传送数据的阶段。

根据先前请求的令牌的类型，数据传输有可能是IN方向，也有可能是OUT方向。传输数据的时候用DATA0和DATA1令牌携带着数据交替传送。

数据传输格式DATA1和DATA0，这两个是重复数据，确保在1数据丢失时0可以补上，不至于数据丢失。

第三部分——握手阶段。

如果数据是IN 方向，握手信号应该是Host端发出；

如果数据是OUT方向，握手信号应该是Device端发出。

握手信号可以为ACK， 表示正常响应，

NAK， 表示没有正确传送。

STALL，表示出现主机不可预知的错误。

如图所示。

图Bulk传输

图 Bulk传输时的令牌

控制(Control)传输

作用：USB系统软件用来主要进行查询配置和给USB设备发送通用的命令；

特点：控制传输是双向传输，数据量通常较小；数据传送是无损性的。

数据宽度：控制传输方式可以包括8、16、32和64字节的数据，这依赖于设备和传输速度。

控制传输典型地用在主计算机和USB外设之间的端点0（EP0）之间的传输

控制传输也分为三个阶段，即令牌阶段、数据传送阶段、握手阶段，如下图所示。

图 控制传输事务

中断(Interrupt)传输事务

作用：主要用于定时查询设备是否有中断数据要传输；

特点：设备的端点模式器的结构决定了它的查询频率从1到255ms之间。

典型的应用在少量的分散的不可预测数据的传输键盘操纵杆和鼠标就属于这一类型

（数据量很小）

中断方式传输是单向的并且对于host 来说只有输入（IN）的方式

在中断事务中，也分为三个阶段，即令牌阶段、数据传输阶段、握手阶段，如下图所示。

中断传输事务

同步(Isochronous)传输事务

作用：用于时间严格并具有较强容错性的流数据传输，或者用于要求恒定的数据传输率的即时应用中。例如执行即时通话的网络电话。

特点：保证传输的同步性。保证每秒有固定的传输量。

（与Bulk传输不同）同步传输允许有一定的误码率。（这样符合视频会议等传输的需求，因为视频会议首先要保证实时性，在一定条件下，允许有一定的误码率。）

同步传输事务有只有两个阶段，即令牌阶段、数据阶段，因为不关心数据的正确性，故没有握手阶段，

如下图所示：

图 同步传输事务

}

usb(类型){
USB 1.0 低速(Low Speed) 1.5Mbit/s
USB 1.0 全速(Full Speed) 12Mbit/s
USB 2.0 高速(High Speed) 480Mbit/s
USB 3.0 超高速(Super Speed) 5Gbit/s

1. 主机端：4引脚(VBUS,GND,D+,D-)
2. USB OTG控制器：Mini-AB：5引脚(VBUS,GND,D+,D-)第5个引脚来判别连接的设备是作为USB主机用还是用作USB设备用。

1. OHCI（Open Host Controller Interface）是支持USB1.1的标准，但它不仅仅是针对USB，还支持其他的一些接口，
比如它还支持Apple的火线（Firewire，IEEE 1394）接口。与UHCI相比，OHCI的硬件复杂，硬件做的事情更多，所以
实现对应的软件驱动的任务，就相对较简单。主要用于非x86的USB，如扩展卡、嵌入式开发板的USB主控。
对应模块为usb-ohci.o
"OHCI"驱动程序用来为非 PC 系统上的（以及带有 SiS 和 ALi 芯片组的 PC 主板上的）USB 芯片提供支持。

2. UHCI（Universal Host Controller Interface），是Intel主导的对USB1.0、1.1的接口标准，与OHCI不兼容。
UHCI的软件驱动的任务重，需要做得比较复杂，但可以使用较便宜、较简单的硬件的USB控制器。Intel和VIA使用UHCI，
而其余的硬件提供商使用OHCI。
对应模块为usb-uhci.o
"UHCI"驱动程序用来为大多数其它 PC 主板（包括 Intel 和 Via）上的 USB 实现提供支持。

3. EHCI（Enhanced Host Controller Interface），是Intel主导的USB2.0的接口标准。EHCI仅提供USB2.0的高速功能，
而依靠UHCI或OHCI来提供对全速（full-speed）或低速（low-speed）设备的支持。
对应模块为ehci-hcd.o
"EHCI"驱动程序设计成为实现新的高速 USB 2.0 协议的芯片提供支持

4. USB设备分为HOST（主设备）和SLAVE（从设备），只有当一台HOST与一台SLAVE连接时才能实现数据的传输。
（1）USB HOST是指主机。
（2）USB OTG设备既能做主机，又能做设备。OTG技术就是实现在没有Host的情况下，实现从设备间的数据传送。
当OTG 插到电脑上时，OTG 的角色就是连接电脑的device（读卡器），也就是SLAVE（从设备）；
当USB/SD device 插到 OTG 上，OTG 的角色就是 HOST(主机)。有些手机也经常用到OTG功能。

uhci.o	        另一个uhci驱动程序，我也不知道有什么用，一般不要加载，会死机的
hid.o	        USB人机界面设备，像鼠标呀、键盘呀都需要
usb-storage.o	USB存储设备，U盘等用到
ide-scsi.o	    把IDE设备模拟SCSI接口
scsi_mod.o	    SCSI支持
sr_mod.o	    SCSI光盘
sg.o	        SCSI通用支持（在某些探测U盘、SCSI探测中会用到）


USB鼠标
---------------
modprobe usb-uhci
modprobe usbmouse
modprobe mousedev
若你把HID input layer支持和input core 支持也作为模块方式安装，那么启动hid模块和input模块也是必要的。
	modprobe hid
	modprobe input
    
USB键盘
---------------   
modprobe usb-uhci 
modprobe usbkbd
modprobe keybdev

U盘和USB读卡器
--------------- 
modprobe usb-storage
当然，usbcore.o 和usb-uhci.o或usb-ohci也肯定是不可缺少的。另外，若你系统中SCSI支持也是模块方式，那么下面的模块也要加载
	modprobe scsi_mod
	modprobe sd_mod
    
Linux支持的其他USB设备。  
---------------   
MODEM--（比较常见）
网络设备
摄像头--（比较常见）例如ov511.o
联机线--可以让你的两台电脑用USB线实现网络功能。usbnet.o
显示器--（我没见过）
游戏杆
电视盒--（比较常见）
手写板--（比较常见）
扫描仪--（比较常见）
刻录机--（比较常见）
打印机--（比较常见）

}

1、  设备描述符：struct usb_device_descriptor         lsusb -v
2、  配置描述符：struct usb_config_descriptor         lsusb -v
3、  接口描述符：struct usb_interface_descriptor      lsusb -v
4、  端点描述符：struct usb_endpoint_descriptor       lsusb -v

usb(端点){
一个批量IN端点和一个批量OUT端点可以有相同的地址。

usb_device结构体属于USB子系统；pci_dev结构体属于PCI层，net_device结构体属于网络驱动层。
}

urb(){
分配内存，初始化，提交。
1、  分配urb
struct urb *usb_alloc_urb(int iso_packets, gfp_t mem_flags);  //\drivers\usb\core\urb.c

2、  初始化urb
void usb_fill_[control | int | bulk]_urb{ } ///对应控制传输、中断传输、批量传输

3、  提交urb(提交给主控制器,由主控制器发送给USB设备)
(1)  异步提交urb，提交完成后执行通过usb_fill_[control | int | bulk]_urb 传入的回调函数
int usb_submit_urb(struct urb *urb, gfp_t mem_flags); //\drivers\usb\core\urb.c
(2) 同步提交urb
int  usb_[control | interrupt | bulk]_msg ()  //\drivers\usb\core\Message.c


每个端点通过管道和usb主控制器连接，管道包括以下几个部分：
(1)     端点地址
(2)     数据传输方向（in 或 out）
(3)     数据传输模式
usb_[rcv| snd| ctrl| int| bulk| isoc ]pipe
根据端点地址、传输方式和传输方向创建不同的pipe：
}

usb(实用usb术语详解){
主机
--------------- 
USB是一种"主-从"式总线，包括一个主机和多个从机。从机称作外设，在USB术语中也称作功能部件。主机称作主设备。
所有USB传输都由主机启动；外设总是响应传输，不会启动传输。最常用的主机是PC机，主机通过USB-A连接器连接到
下行设备。嵌入式主机不包括PC机，而是用一个微控制器作为专用主机，或许只能与一类USB设备通信。

功能部件
--------------- 
功能部件是USB设备，也称作USB外设。USB外设是主机的“下行”设备，使用USB B型连接器连接.


速率
--------------- 
USB 2.0标准规定了以下三种传输速率：
低速模式传输速率为1.5Mbps，多用于键盘和鼠标。
全速模式传输速率为12Mbps。
高速模式传输速率为480Mbps。

市场上关于"USB 2.0兼容"的概念有一些混乱。这种混乱源于USB标准版本的升级，首先推出的是USB 1.0，
紧接着有了比1.0更理想的USB1.1。USB1.x支持低速和全速两种USB总线速度。2.0版本增加了高速模式，
完全替代了1.1。所以，如果使用的是工作在12Mbps速率下的全速器件，则可认为它与USB 2.0兼容，
即使许多人仅将USB 2.0用于高速(480Mbps)操作。

入-出方向
--------------- 
USB系统以主机为中心。因此，解释USB术语时假设面向的是主机。所以，从主机侧看，"入"表示传输方向
从外设到主机；同样，"出"表示传输方向从主机到外设。

端点
--------------- 
    端点位于USB外设内部，所有通信数据的来源或目的都基于这些端点，是一个可寻址的FIFO。
每个USB外设有一个唯一的地址，可能包含最多十六个端点。主机通过发出器件地址和每次数据传输的端点号，
向一个具体端点(FIFO)发送数据。
    每个端点的地址为0到15，一个端点地址对应一个方向。所以，端点2-IN与端点2-OUT完全不同。 
每个器件有一个默认的双向控制端点0，因此不存在端点0-IN和端点0-OUT。
    外设中端点的编号是任意的。枚举期间外设向主机报告其端点号和特征。

集线器
--------------- 
集线器扩展了USB主机所能连接设备的数量。PC机的USB控制器内置一个集线器，负责完成一些底层USB功能，
如检测设备的插入或拔出。集线器以全速或高速连接到上行端口(到PC)，以低速、全速或高速连接到下行端口(到外设)
(自供电)，每个下行端口可提供高达500mA电流。


枚举
--------------- 
    插入USB设备时，主机获取连接通知，继而识别刚刚插入的是什么。主机需要得到一系列描述符(数据表)，
该描述符来自插入的设备，所有USB设备在插入USB端口时，主机都通过默认的CONTROL端点0与设备进行通讯。
如果主机确认它从设备接收的数据正确，则配置该设备使之开始工作。如果主机认为设备的数据不正确(例如，
某个描述符数据有冲突或超出了规范)，则忽略该设备。这时会弹出一个对话窗，说明该USB设备出了一些问题。

    USB标准的第9章定义了枚举期间主机送到外设的所有请求，以及外设响应的数据格式。如果访问USB官方网站，
将找到一个名为USBCV (USB命令验证器)的软件工具，其中有一部分名为"第9章测试"。这些测试可以证明您的
枚举代码是否正确。在进行USB实验室测试时也要用到 USBCV。因此，如果已在自己的实验室里通过了这一USB验证，
则实验室测试也不成问题。


SIE
--------------- 
SIE指串行接口引擎，是所有USB控制器内部的"核心"。SIE负责处理底层协议，如填充位，CRC生成和校验，并可发出错误报告。
SIE的主要任务是将低级信号转换成字节，以供控制器使用，某些SIE会更加先进灵活。它处理的底层信号细节越多，
控制固件越简单。例如，某些SIE只报告端点数据触发的结果(参见下文)，并将它留给固件以确定如何处理。


数据触发
--------------- 
    USB包从PID或ID开始。数据传输用到两种PID：DATA0和DATA1。主机和外设均包含数据触发位，每个端点一个。
触发位确定这些数据PID中的哪一个用于数据传输。当外设脱离复位状态，主机和外设均将其内部数据触发位复位到零。
因此，第一个传送的是DATA0 PID数据包。当数据包传输无误时(发送方接收到ACK PID信号，表明数据传输无误)，
发送方和接收方补偿其数据触发值。然后用DATA1 PID向端点发送第二个数据包。成功传输后，DATA0 PID和DATA1 PID
数据包交替发送(或再次触发)。USB将该机制作为其误差校正的一部分.


控制传输、批量传输、中断传输、同步传输
--------------- 
USB有上述四种传输类型。枚举期间外设告诉主机每个端点支持哪种传输类型。
    只有主机能够发出控制传输，该传输由两个或三段组成。先通过设置数据包(8字节长)发送具体的主机请求。然后
用一个可选数据包移动描述符表等数据。最后，用握手(状态)包终止控制传输。作为"关键"传输，控制传输有高总线
优先权和最全面的误差校验。每个USB外设都需要一个默认的控制端点0。

    批量传输使用流控制和误差校验移动数据。批量传输为异步方式，这意味着预定传输时间不固定或不能保证。
主机安排批量传输的优先级为低。这并不说明批量传输很慢；如果总线被轻微加载，批量传输即可在所有可用带宽上进行。

    实际上，中断传输和批量传输很难区分。他们之间的唯一区别是中断点包含轮询间隔值，用来告诉主机多长时间"ping"
一次端点。所以批量和中断传输之间的唯一区别是主机多长时间安排一次传输。

    同步(ISO)传输用于数据流，例如音频或视频，此时数据必须及时到达以避免音频或视频数据中断。当器件枚举时
告诉主机其ISO端点对带宽的要求。如果带宽适当，主机保证每隔1ms发送一个USB帧，包含一个发往或来自设备的ISO数据包。
ISO不使用握手(ACK/NAK)或总线重试。同步传输仅适用于全速和高速设备。

总线复位
--------------- 
    主机通过发出总线复位信号复位USB外设。全速和低速USB的D+和D-线上通常使用差分信号。但也有例外，总线复位和
包结束信号使用的是单端零信号，此时D+和D-均为低。

 
USB驱动器
--------------- 
    Windows中内置了支持各种USB设备的驱动程序。如果固件支持这些标准设备之一，则USB产品不需要安装定制驱动程序
(没人真的想要写 Windows驱动)。Windows包含标准设备驱动程序，如HID (人机接口设备)和大容量存储器(磁盘驱动器、
CD-ROM、存储器条)。
}

usb(结构){

主机控制器[根集线器]
              |
   ___________|___________
   |          |          |
 设备        设备      集线器
                         |
                   ______|_______
                   |            |
                 设备          集线器
设备代表端点：插入USB集线器的物理USB装置。每个USB设备只会插入到唯一一个集线器中。
主机会以查询的方式来控制USB

}