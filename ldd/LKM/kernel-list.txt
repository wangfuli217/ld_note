双向链表：struct list_head
哈希链表: struct hlist_head, struct hlist_node
优先级链表: struct plist_head struct plist_node
PLIST_HEAD_INIT(head)
PLIST_NODE_INIT(node, __prio)
plist_head_init(struct plist_head *head)
plist_node_init(struct plist_node *node, int prio)
plist_add(struct plist_node *node, struct plist_head *head);
plist_del(struct plist_node *node, struct plist_head *head);
plist_for_each(pos, head)
plist_for_each_safe(pos, n, head)
plist_for_each_entry(pos, head, mem)
plist_for_each_entry_safe(pos, n, head, m)
plist_head_empty(const struct plist_head *head)
plist_node_empty(const struct plist_node *node)
plist_first(const struct plist_head *head)
plist_last(const struct plist_head *head)

引用计数get和put类型链表: struct klist struct klist_node  struct klist_iter
klist_init(struct klist *k, void (*get)(struct klist_node *), void (*put)(struct klist_node *));
klist_add_tail(struct klist_node *n, struct klist *k);
klist_add_head(struct klist_node *n, struct klist *k);
klist_add_after(struct klist_node *n, struct klist_node *pos);
klist_add_before(struct klist_node *n, struct klist_node *pos);
klist_del(struct klist_node *n);
klist_remove(struct klist_node *n);
klist_node_attached(struct klist_node *n);
klist_iter_init(struct klist *k, struct klist_iter *i);
klist_iter_init_node(struct klist *k, struct klist_iter *i, struct klist_node *n);
klist_iter_exit(struct klist_iter *i);
klist_node *klist_next(struct klist_iter *i);