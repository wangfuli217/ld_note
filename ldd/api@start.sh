api(内核限制)
{
1. 不能使用浮点运算。因为Linux内核在切换模式时不保存处理器的浮点状态。
2. 不要让内核程序进行长时间等待。Linux操作系统本身是抢占式的，但是在内核是非抢占式的，也就
   是说用户空间的程序可以抢占运行，把内核空间程序不可以。
3. 尽可能保持代码的整洁性，内和调试不像调试用户态程序那样方便，因此，在前期代码编写的过程中
   保持代码的整洁易懂，将大大方便后期的调试。 
   
Linux kernel代码相对于user-space程序的一些特性：
（1）kernel代码不能访问标准C程序库（libc）和头文件（例如打印使用printk，而不是printf）；
（2）kernel代码是用GNU C实现的，不是ANSI C（比如：内联函数，内联汇编，分支预测等等）；
（3）kernel程序没有内存保护；
（4）避免在kernel代码中引入浮点运算；
（5）kernel程序为每个进程预分配的堆栈空间很小；
（6）因为kernel程序是可抢占的（preemptive），支持symmetrical multiprocessing （SMP）和异步中断（asynchronous interrupt），所以开发kernel程序时要时刻考虑并发和同步问题；
（7）可移植性对于kernel代码非常重要。

在Linux中，任何时候，CPU都在做下面三件事中的一件：
a）运行进程的用户空间代码；
b）运行进程的内核空间代码；
c）处理中断（也是工作在内核空间，但不与任何进程关联）。
}


