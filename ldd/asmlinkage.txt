相信大家在看linux的source code的时候,都会注意到asmlinkage这个宏,它是用来做什么的呢?

    The asmlinkage tag is one other thing that we should observe about this simple function. This is a #define for some gcc magic that tells the compiler that the function should not expect to find any of its arguments in registers (a common optimization), but only on the CPU's stack. Recall our earlier assertion that system_call consumes its first argument, the system call number, and allows up to four more arguments that are passed along to the real system call. system_call achieves this feat simply by leaving its other arguments (which were passed to it in registers) on the stack. All system calls are marked with the asmlinkage tag, so they all look to the stack for arguments. Of course, in sys_ni_syscall's case, this doesn't make any difference, because sys_ni_syscall doesn't take any arguments, but it's an issue for most other system calls.

看一下/usr/include/asm/linkage.h里面的定义：

#define asmlinkage CPP_ASMLINKAGE __attribute__((regparm(0)))

__attribute__是关键字，是gcc的C语言扩展，regparm(0)表示不从寄存器传递参数

__attribute__（（regparm（3）））：告诉gcc编译器这个函数可以通过寄存器传递多达3个的参数，这3个寄存器依次为EAX、EDX 和 ECX.更多的参数才通过堆栈传递。这样可以减少一些入栈出栈操作，因此调用比较快。