!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DEBFLAGS	Makefile	/^  DEBFLAGS = -O -g -DSCULLP_DEBUG # "-O" is needed to expand inlines$/;"	m
DEBFLAGS	Makefile	/^  DEBFLAGS = -O2$/;"	m
KERNELDIR	Makefile	/^KERNELDIR ?= \/lib\/modules\/$(shell uname -r)\/build$/;"	m
PDEBUG	scullp.h	23;"	d
PDEBUG	scullp.h	27;"	d
PDEBUG	scullp.h	30;"	d
PDEBUG	scullp.h	33;"	d
PDEBUGG	scullp.h	36;"	d
PDEBUGG	scullp.h	37;"	d
PWD	Makefile	/^PWD       := $(shell pwd)$/;"	m
SCULLP_DEVS	scullp.h	41;"	d
SCULLP_IOCGORDER	scullp.h	108;"	d
SCULLP_IOCGQSET	scullp.h	114;"	d
SCULLP_IOCHORDER	scullp.h	111;"	d
SCULLP_IOCHQSET	scullp.h	117;"	d
SCULLP_IOCQORDER	scullp.h	109;"	d
SCULLP_IOCQQSET	scullp.h	115;"	d
SCULLP_IOCRESET	scullp.h	96;"	d
SCULLP_IOCSORDER	scullp.h	106;"	d
SCULLP_IOCSQSET	scullp.h	112;"	d
SCULLP_IOCTORDER	scullp.h	107;"	d
SCULLP_IOCTQSET	scullp.h	113;"	d
SCULLP_IOCXORDER	scullp.h	110;"	d
SCULLP_IOCXQSET	scullp.h	116;"	d
SCULLP_IOC_MAGIC	scullp.h	94;"	d
SCULLP_IOC_MAXNR	scullp.h	119;"	d
SCULLP_MAJOR	scullp.h	39;"	d
SCULLP_ORDER	scullp.h	52;"	d
SCULLP_QSET	scullp.h	53;"	d
SCULLP_USE_PROC	scullp.h	86;"	d
TARGET	Makefile	/^TARGET = scullp$/;"	m
async_work	main.c	/^struct async_work {$/;"	s	file:
cdev	scullp.h	/^	struct cdev cdev;$/;"	m	struct:scullp_dev	typeref:struct:scullp_dev::cdev
data	scullp.h	/^	void **data;$/;"	m	struct:scullp_dev
iocb	main.c	/^	struct kiocb *iocb;$/;"	m	struct:async_work	typeref:struct:async_work::kiocb	file:
next	scullp.h	/^	struct scullp_dev *next;  \/* next listitem *\/$/;"	m	struct:scullp_dev	typeref:struct:scullp_dev::scullp_dev
obj-m	Makefile	/^obj-m	:= scullp.o$/;"	m
order	scullp.h	/^	int order;                \/* the current allocation order *\/$/;"	m	struct:scullp_dev
qset	scullp.h	/^	int qset;                 \/* the current array size *\/$/;"	m	struct:scullp_dev
result	main.c	/^	int result;$/;"	m	struct:async_work	file:
scullp-objs	Makefile	/^scullp-objs := main.o mmap.o$/;"	m
scullp_aio_read	main.c	/^static ssize_t scullp_aio_read(struct kiocb *iocb, char __user *buf, size_t count,$/;"	f	file:
scullp_aio_write	main.c	/^static ssize_t scullp_aio_write(struct kiocb *iocb, const char __user *buf,$/;"	f	file:
scullp_cleanup	main.c	/^module_exit(scullp_cleanup);$/;"	v
scullp_cleanup	main.c	/^void scullp_cleanup(void)$/;"	f
scullp_defer_op	main.c	/^static int scullp_defer_op(int write, struct kiocb *iocb, char __user *buf,$/;"	f	file:
scullp_dev	scullp.h	/^struct scullp_dev {$/;"	s
scullp_devices	main.c	/^struct scullp_dev *scullp_devices; \/* allocated in scullp_init *\/$/;"	v	typeref:struct:scullp_dev
scullp_devs	main.c	/^int scullp_devs =    SCULLP_DEVS;	\/* number of bare scullp devices *\/$/;"	v
scullp_do_deferred_op	main.c	/^static void scullp_do_deferred_op(void *p)$/;"	f	file:
scullp_follow	main.c	/^struct scullp_dev *scullp_follow(struct scullp_dev *dev, int n)$/;"	f
scullp_fops	main.c	/^struct file_operations scullp_fops = {$/;"	v	typeref:struct:file_operations
scullp_init	main.c	/^int scullp_init(void)$/;"	f
scullp_init	main.c	/^module_init(scullp_init);$/;"	v
scullp_ioctl	main.c	/^int scullp_ioctl (struct inode *inode, struct file *filp,$/;"	f
scullp_llseek	main.c	/^loff_t scullp_llseek (struct file *filp, loff_t off, int whence)$/;"	f
scullp_major	main.c	/^int scullp_major =   SCULLP_MAJOR;$/;"	v
scullp_mmap	mmap.c	/^int scullp_mmap(struct file *filp, struct vm_area_struct *vma)$/;"	f
scullp_open	main.c	/^int scullp_open (struct inode *inode, struct file *filp)$/;"	f
scullp_order	main.c	/^int scullp_order =   SCULLP_ORDER;$/;"	v
scullp_proc_offset	main.c	/^void scullp_proc_offset(char *buf, char **start, off_t *offset, int *len)$/;"	f
scullp_qset	main.c	/^int scullp_qset =    SCULLP_QSET;$/;"	v
scullp_read	main.c	/^ssize_t scullp_read (struct file *filp, char __user *buf, size_t count,$/;"	f
scullp_read_procmem	main.c	/^int scullp_read_procmem(char *buf, char **start, off_t offset,$/;"	f
scullp_release	main.c	/^int scullp_release (struct inode *inode, struct file *filp)$/;"	f
scullp_setup_cdev	main.c	/^static void scullp_setup_cdev(struct scullp_dev *dev, int index)$/;"	f	file:
scullp_trim	main.c	/^int scullp_trim(struct scullp_dev *dev)$/;"	f
scullp_vm_ops	mmap.c	/^struct vm_operations_struct scullp_vm_ops = {$/;"	v	typeref:struct:vm_operations_struct
scullp_vma_close	mmap.c	/^void scullp_vma_close(struct vm_area_struct *vma)$/;"	f
scullp_vma_nopage	mmap.c	/^struct page *scullp_vma_nopage(struct vm_area_struct *vma,$/;"	f
scullp_vma_open	mmap.c	/^void scullp_vma_open(struct vm_area_struct *vma)$/;"	f
scullp_write	main.c	/^ssize_t scullp_write (struct file *filp, const char __user *buf, size_t count,$/;"	f
sem	scullp.h	/^	struct semaphore sem;     \/* Mutual exclusion *\/$/;"	m	struct:scullp_dev	typeref:struct:scullp_dev::semaphore
size	scullp.h	/^	size_t size;              \/* 32-bit will suffice *\/$/;"	m	struct:scullp_dev
vmas	scullp.h	/^	int vmas;                 \/* active mappings *\/$/;"	m	struct:scullp_dev
work	main.c	/^	struct work_struct work;$/;"	m	struct:async_work	typeref:struct:async_work::work_struct	file:
