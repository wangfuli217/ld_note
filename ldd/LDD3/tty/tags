!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DEBFLAGS	Makefile	/^  DEBFLAGS = -O -g -DSCULL_DEBUG # "-O" is needed to expand inlines$/;"	m
DEBFLAGS	Makefile	/^  DEBFLAGS = -O2$/;"	m
DELAY_TIME	tiny_serial.c	34;"	d	file:
DELAY_TIME	tiny_tty.c	37;"	d	file:
DRIVER_AUTHOR	tiny_serial.c	/^MODULE_AUTHOR( DRIVER_AUTHOR );$/;"	v
DRIVER_AUTHOR	tiny_serial.c	26;"	d	file:
DRIVER_AUTHOR	tiny_tty.c	/^MODULE_AUTHOR( DRIVER_AUTHOR );$/;"	v
DRIVER_AUTHOR	tiny_tty.c	29;"	d	file:
DRIVER_DESC	tiny_serial.c	/^MODULE_DESCRIPTION( DRIVER_DESC );$/;"	v
DRIVER_DESC	tiny_serial.c	27;"	d	file:
DRIVER_DESC	tiny_tty.c	/^MODULE_DESCRIPTION( DRIVER_DESC );$/;"	v
DRIVER_DESC	tiny_tty.c	30;"	d	file:
DRIVER_VERSION	tiny_tty.c	28;"	d	file:
KERNELDIR	Makefile	/^KERNELDIR ?= \/lib\/modules\/$(shell uname -r)\/build$/;"	m
MCR_DTR	tiny_tty.c	308;"	d	file:
MCR_LOOP	tiny_tty.c	310;"	d	file:
MCR_RTS	tiny_tty.c	309;"	d	file:
MSR_CD	tiny_tty.c	312;"	d	file:
MSR_CTS	tiny_tty.c	311;"	d	file:
MSR_DSR	tiny_tty.c	314;"	d	file:
MSR_RI	tiny_tty.c	313;"	d	file:
MY_NAME	tiny_serial.c	43;"	d	file:
PWD	Makefile	/^PWD       := $(shell pwd)$/;"	m
RELEVANT_IFLAG	tiny_tty.c	225;"	d	file:
TINY_DATA_CHARACTER	tiny_serial.c	35;"	d	file:
TINY_DATA_CHARACTER	tiny_tty.c	38;"	d	file:
TINY_SERIAL_MAJOR	tiny_serial.c	37;"	d	file:
TINY_SERIAL_MINORS	tiny_serial.c	38;"	d	file:
TINY_SERIAL_NAME	tiny_serial.c	41;"	d	file:
TINY_TTY_MAJOR	tiny_tty.c	40;"	d	file:
TINY_TTY_MINORS	tiny_tty.c	41;"	d	file:
UART_NR	tiny_serial.c	39;"	d	file:
do_close	tiny_tty.c	/^static void do_close(struct tiny_serial *tiny)$/;"	f	file:
icount	tiny_tty.c	/^	struct async_icount	icount;$/;"	m	struct:tiny_serial	typeref:struct:tiny_serial::async_icount	file:
mcr	tiny_tty.c	/^	int			mcr;		\/* MCR shadow *\/$/;"	m	struct:tiny_serial	file:
msr	tiny_tty.c	/^	int			msr;		\/* MSR shadow *\/$/;"	m	struct:tiny_serial	file:
obj-m	Makefile	/^obj-m	:= tiny_tty.o tiny_serial.o$/;"	m
open_count	tiny_tty.c	/^	int			open_count;	\/* number of times this port has been opened *\/$/;"	m	struct:tiny_serial	file:
sem	tiny_tty.c	/^	struct semaphore	sem;		\/* locks this structure *\/$/;"	m	struct:tiny_serial	typeref:struct:tiny_serial::semaphore	file:
serial	tiny_tty.c	/^	struct serial_struct	serial;$/;"	m	struct:tiny_serial	typeref:struct:tiny_serial::serial_struct	file:
serial_ops	tiny_tty.c	/^static struct tty_operations serial_ops = {$/;"	v	typeref:struct:tty_operations	file:
timer	tiny_serial.c	/^static struct timer_list *timer;$/;"	v	typeref:struct:timer_list	file:
timer	tiny_tty.c	/^	struct timer_list	*timer;$/;"	m	struct:tiny_serial	typeref:struct:tiny_serial::timer_list	file:
tiny_break_ctl	tiny_serial.c	/^static void tiny_break_ctl(struct uart_port *port, int break_state)$/;"	f	file:
tiny_close	tiny_tty.c	/^static void tiny_close(struct tty_struct *tty, struct file *file)$/;"	f	file:
tiny_config_port	tiny_serial.c	/^static void tiny_config_port(struct uart_port *port, int flags)$/;"	f	file:
tiny_enable_ms	tiny_serial.c	/^static void tiny_enable_ms(struct uart_port *port)$/;"	f	file:
tiny_exit	tiny_tty.c	/^module_exit(tiny_exit);$/;"	v
tiny_exit	tiny_tty.c	/^static void __exit tiny_exit(void)$/;"	f	file:
tiny_get_mctrl	tiny_serial.c	/^static unsigned int tiny_get_mctrl(struct uart_port *port)$/;"	f	file:
tiny_init	tiny_serial.c	/^module_init(tiny_init);$/;"	v
tiny_init	tiny_serial.c	/^static int __init tiny_init(void)$/;"	f	file:
tiny_init	tiny_tty.c	/^module_init(tiny_init);$/;"	v
tiny_init	tiny_tty.c	/^static int __init tiny_init(void)$/;"	f	file:
tiny_ioctl	tiny_tty.c	/^static int tiny_ioctl(struct tty_struct *tty, struct file *file,$/;"	f	file:
tiny_ioctl	tiny_tty.c	386;"	d	file:
tiny_ioctl	tiny_tty.c	419;"	d	file:
tiny_ioctl	tiny_tty.c	421;"	d	file:
tiny_ioctl	tiny_tty.c	459;"	d	file:
tiny_ioctl	tiny_tty.c	461;"	d	file:
tiny_ioctl	tiny_tty.c	489;"	d	file:
tiny_open	tiny_tty.c	/^static int tiny_open(struct tty_struct *tty, struct file *file)$/;"	f	file:
tiny_ops	tiny_serial.c	/^static struct uart_ops tiny_ops = {$/;"	v	typeref:struct:uart_ops	file:
tiny_port	tiny_serial.c	/^static struct uart_port tiny_port = {$/;"	v	typeref:struct:uart_port	file:
tiny_read_proc	tiny_tty.c	/^static int tiny_read_proc(char *page, char **start, off_t off, int count,$/;"	f	file:
tiny_reg	tiny_serial.c	/^static struct uart_driver tiny_reg = {$/;"	v	typeref:struct:uart_driver	file:
tiny_release_port	tiny_serial.c	/^static void tiny_release_port(struct uart_port *port)$/;"	f	file:
tiny_request_port	tiny_serial.c	/^static int tiny_request_port(struct uart_port *port)$/;"	f	file:
tiny_serial	tiny_tty.c	/^struct tiny_serial {$/;"	s	file:
tiny_set_mctrl	tiny_serial.c	/^static void tiny_set_mctrl(struct uart_port *port, unsigned int mctrl)$/;"	f	file:
tiny_set_termios	tiny_serial.c	/^static void tiny_set_termios(struct uart_port *port,$/;"	f	file:
tiny_set_termios	tiny_tty.c	/^static void tiny_set_termios(struct tty_struct *tty, struct termios *old_termios)$/;"	f	file:
tiny_shutdown	tiny_serial.c	/^static void tiny_shutdown(struct uart_port *port)$/;"	f	file:
tiny_start_tx	tiny_serial.c	/^static void tiny_start_tx(struct uart_port *port, unsigned int tty_start)$/;"	f	file:
tiny_startup	tiny_serial.c	/^static int tiny_startup(struct uart_port *port)$/;"	f	file:
tiny_stop_rx	tiny_serial.c	/^static void tiny_stop_rx(struct uart_port *port)$/;"	f	file:
tiny_stop_tx	tiny_serial.c	/^static void tiny_stop_tx(struct uart_port *port, unsigned int tty_stop)$/;"	f	file:
tiny_table	tiny_tty.c	/^static struct tiny_serial *tiny_table[TINY_TTY_MINORS];	\/* initially all NULL *\/$/;"	v	typeref:struct:tiny_serial	file:
tiny_timer	tiny_serial.c	/^static void tiny_timer(unsigned long data)$/;"	f	file:
tiny_timer	tiny_tty.c	/^static void tiny_timer(unsigned long timer_data)$/;"	f	file:
tiny_tiocmget	tiny_tty.c	/^static int tiny_tiocmget(struct tty_struct *tty, struct file *file)$/;"	f	file:
tiny_tiocmset	tiny_tty.c	/^static int tiny_tiocmset(struct tty_struct *tty, struct file *file,$/;"	f	file:
tiny_tty_driver	tiny_tty.c	/^static struct tty_driver *tiny_tty_driver;$/;"	v	typeref:struct:tty_driver	file:
tiny_tx_chars	tiny_serial.c	/^static void tiny_tx_chars(struct uart_port *port)$/;"	f	file:
tiny_tx_empty	tiny_serial.c	/^static unsigned int tiny_tx_empty(struct uart_port *port)$/;"	f	file:
tiny_type	tiny_serial.c	/^static const char *tiny_type(struct uart_port *port)$/;"	f	file:
tiny_verify_port	tiny_serial.c	/^static int tiny_verify_port(struct uart_port *port, struct serial_struct *ser)$/;"	f	file:
tiny_write	tiny_tty.c	/^static int tiny_write(struct tty_struct *tty, $/;"	f	file:
tiny_write_room	tiny_tty.c	/^static int tiny_write_room(struct tty_struct *tty) $/;"	f	file:
tty	tiny_tty.c	/^	struct tty_struct	*tty;		\/* pointer to the tty for this device *\/$/;"	m	struct:tiny_serial	typeref:struct:tiny_serial::tty_struct	file:
wait	tiny_tty.c	/^	wait_queue_head_t	wait;$/;"	m	struct:tiny_serial	file:
