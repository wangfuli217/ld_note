变量
使用有意义且可读性好的变量命名
    Bad:
    const yyyymmdstr = moment().format('YYYY/MM/DD');
    Good:
    const currentDate = moment().format('YYYY/MM/DD');
    
使用ES6的const定义常量
反例中使用"var"定义的"常量"是可变的。
在声明一个常量时，该常量在整个程序中都应该是不可变的。
    Bad:
    var FIRST_US_PRESIDENT = "George Washington";
    Good:
    const FIRST_US_PRESIDENT = "George Washington";
    
对功能类似的变量名采用统一的命名风格
    Bad:
    getUserInfo();
    getClientData();
    getCustomerRecord();
    Good:
    getUser();
    
使用可检索的名字
我们需要阅读的代码远比我们要写的代码多得多。使代码拥有良好的可读性和可检索性非常重要。
不按规则命名变量将是我们的代码晦涩难懂。类似buddy.js andESLint的工具可以帮助检测我们的命名是否规范。
Bad:
    // 谁知道86400 TM的到底是什么鬼？
    setTimeout(blastOff, 86400000);
    Good:
    // 用大写的const常量定义它
    const MILLISECONDS_IN_A_DAY = 86400000;
    setTimeout(blastOff, MILLISECONDS_IN_A_DAY);

避免绕弯子
显示优于隐式。
    Bad:
    const locations = ['Austin', 'New York', 'San Francisco'];
    locations.forEach((l) => {
    doStuff();
    doSomeOtherStuff();
        // ...
        // ...
        // ...
        // 等等，l是什么来着?
        dispatch(l);
    });

    Good:
    const locations = ['Austin', 'New York', 'San Francisco'];
    locations.forEach((location) => {
      doStuff();
      doSomeOtherStuff();
      // ...
      // ...
      // ...
      dispatch(location);
    });

避免重复描述
如果类名或者对象名已经描述清楚了，就不要再在变量命名上重复。
    Bad:
    const Car = {
      carMake: 'Honda',
      carModel: 'Accord',
      carColor: 'Blue'
    };
    
    function paintCar(car) {
      car.carColor = 'Red';
    }
    
    Good:
    const Car = {
      make: 'Honda',
      model: 'Accord',
      color: 'Blue'
    };
    

function paintCar(car) {
  car.color = 'Red';
}

避免无意义的循环和条件判断
    Bad:
    function createMicrobrewery(name) {
    const breweryName = name || 'Hipster Brew Co.';
    // ...
    }
    Good:
    
    function createMicrobrewery(breweryName = 'Hipster Brew Co.') {
    // ...
    }