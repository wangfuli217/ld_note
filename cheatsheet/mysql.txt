连接并登录到MySQL操作环境
    mysql  -uroot -p
    
设置数据库用户的密码
    mysql> SET PASSWORD FOR 'root'@'localhost' = PASSWORD('mysql-root-password');
    # Or
    mysql> GRANT ALL ON *.* TO 'root'@'localhost' IDENTIFIED BY 'mysql-root-password';

查看数据库列表信息
    mysql> show databases;
    mysql> use mysql; show tables;
    mysql> SELECT * FROM mysql.user;

创建\删除数据库
    mysql> CREATE DATABASE DB_NAME;
    mysql> DROP DATABASE DB_NAME;

数据库的备份
    备份数据库
        mysqldump -uroot -pnewpass -B wordpress > wordpress.sql
        mysqldump -uroot -pnewpass --single-transaction -A > mysql-all.sql

    做完全备份后生成新日志文件
        mysqldump -uroot -pnewpass --single-transaction --flush-logs --master-data=2 --all-databases > all.sql

    做完全备份后删除二进制日志
        mysqldump -uroot -pnewpass --single-transaction --flush-logs --master-data=2 --all-databases --delete-master-logs > 2all.sql

    增量备份是通过mysqladmin flush-logs命令或者flush-logs语句重新生成日志文件，从而通过恢复某个时间段的日志文件恢复数据
    常用选项：
        -A, 备份所有数据库
        -Y, 备份所有的表
        -B, 备份指定的数据库
        -F, 在开始备份前刷新服务器中的日志文件
        --delete-master-logs, 备份后删除主服务器上的日志
        -x, 锁定所有数据库中的所有表
        -l, 锁定所有表仅供读取
        -n, 不备份创建数据库的信息
        -t, 不备份创建表的信息
        -d, 不备份表的数据信息

数据库的恢复
    从备份中恢复
        mysql -uroot -pnewpass < mysql.sql
        mysql -uroot -pnewpass < mysql-all.sql

    从增量备份中恢复
        mysqlbinlog mysql-bin.000007 mysql-bin.000008 | mysql -u root -p
    
    导出特定时间段的备份
        mysqlbinlog --start-datetime="2005-04-20 9:55:00" --stop-datetime="2005-04-20 10:05:00" /var/log/mysql/bin.123456 > /tmp/mysql_restore.sql
    
    导出指定位置的备份，mysqlbinlog /var/log/mysql/bin.123456 |grep "# at" 
        mysqlbinlog --start-position=154 --stop-position=402 /var/log/mysql/bin.123456 > /tmp/mysql_restore.sql
    
    从导出的sql恢复
        mysql> source /tmp/mysql_restore.sql

mysql 5.7 binlog 不会记录INSERT操作
    使用mysqldump要测试升级是否兼容

在生产服务器上：
    mysqldump -u root -p --all-databases --no-data --routines --events > dump-defs.sql

在升级的服务器：
    mysql -u root -p < dump-defs.sql

在验证之后，转储数据
    mysqldump -u root -p --all-databases --no-create-info > dump-data.sql

    mysql -u root -p < dump-data.sql

修复MySQL表
    mysqlcheck -u root -p -A                          #检查所有数据库
    mysqlcheck -u root -p -B mysql                    #检查mysql数据库中的所有表错误
    mysqlcheck -u root -p mysql user                  #检查mysql数据库中的user表错误
    mysqlcheck -u root -p --auto-repair mysql user    #自动修复mysql数据库中的user表
常用选项：
    -A, 检查所有数据库
    -a, 分析给定的表
    --auto-repair, 如果检查表已损坏，则自动修复它
    -c, 检查表是否有错误，默认
    -C, 只检查自上次检查以来没有被正确关闭的表
    -B, 检查给定的数据库
    -F, 仅检查未正确关闭的表
    -m, 快速检查，但只能发现所有错误的99.99％
    -o, 优化表
    -q, 最快的修复方法
    -r, 几乎可以修复除唯一的主键之外的任何东西
    -s, 仅打印错误消息

    用于检查（-c，-m，-C），修复（-r），分析（-a），或优化（-o）表。 
    某些选项（如-e或-q）可以同时使用。 并非所有选项都受到所有存储引擎的支持。
    选项-c，-r，-a和-o是彼此排斥对方的，这意味着最后一个选项将被使用，如果被指定的几个。

    MySQL忘记root密码[5.7.6 以及最新版本]

sed -i '/\[mysqld\]/a skip-grant-tables' /etc/my.cnf
/etc/init.d/mysql restart

mysql -uroot -e "update mysql.user set authentication_string=PASSWORD('newpass') where User='root';"
sed -i '/skip-grant-tables/ d' /etc/my.cnf
/etc/init.d/mysql restart

mysql -uroot -p --connect-expired-password
mysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'Newp@555';

# mysqld --skip-grant-tables

    MySQL用户无法远程登录

如果用户不存在则创建该用户
mysql> GRANT ALL PRIVILEGES ON *.* TO root@"%" IDENTIFIED BY "newpass" WITH GRANT OPTION;

列出用户
mysql> select user,host from mysql.user;

删除用户
mysql> DROP USER 'jeffrey'@'localhost';

创建一个增删改查用户

grant select,insert,update,delete on db2.* to 'user2'@'%' identified by  'password';

查看用户权限

show grants for 'user2'@'%';

查看最大连接数

mysqld --verbose --help 2>/dev/null |grep ^max-connections
#修改 sed -i '/\[mysqld\]/a max_connections=65535' /etc/my.cnf

备份脚本

#!/bin/bash
DATA=$(mysqld --verbose --help 2>/dev/null | awk '$1 == "datadir" { print $2; exit }')
PASS="newpass"
BDAY=3

[ ! -d "$DATA/mysql_back" ] && mkdir "$DATA/mysql_back"

cd "$DATA/mysql_back"
for i in $(MYSQL_PWD="$PASS" mysql -uroot -e "show databases;" |awk 'NR!=1{print $1}' |egrep -v "information_schema|performance_schema|mysql|sys"); do
	MYSQL_PWD="$PASS" /usr/local/mysql/bin/mysqldump -uroot --single-transaction "$i" >"$i"_`date +%F`_db.sql 2>/dev/null
	tar czf "$i"_`date +%F`_db.tar.gz "$i"_`date +%F`_db.sql
	\rm "$i"_`date +%F`_db.sql
done

#Retains the most recent 3-day backup
find "$DATA/mysql_back/" -mtime +$BDAY -type f -name "*_db.tar.gz" -exec \rm {} \; 2>/dev/null

其他

log-bin=mysql-bin   #开启二进制日志
server-id=2         #服务器ID，和二进制日志一起的
slow-query-log=1    #开启慢查询日志
long_query_time=1   #慢查询时间(超过1秒被记录)
general-log=1       #开启通用查询日志
sync_binlog=1       # binary log 写入到到磁盘的频率，0 每秒 / 1 每次事物
innodb_flush_log_at_trx_commit=1    # innodb log 写入到磁盘的频率，0 每秒 / 1 每次事物

mysql> SELECT @@server_id;

分析慢查询日志：mysqldumpslow -t 10 /var/log/mysql/mysql-slow.log

mysqladmin status 相关指标：
    QPS，Queries Per Second：每秒查询数
    TPS，Transactions Per Second：每秒处理事务数
    Uptime：服务器已经运行的实际，单位秒
    Questions：已经发送给数据库查询数
    Com_select：查询次数，实际操作数据库的
    Com_insert：插入次数
    Com_delete：删除次数
    Com_update：更新次数
    Com_commit：事务次数
    Com_rollback：回滚次数
    QPS = Questions / Uptime
    TPS = (Com_commit + Com_rollback) / Uptime