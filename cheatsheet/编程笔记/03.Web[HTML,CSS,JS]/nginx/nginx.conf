
# 运行用户
#user  nobody;

# 启动进程,通常设置成和cpu的数量相等
worker_processes  1;

# 全局错误日志
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
error_log   logs/error.log debug;

# PID文件
#pid        logs/nginx.pid;


# 工作模式及连接数上限
events {
    #use   epoll; # epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能
    worker_connections  1024;# 单个后台worker process进程的最大并发链接数
    # multi_accept on;
}

# 设定http服务器，利用它的反向代理功能提供负载均衡支持
http {
    # 设定mime类型,类型由mime.type文件定义
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    # 设定日志格式
    access_log  logs/access.log;

    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，
    #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile        on;
    #tcp_nopush     on;

    # 连接超时时间
    #keepalive_timeout  0;
    keepalive_timeout  65;
    tcp_nodelay        on;

    # 开启gzip压缩
    gzip  on;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";

    # 设定请求缓冲
    client_header_buffer_size    1k;
    large_client_header_buffers  4 4k;

    # 加载其它配置文件进来
    #include conf.d/*.conf;
    #include sites-enabled/*;

    # 设定负载均衡的服务器列表
    upstream mysvr {
        #weigth参数表示权值，权值越高被分配到的几率越大
        #本机上的Squid开启3128端口
        server 192.168.8.1:3128 weight=5;
        server 192.168.8.2:80  weight=1;
        server 192.168.8.3:80  weight=6;
    }
    upstream mysvr2 {
        #weigth参数表示权值，权值越高被分配到的几率越大
        server 192.168.8.5:80  weight=1;
        server 192.168.8.6:80  weight=6;
    }


    server {
        # 监听端口
        listen       8100;
        # 定义使用www.xx.com访问
        server_name  www.xx.com;
        #server_name  localhost;

        #charset koi8-r;

        # 设定本虚拟主机的访问日志
        access_log  logs/xx.access.log;
        #access_log   logs/access.log;
        error_log    logs/error.log debug;

        #默认请求
        location / {
            root   /root;      #定义服务器的默认网站根目录位置
            #root   html;
            index index.html index.htm;   #定义首页索引文件的名称

            proxy_pass  http://mysvr ;#请求转向 mysvr 定义的服务器列表

            #fastcgi_pass  www.xx.com;
            #fastcgi_param  SCRIPT_FILENAME  $document_root/$fastcgi_script_name;
            #include /etc/nginx/fastcgi_params;
        }

        #error_page  404              /404.html;

        # 定义错误提示页面
        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504 /50x.html;
        location = /50x.html {
            root   /root;
            #root   html;
        }

        # 静态文件，nginx自己处理
        location ~ ^/(images|javascript|js|css|flash|media|static)/ {
            root /var/www/virtual/htdocs;
            # 过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。
            expires 30d;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.
        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # 设定查看Nginx状态的地址
        location /NginxStatus {
            stub_status            on;
            access_log              on;
            auth_basic              "NginxStatus";
            auth_basic_user_file  conf/htpasswd;
        }

        # 禁止访问 .htxxx 文件
        # deny access to .htaccess files, if Apache's document root concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}


#### 配置范例1 #########
server {
        listen 80;

        root /home/dorsey/www/meila_web;
        index index.html index.htm index.php;

        server_name www.meilapp.com;

    location ^~ / {
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Scheme $scheme;
        proxy_pass http://172.16.1.30:9525;
        #proxy_pass http://kyle-meila_web;
        #proxy_pass http://$group;
        proxy_next_upstream error;
    }
}
