0. HTML DOM 实例:   http://www.w3school.com.cn/example/hdom_examples.asp
   
1. DOM (Document Object Model)
  HTML DOM 定义了访问和操作HTML文档的标准方法。
  HTML DOM 把 HTML 文档呈现为带有元素Element、属性Attribute和文本TextNode的树结构（节点树）。
                 Document
                    |
             Root-element<html>
       _____________|________________________
       |                                     |
  Element<head>                         Element<body>
       |                               |             |
  Element<title>  Attribute<href>--Element<a> Element<h1>
       |                               |              |
  Text<My title>                  Text<My Link>  Text<My Header> 
  
  <html>:节点 <head>:节点  <body>:节点 "My title":文本节点
  DOM 定义了访问 HTML 和 XML 文档的标准：
  W3C 文档对象模型 （DOM） 是中立于平台和语言的接口，它允许程序和脚本动态地访问和更新文档的内容、结构和样式。
  W3C DOM 标准被分为 3 个不同的部分：
    核心 DOM - 针对任何结构化文档的标准模型
    XML DOM - 针对 XML 文档的标准模型
    HTML DOM - 针对 HTML 文档的标准模型
  HTML DOM 定义了所有 HTML 元素的对象和属性，以及访问它们的方法。
  换言之，HTML DOM 是关于如何获取、修改、添加或删除 HTML 元素的标准。
       -- 使用节点对象和函数编辑HTML文档
  
2. 节点
  在 HTML DOM 中，所有事物都是节点。DOM 是被视为节点树的 HTML。
    整个文档是一个文档节点
    每个 HTML 元素是元素节点
    HTML 元素内的文本是文本节点
    每个 HTML 属性是属性节点
    注释是注释节点
  通过 HTML DOM，树中的所有节点均可通过 JavaScript 进行编辑。所有 HTML 元素（节点）均可被修改，也可以创建或删除节点。
    节点树中的节点彼此拥有层级关系。
    DOM 处理中的常见错误是希望元素节点包含文本
      <title>DOM 教程</title>，元素节点 <title>，包含值为 "DOM 教程" 的文本节点。
      可通过节点的 innerHTML 属性来访问文本节点的值。
  parent child first next last prev sibling
  root header body 
3. 方法
  编程接口
    可通过 JavaScript （以及其他编程语言）对 HTML DOM 进行访问。
    所有 HTML 元素被定义为对象，而编程接口则是对象方法和对象属性。
    方法是您能够执行的动作（比如添加或修改元素）。
    属性是您能够获取或设置的值（比如节点的名称或内容）。
  一些常用的 HTML DOM 方法：
    方法                     描述
    getElementById()         返回带有指定 ID 的元素。                       id="intro" 
    getElementsByTagName()   返回包含带有指定标签名称的所有元素的节点列表。 getElementsByTagName("p"); <p> 元素的列表
    getElementsByClassName() 返回包含带有指定类名的所有元素的节点列表。     class="intro" 
    appendChild()            把新的子节点添加到指定节点。
    removeChild()            删除子节点。
    replaceChild()           替换子节点。
    insertBefore()           在指定的子节点前面插入新的子节点。
    createAttribute()        创建属性节点。
    createElement()          创建元素节点。
    createTextNode()         创建文本节点。
    getAttribute()           返回指定的属性值。
    setAttribute()           把指定属性设置或修改为指定的值。
  一些常用的 HTML DOM 属性：
    innerHTML - 节点（元素）的文本值
    parentNode - 节点（元素）的父节点
    childNodes - 节点（元素）的子节点
    attributes - 节点（元素）的属性节点
    firstChild 
    
4. 属性
  属性是您能够获取或设置的值（比如节点的名称或内容）。
    innerHTML 属性
    nodeName 属性
      nodeName 属性规定节点的名称。
      nodeName 是只读的
      元素节点的 nodeName 与标签名相同
      属性节点的 nodeName 与属性名相同
      文本节点的 nodeName 始终是 #text
      文档节点的 nodeName 始终是 #document
    nodeValue 属性
      nodeValue 属性规定节点的值。
      元素节点的 nodeValue 是 undefined 或 null
      文本节点的 nodeValue 是文本本身
      属性节点的 nodeValue 是属性值
    nodeType 属性
    nodeType 属性返回节点的类型。nodeType 是只读的。
      比较重要的节点类型有：
      元素类型  NodeType
      元素      1
      属性      2
      文本      3
      注释      8
      文档      9
      
  4.1 修改 HTML 元素
  修改 HTML DOM 意味着许多不同的方面：
    改变 HTML 内容       document.getElementById("p1").innerHTML="New text!";
    改变 CSS 样式        document.getElementById("p2").style.color="blue";
    改变 HTML 属性
    创建新的 HTML 元素   createElement createTextNode appendChild getElementById appendChild
    删除已有的 HTML 元素
    改变事件（处理程序）
      <input type="button" onclick="ChangeText()" value="Change text">
      <input type="button" onclick="ChangeBackground()" value="改变背景色" />
      
      <button onclick="displayDate()">试一试</button><script>
              function displayDate(){
                document.getElementById("demo").innerHTML=Date();
              }
              </script>
      <script> document.getElementById("myBtn").onclick=function(){displayDate()}; </script>
      
      <h1 onclick="this.innerHTML='hello!'">请点击这段文本!</h1>
      <h1 onclick="changetext(this)">请点击这段文本!</h1><script>
          function changetext(id){
            id.innerHTML="hello!";
          }
          </script>
      
      <input type="text" id="fname" onchange="upperCase()">
5. demo
  5.1 创建 HTML 内容
  document.getElementById("p1").innerHTML="New text!";
  5.2 改变 HTML 样式
  document.getElementById("p2").style.color="blue";
  5.3 创建新的 HTML 元素
  var para=document.createElement("p"); 
  var node=document.createTextNode("This is new."); 
  para.appendChild(node);
  
  var element=document.getElementById("d1"); 
  element.appendChild(para);
  
  -- element.insertBefore(para,child);
  -- parent.removeChild(child);
  -- parent.replaceChild(para,child);
  5.4 使用事件
  <input type="button" onclick="document.body.style.backgroundColor='lavender';" value="Change background color" />
  
  <script> function ChangeText() { document.getElementById("p1").innerHTML="New text!"; } </script>
  <input type="button" onclick="ChangeText()" value="Change text">
  
6. 事件
    当用户点击鼠标时
    当网页已加载时
    当图片已加载时
    当鼠标移动到元素上时
    当输入字段被改变时
    当 HTML 表单被提交时
    当用户触发按键时
  6.1 onload 和 onunload 事件
    当用户进入或离开页面时，会触发 onload 和 onunload 事件。
    onload 事件可用于检查访客的浏览器类型和版本，以便基于这些信息来加载不同版本的网页。
    onload 和 onunload 事件可用于处理 cookies。
    <body onload="checkCookies()">
  6.2 onchange 事件
    onchange 事件常用于输入字段的验证。
    <script>{
      var x=document.getElementById("fname");
      x.value=x.value.toUpperCase();
    }
    </script>
    <input type="text" id="fname" onchange="myFunction()">
  6.3 onmouseover 和 onmouseout 事件
    onmouseover 和 onmouseout 事件可用于在鼠标指针移动到或离开元素时触发函数。
    <script>
    function mOver(obj){
      obj.innerHTML="谢谢你"
    }
    function mOut(obj) {
      obj.innerHTML="把鼠标指针移动到上面"
    }
    </script>
    <div 
    onmouseover="mOver(this)" 
    onmouseout="mOut(this)" 
    style="background-color:#D94A38;width:200px;height:50px;padding-top:25px;text-align:center;">
    Mouse Over Me
    </div>
  6.4 onmousedown、onmouseup 以及 onclick 事件
    onmousedown、onmouseup 以及 onclick 事件是鼠标点击的全部过程。
      首先当某个鼠标按钮被点击时，触发 onmousedown 事件，
      然后，当鼠标按钮被松开时，会触发 onmouseup 事件，
      最后，当鼠标点击完成时，触发 onclick 事件。
    <div 
    onmousedown="mDown(this)" 
    onmouseup="mUp(this)" 
    style="background-color:#D94A38;width:200px;height:50px;padding-top:25px;text-align:center;">
    点击这里
    </div>
    
    <script>
    function mDown(obj)
    {
    obj.style.backgroundColor="#1ec5e5";
    obj.innerHTML="松开鼠标"
    }
    
    function mUp(obj)
    {
    obj.style.backgroundColor="#D94A38";
    obj.innerHTML="谢谢你"
    }
    </script>
    
7. 导航
  通过 HTML DOM，您能够使用节点关系在节点树中导航。
  7.1 HTML DOM 节点列表
    getElementsByTagName() 方法返回节点列表。节点列表是一个节点数组。
    var x=document.getElementsByTagName("p");
    可以通过下标号访问这些节点。如需访问第二个 <p>，您可以这么写：
    y=x[1];
    注释：下标号从 0 开始。
  7.2 HTML DOM 节点列表长度
    length 属性定义节点列表中节点的数量。
    x=document.getElementsByTagName("p"); 
    for (i=0;i<x.length;i++) { 
      document.write(x[i].innerHTML); 
      document.write("<br />"); 
    }
    
  7.3 导航节点关系
      您能够使用三个节点属性：parentNode、firstChild 以及 lastChild ，在文档结构中进行导航。
  7.4 DOM 根节点
    这里有两个特殊的属性，可以访问全部文档：
    document.documentElement - 全部文档
    document.body - 文档的主体
    
    <script>
    alert(document.body.innerHTML);
    </script>
  7.5 childNodes 和 nodeValue
    除了 innerHTML 属性，您也可以使用 childNodes 和 nodeValue 属性来获取元素的内容。