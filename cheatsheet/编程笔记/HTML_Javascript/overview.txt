1. JavaScript
  JavaScript 是属于网络的脚本语言
  JavaScript 被数百万计的网页用来改进设计、验证表单、检测浏览器、创建cookies，以及更多的应用。
    可插入 HTML 页面的编程代码。
    插入 HTML 页面后，可由所有的现代浏览器执行。
  1.1 写入 HTML 输出
    document.write("<h1>This is a heading</h1>"); 
    document.write("<p>This is a paragraph</p>");
  1.2 对事件作出反应
    <button type="button" onclick="alert('Welcome!')">点击这里</button>
  1.3 改变 HTML 内容
    x=document.getElementById("demo") //查找元素 
    x.innerHTML="Hello JavaScript"; //改变内容
  1.4 改变 HTML 图像
    <script>
    function changeImage()
    {
    element=document.getElementById('myimage')
    if (element.src.match("bulbon"))
      {
      element.src="/i/eg_bulboff.gif";
      }
    else
      {
      element.src="/i/eg_bulbon.gif";
      }
    }
    </script>
    
    <img id="myimage" onclick="changeImage()" src="/i/eg_bulboff.gif">
   1.5 改变 HTML 样式
     x=document.getElementById("demo") //找到元素 
     x.style.color="#ff0000"; //改变样式
   1.6 验证输入
     <input id="demo" type="text">
      <script>
      function myFunction(){
      var x=document.getElementById("demo").value;
          if(x==""||isNaN(x)){
              alert("Not Numeric");
          }
      }
      </script>
      <button type="button" onclick="myFunction()">点击这里</button>
      
2. 使用
  2.1 函数和事件
    通常，我们需要在某个事件发生时执行代码，比如当用户点击按钮时。
    如果我们把 JavaScript 代码放入函数中，就可以在事件发生时调用该函数。
  2.2 代码布局
    内部的 JavaScript
      通常的做法是把函数放入 <head> 部分中，或者放在页面底部。这样就可以把它们安置到同一处位置，不会干扰页面的内容。
    
    外部的 JavaScript
      外部 JavaScript 文件的文件扩展名是 .js。
      如需使用外部文件，请在 <script> 标签的 "src" 属性中设置该 .js 文件
      <script src="myScript.js"></script>
3. 输出
  操作 HTML 元素
  document.getElementById(id) 
  document.write("<p>我的第一段 JavaScript</p>");
    请使用 document.write() 仅仅向文档输出写内容。
    如果在文档已完成加载后执行 document.write，整个 HTML 页面将被覆盖
4. 语句
  JavaScript 语句向浏览器发出的命令。语句的作用是告诉浏览器该做什么。
  分号 ;
    分号用于分隔 JavaScript 语句。
    通常我们在每条可执行的语句结尾添加分号。
    使用分号的另一用处是在一行中编写多条语句。
  代码
    浏览器会按照编写顺序来执行每条语句。
  代码块
    块由左花括号开始，由右花括号结束。
    块的作用是使语句序列一起执行。
    JavaScript 函数是将语句组合在块中的典型例子。
  对大小写敏感
  会忽略多余的空格
  可以在文本字符串中使用反斜杠对代码行进行换行
  浏览器会在读取代码时，逐行地执行脚本代码。而对于传统编程来说，会在执行前对所有代码进行编译。
5. 注释
  单行注释以 // 开头。
  多行注释以 /* 开始，以 */ 结尾。
6. 变量是存储信息的容器
  数据类型
    当您向变量分配文本值时，应该用双引号或单引号包围这个值。
    当您向变量赋的值是数值时，不要使用引号。如果您用引号包围数值，该值会被作为文本来处理。
  创建变量通常称为"声明"变量。
    提示：一个好的编程习惯是，在代码开始处，统一对需要的变量进行声明。
    在计算机程序中，经常会声明无值的变量。未使用值来声明的变量，其值实际上是 undefined。
7. 字符串、数字、布尔、数组、对象、Null、Undefined
  7.1 字符串 // http://www.w3school.com.cn/jsref/jsref_obj_string.asp
    字符串是存储字符（比如 "Bill Gates"）的变量。
    字符串可以是引号中的任意文本。您可以使用单引号或双引号
    var answer="Nice to meet you!"; 
    var answer="He is called 'Bill'"; 
    var answer='He is called "Bill"';
    方法
      indexOf // 定位字符串中某一个指定的字符首次出现的位置
      replace // 查找字符串中特定的字符，并且如果找到的话，则返回这个字符。
      search  // 字符串中用某些字符替换另一些字符
    属性
      length //计算字符串的长度
    样式
      big() small() bold() italics() blink() fixed() strike() fontcolor("Red") fontsize(16) toLowerCase() 
      toUpperCase() sub() sup() txt.link("http://www.w3school.com.cn")
  7.2 只有一种数字类型。数字可以带小数点，也可以不带 // http://www.w3school.com.cn/jsref/jsref_obj_number.asp
    所有数字都存储为根为 10 的 64 位（8 比特），浮点数。
    整数（不使用小数点或指数计数法）最多为 15 位。
    小数的最大位数是 17，但是浮点运算并不总是 100% 准确：
  7.3 布尔（逻辑）只能有两个值：true 或 false。 // http://www.w3school.com.cn/jsref/jsref_obj_boolean.asp
  创建名为 cars 的数组 // http://www.w3school.com.cn/jsref/jsref_obj_array.asp
    var cars=new Array();
    cars[0]="Audi";
    cars[1]="BMW";
    cars[2]="Volvo";
    或者 (condensed array):
    var cars=new Array("Audi","BMW","Volvo");
  7.4 对象
    对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：
    var person={firstname:"Bill", lastname:"Gates", id:5566};
    name=person.lastname; 
    name=person["lastname"];
  7.5 Undefined 和 Null
    Undefined 这个值表示变量不含有值。
    可以通过将变量的值设置为 null 来清空变量。
  7.6 Date // http://www.w3school.com.cn/jsref/jsref_obj_date.asp
    var myDate=new Date()
    注释：Date 对象自动使用当前的日期和时间作为其初始值。
    
    var myDate=new Date() 
    myDate.setFullYear(2008,7,9)
    注意：表示月份的参数介于 0 到 11 之间。也就是说，如果希望把月设置为 8 月，则参数应该是 7。
    
    var myDate=new Date() 
    myDate.setDate(myDate.getDate()+5)
    注意：如果增加天数会改变月份或者年份，那么日期对象会自动完成这种转换。
    
    getTime()     // getTime() 返回从 1970 年 1 月 1 日至今的毫秒数。
    toUTCString() // 将当日的日期（根据 UTC）转换为字符串。
    getDay()      // 数组来显示星期，而不仅仅是数字。
8. 对象
  JavaScript 中的所有事物都是对象：字符串、数字、数组、日期，等等。
  对象是拥有属性和方法的数据。
9. 函数
  函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。
  function myFunction(var1,var2) { 这里是要执行的代码 }
  通过使用 return 语句就可以实现。
  在使用 return 语句时，函数会停止执行，并返回指定的值。
  9.1 局部变量
      函数内部声明的变量（使用 var）是局部变量，所以只能在函数内部访问它。
  9.2 全局变量
      在函数外声明的变量是全局变量，网页上的所有脚本和函数都能访问它。
  9.3 变量的生存期
    变量的生命期从它们被声明的时间开始。
    局部变量会在函数运行以后被删除。
    全局变量会在页面关闭后被删除。
  9.4 如果您把值赋给尚未声明的变量，该变量将被自动作为全局变量声明。
    这条语句：
    carname="Volvo";
    将声明一个全局变量 carname，即使它在函数内执行。
10.运算符
  10.1 算术运算符
  +   加       +=  x+=y
  -   减       -=  x-=y
  *   乘       *=  x*=y
  /   除       /=  x/=y
  %   求余数   %=  x%=y
  ++  累加   
  --  递减   
  
  如果把数字与字符串相加，结果将成为字符串。
  10.2 比较运算符
  比较和逻辑运算符用于测试 true 或 false。
  运算符    描述            例子
    ==      等于            x==8 为 false
    ===     全等(值和类型)  x===5 为 true；x==="5" 为 false
    !=      不等于          x!=8 为 true
    >       大于            x>8 为 false
    <       小于            x<8 为 true
    >=      大于或等于      x>=8 为 false
    <=      小于或等于      x<=8 为 true
  10.3 逻辑运算符
    逻辑运算符用于测定变量或值之间的逻辑。
    运算符  描述     例子
    &&      and     (x < 10 && y > 1) 为 true
    ||      or      (x==5 || y==5) 为 false
    !       not     !(x==y) 为 true
  10.4 条件运算符
    variablename=(condition)?value1:value2
    greeting=(visitor=="PRES")?"Dear President ":"Dear ";
    如果变量 visitor 中的值是 "PRES"，则向变量 greeting 赋值 "Dear President "，否则赋值 "Dear"。
11. 条件语句用于基于不同的条件来执行不同的动作。
  11.1 条件语句
    if 语句 - 只有当指定条件为 true 时，使用该语句来执行代码
    if...else 语句 - 当条件为 true 时执行代码，当条件为 false 时执行其他代码
    if...else if....else 语句 - 使用该语句来选择多个代码块之一来执行
    switch 语句 - 使用该语句来选择多个代码块之一来执行
12. 循环
  循环可以将代码块执行指定的次数。
    不同类型的循环
      for - 循环代码块一定的次数
      for/in - 循环遍历对象的属性
      while - 当指定的条件为 true 时循环指定的代码块
      do/while - 同样当指定的条件为 true 时循环指定的代码块
  12.2 break continue
    break 语句用于跳出循环。
    continue 用于跳过循环中的一个迭代。
    
    continue 语句（带有或不带标签引用）只能用在循环中。
    break 语句（不带标签引用），只能用在循环或 switch 中。
13. 错误 
  try 语句测试代码块的错误。
  catch 语句处理错误。
  throw 语句创建自定义错误。
  13.1 错误类型
    可能是语法错误，通常是程序员造成的编码错误或错别字。
    可能是拼写错误或语言中缺少的功能（可能由于浏览器差异）。
    可能是由于来自服务器或用户的错误输出而导致的错误。
    当然，也可能是由于许多其他不可预知的因素。
  13.2 测试和捕捉
  语法
    try{
      //在这里运行代码
    }
    catch(err){ // err.message
      //在这里处理错误
    }
  13.3 Throw 语句
    throw exception
    异常可以是 JavaScript 字符串、数字、逻辑值或对象。
    throw "empty";
    throw "not a number";
    throw "too high";
    throw "too low";
14. 验证
  JavaScript 可用来在数据被送往服务器前对 HTML 表单中的这些输入数据进行验证。
  被 JavaScript 验证的这些典型的表单数据有：
    用户是否已填写表单中的必填项目？
    用户输入的邮件地址是否合法？
    用户是否已输入合法的日期？
    用户是否在数据域 (numeric field) 中输入了文本？
15 转换
  15.1 转换成字符串
  bFound.toString()
  iNum1.toString()
  iNum.toString(2)  // 2进制
  iNum.toString(8)  // 8进制
  iNum.toString(16) // 16进制
  扩展
    arrayObject.toString()
    booleanObject.toString()
    dateObject.toString()
    NumberObject.toString()
    stringObject.toString()
  15.2 转换成数字 NaN
    parseInt()   转换成整数
      var iNum1 = parseInt("12345red"); //返回 12345 
      var iNum1 = parseInt("0xA"); //返回 10 
      var iNum1 = parseInt("56.9"); //返回 56 
      var iNum1 = parseInt("red"); //返回 NaN
      
      var iNum1 = parseInt("AF", 16); //返回 175
      
      var iNum1 = parseInt("10", 2); //返回 2 
      var iNum2 = parseInt("10", 8); //返回 8 
      var iNum3 = parseInt("10", 10); //返回 10
      
      var iNum1 = parseInt("010");	//返回 8
      var iNum2 = parseInt("010", 8);	//返回 8
      var iNum3 = parseInt("010", 10);	//返回 10
    parseFloat() 转换成浮点数
      var fNum1 = parseFloat("12345red"); //返回 12345 
      var fNum2 = parseFloat("0xA"); //返回 NaN 
      var fNum3 = parseFloat("11.2"); //返回 11.2 
      var fNum4 = parseFloat("11.22.33"); //返回 11.22 
      var fNum5 = parseFloat("0102"); //返回 102 
      var fNum1 = parseFloat("red"); //返回 NaN
  15.3 强制类型转换
      Boolean(value) - 把给定的值转换成 Boolean 型；
        var b1 = Boolean(""); //false - 空字符串 
        var b2 = Boolean("hello"); //true - 非空字符串 
        var b1 = Boolean(50); //true - 非零数字 
        var b1 = Boolean(null); //false - null 
        var b1 = Boolean(0); //false - 零 
        var b1 = Boolean(new object()); //true - 对象
      Number(value) - 把给定的值转换成数字（可以是整数或浮点数）
        Number(false) 	0
        Number(true) 	1
        Number(undefined) 	NaN
        Number(null) 	0
        Number("1.2") 	1.2
        Number("12") 	12
        Number("1.2.3") 	NaN
        Number(new object()) 	NaN
        Number(50) 	50
      String(value) - 把给定的值转换成字符串
        var s1 = String(null); //"null" 
        var oNull = null; 
        var s2 = oNull.toString(); //会引发错误