回顾：
1.明确嵌入式linux系统软件组成部分
  bootloader(u-boot)
  kernel(内核)
  rootfs(根文件系统)
  画出部署图

2.ARM裸板开发相关内容
  概念：
  "裸板开发"：程序运行在无操作系统的情况
  	      程序可以直接去访问硬件
  "外设"：不仅仅包括肉眼能够看到的设备,还包括了
          处理器内部的硬件逻辑单元(控制器)
  "ARM处理器"：以S5PV210为例
  	       由两大块组成：
  	       1.ARM核(CPU),ARM公司
  	       2.各个外设对应的控制器,各个芯片厂家
  "控制器"：通常都是集成在处理器内部
  	    控制器本质上就是连接外设和CPU
  	    它也是外设和CPU通信的唯一的桥梁
  "寄存器"：暂存数据的硬件单元,集成在控制器
  "GPIO复用"：CPU的某个管脚具有多种功能
              不仅仅可以做输入,还可以做输出
              还可以做中断,还有别的功能
              注意：在使用之前要配置成某个功能
  “交叉编译”：在上位机编译(效率高),在下位机运行
              
  研究对象角色的转换：
  1.研究CPU如何访问某个外设
  2.转换成CPU访问这个外设对应的控制器
  3.再转换成CPU访问控制器对应的寄存器
  4.总结：CPU访问外设最终只需访问寄存器即可
  5.寄存器的访问首先要搞定寄存器对应的基地址
    最后还要结合芯片手册搞清楚寄存器相应的功能
  6.以LED为例,简要画出操作流程图
  
  研发思路：
  1.分析用户需求
  2.掌控硬件信息
    粗看：确定外设的位置(关键找标签)
    细看：根据标签在原理图上找到对应的位置
          继续确定这个外设连接到CPU的哪个管脚上
    再结合芯片手册确定对应的控制器
    再通过控制器相关信息确定对应的寄存器
    细细品味寄存器的相关硬件特性(各个bit位)
  3.编写裸板驱动代码
  4.交叉编译
    明确：首先在linux系统中部署交叉编译器
    1.首先获取交叉编译器
      从芯片厂家来获取
    2.拷贝到linux系统下
      注意window和虚拟机的共享问题
    3.解压缩
    4.修改配置文件添加交叉编译器的环境变量
    5.重启虚拟机
    
    针对裸板进行编译：
    arm-linux-gcc -nostdlib -c xxx.c -o xxx.o
    arm-linux-ld -nostartfiles -nostdlib 
    	-Ttext=0x20008000 -eled_test -o led.elf led.o
    结果生成led.elf二进制可执行文件
    注意：ELF格式的二进制文件只能运行在操作系统下
    
    arm-linux-objcopy -O binary led.elf led.bin
    最终生成纯粹的二进制文件
    
    切记：led.bin将来必须要加载到内存的0x20008000
   
   5.开发板测试
     5.1.如何将led.bin下载到TPAD的内存的0x20008000地址
     明确：下载的方法途径有三种
     1.网线：传输数据
     2.USB：传输数据
     3.UART：传输数据还可以进行打印调试
       UART必须有,网线(有线考虑)和USB选一个即可
     对比：
     速度：网线》USB》UART
     功能：网络功能最强悍
     复杂度：网络(TCP/IP协议)
             当然USB也不简单
     4.这里选择网络下载
     5.网络下载必须牵着协议问题
       有两个端：服务器和客户端
       上位机是服务器
       下位机是客户端
     6.研究对象就是客户端和服务器的文件传输
       1.TPAD裸板一开始没有任何程序
         所以如果这种情况,需要自己编网络协议
         并且编写客户端代码,工作量相当大
         于是乎借助u-boot的代码,u-boot里面已经
         实现好了网络协议的代码,更关键是u-boot也
         实现好了一个客户端的程序,这个程序叫tftp
         将来只需要利用tftp程序就能够将led.bin
         从上位机上下载到下位机的内存上
       2.上位机服务端本来需要写一个服务器端的
       实现代码,但是linux系统本身就提供了相应的
       服务软件,这个服务软件叫tftph-hpa
       将来建议各位安装纯linux系统,需要自己独立
       单独安装一下tftpd-hpa
       注意：tarena虚拟机已经安装完毕
      
       3.总结：其实在这里文件传输使用的服务为
         著名的tftp服务,简单的文件传输
         服务,利用UDP协议
     
     7.在tarena虚拟机首先配置网络参数
       1.给虚拟机配置的服务器静态ip为192.168.1.8
       2.当网卡连接好以后,会有小扇子变成上下箭头
       3.执行ifconfig查看ip是否生效
       4.配置虚拟机的网络连接属性为桥接模式
       5.如果有wifi,建议先关掉wifi
     
     8.在tarena虚拟机中再配置tftp网络服务
       1.明确tftp网络服务的共享目录为
         /tftpboot目录
         将来只需要把led.bin拷贝到/tftpboot目录
         下即可,将来下位机会自动从虚拟机的/tftpboot
         目录下找led.bin并且下载
         注意：没有子目录这一说
       2.如果下位机下载led.bin失败,想都不要想只需
       将上位机的tftp服务重启即可
         sudo /etc/init.d/tftpd-hpa restart  
     
     9.利用SecureCRT软件作为串口终端工具
       1.从resource.rar中获取软件
         SecureCRT_CN
       2.打开可执行文件：SecureCRT.exe
         注意：不要有中文路径
       3.打开以后配置串口属性和软件属性
         点击快速连接
         协议：Serial
         端口：COM1
         波特率：115200
         数据位：8
         奇偶校验位：None
         停止位：1
         RTS/CTS前面的勾去掉
       4.配置软件,例如字体大小等
         选项->会话选项->仿真->
         		终端：ANSI
         		选中使用颜色配色方案
         		外观->
         		根据喜好修改字体
         		字符编码：UTF-8
         确定
         最后关掉SecureCRT，并且此软件			
         注意：重启以后,只需选中上次的配置即可
         	   
     10.下位机开始从上位机下载led.bin通过网络
       1.给TPAD上电
         此时可以从SecureCRT看到uboot的启动信息
       2.按空格键进入u-boot命令行模式
         tarena#
       3.学习u-boot提供的命令
         print:打印uboot的环境变量
         建议：每次上电先执行此命令
         其中有两个重要的环境变量：
         ipaddr=192.168.1.6 //开发板的ip地址
	 serverip=192.168.1.8 //上位机的ip地址
	 
	 setenv:修改环境变量命令
	 setenv ipaddr 192.168.1.110
         
         saveenv:保存环境变量
         saveenv即可
         别忘记执行print查看
         
         ping:ping命令
         ping 192.168.1.8 //开发板ping上位机
         注意：上位机不能ping开发板
         如果出现：
         host 192.168.1.8 is alive //ping通
         host 192.168.1.8 is not alive//失败
         建议：每次下载软件之前先ping,测试
         网络是否联通
         
         tftp:从上位机下载软件到下位机
         tftp 20008000 led.bin
         从上位机的/tftpboot目录下载led.bin文件
         到下位机内存的0x20008000地址处
         切记：uboot中默认使用的数字都是16进制
         注意：
         如果出现T T T:表明下载超时
         重启上位机的tftp服务
         
         go：启动程序命令
         go 20008000 //运行led.bin程序
         注意：led.bin程序的入口是led_test函数
         这条命令的结果是首先到led_test函数中
         运行
         
         如果想再次运行程序,记得要重启开发板
         
3.案例1：添加LED2的支持,实现流水灯功能
  友情提示：
  有些同学开发板LED1,LED2对应的GPIO为：
  			GPC1_3/4;
  有些同学开发板LED1,LED2对应的GPIO为：
  			GPC0_3/4;			
4.案例2：实现开关蜂鸣器
  提示：分析硬件信息
  粗看：蜂鸣器标签：BUZZER
  细看：看底板原理图找BUZZER标签
  提示：XpwmTOUT1如果为高电平,蜂鸣器响
        XpwnTOUT1如果为低电平,蜂鸣器不响
  结果：XpwmTTOU1连接到CPU的GPD0_1
**************************************************
二.UART(串口)相关内容
   面试题：谈谈对串口的理解
1.UART(串口)的功能
  串口用于两个设备的通信
  例如：TPAD可以通过串口和PC机通信
  例如: TPAD可以通过串口和BT(蓝牙)通信
  例如：TPAD可以通过串口和GPS/GPRS通信
  画出简要的连接图
  
2.UART的定义
  通用串行异步收发器
  说明：
  “通用”：使用频率较高的一种通信方式
  “串行”：发送者发送数据给接收者是一位一位进行传输
  	  如果发送者向接受者发送一字节数据,需要发
  	  8次才能完成,它们之间只需1根数据线即可
  "并行": 发送者发送数据给接受者是多字节进行
  	  传输(1字节,2字节,4字节),它们直接需要
  	  多根数据线(8根,16根,32根)
  串口和并行PK:
  	速度：并大于串
  	价格：并大于串
  	抗干扰：串大于并(串更适合远距离传输)
  切记：串口发送数据从数据的低位开始
  切记：CPU处理数据的速度要远远快于外设处理速度
        例如:ARM核主频为1GHz
             UART控制器工作频率可能66MHz
  问：采用串口,接受者和发送者它们直接只需1根数据线
      那如何保证数据的同步呢？
  “数据同步”：发送者发送数据以后,务必要保证接收者
  	      能够正确接收到数据,以后才可以进行
  	      后序数据的传输
  数据同步的方法有：异步和同步
  
  “异步”：在传输一字符数据期间保证数据同步即可
  "同步"：在传输数据的时候,还需要一根时钟线来
          控制接受者和发送者的数据传输
          例如：
          发送者在一个时钟周期的高电平将数据
          放到数据线上,接受者在同周期的低电平从
          数据线上获取数据
    “收发器”：发送数据和接收数据的硬件
    例如：CPU向外设发送数据
    发送器：CPU
    接收器：外设(UART控制器)
    
    例如：CPU从外设读取数据
    发送器：外设
    接收器：CPU

3.UART通信方式,分3种
  单工：任何时候数据只能朝一个方向传输
  半双工：数据可以向两个方向传输，
  	  但任何同一时刻只能朝一个方向传输
  注意：前两个在硬件设计时,只需一根数据线即可
   
  全双工：数据可以同时向两个方向传输
  此时必须需要2根数据线
  全双工用的居多！

  总结：如果采用UART进行通信，硬件连线只需3根线：
  2根数据线：RX和TX
  1根地线
  
4.问：TPAD如何向PC发送数据0x95?
  问: 数据在数据线上是如何传输的？
  答：答案在UART数据传输协议中 
  "协议"：操作UART形成的统一标准
  UART传输协议：
  概念：
  空闲位：如果UART在不进行数据传输时,数据线保持
  	  高电平,这个高电平可以认为是空闲位
  起始位：如果发送器向接收器发送数据,发送器首先
          拉低数据线(低电平),1个有效bit位
  数据位：起始位发送完毕,紧接着发送数据位
          数据位可以是5/6/7/8(一般选择8bit位)
	  注意：从低位开始
  奇偶校验位：数据位发送完毕,紧接着发送器发送
  	      奇偶校验位(目的：保证数据传输的正确性)
  	      有效位数为1bit位
  	    校验方式：
  	    奇校验:这里以发送0x95为例(10010101)
  	    发送器      接收器
  	    100101011   xxxxxxxxx
  	    接收器如何判断呢？
  	    正常情况：100101011
  	    1.接收器先把数据接收过来(包括校验位)
  	    2.接收器算数据位1的有效个数
  	      发现数据位1的个数为4(偶数)
  	    3.接收器最后判断校验位的值是否为1
  	      如果为1表明数据是OK
  	      如果为0表明数据出错
  	    
  	    异常情况：100101001 
  	    1.接收器先把数据接收过来(包括校验位)
  	    2.接收器算数据位1的有效个数
  	      发现数据位1的个数为3(奇数)
  	    3.接收器最后判断校验位的值是1
  	      表明数据出错
  	    
  	    异常情况2：100100001 
  	    1.接收器先把数据接收过来(包括校验位)
  	    2.接收器算数据位1的有效个数
  	      发现数据位1的个数为2(偶数)
  	    3.接收器最后判断校验位的值是1
  	      表明数据是OK
  	      
  	    偶校验:
  	    不校验:如果采用不校验,发送器无需发送
  	    	   校验位
  停止位：发送器发送完校验位以后,
  	  最后发送一个停止为,通知对方,数据传输结束
  	  有效的停止位的位数:1/2,高电平有效
  	  
  波特率：115200bps，一秒钟传输115200个bit位
  
  ！以TPAD向PC发送0x95为例画出数据线的时序图！
  传输参数：115200 8o1
  
  提示：将来如果UART数据传输失败,建议利用示波器
  抓取数据传输的波形进行分析
  
  案例:传输数据0x33，配置参数传输参数：115200 8e2
  
5.UART实际硬件连接需要电平转换芯片
  作用：就是将CPU识别的TTL电平转换成EIA电平
        或者将EIA电平转换成TTL电平
 
6.案例：
  编写裸板程序实现TPAD和PC通过UART传输数据
  实施步骤：
  1.分析用户需求
    用户能通过TPAD的UART和PC进行数据的读或者写
  2.明确S5PV210支持4路串口
    这里操作UART0(第一个串口)
  3.如果TPAD向PC发送数据,TPAD只需向UART0写数据即可
    如果TPAD从PC获取数据,TPAD只需从UART读取数据即可
  4.原先研究的S5PV210操作PC
    现在研究S5PV210操作RX和TX两根数据线
  5.掌控TPAD关于UART0的硬件信息
    粗看：看底板原理图找到UART0的标签COM1
    细看：看底板原理图根据COM1标签找到对应的位置
    串口座：RSRXD0(接收)/RSTXD0(发送)
    继续搜索RSRXD0、RSTXD0(EIA电平)
    连接到电平转换芯片SP3232EEN
    SP3232EEN对应的另一端的标签：SxuRXD0/SxuTXD0
    总结：
    RSRXD0(eia)->SP3232->SxuRXD0(ttl)
    RSTXD0(eia)->SP3232->SxuTXD0(ttl)
    
    继续搜索SxuRXD0/SxuTXD0：
    连接到了SW3拨码开关上
    SxuRXD0(ttl)->SW3->XuRXD0
    SxuTXD0(ttl)->SW3->XuTXD0
    
    继续搜索XuRXD0/XuTXD0:
    连接到接插座J1D
    
    在核心板搜索J1D,最终找到RX和TX对应的管脚：
    TX:XuTXD0/GPA0_1
    RX:XuTXD0/GPA0_0
    总结：这两个GPIO也是复用
          即可普通GPIO的输入
          也可普通GPIO做输出
          最后也可做串口的输入和输出
    问：串口的输入和输出什么意思？
    答：如果将这两个管脚配置成串口专用
        将来这两个管脚的操作完全由UART控制器来完成
     
    总结：
    研究再次发生转变，转变成CPU通过UART操作外设
    本质是CPU操作UART控制器来间接操作RX/TX
    
    最后只需要研究UART控制器对应的寄存器即可
    将来CPU软件直接访问寄存器就是对控制器的访问
    对应的UART时序也是由控制器自动帮你完成！
    
    总结：研究思路：
    1.CPU操作PC
    2.CPU操作RX/TX两个管脚
    3.CPU操作UART控制器
    4.CPU操作UART控制器对应的寄存器
   
  6.阅读S5PV210芯片手册关于UART控制器相关的章节
    P853
     
   

  
  	










        
    	
    
    
    
    
    
    
    
    
    
       
    
      	       











  