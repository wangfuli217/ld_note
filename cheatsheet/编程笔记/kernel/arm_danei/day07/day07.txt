回顾：
1.uart相关内容
  面试题：谈谈对UART的理解
  1.UART的功能
    画图
  2.UART的定义
    9个字
    解释
  3.UART的通信方式
  4.UART电平特性
    画图
  5.问：
    协议
  6.协议设计的概念
    举例子
    画图
  7.S5PV210的UART特性
    通过软件访问寄存器来访问UART外设
  8.裸板软件设计的注意事项
    目标文件连接顺序
    程序编译都需要借助Makefile
    
2.连接脚本
  2.1.
  明确：程序包括一般三部分组成(笔试题)
        代码段(text);
        数据段(data);
        BSS段;
        static char buf[32];    
  明确：程序编译链接时需要指定将来在内存中的
        排布位置,例如：
        -Ttext=0x20008000
  指定程序将来在内存中的排布位置的方法：
  1.arm-linux-ld时手动指定
    -Ttext=0x20008000
  2.通过连接脚本
    功能：指定程序各个部分将来在内存的位置
    以.lds结尾,例如：uart.lds
 
  2.2.连接脚本语法
  ENTRY(main) //将来程序的入口为main函数
  SECTIONS //指定将来程序各个段的内存位置信息  
  {
  	. = 0x20008000;
  	/*.:表示当前位置的地址为0x20008000*/
  	/*指定将来各个段的首地址*/
  	
  	/*各个段的信息*/	
  	.text : //text段信息，注意":"前面加空格
  	{
  	   /*第一个务必是入口函数对应的目标文件*/
  	   main.o(.text) //从main.o摘出代码段信息
  	   *(.text) //将剩余所有的目标文件的代码段摘出来  	
  	}
  	
  	.data : //data段信息
  	{
  	  *(.data)
  	}
  
  	.bss : //bss段信息
  	{
  	  *(.bss)	
  	}
  }
  
  注意：将来链接器arm-linux-ld根据连接脚本对程序
        进行划分,指定将来程序在内存中的位置信息

案例：优化UART裸板驱动程序,采用连接脚本
实施步骤：
1.mkdir /opt/arm/day07/
2.cp /opt/arm/day06/3.0 /opt/arm/day07/1.0 -fr
3.cd /opt/arm/day07/1.0
4.vim uart.lds 
5.make
6.开发板测试
  tftp 20008000 uart.bin
  go 20008000

7.cd /opt/arm/day07/2.0
  make
8.开发板测试
  tftp 23000000 uart.bin
  go 230000000

**************************************************
案例：在UART裸板驱动中添加字符串比较函数
      目的在于将来可以实现自己的shell,来实现
      通过命令行方式开关灯
      函数名定义为:my_strcmp
实施步骤：
1.cp /opt/arm/day07/1.0 /opt/arm/day07/3.0 -fr
2.cd /opt/arm/day07/3.0
3.vim cmd.h //声明
  vim cmd.c //定义

案例：在UART裸板程序中添加开关灯操作命令
      输入：ledon //开灯
            ledoff //关灯
实施步骤：
1.cd /opt/arm/day07/
  cp 3.0 4.0 -fr
2.vim led.h //声明
  vim led.c //定义
  vim main.c //调用
  别忘记添加头文的支持
  
3.vim使用基本技巧
  自动补全：ctrl + n
  行选：shift + v 再通过上下键选择中
  列选：ctrl + v 再通过左右键选中
  左右分屏：vs + 文件名
  上下分屏：sp + 文件名
  分屏切换：ctrl + ww
  
  建议一个终端编程,另一个终端编译程序
4.vim Makefile
  添加led.o cmd.o
5.make
6.开发板测试
  tftp 20008000 uart.bin
  go 20008000
  输入：ledon
        ledoff
        zhangsan:提示此命令俺不认识,请重新输入

案例：优化main.c(裹脚布)
      快速复习结构体和函数指针相关的内容
规律：
	每一个命令都包含两个属性：
	1.命令的名字
	2.命令对应的函数
	采用结构体来描述这个命令的属性
	typedef unsigned int youcw_t;
思路：
1.声明数据结构
2.定义初始化对象
3.根据用户输入的命令找到命令对象
4.找到以后执行对象的函数
5.所以还需要声明定义一个找命令对象的函数

问： error: expected '=', ',', ';', 'asm' or '__attribute__' before
由于没有添加头文件声明引起

添加提示符：
armshell#

*************************************************
3.NandFlash相关内容
  3.1.作用
  用来存储数据
  3.2.常见存储器
  硬盘
  光盘
  U盘(NandFlash)
  SD卡(NandFlash)
  TF卡(NandFlash)
  NandFlash
  EMMC
  NorFlash
  EEPROM：
  PROM
  
  问：Nand和Nor有何区别
  NorFlash采用总线方式访问,硬件连接上有地址线和
  数据线,和内存一模一样,所以可以在上面运行程序
  但一般只做存储,不运行程序(速度太慢)
  稳定性好
  成本高
  
  NandFlash采用IO方式访问,有数据线但是无地址线
  NandFlash有自己的访问方式
  NandFlash只做存储,不能运行程序
  NandFlash易出现坏块
  成本低
  共同特点：写入数据之前一定要手都擦除
  
  EEPROM：电可擦除存储器
  	  写入数据之前硬件自动擦除
  
  PROM:存储器
       紫外线
  
  3.3.掌控NandFlash的硬件特性
  1.
  粗看：查看开发板NandFlash对应的位置和标签
  	确定Flash型号：K9K8G08U0B
  	标签：MU1
  细看：看核心板原理图
  
  2.掌控NandFlash的硬件连接
    NandFlash管脚   S5PV210管脚         作用
    IO0~IO7	    Xm0DATA0~Xm0DATA7   用来传					   	输数据
    WP(高电平)				写保护
    					高禁止
    					低有效
    WE		    Xm0FWEn		写使能
    			 CPU如何写Nand,首先拉低WE
    CE1		    Xm0CSn2		片选管脚
    	         CE=chip enable = CS=chip select
    	         由于8根数据线不仅仅被Nand使用
    	         还被网卡使用,同一时刻只能由一个
    	         设备使用8根数据线,所以通过片选
    	         管脚来决定哪个设备使用8根数据线
    	         如果片选管脚拉低，使能这个设备
    	         这个设备就可以使用8根数据线
    	         其余设备的片选置高电平
    RE		    Xm0FREn		读使能
    			 CPU要读Nand之前拉低RE
    R/B1	    Xm0FRnB0		状态
    		    如果Nand准备就绪,此管脚输出高
    		    如果Nand处于忙,比管脚输出低	     CLE		    Xm0FCLE	       命令锁存	
    ALE		    Xm0FALE	       地址锁存
    
    问：NandFlash不像内存和NorFlash,它没有地址线
        只有数据线,内存访问,NorFlash本身有地址线
        CPU就可以以地址指针的形式直接访问，
        NandFlash如何访问呢？
    答：NandFlash访问必须经过三步骤
        1.CPU先发送命令(例如读命令或者写命令等)
          告诉Nand,CPU要做什么操作
        2.CPU再发送要访问的NandFlash片内地址 
        3.CPU最后发送要读或者写的数据 
        注意：不管是命令,还是片内地址,还是数据
        它们都要经过8根数据线进行传输
        
        问：NandFlash是如何区分到底是命令？
            地址？还是数据？
        答：通过ALE和CLE两个管脚来区分
    
    总结：
    	当CLE为高电平时,数据线上传输的是命令
    	当ALE为高电平时,数据线上传输的是地址
    	当ALE,CLE为低电平时,数据线上传输的数据
    画出信号线的连接图
    
   3.掌控NandFlash的操作原理
     一定要结合NandFlash的芯片手册
     K9K8G08U0B.pdf  
   物理特性：
   容量：1GB
   内部组织方式：
   按页进行组织：以页为单位
   1页(page)=2048字节 共512K个页
   1块(block)=64个页=128K字节
   
   问：CPU如何访问Nand片内某个地址呢？
       比如写数据到某个片内地址
       或者从某个片内地址中读取数据
   答：
       明确：CPU访问Nand步骤
             命令
             片内地址
             数据
       明确：命令,片内地址,数据传输时就8根线(1字					     节)
       片内地址分为：列地址和行地址
       列地址：本质就是页内地址(页内偏移量)
                1页=2048字节(0~2047)
       	       本来需要12根数据线,所以需要发2次
       行地址：本质就是页号(本来有512K页0~511K)
               本来需要19根数据线,所以需要发3次
       将来要访问Nand某个片内地址,先计算出
       要访问的地址所在的页号(第几页)
       然后再算出所在页的偏移量
       
       案例：CPU想访问Nand片内地址为8000这个地址
       实施步骤：
       1.先算页号(第几页)：
       	 8000/2048=3=0x3
       2.再算页内偏移量：
         8000-3*2048=1856=0x740
       3.明确CPU发送的流程：
         第一次发：0x40 = 0x740 & 0xff
         第二次发：0x07 = (0x740 >> 8) & 0xff
         第三次发：0x3 = 0x3 & 0xff
         第四次发：0x0 = (0x3 >> 8) & 0xff
         第五次发：0x0 = (0x3 >> 16) & 0xff
       			                    
    
    
  
        
  







   
  
  
  