一.要求
  1.安装linux系统
  2.安装必要工具
  3.每天半小时的笔试题
    resource.rar/MS.rar
    记忆性
    例如：
    const
    static
二.回顾
   面试题：谈谈对嵌入式系统的理解
   面试题：谈谈对嵌入式系统软件的理解
   
   思路：
   1.谈嵌入式定义
   2.举例子
   3.其他特点
   4.先谈硬件
     选型
     	性能
     	价格
     	后期服务
   5.后谈软件
     针对嵌入式linux系统来说
     组成：
     bootloader:类似BOIS
     kernel：操作系统内核
     rootfs：根文件系统  
     
   6.画出系统部署图 
   
三.bootloader烧写
   bootloader:统称
   u-boot:属于bootloader的一种
   TPAD烧写方法：
   1.采用USB烧写
   2.采用SD烧写
   
   阶段性目标：只要将u-boot烧写到Flash上即可
   具体参看：ESD_ARM-CORTEX-A_COOKBOOK_01.docx

四.开启ARM体系结构内容
   TPAD开发板使用的ARM处理器：三星S5PV210 
   
1.ARM的总体认识
  ARM定义：
  1.既可以认为是一家公司,ARM公司
    也可以认为是某个架构(ARM架构)
  2.ARM公司制作IP设计和授权
    其他芯片厂家,例如三星买ARM授权(知识产权)
    ,三星基于这个IP设计再额外添加其他的外设
  3.总结：
    ARM公司买ARM核的设计
    三星公司在ARM核的基础上添加外设而已
  4.切记：
    CPU指的是某个处理器内部的ARM核
    例如：S5PV210处理器的组成：
    ARM核(ARM公司):COTEXA8
    UART控制器(三星)：操作串口
    GPIO控制器(三星)：操作IO口
    USB控制器(三星)：操作USB接口的设备
    MMC控制器(三星): 操作SD卡,TF卡
    LCD控制器(三星)：显示屏
    I2C控制器(三星)
    SPI...
    WDT(watch dog)...
    RTC...
    
    控制器仅仅起到桥梁的作用,用于连接处理器之外的
    外设和CPU
    
    "外设"：不单单只TPAD开发板看到的外设(LED,按键)
            更重要的是还要包括处理器内部集成的
            各种控制器
            硬件处理速度要远远优于软件速度
            
    打开S5PV210芯片手册查看还有哪些硬件控制器
    S5PV210_UM_REV1.1.pdf第15页  
     
    问：S5PV210支持4个串口，如何让它支持8个串口？
    
   5.问：CPU如何通过控制器来访问处理器之外的外设？
     例如：TPAD底板有LED1,LED2两个灯
           CPU如何控制LED1,LED2?
     答：
     明确：CPU不能直接操作LED1和LED2
     明确：CPU要想访问必须要访问对应的控制器
           这个控制器为GPIO控制器
     明确：CPU访问内部的控制器只需通过相应的
           寄存器访问即可
     "寄存器"：能够暂存数据的硬件,将来CPU访问
               寄存器本质上就是在访问对应的
               控制器
               功能本质上就是类似内存
               也是集成在S5PV210内部
    
    6.问：CPU如何访问对应的寄存器来访问控制器？
      答：切记切记
          CPU访问寄存器都是通过地址指针的形式
          进行访问
      例如：假设某个寄存器名称为ZHANGSAN
            寄存器的物理地址为0xE0200060
            如何向这个寄存器写入数据0x55;
      #define ZS *(volatile unsigned long *)0xE0200060
      ZS=0x55; //写寄存器
      
      int a = ZS; //读寄存器
      
      切记：寄存器在访问时,必须添加volatile 
            告诉编译器对寄存器的访问不要进行
            优化操作     
    
    7.问：寄存器的物理地址如何确定呢？
      答：寄存器的物理地址由芯片手册进行规划
      S5PV210处理器为32位,CPU访问的地址空间为4G
      范围0x00000000 ~ 0xFFFFFFFFF
      所以那些控制器对应的寄存器的物理地址务必在
      这4G地址空间中！
      4G物理地址空间的划分看S5PV210芯片手册P29
    
    “CPU管脚”：用于和外设进行通信
    
    8.实战：
      8.1.用户需求
          实现TPAD开发板两个LED的开和关
      8.2.了解LED的工作原理
      8.3.粗看TPAD两个LED
          确定LED的原理图上的标签：LED1,LED2
      8.4.细看
          细看原理图
          打开底板原理图,通过标签找到LED1,LED2
          的硬件连接位置图
          总结：
          LED1,LED2分别连接到GPC1_3和GPC1_4两根
          线上
          如果GPC1_3,GPC1_4为高电平，灯亮
          如果GPC1_3,GPC1_4为低电平，灯灭
      8.5.在底板原理图继续搜索GPC1_3和GPC1_4确定连接到CPU的
      	  哪个管脚上？
      	  在底板原理图上发现GPC1_3连接到底板的J1C
      	  接插座
      	  再打开核心板的原理图找到J1C接插座,
      	  继续搜索GPC1_3、GPC1_4；
      	  最终确定了LED1连接到CPU的GPC1_3
      	  LED2连接到CPU的GPC1_4
      8.6.发现GPC1_3和GPC1_4具有复用功能
      "复用"：一个GPIO具有多种功能
      总结：S5PV210的GPIO具有复用功能
      对于LED1和LED2仅仅使用GPC1_3和GPC1_4这种功能
      
      8.7.画出简要的连接图
      
      8.8.打开S5PV210的芯片手册
          找到GPIO相关的章节,了解GPC1_3/4的操作
      1.翻到P92页第2章GPIO操作
      "GPIO":具有输入(input)和输出(output)功能
      2.S5PV210包括了237个复用管脚
        S5PV210将这些管脚进行分组：
        A组：
            A0组：
            	包括8个GPIO
            A1组：
            	包括4个GPIO
        B组：
            ...
        C组：
            C0组：
            C1组：
            	包括5个GPIO,分别：
            	GPC1_0,GPC1_1,GPC1_2,GPC1_3,GPC1_4
        ...
     3.通过芯片手册P116，发现GPC1_3和GPC1_4
       对应的操作寄存器分别是：
       GPC1CON
       GPC1DAT
     
     4.寄存器GPC1CON特性：
       又称配置寄存器
       基地址：0xE0200080 
       每4bit来配置某个GPIO
       BIT[19:16]:配置GPC1_4的复用功能
       在这里咱们需要配置BIT[19:16]=0001 //输出口
       BIT[15:12]:配置GPC1_3的复用功能
       在这里咱们需要配置BIT[15:12]=0001 //输出口  
    
     5.寄存器GPC1DATA特性：
       又称数据寄存器
       基地址：0xE0200084
       每1bit来表示某个GPIO的状态
       如果对应的GPIO配置为输入口
       对应的数据寄存器的bit位保存对应的GPIO状态
       如果杜英的GPIO配置为输出口
       对应的数据寄存器的bit将来会影响GPIO的
       输出状态
       
       例如：
       LED1,LED2开灯：
       BIT[3] = 1
       BIT[4] = 1
       LED1,LED2关灯：
       BIT[3] = 0
       BIT[4] = 0
       
    6.寄存器GPC1PUD
      基地址：0xE0200088
      又称上下拉电阻配置寄存器
      每2bit来配置某个GPIO的上下拉电阻
      禁止上，下拉电阻功能
      BIT[7:6]=00
      BIT[9:8]=00
      
    8.9.编写LED的硬件操作驱动程序
    驱动程序运行环境：有两种
    1.无操作系统
      特点：
      只需一个程序,单任务运行
      并且是直接对硬件寄存器访问操作
      
    2.有操作系统
      特点：
      严格按照操作系统的要求编写
      驱动程序,驱动不能直接访问硬件寄存器的
      物理地址
    目前的要求：在无操作系统的情况下测试
    
    8.10.编写LED驱动,实施步骤：
    PC机(上位机)执行：
    	1.修改opt用户和组权限
    	sudo chown tarena /opt -R
    	sudo chgrp tarena /opt -R
    	2.在虚拟机中指定交叉编译器
    	  从resource.rar获取交叉编译器
    	  arm-2009q3.tar.bz2    	  
    	  cp arm-2009q3.tar.bz2 /opt/
    	  cd /opt/
    	  tar -xvf arm-2009q3.tar.bz2 
    	  修改虚拟机的配置文件
    	  sudo vim /etc/environment 在PATH最开头添加：
    	  类似：
    	  PATH=“/opt/arm-2009q3/bin:..."
    	  保存退出
    	  重启虚拟机
    	  arm-linux-gcc -v //查看编译器的版本4.4.1
    	  
    	3.创建LED裸板驱动源码存放目录
    	mkdir /opt/arm/day04/1.0 -p
    	cd /opt/arm/day04/1.0
    	4.vim led.c
    	5.交叉编译测试程序
    	  面试题：阐述gcc编译过程
    	cd /opt/arm/day04/1.0
    	arm-linux-gcc -nostdlib -c led.c -o led.o
    	arm-linux-ld -nostartfiles -nostdlib 
    	 -Ttext=0x20008000 -eled_test -o led.elf
    	 				 led.o
    	说明：
    	-nostartfiles:无需启动文件
    	-nostdlib:无需标准库
    	-Ttext=0x20008000:指定程序的代码段的
    		内存中起始地址为0x20008000
    	-eled_test:指定程序的入口为led_test
    	           -e:Entry,仅仅消除警告
    	结果生成目标文件为led.elf(ELF格式)
    	注意：ELF格式的程序只能在操作系统下运行
    	      裸板无法运行
    	
      arm-linux-objcopy -O binary led.elf led.bin
      最后将ELF格式的程序led.elf生成最终的
      二进制文件led.bin           
    	    
    	    
        
          
                  
      
      	  
          
        
      
      
      
           
                 












