回顾：
1.ARM指令集
  跳转指令
  	b/bl/bx/blx  	
  数据处理指令
  	仅限ARM核内部
  	mov/mvn/add/adc/sub/sbc/and/orr/eor/bic/cmp/cmn/
  	tst/teq
  加载存储指令
  	ARM核和外设数据通信
  	ldr/str
  	图
  栈操作指令
  stmfd/ldmfd/push/pop
  图
  
  明确：加s影响cpsr的两种情况
  
  伪指令：
  adr
  ldr
  	ldr r0, =0x2ff
  	
  GNU ARM伪操作：
  .word
**********************************************************
2.ARM汇编和C/C++的混合编程
  1.目标：
  1.C语言中如何调用汇编的函数和变量
  2.汇编语言中如何调用C语言的函数和变量
  
  明确：函数之间传递参数有两种方法：
  1.采用寄存器传参
    ARM架构：使用寄存器传参,用r0~r3传参
    如果有多余的参数还要使用栈来传递
    注意：使用栈来传递参数效率会低
    注意：一般在函数声明时,参数的个数最好保持在4以内
    int add(int a, int b, int c, int d)
    迫不得已,将常用的参数放在前面
    注意：参数中有double类型,注意参数的顺序摆放
          以免浪费寄存器和栈
    注意：函数的返回值保存在r0
    
  2.linux系统可以强制使用栈来传递参数
    只要在函数声明时加一个asmlinkage关键字即可
    asmlinkage void add(int a, int b);
    
  3.C调用汇编的函数和变量
  案例：main.c调用add.s中的函数和变量
  实施步骤：
  1.mkdir /opt/arm/day12/1.0 -p
  2.cd /opt/arm/day12/1.0
  3.vim add.s 添加如下代码：
    .text
    .code 32
    .global add @声明全局标号(函数名)add
    .global yy  @声明全局标号(变量名)yy
    
    add:
    	add r0, r0, r1 @两个参数相加,r0作为返回值
    	mov pc, lr  @从add函数返回
    
    yy:
    	.word 0x1234  @int yy = 0x1234
    	
    .end
  4.vim main.c 添加如下内容
    extern int add(int, int); //外部声明
    extern int yy;  //声明
    
    int main(void)
    {
    	int ret;
    	
    	ret = add(100, 200); //调用add,r0=100,r1=200;ret=r0
    	ret = yy;  //ret = yy = 0x1234
    	return 0;
    }
  
  5.编译
  arm-linux-gcc -nostdlib -g -c main.c -o main.o
  arm-linux-as -g -o add.o add.s
  arm-linux-ld -nostartfiles -nostdlib -o main
  				main.o add.o -emain 
  
  6.测试：
    qemu-arm ...
    arm-linux-gdb main
    target remote localhost:1234
    l //查看源码
    b xx //设置断点
    s //下一步,进入子函数add中
    	 调用add
    info reg //查看r0?100, r1?200
    		一直s直到退出add函数
    s //下一步 ret=yy
    p /x ret //查看返回值ret或者yy的值
    
  7.总结：C调用汇编的实现过程
    1.汇编将函数和变量用.global进行全局声明
    2.C调用汇编的函数或者变量要进行extern外部声明

4.汇编调用C的函数和变量
  案例：汇编调C
  实施步骤：
  1.mkdir /opt/arm/day12/2.0 -p
  2.cd /opt/arm/day12/2.0
  3.vim add.c 添加如下内容
    int g_data = 10000; //定义全局变量g_data
    int add(int a, int b)
    {
    	return a + b; //编译器自动添加mov pc,lr
    } //切记不要添加static
    
  4.vim main.s 添加如下内容
  .text
  .code 32
  .global main
  .extern add	@外部引用声明
  .extern g_data @外部引用声明
  
  main:
  	mov r0, #100
  	mov r1, #200
  	bl add  @跳转到add函数运行,硬件自动保存下一条的指令
  		 地址到lr中,返回值保存在r0
  		 
        ldr r2, =g_data @获取g_data的地址
        ldr r3,[r2] @获取g_data的值
        
        b .
  .end
  
  5.编译步骤同上
  6.qemu进行调试
  
  7.总结
    1.C要将函数和变量进行全局化,不能加static修饰
    2.汇编调用C,记得要进行.extern
    
4.ARM异常处理：
  1.ARM异常的种类
                     pc
    复位异常	   0x00
    未定义指令	   0x04
    软中断	   0x08
    预取指令异常   0x0c
    数据异常	   0x10
    IRQ		   0x18
    FIQ		   0x1c
  2.ARM异常的处理
  一旦出现异常,ARM核硬件将做：
  1.拷贝cpsr到spsr_mode
  2.修改cpsr相应位：
    修改T位,=0,切换到ARM状态
    修改MODE位,=xxx,切换到对应的模式
    修改I,F位=11,禁止中断
  3.保存返回地址到lr_mode=pc-4(ARM核固定死)
    	add:执行时出现异常,ARM核此时此刻不关心具体什么异常
    	sub:异常返回开始执行
   pc-> and
  4.设置pc的入口地址为相应异常的入口地址(0x00,0x4...)
  5.一旦产生异常,pc就开始到对应的入口地址开始执行，
    也就是开启了异常的真正的软件处理过程
    软件如何处理这些异常,完全由程序自己来决定
    注意：这些入口地址堆在一起就形成了异常向量表
  6.一旦异常处理完毕,要从异常返回(软件来做)
    1.将spsr_mode给cpsr,恢复状态
    2.将lr_mode给pc

5.细说ARM异常处理的每一个异常
  1.对于软中断SWI异常,例如：
  ......
  sub r1,r1,#1
  swi 1  @当cpu执行swi,就会立即产生软中断异常
          cpu就开始处理异常,跑到0x08地址运行
          异常处理完毕以后,后序代码接着被执行
  add r0,r0,#1
  bic r0,r0,0xf
  ...
  
  分析：
  1.取值,解码,执行,在swi指令的执行阶段
    发生了软中断异常
  2.硬件做：
    spsr_mode=cpsr
    设置cpsr
        mode
        t
        i
        f
    lr=pc-4(pc=bic)
      =add地址
  3.设置pc的地址为软中断异常处理入口地址0x08
  4.后序进行软件处理软中断
  5.一旦软中断处理完毕,异常返回
    软件要做：
    movs pc,lr @切记：软中断的返回指令
  总结：硬件做1~3,软件做4,5
  
  2.未定义指令异常,例如
  ...
  sub r1,r1,#1
  lisi r0,r0,#3 @lisi是CPU不认识的指令
  add r0,r0,#1
  bic r0,r0,#0x
  ...
  
  1.取值,解码,执行,当lisi指令进入执行阶段
    CPU不认识,发生异常
  2.保存/设置cpsr
  3.保存返回地址lr=pc-4(pc=bic)
                  =add地址
  4.pc=0x04开启软件异常处理
  5.异常处理完毕,返回,软件：
    movs pc,lr @切记：未定义指令异常返回代码
    
  3.FIQ/IRQ异常,例如：
    ...
    sub r1,r1,#1
    add r0,r0,#1
    bic r0,r0,#0xf
    cmp r0,r1
    ...
    1.当CPU执行sub指令时,发生了中断(IRQ/FIQ)
      注意：sub指令是需要执行完毕的
    2.保存/修改cpsr
    3.保存返回地址lr=pc-4(pc=cmp)
                    =bic地址             
    4.pc=0x18/0x1c执行,执行返回
    5.软件从中断返回的代码：切记
      subs pc,lr,#4 (lr-4=add)//pc=add,CPU开始执行add
  
  4.预取指令异常
    例如：
    sub r1,r1,#1
    add r0,r0,#1
    bic r0,r0,#0xf
    cmp r0,r1
    ...
    1.当sub取指,结果压根就没有取指成功
      ,直到sub要执行时,发生了异常
    2.保存、配置cpsr
    3.保存返回地址lr=pc-4(pc=bic)
    		    =add地址
    4.pc=0x0c运行,返回
    5.软件返回的软件代码，切记：
      ARM核希望从新取sub指令
      subs pc,lr,#4(lr=add,pc=sub)
  
   5.数据(最终来源内存)处理异常
     例如：
     ...
     ldr r0,[r1]; //从外设读取数据到r0
     		  流水线：F D E M W
     sub r1,r1,#1
     add r0,r0,#1
     bic r0,r0,#0xf
     cmp r1,r0
     ...
     
     1.在ldr指令的访存阶段发生异常
     2....
     3.lr = pc-4(pc=bic)
          =add
     4.pc=0x10开始处理
     5.软件编写代码实现返回,返回：
       ARM核希望再取一次
       subs pc, lr, #8

6.ARM软件异常处理的过程
  问：一旦异常发生,PC最终指向异常对应的入口地址开始
      执行,这里给出一个通用的处理的软件流程
  1.软件首先编写异常向量表的代码
    异常向量表：给每一个异常都指定一个函数,并且将函数名
                (函数地址)放到对应的异常的入口地址处
                将来一旦异常触发,CPU就会执行对应的
                函数,这些函数又称异常处理函数或者
                异常处理程序
    注意：异常向量表的入口地址不仅仅是0x00或者0xffff0000
          当然软件还可以设置指定入口地址(0x20008000)
          参考ARM公司文档：
          DDI0344K_cortex_a8_r3p2_trm.pdf
  2.异常处理函数一般编程框架：
    1.保护被打断任务的现场
    2.执行后序的软件处理函数(软件处理程序)
      以中断为例,中断的种类非常多
      在这里就应该去判断和区分中断,根据不同的
      中断处理不同的事情
    3.中断处理完毕,要记得恢复现场

案例：利用按键来了解ARM IRQ异常处理的过程    
实施步骤：
1.了解用户需求
  按键按下,打印信息即可
2.掌控按键的硬件信息
  粗看：根据按键找标签：8个按键
  细看：底板原理图  
  选择其中的KEY_UP按键为例
  特性：
  KEY_UP连接到CPU的XEINT0/GPH0_0(复用管脚)
  说明：此IO口既可以作为普通的输入和输出,也可以作为中断口
  这里采用中断方式操作
3.分析按键的操作流程
  明确：按键采用中断方式
  如果采用轮询方式：那就是CPU不干别的事情,一直轮询读取
  GPH0_0的状态,如果GPH0_0为高电平,说明按键处于松开状态
  如果GPH0_0为低电平，说明按键被按下,这种操作方式效率低
  大大降低了CPU的利用率
  
  如果采用中断方式：如果CPU发现按键无操作,CPU可以干别的
  事情，一旦有按键操作(按下或者松开),这时按键给CPU通过
  GPH0_0发送一个中断电信号,给CPU发送一个中断异常,CPU
  停止手头的工作转去处理中断,处理完毕,接着执行原先的任务
  
  中断电信号有效的触发方式：
  1.高电平触发 
  2.低电平触发
  3.下降沿触发
  4.上升沿触发
  
  问：CPU如何区分这些电信号呢？
  答：利用大名鼎鼎的中断控制器

4.中断控制器的作用
  1.能够使能或者禁止某个外设的中断
    如果将某个外设的中断功能禁止,即使外设硬件上
    产生了中断电信号,中断控制器也会直接抛弃,不会给
    cpu发送中断信号
  2.能够设置外设中断电信号的有效触发方式
    如果将某个外设的有效中断触发方式设置为下降沿，
    即使来了上升沿,中断控制器也会直接抛弃,只认下降沿
    为有效的电信号,如果控制器接收到了有效电信号,中断控制器
    再给CPU发送一个电信号
  3.也能配置外设的中断信号以IRQ还是以FIQ发送给CPU
  4.能够配置外设中断的优先级
  
5.明确中断整个硬件和软件的处理流程
  参看int.bmp图

6.明确软件编程实现处理中断需要做：
  1.编写初始化中断控制器的代码
    初始化有效的中断电信号
    指定IRQ还是FIQ
    可能指定优先级
    使能某个外设的中断功能
  2.编写异常向量表代码
  3.编写保护现场的代码
  4.编写某个外设中断的处理程序
  5.编写恢复现场的代码  

7.编写KEY_UP按键的中断软件处理代码
  实施步骤：
  1.软件基于shell程序
  2.cp /opt/arm/day08/2.0 /opt/arm/day12/4.0 -fr
  3.cd /opt/arm/day12/4.0
  4.vim vector.s //编写异常向量表的代码
  5.vim irq.c
  6.vim reset.s
  此时此刻程序是可以运行,main可以运行，但是
  按键中断还是不会有相应,因为没有初始化中断控制器
  
8.了解中断控制器的硬件特性
  ldr pc, [pc, #24] //[0x20008020]
      pc = 0x2000898c 
   
    
                
           
     
     
     
     
     
       
     
     
     
     
     
     
  
  
  
  
    















    
  
  
  
  
  
  
  
  
    
    
    
    
    
    
    
           
    	
    
  