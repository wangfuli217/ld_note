!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALIGN_SIZE	alloc.c	63;"	d	language:C	file:
ALLOC_SIZE	alloc.h	37;"	d	language:C++
ATOM_SIZE	atom.h	38;"	d	language:C++
BITVEC_H_ZY	bitvec.h	20;"	d	language:C++
BITVEC_IMP_ZY	bitvec.c	28;"	d	language:C	file:
BIT_INDEX	bitvec.c	36;"	d	language:C	file:
BIT_OFFSET	bitvec.c	37;"	d	language:C	file:
CALLOC	alloc.h	62;"	d	language:C++
DESC_SIZE	table.c	21;"	d	language:C	file:
EXTERN	alloc.h	27;"	d	language:C++
EXTERN	alloc.h	29;"	d	language:C++
EXTERN	array.h	26;"	d	language:C++
EXTERN	array.h	28;"	d	language:C++
EXTERN	atom.h	28;"	d	language:C++
EXTERN	atom.h	30;"	d	language:C++
EXTERN	sequence.h	26;"	d	language:C++
EXTERN	sequence.h	28;"	d	language:C++
EXTERN	stack.h	30;"	d	language:C++
EXTERN	stack.h	32;"	d	language:C++
FAILURE	alloc.h	70;"	d	language:C++
FREE	alloc.h	68;"	d	language:C++
LIST_H_ZY	list.h	20;"	d	language:C++
LIST_IMP_ZY	list.c	24;"	d	language:C	file:
LIST_T_ZY	list.h	37;"	d	language:C++
MALLOC	alloc.h	66;"	d	language:C++
NODE_SIZE	alloc.c	62;"	d	language:C	file:
OBJECT_H	object.h	20;"	d	language:C++
OBJECT_IMPLEMENTATION	object.c	18;"	d	language:C	file:
POINT_H	point.h	20;"	d	language:C++
POINT_IMPLEMENTATION	point.c	18;"	d	language:C	file:
REALLOC	alloc.h	64;"	d	language:C++
STACK_TYPE	stack.h	39;"	d	language:C++
U32_NEED	bitvec.c	35;"	d	language:C	file:
WANTED_ELEM	array.c	29;"	d	language:C	file:
WHOLESALE	alloc.c	68;"	d	language:C	file:
ZY_ALLOC_H	alloc.h	21;"	d	language:C++
ZY_ALLOC_IMPLEMENTATION	alloc.c	32;"	d	language:C	file:
ZY_ARRAY_H	array.h	20;"	d	language:C++
ZY_ATOM_H	atom.h	21;"	d	language:C++
ZY_ATOM_IMPLEMENTATION	atom.c	25;"	d	language:C	file:
ZY_SEQUENCE_H	sequence.h	20;"	d	language:C++
ZY_STACK_H	stack.h	24;"	d	language:C++
ZY_STACK_IMPLEMENTATION	stack.c	28;"	d	language:C	file:
_	a.c	/^ const struct class _;$/;"	m	language:C	struct:class_point	typeref:struct:class_point::class	file:
_	a.c	/^ const struct object _;$/;"	m	language:C	struct:class	typeref:struct:class::object	file:
_	a.c	/^ const struct object _;$/;"	m	language:C	struct:point	typeref:struct:point::object	file:
add	atom.c	/^static const char *add(atom_t *at, const char *str, long len)$/;"	f	language:C	file:	signature:(atom_t *at, const char *str, long len)
addr	alloc.h	/^	const void *addr;                                     \/* malloc'd addr *\/$/;"	m	language:C++	struct:alloc_n
addr_align	alloc.c	81;"	d	language:C	file:
align	alloc.c	/^static union align {$/;"	u	language:C	file:
alloc_calloc	alloc.c	/^void *alloc_calloc(long cnt, long nbytes, const char *file, int line)$/;"	f	language:C	signature:(long cnt, long nbytes, const char *file, int line)
alloc_failure	alloc.c	/^void alloc_failure()$/;"	f	language:C
alloc_free	alloc.c	/^void alloc_free(void *addr, const char *file, int line)$/;"	f	language:C	signature:(void *addr, const char *file, int line)
alloc_malloc	alloc.c	/^void *alloc_malloc(long nbytes, const char *file, int line)$/;"	f	language:C	signature:(long nbytes, const char *file, int line)
alloc_n	alloc.h	/^struct alloc_n {$/;"	s	language:C++
alloc_n	alloc.h	/^typedef struct alloc_n alloc_n;$/;"	t	language:C++	typeref:struct:alloc_n
alloc_realloc	alloc.c	/^void *alloc_realloc(void *addr, long nbytes, const char *file, int line)$/;"	f	language:C	signature:(void *addr, long nbytes, const char *file, int line)
append	list.c	/^int append(list_t_zy * list, LIST_T_ZY x)$/;"	f	language:C	signature:(list_t_zy * list, LIST_T_ZY x)
append	list.h	/^	int (* append)(struct list_t_zy *, int);$/;"	m	language:C++	struct:list_t_zy
ard_p	sequence.h	/^	array_desc *ard_p;$/;"	m	language:C++	struct:seq_desc
array_copy	array.c	/^array_desc *array_copy(array_desc * desc, int copy_len)$/;"	f	language:C	signature:(array_desc * desc, int copy_len)
array_create	array.c	/^array_desc *array_create(size_t size, int len)$/;"	f	language:C	signature:(size_t size, int len)
array_desc	array.h	/^struct array_desc {$/;"	s	language:C++
array_desc	array.h	/^typedef struct array_desc array_desc;$/;"	t	language:C++	typeref:struct:array_desc
array_free	array.c	/^void array_free(array_desc * desc)$/;"	f	language:C	signature:(array_desc * desc)
array_get_elem	array.c	/^void *array_get_elem(array_desc * desc, int i)$/;"	f	language:C	signature:(array_desc * desc, int i)
array_length	array.c	/^int array_length(array_desc * desc)$/;"	f	language:C	signature:(array_desc * desc)
array_resize	array.c	/^void array_resize(array_desc * desc, int new_len)$/;"	f	language:C	signature:(array_desc * desc, int new_len)
array_size	array.c	/^int array_size(array_desc * desc)$/;"	f	language:C	signature:(array_desc * desc)
array_substitute_elem	array.c	/^void *array_substitute_elem(array_desc * desc, int i, void * elem)$/;"	f	language:C	signature:(array_desc * desc, int i, void * elem)
atom_add_num	atom.c	/^const char *atom_add_num(atom_t *at, long n)$/;"	f	language:C	signature:(atom_t *at, long n)
atom_add_string	atom.c	/^const char *atom_add_string(atom_t *at, const char *str)$/;"	f	language:C	signature:(atom_t *at, const char *str)
atom_create	atom.c	/^atom_t *atom_create()$/;"	f	language:C
atom_free	atom.c	/^void atom_free(atom_t *at)$/;"	f	language:C	signature:(atom_t *at)
atom_n	atom.h	/^struct atom_n {$/;"	s	language:C++
atom_n	atom.h	/^typedef struct atom_n atom_n;$/;"	t	language:C++	typeref:struct:atom_n
atom_search_num	atom.c	/^const char *atom_search_num(atom_t *at, long n)$/;"	f	language:C	signature:(atom_t *at, long n)
atom_search_string	atom.c	/^const char *atom_search_string(atom_t *at, const char *str)$/;"	f	language:C	signature:(atom_t *at, const char *str)
atom_t	atom.h	/^struct atom_t {$/;"	s	language:C++
atom_t	atom.h	/^typedef struct atom_t atom_t;$/;"	t	language:C++	typeref:struct:atom_t
bitvec_create	bitvec.c	/^unsigned *bitvec_create(ssize_t num)$/;"	f	language:C	signature:(ssize_t num)
bitvec_first_set	bitvec.c	/^ssize_t bitvec_first_set(unsigned *bitvec, ssize_t max)$/;"	f	language:C	signature:(unsigned *bitvec, ssize_t max)
bitvec_first_unset	bitvec.c	/^ssize_t bitvec_first_unset(unsigned *bitvec, ssize_t max)$/;"	f	language:C	signature:(unsigned *bitvec, ssize_t max)
bitvec_free	bitvec.c	/^void bitvec_free(unsigned *bitvec)$/;"	f	language:C	signature:(unsigned *bitvec)
bitvec_set	bitvec.c	/^void bitvec_set(unsigned *bitvec, ssize_t index)$/;"	f	language:C	signature:(unsigned *bitvec, ssize_t index)
bitvec_unset	bitvec.c	/^void bitvec_unset(unsigned *bitvec, ssize_t index)$/;"	f	language:C	signature:(unsigned *bitvec, ssize_t index)
cla_ctor	object.c	/^static void *cla_ctor(void *_new_cla, va_list * arg)$/;"	f	language:C	file:	signature:(void *_new_cla, va_list * arg)
cla_dtor	object.c	/^static void *cla_dtor(void *_cla)$/;"	f	language:C	file:	signature:(void *_cla)
class	a.c	/^ const struct class * class;$/;"	m	language:C	struct:object	typeref:struct:object::class	file:
class	a.c	/^struct class {$/;"	s	language:C	file:
class	object.c	/^const void *class = obj + 1;$/;"	v	language:C
class_of	object.c	/^const void *class_of(const void * _self)$/;"	f	language:C	signature:(const void * _self)
class_point	a.c	/^struct class_point {$/;"	s	language:C	file:
class_point	point.c	/^const void * class_point;$/;"	v	language:C
class_point_ctor	a.c	/^static void * class_point_ctor(void * _cls_pnt, va_list * arg)$/;"	f	language:C	file:	signature:(void * _cls_pnt, va_list * arg)
class_point_ctor	point.c	/^static void * class_point_ctor(void * _cls, va_list * arg)$/;"	f	language:C	file:	signature:(void * _cls, va_list * arg)
cmp	table.h	/^	table_cmp cmp;$/;"	m	language:C++	struct:table_desc
cnt	list.h	/^	size_t cnt;$/;"	m	language:C++	struct:list_t_zy
cnt	stack.h	/^	int cnt;$/;"	m	language:C++	struct:stack_t
create	list.c	/^list_t_zy *create()$/;"	f	language:C
create	list.h	/^	struct list_t_zy * (* create)(void);$/;"	m	language:C++	struct:list_t_zy	typeref:struct:list_t_zy::create
ctor	a.c	/^ void * (* ctor) (void * self, va_list * app);$/;"	m	language:C	struct:class	file:
ctor	object.c	/^void *ctor(void *_self, va_list * arg)$/;"	f	language:C	signature:(void *_self, va_list * arg)
d	alloc.c	/^	double d;$/;"	m	language:C	union:align	file:
delete	object.c	/^void delete(void * _self)$/;"	f	language:C	signature:(void * _self)
draw	a.c	/^ void (* draw) (const void *);$/;"	m	language:C	struct:class_point	file:
draw	a.c	/^void draw(const void * _obj)$/;"	f	language:C	signature:(const void * _obj)
draw	point.c	/^void draw(const void * _obj)$/;"	f	language:C	signature:(const void * _obj)
dtor	a.c	/^ void * (* dtor) (void * self);$/;"	m	language:C	struct:class	file:
dtor	object.c	/^void *dtor(void *_self)$/;"	f	language:C	signature:(void *_self)
extern	bitvec.h	26;"	d	language:C++
extern	bitvec.h	28;"	d	language:C++
extern	list.h	27;"	d	language:C++
extern	list.h	29;"	d	language:C++
extern	object.h	29;"	d	language:C++
extern	object.h	31;"	d	language:C++
extern	point.h	26;"	d	language:C++
extern	point.h	28;"	d	language:C++
f	alloc.c	/^	float f;$/;"	m	language:C	union:align	file:
file	alloc.h	/^	const char *file;                                       \/* err file *\/$/;"	m	language:C++	struct:alloc_n
fp	alloc.c	/^	void (*fp)(void);$/;"	m	language:C	union:align	file:
free	alloc.h	/^	struct alloc_n *free;                                \/* next free node *\/$/;"	m	language:C++	struct:alloc_n	typeref:struct:alloc_n::alloc_n
free	list.c	/^void free(list_t_zy * list)$/;"	f	language:C	signature:(list_t_zy * list)
free	list.h	/^	void (* free)(list_t_zy *);$/;"	m	language:C++	struct:list_t_zy
freelist	alloc.c	/^static alloc_n freelist = { &freelist };$/;"	v	language:C	file:
get_new_node	alloc.c	/^static alloc_n *get_new_node(void *addr, long nbytes, const char *file, int line)$/;"	f	language:C	file:	signature:(void *addr, long nbytes, const char *file, int line)
hash	alloc.c	74;"	d	language:C	file:
hash	table.h	/^	table_hash hash;$/;"	m	language:C++	struct:table_desc
head	array.h	/^	void *head;                                         \/* array start addr *\/$/;"	m	language:C++	struct:array_desc
head	atom.h	/^	atom_n * head;$/;"	m	language:C++	struct:atom_t
head	list.h	/^	struct list_n_zy * head;$/;"	m	language:C++	struct:list_t_zy	typeref:struct:list_t_zy::list_n_zy
head	stack.h	/^	stack_n *head;$/;"	m	language:C++	struct:stack_t
htab	alloc.c	/^static alloc_n *htab[ALLOC_SIZE];$/;"	v	language:C	file:
i	alloc.c	/^	int i;$/;"	m	language:C	union:align	file:
init_point	a.c	/^void init_point()$/;"	f	language:C
init_point	point.c	/^void init_point()$/;"	f	language:C
insert	list.c	/^size_t insert(list_t_zy * list, LIST_T_ZY x, size_t(*)(list_t_zy *, LIST_H_ZY) func)$/;"	f	language:C	signature:(list_t_zy * list, LIST_T_ZY x, size_t(*)(list_t_zy *, LIST_H_ZY) func)
insert	list.h	/^	size_t (* insert)(struct list_t_zy *, int, $/;"	m	language:C++	struct:list_t_zy
keyword	table.h	/^	const void *keyword;$/;"	m	language:C++	struct:table_n
l	alloc.c	/^	long l;$/;"	m	language:C	union:align	file:
ld	alloc.c	/^	long double ld;                                         \/* max, 12 bytes *\/$/;"	m	language:C	union:align	file:
len	array.h	/^	int len;                                                \/* array length *\/$/;"	m	language:C++	struct:array_desc
len	atom.h	/^	int len;                                                \/* string length *\/$/;"	m	language:C++	struct:atom_n
len	sequence.h	/^	int len;$/;"	m	language:C++	struct:seq_desc
length	list.c	/^size_t length(list_t_zy * list)$/;"	f	language:C	signature:(list_t_zy * list)
length	list.h	/^	size_t (* length)(struct list_t_zy *);$/;"	m	language:C++	struct:list_t_zy
less_than	list.h	/^typedef int (* less_than)(void * a, void * b);$/;"	t	language:C++
line	alloc.h	/^	int line;                                               \/* err line *\/$/;"	m	language:C++	struct:alloc_n
link	alloc.h	/^	struct alloc_n *link;                   \/* next one with same hash-key *\/$/;"	m	language:C++	struct:alloc_n	typeref:struct:alloc_n::alloc_n
link	atom.h	/^        struct atom_n * link;                                   \/* next one *\/$/;"	m	language:C++	struct:atom_n	typeref:struct:atom_n::atom_n
link	list.h	/^	struct list_n_zy * link;$/;"	m	language:C++	struct:list_n_zy	typeref:struct:list_n_zy::list_n_zy
link	stack.h	/^	struct stack_n *link;$/;"	m	language:C++	struct:stack_n	typeref:struct:stack_n::stack_n
link	table.h	/^	struct table_n *link;$/;"	m	language:C++	struct:table_n	typeref:struct:table_n::table_n
list_n_zy	list.h	/^struct list_n_zy {$/;"	s	language:C++
list_n_zy	list.h	/^typedef struct list_n_zy list_n_zy;$/;"	t	language:C++	typeref:struct:list_n_zy
list_t_zy	list.h	/^struct list_t_zy {$/;"	s	language:C++
list_t_zy	list.h	/^typedef struct list_t_zy list_t_zy;$/;"	t	language:C++	typeref:struct:list_t_zy
lp	alloc.c	/^	long *lp;$/;"	m	language:C	union:align	file:
ltoa	atom.c	/^static char *ltoa(long n)$/;"	f	language:C	file:	signature:(long n)
main	test.c	/^main ( int argc, char *argv[] )$/;"	f	language:C	signature:( int argc, char *argv[] )
nalloc	alloc.c	/^static alloc_n *nalloc(void *addr, long nbytes, const char *file, int line)$/;"	f	language:C	file:	signature:(void *addr, long nbytes, const char *file, int line)
name	a.c	/^ const char * name;$/;"	m	language:C	struct:class	file:
name_of	object.c	/^const char *name_of(void *_cla)$/;"	f	language:C	signature:(void *_cla)
new	object.c	/^void *new(const void *_cla, ...)$/;"	f	language:C	signature:(const void *_cla, ...)
obj	object.c	/^static struct class obj[2] = {$/;"	v	language:C	typeref:struct:class	file:
obj_ctor	object.c	/^static void *obj_ctor(void *_self, va_list * arg)$/;"	f	language:C	file:	signature:(void *_self, va_list * arg)
obj_dtor	object.c	/^static void *obj_dtor(void *_self)$/;"	f	language:C	file:	signature:(void *_self)
object	a.c	/^struct object {$/;"	s	language:C	file:
object	object.c	/^const void *object = obj;$/;"	v	language:C
offsetof	object.c	23;"	d	language:C	file:
p	alloc.c	/^	void *p;$/;"	m	language:C	union:align	file:
point	a.c	/^struct point{$/;"	s	language:C	file:
point	point.c	/^const void * point;$/;"	v	language:C
point_ctor	a.c	/^static void * point_ctor(void * _pnt, va_list * arg)$/;"	f	language:C	file:	signature:(void * _pnt, va_list * arg)
point_ctor	point.c	/^static void * point_ctor(void * _pnt, va_list * arg)$/;"	f	language:C	file:	signature:(void * _pnt, va_list * arg)
point_draw	a.c	/^static void point_draw(const void * _obj)$/;"	f	language:C	file:	signature:(const void * _obj)
point_draw	point.c	/^static void point_draw(const void * _obj)$/;"	f	language:C	file:	signature:(const void * _obj)
pop	list.c	/^LIST_T_ZY pop(list_t_zy * list)$/;"	f	language:C	signature:(list_t_zy * list)
pop	list.h	/^	int (* pop)(struct list_t_zy *);$/;"	m	language:C++	struct:list_t_zy
ptr	table.h	/^	table_n **ptr;$/;"	m	language:C++	struct:table_desc
push	list.c	/^void push(list_t_zy * list, LIST_T_ZY x)$/;"	f	language:C	signature:(list_t_zy * list, LIST_T_ZY x)
push	list.h	/^	void (* push)(struct list_t_zy *, int);$/;"	m	language:C++	struct:list_t_zy
scatter	atom.c	/^static unsigned long scatter[] = {$/;"	v	language:C	file:
search	alloc.c	/^static alloc_n *search(void *addr)$/;"	f	language:C	file:	signature:(void *addr)
search	atom.c	/^static const char *search(atom_t *at, const char *str, long len)$/;"	f	language:C	file:	signature:(atom_t *at, const char *str, long len)
search_method	list.h	/^	size_t (* search_method)(struct list_t_zy *, LIST_T_ZY);$/;"	m	language:C++	struct:list_t_zy
search_part	atom.c	29;"	d	language:C	file:
seq_add_list	sequence.c	/^void seq_add_list(seq_desc * sed, void *x, ...)$/;"	f	language:C	signature:(seq_desc * sed, void *x, ...)
seq_addhi	sequence.c	/^void *seq_addhi(seq_desc * sed, void *x)$/;"	f	language:C	signature:(seq_desc * sed, void *x)
seq_addlo	sequence.c	/^void *seq_addlo(seq_desc * sed, void *x)$/;"	f	language:C	signature:(seq_desc * sed, void *x)
seq_attach_array	sequence.c	/^seq_desc *seq_attach_array(array_desc * ard, int len, int start)$/;"	f	language:C	signature:(array_desc * ard, int len, int start)
seq_create	sequence.c	/^seq_desc *seq_create(size_t size, int len, int start)$/;"	f	language:C	signature:(size_t size, int len, int start)
seq_desc	sequence.h	/^struct seq_desc {$/;"	s	language:C++
seq_desc	sequence.h	/^typedef struct seq_desc seq_desc;$/;"	t	language:C++	typeref:struct:seq_desc
seq_free	sequence.c	/^void seq_free(seq_desc * sed)$/;"	f	language:C	signature:(seq_desc * sed)
seq_get_elem	sequence.c	/^void *seq_get_elem(seq_desc * sed, int i)$/;"	f	language:C	signature:(seq_desc * sed, int i)
seq_len	sequence.c	/^int seq_len(seq_desc * sed)$/;"	f	language:C	signature:(seq_desc * sed)
seq_rmhi	sequence.c	/^void seq_rmhi(seq_desc * sed)$/;"	f	language:C	signature:(seq_desc * sed)
seq_rmlo	sequence.c	/^void seq_rmlo(seq_desc * sed)$/;"	f	language:C	signature:(seq_desc * sed)
seq_start	sequence.c	/^int seq_start(seq_desc * sed)$/;"	f	language:C	signature:(seq_desc * sed)
seq_substitute_elem	sequence.c	/^void *seq_substitute_elem(seq_desc * sed, int i, void *x)$/;"	f	language:C	signature:(seq_desc * sed, int i, void *x)
size	a.c	/^ size_t size;$/;"	m	language:C	struct:class	file:
size	alloc.h	/^	long size;                                            \/* malloc'd size *\/$/;"	m	language:C++	struct:alloc_n
size	array.h	/^	size_t size;                                                  \/* elem size *\/$/;"	m	language:C++	struct:array_desc
size	atom.h	/^	size_t size;                                               \/* how many nodes *\/$/;"	m	language:C++	struct:atom_t
size	table.h	/^	int size;$/;"	m	language:C++	struct:table_desc
size_of	object.c	/^size_t size_of(void *_self)$/;"	f	language:C	signature:(void *_self)
stack_create	stack.c	/^stack_t *stack_create()$/;"	f	language:C
stack_empty	stack.c	/^int stack_empty(stack_t * st_p)$/;"	f	language:C	signature:(stack_t * st_p)
stack_free	stack.c	/^void stack_free(stack_t * st_p)$/;"	f	language:C	signature:(stack_t * st_p)
stack_n	stack.h	/^struct stack_n {$/;"	s	language:C++
stack_n	stack.h	/^typedef struct stack_n stack_n;$/;"	t	language:C++	typeref:struct:stack_n
stack_pop	stack.c	/^STACK_TYPE stack_pop(stack_t * st_p)$/;"	f	language:C	signature:(stack_t * st_p)
stack_push	stack.c	/^void stack_push(stack_t * st_p, STACK_TYPE x)             $/;"	f	language:C	signature:(stack_t * st_p, STACK_TYPE x)
stack_t	stack.h	/^struct stack_t {$/;"	s	language:C++
stack_t	stack.h	/^typedef struct stack_t stack_t;$/;"	t	language:C++	typeref:struct:stack_t
start	sequence.h	/^	int start;                                              \/* index, 0 ~ len-1 *\/$/;"	m	language:C++	struct:seq_desc
str	atom.h	/^	char str[0];                                            \/* GCC extension *\/$/;"	m	language:C++	struct:atom_n
super	a.c	/^ struct class * super;$/;"	m	language:C	struct:class	typeref:struct:class::class	file:
super_ctor	object.c	/^void *super_ctor(const void * _spr, void *_self, va_list * arg)$/;"	f	language:C	signature:(const void * _spr, void *_self, va_list * arg)
super_draw	a.c	/^void super_draw(const void * _obj)$/;"	f	language:C	signature:(const void * _obj)
super_draw	point.c	/^void super_draw(const void * _cls, const void * _obj)$/;"	f	language:C	signature:(const void * _cls, const void * _obj)
super_dtor	object.c	/^void *super_dtor(void *_self)$/;"	f	language:C	signature:(void *_self)
super_of	object.c	/^const void *super_of(const void *_cla)$/;"	f	language:C	signature:(const void *_cla)
table_cmp	table.h	/^typedef int (*table_cmp)(const void *, const void *);$/;"	t	language:C++
table_create	table.c	/^table_desc *table_create(int hint, table_cmp cmp, table_hash hash)$/;"	f	language:C	signature:(int hint, table_cmp cmp, table_hash hash)
table_desc	table.h	/^struct table_desc {$/;"	s	language:C++
table_desc	table.h	/^typedef struct table_desc table_desc;$/;"	t	language:C++	typeref:struct:table_desc
table_hash	table.h	/^typedef unsigned (*table_hash)(const void *);$/;"	t	language:C++
table_n	table.h	/^struct table_n {$/;"	s	language:C++
table_n	table.h	/^typedef struct table_n table_n;$/;"	t	language:C++	typeref:struct:table_n
value	table.h	/^	const void *value;$/;"	m	language:C++	struct:table_n
x	a.c	/^ int x;$/;"	m	language:C	struct:point	file:
x	list.h	/^	LIST_T_ZY x;$/;"	m	language:C++	struct:list_n_zy
x	stack.h	/^	STACK_TYPE x;$/;"	m	language:C++	struct:stack_n
y	a.c	/^ int y;$/;"	m	language:C	struct:point	file:
