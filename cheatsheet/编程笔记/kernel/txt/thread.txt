join() is a method of waiting & process<->threads synchronization

在多线程操作系统中，各个系统的实现方式并不相同。在有的系统中实现了用户级线程，有的系统中实现了内核级线程

1.内核级线程：
（1）线程的创建、撤销和切换等，都需要内核直接实现，即内核了解每一个作为可调度实体的线程。
（2）这些线程可以在全系统内进行资源的竞争。
（3）内核空间内为每一个内核支持线程设置了一个线程控制块（TCB），内核根据该控制块，感知线程的存在，并进行控制。
在一定程度上类似于进程，只是创建、调度的开销要比进程小。有的统计是1：10

2.用户级线程：
（1）用户级线程仅存在于用户空间。——>对比内核(3)
（2）内核并不能看到用户线程。——>重要的区别
（3）内核资源的分配仍然是按照进程进行分配的；各个用户线程只能在进程内进行资源竞争。

用户线程运行在一个中间系统上面。目前中间系统实现的方式有两种，即运行时系统（Runtime System）和内核控制线程。
    “运行时系统”实质上时用于管理和控制线程的函数集合。包括创建、撤销、线程的同步和通信的函数以及调度的函数。这些函数都驻留在用户空间作为用户线程和内核之间的接口。用户线程不能使用系统调用，而是当线程需要系统资源时，将请求传送给运行时，由后者通过相应的系统调用来获取系统资源。
     内核控制线程：
系统在分给进程几个轻型进程(LWP)，LWP可以通过系统调用来获得内核提供的服务，而进程中的用户线程可通过复用来关联到LWP，从而得到内核的服务。

内核线程的优点：
（1）
（2）当有多个处理机时，一个进程的多个线程可以同时执行
缺点：
（1）由内核进行调度

用户进程的优点：
（1）线程的调度不需要内核直接参与，控制简单
缺点：
（1）资源调度按照进程进行，多个处理机下，同一个进程中的线程只能在同一个处理机下分时复用。
