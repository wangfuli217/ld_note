a)    FortranIªFortranIV(FORmula TRANslation) 始终是数值计算领域所使用的主要语言。
    为科学、工程问题中的那些能够用数学公式表达的问题而设计的语言，主要用于数值计算。
    1954年 FortranI
    1958年 FortranII
    1976年 Fortran77
    1991年 Fortran90
    不仅一些爱好者推崇Fortran语言[A Real Programmer] ，而且科学计算编程的专家也认为，
科学与工程相关专业的学生应该采用Fortran而非C和C++编程［F90 for Science Student］。
    本教程仍然将Fortran77作为基础，但随时与Fortran90比较不同之处。
    1. 加强了程序的可读性、可维护性：
    淘汰所有转移语句，用新的控制结构实现选择分叉与重复操作，使程序结构化。
同时增加了结构块、模块及过程的调用灵活形式，使程序易读易维护，新的模块装配取代了
Fortran77的许多旧语句，使程序员更为清晰明确地定义全局数据。增加了新的数据种别说明，
使得Fortran程序在不同计算机编译环境下有更自由的移植性。
    2. 发展了现代算法功能：
    加强了数组的算法功能，引进了多种数组操作功能与概念，使数组像一个变量一样自由操作，
使数组的并行化运算成为可能。
    3. 扩大与编程者的友好界面：
    新的编程形式减少了烦琐与格式束缚，接近自然语言与公式演算。允许在字符数据中选取不同种别，
在字符串中可使用各国文字（例如汉字），还可任意使用化学、物理、数学的各种专业字符。


PROGRAM语句：  宣布程序开始，其后跟程序名。可省略。
REAL语句：            定义a,b,...等变量为实数型数据。如为整数型，则用INTEGER定义。
变量名：                  可用a,b等无具体意义的文字，或用average_value等英文缩写。使用的字符和文字长度有具体规定。
输入输出语句： 可以用以下任一种默认格式，注意星号(*)和逗号(,)。星号意指默认的输入输出硬件(键盘和屏幕)及格式。
READ *,       变量名
READ(*,*)     变量名
PRINT *,      变量或常数,关系式
WRITE(*,*)    变量或常数,关系式
赋值语句：    将等式右边的变量取值赋予左边的变量。
变量 = 变量、常数、关系式
例：sum = sum + x
算术运算：
２项运算：加(+)，减(-)，乘(*)，除(/)，乘方(**)。
运算的优先顺序：加，减 ＜ 乘，除 ＜ 乘方，括号中优先(　)。
单项运算：（例　-a）
数据类型： 按定义有整数、实数、复数、双精度数等。
    
    
F77行分为下面两类。F77规定，一行只能写一个语句，一行中不能写几个语句。如果一个语句太长，一行内写不下的话，可以写在继续行(要用"续行标志")
  语句行。由一个Fortran语句组成， Fortran语句分为执行语句和非执行语句。
    执行语句使计算机在运行时产生某些操作，如赋值语句、打印语句等。
    非执行语句(包括说明语句，数据语句等)将有关信息通知编译系统，以便在编译时作出相应的处理，例如类型说明语句、函数子程序语句等。Fortran程序的基本成份是语句。
  非语句行，即注释行。它不是Fortran语句，它不被翻译成机器目标指令。不产生任何机器操作。
    它仅仅是为了人们阅读程序的方便而加到程序中的。一个程序中注释行的数目不受限制，根据需要而定。
    但一个程序单位不能只由注释行组成。注释行的内容完全是根据程序设计人员需要而写的，一般是为程序
    (或程序中一部分)的作用作注释以易于理解程序。
  F90行不分类。注释可以写在任一行末尾，而且一行不限语句数，可以将几个F77行合并写入一行。这样，极大地简化了程序写法，
使得程序可以编写得更为清晰明了。因此F90的格式较F77有柔软性。

应当注意，在F77语句中不区分大小写字母，例如写READ和read或Read是一样的，其它变量名和函数名中，大、小写字母也是等价的。

F77格式要求
标号区：第l—5列
续行区：第6列
语句区：第7—72列
注释区：第73—80列

F90格式要求
在F90中，用自由格式编写程序有很大的自由度。与固定格式相比，不易产生键入位置的错误，而且易读易懂。
  行　　：一行为132列。可以有复数条程序语句，语句间用分号“;”分开。语句没有位置规定。
  注释行：起始用注释符“!”号，此行其后的所有字符均作为注释（字符串中的!号除外，如 print *,’help!!!!’ ）。
  续行　：当一个语句非常长以至于132列都书写不下时，允许有39个续行。在语句行最后加上续行符“&”号。如果字符串跨2行以上,则在续行的开始位置也要加&号。注意语句的有效字符是从“&”前和续行符“&”之后的位置算起。[e_132_04.f90]
  空格　：在语句名和变量名中间不能有空格。需要空格的地方必须有一个以上空格（GOTO和GO TO，ELSEIF和ELSE IF，END构造名(构造名有：DO, PROGRAM, FUNCTION, MODULE, SUBROUTINE)等有两种写法的除外），如关系运算符 ==，<= 不能写成 = =，< =。这与F77有很大不同之处，因为F77的设计中将编译源程序的空格忽略[e_132_05.f][e_132_05.f90][e_132_06.f]。
当程序员要将自己编写的F90程序与现有的用F77编写的子程序库在源码级结合起来的话，需要特别注意格式的差别。

文件名要求
以上两种格式的源程序在编译时可以用选项来指定，对应的默认文件扩展名为：
F77 固定格式：　.for　或　.f　[fixed.for]
F90 自由格式：　.f90 [free.f90]

F77中定义的辅程序对所有其它辅程序都是公开的，即除自己本身以外都可以加以引用。
而在F90中，辅程序可以被本身应用，且可以定义不能被其它辅程序应用的内部辅程序。


主程序
[PROGRAM  程序名]            ←语句可省略
.....
END [PROGRAM [程序名]]       ←END必须有
 
辅程序(过程)
SUBROUTINE 子程序
FUNCTION   函数
BLOCK DATA 块数据
MODULE     模块 (F90)
内部过程　  CONTAINS (F90)

MODULE过程在主程序中通过USE语句与之相联系。模块用于组装若干功能(如过程、类型定义、语义扩展等)为一集团，是F90中极具柔软性的程序单位，它取代了F77中的某些不安全的特性。
BLOCK DATA辅程序的用处是定义全局常数或全局初始化，在F90中是不推荐使用的，其功能已被MODULE和USE取代。