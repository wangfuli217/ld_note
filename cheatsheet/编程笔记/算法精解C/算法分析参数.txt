1. 最坏情况分析
    这是大多数算法都采用的评估方法。在其他情况下，我们可能会考虑算法的平均情况和最佳情况。
但是，对最坏情况的分析同样会带来一些好处。
  许多算法在最坏情况下执行会消耗相当长的时间。
  考虑算法在最佳情况下的性能没有太多的意义，因为很多算法在最佳情况下的表现都相同。
  分析算法平均情况下的性能往往不是那么容易。甚至我们很难去界定哪种情况叫做"平均情况"。
  最坏情况可以告诉我们算法性能的上限。分析一个算法的最坏情况可以保证在任何情况下此算法的表现都不会比最坏情况差，而其他情况肯定比最坏情况要好。
  
2. O表示法
    在一定的条件因素下，O表示法指明一个函数的上限。O表示法正是这样一种表示算法增长规律的方法。
    
3. 计算的复杂度
    资源消耗的大小往往与算法所需要处理的数据量的大小相辅相成。O表示法可以很好地表示一个算法的复杂度。
    复杂度与它处理数据量所需要的资源(通常是时间)的增长速率密切相关。O表示法能够描述一个算法的复杂度。
使用O表示法，通过观察算法的整体构造，我们很容易就可以描述最坏情况下的算法复杂度。有些时候，我们也会
借助于利用迭代公式和统计方法。

O(1)       一个数据集中获取第一个数据
O(lgn)     将一个数据集分成两半，然后将分开的每一半再分成两半，依次类推
O(n)       遍历一个数据集
O(n*lgn)   将一个数据集分成两半，然后将分开的每一半再分成两半，依次类推，在此过程中遍历一个数据集
O(n^2)     编译一个数据集中每一个元素同时遍历另一个数据量相同的数据集
O(2^n)     为一个数据集生成其可能的所有子集
O(n!)      为一个数据集生成其可能的所有排列组合
