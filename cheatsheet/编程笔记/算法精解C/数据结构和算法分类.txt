数据结构
    在计算机科学领域中，一些最常用来组织数据的方式有：链表、栈、队列、集合、哈希表、树、堆、优先级队列和图。
使用数据结构的三个原因是：效率、抽象和重用性。
效率: 数据结构组织数据的方式使得算法变得更加高效。
抽象: 数据结构为解决问题提供了一层抽象概念。
重用性: 数据结构是模块化的，每种数据结构都有各自指定的接口，通过接口访问数据结构中存储的数据是受限的。
        也就是说，只能通过定义接口的操作来访问数据。数据结构是上下文无关的，因为它们能在任意环境或上下文
        中应用于任意一种类型的数据之上。
        
算法
    算法是定义良好的用来解决问题的步骤。
效率： 排序是一项常见的任务，所以对于有许多高效的算法可以完成排序任务你应该不会感到太惊讶。
抽象:  在解决问题时，算法能够提供一定程度的抽象，因为很多看似复杂的问题都可以用已存在的著名算法来简化。
重用性:算法在很多不同场景下能够得到重用。因为很多著名的算法解决的问题都是由复杂的问题抽象而来的，
       很多复杂的问题都能够简化为简单的问题。一些能够有效解决这类特定问题的方法使我们有可能解决更多其他的问题。
       
算法设计的一般方法
     按照算法采用的方法和思路来给它们分类。有些算法有悖于分类原则，而另一些则是多种方法相结合的产物。
1. 随机法
随机法依赖于随机数的统计特性。一个应用随机法的例子是快速排序。随机选取需要排序数据集合的中间值。

2. 分治法
分治法包含3个步骤：分解、求解与合并。
  在分解阶段，将数据分解为更小、更容易管理的部分。
  在求解阶段，对每个分解出的部分进行处理。
  在合并阶段，将每部分处理的结果进行合并。
一个分治法的例子是归并排序

3. 动态规划
动态规划同分治法类似，都是将较大的问题分解为子问题最后再将结果合并。然而，它们处理问题的方式与子问题之间的关系有关。
在分治法中，每一个子问题都是独立的。为此，我们以递归的方式解决每一个子问题，然后将结果与其他子问题的结果合并。在动态规划中，
子问题之间并不是独立的。换句话说，子问题之间可能有关联。
本书介绍的算法中都没有使用到它。

4. 贪心法
贪心法在求解问题时总能够做出在当前的最佳选择。换句话说，不是从整体最优上考虑，而仅仅是在某种意义上的局部最优解。
遗憾的是，当前的最优解长远来看却未必是最优的。因此，贪心法并不会一直产生最优结果。然而，在某些方面来说，贪心法
确是最佳选择。一个采用贪心法的例子是霍夫曼编码这是一个数据压缩算法。

5.近似法
近似法并不计算出最优解，相反，它只计算出"足够好"的解。通常利用近似法解决那些计算成本很高又因为其本身十分有价值而不愿放弃的问题。
推销员问题是一个通常会用近似法去解决的问题。又称最优二叉树