https://zhuanlan.zhihu.com/p/22370545 Python|Linux|PHP|前端
https://www.zhihu.com/question/37116938/answer/70501553 博客门
https://github.com/Durant35/durant35.github.io/issues/24 Linux内存那些事
https://github.com/john5480/test/issues/38               Linux内存那些事
https://github.com/rainzhaojy/blogs/issues/9             Linux网络
https://github.com/dafang/notebook/issues/43             Linux网络
https://github.com/zhuxiaojian/Pocket/issues/1           Google Chrome 的历史和指导原则
https://github.com/dafang/notebook/issues/16             Redis
https://www.zhihu.com/question/19560516/answer/296148796 英语博客
https://github.com/mintisan/mintisan.github.io/wiki/C   C 如何OO





https://github.com/huaxz1986/python_tools           # package
https://github.com/liyuanrui/PyMoudle               # package
https://github.com/huaxz1986/python_learning_notes/ # basic
https://github.com/Akagi201/learning-python         # basic
https://github.com/18965050/fluent-python/wiki/Fluent-Python%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0(%E4%B8%80) # basic
https://github.com/Everfighting/python-tutorial-by-Vamei  # basic
https://github.com/Jueee/01-VameiBlog                     # basic

// one
https://github.com/jwasham/coding-interview-university/blob/master/translations/README-cn.md#%E6%97%A5%E5%B8%B8%E8%AE%A1%E5%88%92


# EffectivePython
https://github.com/qhdong/EffectivePython
https://github.com/18965050/effectivepython/wiki/EffectivePython%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0(%E4%B8%80)
# standard
https://github.com/jhao104/memory-notes

https://github.com/xuxiaodong/PyMOTW-3-ZH # gogogo
https://github.com/thawk/wiki/wiki/git

https://github.com/geeeeeeeeek/git-recipes/wiki 极客
snort
PF_RING pcap NAPI # http://blog.csdn.net/fan_hai_ping/article/details/6705170


https://github.com/WoShiDongZhiWu/flask-learning-new-notes # Flask

https://github.com/18965050/fluent-python/wiki/Fluent-Python%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0(%E4%B8%80) # book

https://github.com/thawk/wiki/wiki/python #
https://github.com/18965050/pymotw-3/wiki/PyMOTW%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%8D%81) # subprocess
https://github.com/huaxz1986/python_learning_notes/blob/master/chapter/29_python_try_except.md
https://github.com/huaxz1986/python_learning_notes/blob/master/chapter/30_python_exception_type.md

http://www.cnblogs.com/hongten/tag/tkinter/           # tkinter
http://www.cnblogs.com/hongten/category/522867.html   # pygame
https://github.com/ahlfors/MinYi/blob/master/issues/Python/%234-2015-11-28-Pygame%E6%B8%B8%E6%88%8F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0.md # pygame

# Fluent-Python
https://github.com/Ehco1996/Fluent-Python
https://github.com/Latias94/fluent-python-notes/tree/master/notes
https://github.com/wuqize/FluentPython

# blockchain
http://www.cnblogs.com/kidney/p/7627145.html

# pyauto
https://github.com/xjiaon

########### 大师 ###########
requests和python-guide作者。他还有一个非常励志的故事，有兴趣的可以看 谁说程序员不是潜力股？
https://github.com/kennethreitz
https://github.com/kennethreitz/httpbin  # http库测试工具

urllib2/urllib 代理设置
mitmproxy是一款Python语言开发的开源中间人代理神器，支持SSL，支持透明代理、反向代理，支持流量录制回放，支持自定义脚本等。
requests是目前最优秀的HTTP库之一，也是我平时构造http请求时使用最多的库。它的API设计非常人性化，使用起来很容易上手。
urllib2 和 Requests 库都能识别 HTTP_PROXY 和 HTTPS_PROXY 环境变量，一旦检测到这些环境变量就会自动设置使用代理。这在用HTTP代理进行调试的时候非常有用，因为不用修改代码，可以随意根据环境变量来调整代理服务器的ip地址和端口。*nix中的大部分软件也都支持HTTP_PROXY环境变量识别，比如curl、wget、axel、aria2c等。

mitsuhiko。flask、Jinja2、werkzeug和flask-sqlalchemy作者。
https://github.com/mitsuhiko

sigmavirus24。flake8、pycodestyle（原pep8）、requests、urllib3等项目的主要贡献者和维护者。
https://github.com/sigmavirus24

ask。Celery及相关依赖的作者。
https://github.com/ask

ajdavis。mongo-python-driver（pymongo）、tornado等项目的主要贡献者。
https://github.com/ajdavis

bitprophet。fabric、paramiko（Python的ssh库）作者。
https://github.com/bitprophet

########### 初学者推荐阅读项目 ###########
1. GitHub - kennethreitz/pip-pop: Tools for managing requirements files.
2. GitHub - kennethreitz/envoy: Python Subprocesses for Humans?.
3. GitHub - kennethreitz/records: SQL for Humans?
4. GitHub - mitsuhiko/pluginbase: A simple but flexible plugin system for Python.
5. GitHub - mitsuhiko/pipsi: pip script installer
6. GitHub - mitsuhiko/unp: Unpacks things.
7. GitHub - chrisallenlane/cheat
8. GitHub - jek/blinker: A fast Python in-process signal/event dispatching system.
9. GitHub - mitsuhiko/platter: A useful helper for wheel deployments.
10. GitHub - kennethreitz/tablib: Python Module for Tabular Datasets in XLS, CSV, JSON, YAML, &c.

########### 进阶阅读项目 ###########
1. faif/python-patterns。使用Python实现一些设计模式的例子。
2. pallets/werkzeug。flask的WSGI工具集。其中包含了实现非常好的LocalProxy、cached_property、import_string、find_modules、TypeConversionDict等。
3. bottlepy/bottle。阅读一个Web框架对Web开发就会有更深刻的理解，flask太大，bottle就4k多行，当然如果你有毅力和兴趣直接看flask是最好了的。
4. msiemens/tinydb。了解用Python实现数据库。
5. coleifer/peewee。了解ORM的实现。
6. pallets/click。click已经内置于在flask 0.11里，提供命令行功能，值得阅读。
7. mitsuhiko/flask-sqlalchemy。了解一个flask插件是怎么实现的。
除此之外Web开发者可以阅读一些相关的项目：
1. runscope/httpbin。使用flask，网站是httpbin(1): HTTP Client Testing Service。
2. jahaja/psdash。使用flask和psutils的获取Linux系统信息的面板应用。
3. pallets/flask-website。 flask官方网站应用。
4. pypa/warehouse。如果你使用pyramid，这个新版的PYPI网站，可以帮助你理解很多。
当然，2个学习flask重要的资源必须爆一爆：
1. GitHub - realpython/discover-flask: Full Stack Web Development with Flask。
2. The Flask Mega-Tutorial。 这个就是《Flask Web开发：基于Python的Web应用开发实战》的原始博客。







eli.thegreenplace.net。相对于国内那些舔着脸说「全栈」的，这才是一个好的全栈开发者，涉猎极广。它的博客有非常多Python的深入内容
planetpython.org。我之前在知乎就推荐过，一个Python资讯聚合网站，左侧列了一大片博客链接，其中有很多Python核心开发。
dbader.org。如博客的副标题，真的非常提高Python能力。有很多国内的开发者写的博客其实明显是看了它的博客受到启发甚至「借鉴」。必读五星!!
nedbatchelder.com。同样有非常多的Python技巧，我个人不太喜欢不加代码全文空说的那种，这个博客一直是我的学习的榜样：有演示代码，有讲解也有心得。
doughellmann.com/blog。大家都知道吧？PyMOTW系列的作者的博客。通常每篇介绍一个模块的使用，每篇都写得很深入，比官方网站对于模块的介绍细，你可以轻松的学到额外的「隐藏技能」。
lucumr.pocoo.org。Flask作者的博客，一句话介绍：有思想，虽然有些观点我并不认同。由于它现在转去做Rust开发（应该是觉得在Python圈曲高和寡的厉害）了，Python语言相关的内容并不多了。
snarky.ca。应该很多人不知道这个博客，其实作者Brett Cannon是一个很知名的Python核心开发。
www.pydanny.com。博主是《Two Scoops of Django》的作者，我在Twitter上关注最早的开发者之一（我的Twitter被盗了，现在不玩了）。博客里面很多Python技巧，另外在Django方面作者贡献了非常多的内容和开源项目。
www.saltycrane.com/blog/。可以说是看着这个博客在成长，以前对Python不熟的时候经常Google用法就跳到它的文章上，然后借鉴一下下。

https://alexgaynor.net。它的博客更多的是一些开发的感想和观点，印象最深的是有篇代码review的文章，其中引用了这么一段话：


10 lines of code = 10 issues.
500 lines of code = "looks fine."
Code reviews.

??
techspot.zzzeek.org/。作者创建了SQLAlchemy、Mako、Alembic这些我天天在用的开源项目，它有篇叫做「Asynchronous Python and Databases」讲异步数据库的文章写得非常好，大师级别。
jessenoller.com。Python核心开发，python.org「设计师」，给《Dive into Python 3》和《The Python Standard Library by Example》写序。博客也不怎么直接写Python代码，更多的是Python和架构的设计和心得。有兴趣的可以了解下Python官网的设计者们对重新设计的理解： http://pythonorg-redesign.readthedocs.io/en/latest/ ，这对于大家自己写网站的
effbot.org。模块使用方面和PyMOTW比较像，不过还有大量的库使用以及其他经验。我第一次用Python实现缓存就是看它的文章写的。
julien.danjou.info。最早是学习AST翻到的，后来就一直关注了。作者是Debian开发，在Red Hat工作，对OpenStack很熟悉。之前会分享一些Python语言和使用技巧，现在可能走上管理岗位不怎么写代码了。
sayspy.blogspot.com。很早就不再更新了，可以在里面翻到一些博主对Python的一些理解，很深入和细致，虽然现在看来某些观点我并不是全部赞同，但是对于当时的我也是很有益处的。
jeffknupp.com。最早是由于《Writing Idiomatic Python》这本电子书关注的，博客有一些Python实践的心得，不过现在博主不怎么写了。

https://github.com/thawk/wiki/wiki/python
http://www.sanfoundry.com/python-problems-solutions/ python 
https://github.com/WangYang-Rex/blog/issues/14 python 

http://www.sanfoundry.com/c-program-solve-linear-equation-one-variable/ c

http://www.sanfoundry.com/training-on-linux-internals-systems/  network


https://github.com/jiobxn/one/wiki # 运维

https://segmentfault.com/a/1190000000356018  # debug

http://interactivepython.org/courselib/static/pythonds/index.html
http://interactivepython.org/courselib/static/pythonds/index.html

https://github.com/sopp
https://github.com/SpongeBob-GitHub/Others/blob/8cb9e5d99c568819a264e34f589474825cdfce99/2017-05-10%20Python/Novel%26Image/cl/source/_posts/%E5%95%AA%E5%95%AA%E5%95%AA%E6%96%87%E5%AD%A6H%E5%B0%8F%E8%AF%B4%E8%B5%84%E6%BA%90%E5%90%88%E9%9B%86%E4%BA%A4%E6%B5%81%EF%BC%888.1%E6%9B%B4%E6%96%B0%E5%9C%A83%E6%A5%BC%EF%BC%89.md