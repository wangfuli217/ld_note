
Flask简单易学，下面是Flask版的 hello world(hello.py):
    from flask import Flask
    app = Flask(__name__)

    @app.route('/')
    def hello_world():
        return 'Hello World!'

    if __name__ == '__main__':
        app.run()

　　安装flask即可运行了：
        $ pip install Flask
        $ python hello.py * Running on http://localhost:5000/

    上面运行的这些代码是什么意思呢？
        1.首先我们导入了 Flask 类。这个类的实例将会成为我们的 WSGI 应用。
        2.接着我们创建了这个类的实例。第一个参数是应用模块或者包的名称。
          如果你使用一个 单一模块（就像本例），那么应当使用 __name__ ，因为名称会根据这个模块是按 应用方式使用还是作为一个模块导入而发生变化（可能是 '__main__' ，也可能是 实际导入的名称）。
          这个参数是必需的，这样 Flask 就可以知道在哪里找到模板和 静态文件等东西。更多内容详见 Flask 文档。
        3.然后我们使用 route() 装饰器来告诉 Flask 触发函数的 URL 。
        4.函数名称可用于生成相关联的 URL ，并返回需要在用户浏览器中显示的信息。
        5.最后，使用 run() 函数来运行本地服务器和我们的应用。 if __name__ == '__main__':
          确保服务器只会在使用 Python 解释器运行代码的 情况下运行，而不会在作为模块导入时运行。


外部可见的服务器
    运行服务器后，会发现只有你自己的电脑可以使用服务，而网络中的其他电脑却不行。
    缺省设置就是这样的，因为在调试模式下该应用的用户可以执行你电脑中的任意 Python 代码。

    如果你关闭了 调试 或信任你网络中的用户，那么可以让服务器被公开访问。
    只要像这样改变 run() 方法的调用:
        app.run(host='0.0.0.0')   # 这行代码告诉你的操作系统监听一个公开的 IP 。


调试模式
    虽然 run() 方法可以方便地启动一个本地开发服务器，但是每次 修改应用之后都需要手动重启服务器。
    这样不是很方便， Flask 可以做得更好。如果你打开调试模式，那么服务器会在修改应用之后自动重启，并且当应用出错时还会提供一个 有用的调试器。

    打开调试模式有两种方法，一种是在应用对象上设置标志:
        app.debug = True
        app.run()

    另一种是作为参数传递给 run 方法:
        app.run(debug=True)

    两种方法的效果相同。

    注意:
        虽然交互调试器不能在分布环境下工作（这使得它基本不可能用于生产环境），但是它允许执行任意代码，这样会成为一个重大安全隐患。
        因此，绝对不能在生产环境中使用调试器 。


