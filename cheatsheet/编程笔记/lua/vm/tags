!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
"..table.concat	LuaVM/luavm/decompiler3/decompiler.lua	/^			emit("function("..table.concat(args, ", ")..")")$/;"	f
...) return lua.run	LuaVM/run_vm.lua	/^		return function(...) return lua.run(bc,{...},nil,globals) end$/;"	f
A	LuaVMRead/lcode.c	/^"op"	A, B, C$/;"	v	file:
ARRAY2D	LuaVM/test/life.lua	/^function ARRAY2D(w,h)$/;"	f
B	LuaVMRead/lcode.c	/^"op"	A, B, C$/;"	v	file:
BIN	LuaVM/luavm/decompiler/decoder51.lua	/^local function BIN(a, op, b)$/;"	f
CELLS	LuaVM/test/life.lua	/^function CELLS(w,h)$/;"	f
F 	LuaVM/test/factorial.lua	/^F = function (f)$/;"	f
FINALIZEDBIT	LuaVMRead/lgc.h	/^						In 5.3 beta, its meaning is replaced by FINALIZEDBIT, and this flag is removed.$/;"	v
G	LuaVM/luavm/decompiler/decoder51.lua	/^local function G(i)$/;"	f
GCObject	LuaVMRead/lgc.c	/^used for only UpVal (which then was a GCObject). UpVal in 5.2, although was GCObject, were not linked$/;"	v
I	LuaVM/luavm/decompiler/decoder51.lua	/^local function I(t, i)$/;"	f
INV	LuaVM/luavm/decompiler3/pretty.lua	/^		local function INV(name)$/;"	f
JMP	LuaVMRead/lcode.c	/^	JMP 		0,		"jpc"$/;"	v	file:
JMP	LuaVMRead/lcode.c	/^	JMP 		0,	"jpc"$/;"	v	file:
JMP	LuaVMRead/lcode.c	/^JMP 	0, "jpc"$/;"	v	file:
JUMP	LuaVM/luavm/decompiler3/pretty.lua	/^		local function JUMP(name)$/;"	f
K	LuaVM/luavm/decompiler/decoder51.lua	/^local function K(c)$/;"	f
K	LuaVM/luavm/decompiler3/pretty.lua	/^		local function K(name)$/;"	f
LIFE	LuaVM/test/life.lua	/^function LIFE(w,h)$/;"	f
OP_EQ	LuaVMRead/lcode.c	/^- The first three, OP_EQ, OP_LT, OP_LE, is used for generating a comp-instruction, $/;"	v
OP_LE	LuaVMRead/lcode.c	/^- The first three, OP_EQ, OP_LT, OP_LE, is used for generating a comp-instruction, $/;"	v
OP_LT	LuaVMRead/lcode.c	/^- The first three, OP_EQ, OP_LT, OP_LE, is used for generating a comp-instruction, $/;"	v
R	LuaVM/luavm/decompiler/decoder51.lua	/^local function R(c)$/;"	f
R	LuaVM/luavm/decompiler3/pretty.lua	/^		local function R(name)$/;"	f
RK	LuaVM/luavm/decompiler/decoder51.lua	/^local function RK(c)$/;"	f
RK	LuaVM/luavm/decompiler3/pretty.lua	/^		local function RK(name)$/;"	f
RK	LuaVM/luavm/dynarec.lua	/^	local function RK(n)$/;"	f
RK	LuaVM/luavm/vm51.lua	/^		local function RK(n)$/;"	f
RK	LuaVM/luavm/vm52.lua	/^		local function RK(n)$/;"	f
RR	LuaVM/luavm/decompiler3/pretty.lua	/^		local function RR(fromName, toName)$/;"	f
R[a] 	LuaVM/luavm/dynarec.lua	/^			R[a] = function(...)$/;"	f
R[a] 	LuaVM/luavm/vm51.lua	/^					R[a] = function(...)$/;"	f
R[a] 	LuaVM/luavm/vm52.lua	/^					R[a] = function(...)$/;"	f
TI	LuaVM/luavm/decompiler3/pretty.lua	/^		local function TI(tab, index)$/;"	f
TRUE	LuaVMRead/lcode.c	/^value is TRUE, the other for FALSE.$/;"	v	file:
U	LuaVM/luavm/decompiler/decoder51.lua	/^local function U(p)$/;"	f
UN	LuaVM/luavm/decompiler/decoder51.lua	/^local function UN(op, a)$/;"	f
UV	LuaVM/luavm/decompiler3/pretty.lua	/^		local function UV(name)$/;"	f
V	LuaVM/luavm/decompiler/decoder51.lua	/^local function V(v)$/;"	f
V	LuaVM/luavm/decompiler3/pretty.lua	/^		local function V(name)$/;"	f
VINDEXED	LuaVMRead/lcode.c	/^     1) Spit out a "GET..." instruction for VUPVAL\/VINDEXED, left the target reg pent.$/;"	v
Y 	LuaVM/test/factorial.lua	/^Y = function (g)$/;"	f
[CALL] 	LuaVM/luavm/dynarec.lua	/^		[CALL] = function(o,a,b,c)$/;"	f
_CELLS:draw	LuaVM/test/life.lua	/^function _CELLS:draw()$/;"	f
_CELLS:evolve	LuaVM/test/life.lua	/^function _CELLS:evolve(next)$/;"	f
_CELLS:spawn	LuaVM/test/life.lua	/^function _CELLS:spawn(shape,left,top)$/;"	f
_HOOK	LuaVM/patcherhook.lua	/^function _HOOK()$/;"	f
a	LuaVMRead/lparser.c	/^a, b, c, d, e = f, g, h, i$/;"	v
accept	LuaVM/luavm/evaluator.lua	/^		local function accept(regex)$/;"	f
addHook	LuaVM/patcherhook.lua	/^function addHook(func)$/;"	f
addIgnore	LuaVM/luavm/decompiler3/decompiler/block_metadata.lua	/^	local function addIgnore(reg)$/;"	f
addStat	LuaVM/luavm/decompiler3/decompiler.lua	/^		local function addStat(t)$/;"	f
alwaysTrue	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function alwaysTrue() return true end$/;"	f
an	LuaVMRead/lparser.c	/^An invocation to "assignment()" handles a suffixing portion of an "assignment-stat",$/;"	v	file:
analyzer.computeGlobalStateChanges	LuaVM/luavm/decompiler/analyzer.lua	/^function analyzer.computeGlobalStateChanges(irBlock)$/;"	f
analyzer.computeLiveRanges	LuaVM/luavm/decompiler/analyzer.lua	/^function analyzer.computeLiveRanges(irBlock)$/;"	f
analyzer.isInlinePossible	LuaVM/luavm/decompiler/analyzer.lua	/^function analyzer.isInlinePossible(liveRanges, reg, pc)$/;"	f
as	LuaVMRead/lcode.c	/^1. For VVARARG, set its "B" as 2, meaning adjusting to 1 value.$/;"	v
as	LuaVMRead/lcode.c	/^2. For VVARARG, patch Bx as "nresults+1", patch Ax (destination reg) to a free reg slot.$/;"	v
assert(instr.narg >	LuaVM/luavm/decompiler3/decompiler.lua	/^					assert(instr.narg >= 0, "Varargs not supported inside function calls")$/;"	f
attempt	LuaVM/luavm/vm51.lua	/^local function attempt(v,to,...)$/;"	f
attempt	LuaVM/luavm/vm52.lua	/^local function attempt(v,to,...)$/;"	f
attemptCall	LuaVM/luavm/vm51.lua	/^local function attemptCall(v)$/;"	f
attemptCall	LuaVM/luavm/vm52.lua	/^local function attemptCall(v)$/;"	f
attemptMetatable	LuaVM/luavm/vm51.lua	/^local function attemptMetatable(v,n,typ,meta)$/;"	f
attemptMetatable	LuaVM/luavm/vm52.lua	/^local function attemptMetatable(v,n,typ,meta)$/;"	f
b	LuaVMRead/lparser.c	/^- , b, c, d, e = f, g, h, i$/;"	v
b	LuaVMRead/lparser.c	/^- a, b, c, d, e = f, g, h, i 		\/\/ this is a whole "exprstat"$/;"	v
b	LuaVMRead/lparser.c	/^a, b, c, d, e = f, g, h, i$/;"	v
band 	LuaVM/luavm/bytecode/lua53.lua	/^		band = function(a, b) return a&b end,$/;"	f
barrier	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function barrier(spc, epc, tag)$/;"	f
bisect	LuaVM/test/bisect.lua	/^function bisect(f,a,b,fa,fb)$/;"	f
black	LuaVMRead/lgc.c	/^3. If all directly and indirectly referred object of a black object is marked black,$/;"	v
blshift 	LuaVM/luavm/bytecode/lua53.lua	/^		blshift = function(a, b) return a << b end,$/;"	f
bnot 	LuaVM/luavm/bytecode/lua53.lua	/^		bnot = function(a) return ~a end,$/;"	f
bor 	LuaVM/luavm/bytecode/lua53.lua	/^		bor = function(a, b) return a|b end,$/;"	f
brshift 	LuaVM/luavm/bytecode/lua53.lua	/^		brshift = function(a, b) return a >> b end,$/;"	f
bytecode.dump	LuaVM/luavm/bytecode.lua	/^function bytecode.dump(bc)$/;"	f
bytecode.load	LuaVM/luavm/bytecode.lua	/^function bytecode.load(bc)$/;"	f
bytecode.new	LuaVM/luavm/bytecode.lua	/^function bytecode.new(versionCode, header)$/;"	f
bytecode.printDebug 	LuaVM/luavm/bytecode.lua	/^bytecode.printDebug = function(fmt, ...)$/;"	f
bytecode.save	LuaVM/luavm/bytecode.lua	/^function bytecode.save(chunk)$/;"	f
c	LuaVMRead/lparser.c	/^- , b, c, d, e = f, g, h, i$/;"	v
c	LuaVMRead/lparser.c	/^- , c, d, e = f, g, h, i$/;"	v
c	LuaVMRead/lparser.c	/^- a, b, c, d, e = f, g, h, i 		\/\/ this is a whole "exprstat"$/;"	v
c	LuaVMRead/lparser.c	/^a, b, c, d, e = f, g, h, i$/;"	v
c) return string.format	LuaVM/luavm/bytecode/lua51.lua	/^		debug("Types: "..types:gsub(".", function(c) return string.format("%02X ", c:byte()) end))$/;"	f
c) return string.format	LuaVM/luavm/bytecode/lua52.lua	/^		debug("Types: "..types:gsub(".", function(c) return string.format("%02X ", c:byte()) end))$/;"	f
c) return string.format	LuaVM/luavm/bytecode/lua53.lua	/^		debug("Types: "..types:gsub(".", function(c) return string.format("%02X ", c:byte()) end))$/;"	f
c) return string.format	LuaVM/luavm/bytecode/lua53.lua	/^		debug(bc:sub(1,32):gsub(".", function(c) return string.format("%02X ", c:byte()) end))$/;"	f
c.functionPrototypes 	LuaVM/luavm/bytecode.lua	/^			c.functionPrototypes = functionPrototypeList()$/;"	f
c.functionPrototypes 	LuaVM/luavm/bytecode/lua51.lua	/^			c.functionPrototypes = functionPrototypeList()$/;"	f
c.functionPrototypes 	LuaVM/luavm/bytecode/lua52.lua	/^			c.functionPrototypes = functionPrototypeList()$/;"	f
c.functionPrototypes 	LuaVM/luavm/bytecode/lua53.lua	/^			c.functionPrototypes = functionPrototypeList()$/;"	f
cache	LuaVM/test/fib.lua	/^function cache(f)$/;"	f
calculateDestCount	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function calculateDestCount(instr)$/;"	f
canInline	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function canInline(reg, pc, targetpc)$/;"	f
canInlineInner	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function canInlineInner(reg, pc, targetpc)$/;"	f
chunk	LuaVM/luavm/bytecode.lua	/^	local function chunk()$/;"	f
chunk	LuaVM/luavm/bytecode/lua51.lua	/^		local function chunk()$/;"	f
chunk	LuaVM/luavm/bytecode/lua52.lua	/^		local function chunk()$/;"	f
chunk	LuaVM/luavm/bytecode/lua53.lua	/^		local function chunk()$/;"	f
clearExpressions	LuaVM/luavm/dynarec.lua	/^	local function clearExpressions()$/;"	f
closure	LuaVM/vm_accuracy_test/test_closure.lua	/^	local function closure()$/;"	f
closure	LuaVM/vm_accuracy_test/test_closure_return_varargs.lua	/^	local function closure()$/;"	f
closure	LuaVM/vm_accuracy_test/test_varargs.lua	/^	local function closure(...)$/;"	f
closure	LuaVM/vm_accuracy_test/test_varargs_0.lua	/^	local function closure(...)$/;"	f
closure	LuaVM/vm_accuracy_test/test_varargs_with_regular_parameters.lua	/^	local function closure(...)$/;"	f
closureTest	LuaVM/hello.lua	/^local function closureTest()$/;"	f
code	LuaVMRead/lcode.c	/^  instruction into Proto::code, at least not putting the last instruction.$/;"	m	class:Proto	file:
code	LuaVMRead/ltable.c	/^n:	hash code, int$/;"	v
compiler.compile	LuaVM/luavm/compiler.lua	/^function compiler.compile(bcasm)$/;"	f
computeBarrier	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function computeBarrier(pc)$/;"	f
computeRegisterUsageMap	LuaVM/luavm/decompiler.lua	/^local function computeRegisterUsageMap(bc)$/;"	f
constantList	LuaVM/luavm/bytecode.lua	/^		local function constantList()$/;"	f
constantList	LuaVM/luavm/bytecode/lua51.lua	/^			local function constantList()$/;"	f
constantList	LuaVM/luavm/bytecode/lua52.lua	/^			local function constantList()$/;"	f
constantList	LuaVM/luavm/bytecode/lua53.lua	/^			local function constantList()$/;"	f
current	LuaVMRead/lparser.c	/^		to the current "fs", call level 0, a new item is added to FunState::f->upvalues$/;"	v
d	LuaVMRead/lparser.c	/^- , b, c, d, e = f, g, h, i$/;"	v
d	LuaVMRead/lparser.c	/^- , c, d, e = f, g, h, i$/;"	v
d	LuaVMRead/lparser.c	/^- , d, e = f, g, h, i$/;"	v
d	LuaVMRead/lparser.c	/^- a, b, c, d, e = f, g, h, i 		\/\/ this is a whole "exprstat"$/;"	v
d	LuaVMRead/lparser.c	/^a, b, c, d, e = f, g, h, i$/;"	v
debug	LuaVM/luavm/compiler.lua	/^local function debug(...)$/;"	f
debug	LuaVM/luavm/decompiler.lua	/^local function debug(...)$/;"	f
debug	LuaVM/luavm/dynarec.lua	/^local function debug(...)$/;"	f
debug	LuaVM/luavm/vm51.lua	/^local function debug(...)$/;"	f
debug	LuaVM/luavm/vm52.lua	/^local function debug(...)$/;"	f
debugFormatExpression	LuaVM/luavm/decompiler3/decompiler.lua	/^		local function debugFormatExpression(exp)$/;"	f
declblock	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function declblock(s, e, extra)$/;"	f
decodeConditionalJumps	LuaVM/luavm/decompiler/decoder51.lua	/^	local function decodeConditionalJumps(chunk, i)$/;"	f
decodeExpression	LuaVM/luavm/decompiler/decoder51.lua	/^	local function decodeExpression(chunk, i, context, collect)$/;"	f
decodeExpression	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function decodeExpression()$/;"	f
decodeExpressionTargets	LuaVM/luavm/decompiler.lua	/^	local function decodeExpressionTargets(expression)$/;"	f
decodeInstruction	LuaVM/luavm/decompiler.lua	/^local function decodeInstruction(inst)$/;"	f
decodeInstruction	LuaVM/luavm/decompiler/decoder51.lua	/^	local function decodeInstruction(chunk, i, context, collect)$/;"	f
decodeInstruction	LuaVM/luavm/decompiler3/decoder51.lua	/^	local function decodeInstruction(chunk, i)$/;"	f
decodeInstruction	LuaVM/luavm/dynarec.lua	/^	local function decodeInstruction(inst)$/;"	f
decodeInstruction	LuaVM/luavm/vm51.lua	/^		local function decodeInstruction(inst)$/;"	f
decodeInstruction	LuaVM/luavm/vm52.lua	/^		local function decodeInstruction(inst)$/;"	f
decodeStatement	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function decodeStatement(i)$/;"	f
decodeSyntaxBlock	LuaVM/luavm/decompiler.lua	/^	local function decodeSyntaxBlock(block)$/;"	f
decodeSyntaxExpression	LuaVM/luavm/decompiler.lua	/^	local function decodeSyntaxExpression(expression, quoteless)$/;"	f
decodeSyntaxExpressions	LuaVM/luavm/decompiler.lua	/^	local function decodeSyntaxExpressions(expression)$/;"	f
decoder.get	LuaVM/luavm/decompiler/decoder.lua	/^function decoder.get(version)$/;"	f
decoder.get	LuaVM/luavm/decompiler3/decoder.lua	/^function decoder.get(version)$/;"	f
decoder.native	LuaVM/luavm/decompiler/decoder.lua	/^function decoder.native()$/;"	f
decoder.native	LuaVM/luavm/decompiler3/decoder.lua	/^function decoder.native()$/;"	f
decompileBlock	LuaVM/luavm/decompiler.lua	/^	local function decompileBlock(e)$/;"	f
decompileConditionalJumps	LuaVM/luavm/decompiler.lua	/^	local function decompileConditionalJumps(e) --composed of EQ, LT, and LE$/;"	f
decompileExpressions	LuaVM/luavm/decompiler.lua	/^	local function decompileExpressions(s,e)$/;"	f
decompiler.block	LuaVM/luavm/decompiler3/decompiler/block_utils.lua	/^	function decompiler.block(b)$/;"	f
decompiler.blocks	LuaVM/luavm/decompiler3/decompiler/block_utils.lua	/^	function decompiler.blocks(context, startBlock)$/;"	f
decompiler.blocksRecursive	LuaVM/luavm/decompiler3/decompiler/block_utils.lua	/^	function decompiler.blocksRecursive(context, startBlock)$/;"	f
decompiler.blocksUntil	LuaVM/luavm/decompiler3/decompiler/block_utils.lua	/^	function decompiler.blocksUntil(context, stopBlock, startBlock)$/;"	f
decompiler.clearBlockIdentification	LuaVM/luavm/decompiler3/decompiler/block_identifier.lua	/^function decompiler.clearBlockIdentification(context, block)$/;"	f
decompiler.computeBlockMetadata	LuaVM/luavm/decompiler3/decompiler/block_metadata.lua	/^function decompiler.computeBlockMetadata(context)$/;"	f
decompiler.computeRegisterDependenciesForBlock	LuaVM/luavm/decompiler3/decompiler/block_metadata.lua	/^function decompiler.computeRegisterDependenciesForBlock(block)$/;"	f
decompiler.constructSyntax	LuaVM/luavm/decompiler.lua	/^function decompiler.constructSyntax(syntaxrep, way)$/;"	f
decompiler.decompile	LuaVM/luavm/decompiler.lua	/^function decompiler.decompile(bc)$/;"	f
decompiler.decompile	LuaVM/luavm/decompiler3/decompiler.lua	/^function decompiler.decompile(decoded, chunk, opts)$/;"	f
decompiler.deduceBlockScope	LuaVM/luavm/decompiler3/decompiler/block_metadata.lua	/^function decompiler.deduceBlockScope(context, block)$/;"	f
decompiler.dumpBlock	LuaVM/luavm/decompiler3/decompiler/block_utils.lua	/^	function decompiler.dumpBlock(context, block)$/;"	f
decompiler.id	LuaVM/luavm/decompiler3/decompiler.lua	/^function decompiler.id(x)$/;"	f
decompiler.identifyBlock	LuaVM/luavm/decompiler3/decompiler/block_identifier.lua	/^function decompiler.identifyBlock(context, block)$/;"	f
decompiler.identifyBlockPost	LuaVM/luavm/decompiler3/decompiler/block_identifier.lua	/^function decompiler.identifyBlockPost(context, block)$/;"	f
decompiler.identifyBlocks	LuaVM/luavm/decompiler3/decompiler/block_identifier.lua	/^function decompiler.identifyBlocks(context)$/;"	f
decompiler.identifyBlocksPost	LuaVM/luavm/decompiler3/decompiler/block_identifier.lua	/^function decompiler.identifyBlocksPost(context)$/;"	f
decompiler.insertBlock	LuaVM/luavm/decompiler3/decompiler/block_utils.lua	/^	function decompiler.insertBlock(context, block)$/;"	f
decompiler.insertBlockAfter	LuaVM/luavm/decompiler3/decompiler/block_utils.lua	/^	function decompiler.insertBlockAfter(context, block, nextBlock)$/;"	f
decompiler.insertBlockBefore	LuaVM/luavm/decompiler3/decompiler/block_utils.lua	/^	function decompiler.insertBlockBefore(context, block, prevBlock)$/;"	f
decompiler.isTerminator	LuaVM/luavm/decompiler3/decompiler/block_splitter.lua	/^function decompiler.isTerminator(instr)$/;"	f
decompiler.jumpDeopt.tryDeoptConditional	LuaVM/luavm/decompiler3/decompiler/jump_deopt.lua	/^function decompiler.jumpDeopt.tryDeoptConditional(context, conditional)$/;"	f
decompiler.logicalBlockIter	LuaVM/luavm/decompiler3/decompiler/block_utils.lua	/^	function decompiler.logicalBlockIter(context, block)$/;"	f
decompiler.prettyPrint	LuaVM/luavm/decompiler3/pretty.lua	/^	function decompiler.prettyPrint(chunk, print)$/;"	f
decompiler.removeBlock	LuaVM/luavm/decompiler3/decompiler/block_utils.lua	/^	function decompiler.removeBlock(context, block)$/;"	f
decompiler.removeFromParent	LuaVM/luavm/decompiler3/decompiler/block_utils.lua	/^	function decompiler.removeFromParent(context)$/;"	f
decompiler.reverseBlocks	LuaVM/luavm/decompiler3/decompiler/block_utils.lua	/^	function decompiler.reverseBlocks(context, startBlock)$/;"	f
decompiler.reverseBlocksUntil	LuaVM/luavm/decompiler3/decompiler/block_utils.lua	/^	function decompiler.reverseBlocksUntil(context, stopBlock, startBlock)$/;"	f
decompiler.splitBlocks	LuaVM/luavm/decompiler3/decompiler/block_splitter.lua	/^function decompiler.splitBlocks(context)$/;"	f
delay	LuaVM/test/life.lua	/^function delay() -- NOTE: SYSTEM-DEPENDENT, adjust as necessary$/;"	f
deoptJump	LuaVM/luavm/decompiler3/decompiler.lua	/^						local function deoptJump(jumppc, target)$/;"	f
detab	LuaVM/luavm/decompiler.lua	/^	local function detab()$/;"	f
doBlock	LuaVM/luavm/decompiler/analyzer.lua	/^	local function doBlock(irBlock)$/;"	f
doInvert	LuaVM/luavm/decompiler3/decompiler.lua	/^					local function doInvert()$/;"	f
doesSetSomething	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function doesSetSomething(instr)$/;"	f
double	LuaVM/luavm/bytecode.lua	/^	local function double(f)$/;"	f
double	LuaVM/luavm/bytecode.lua	/^	local function double(x)$/;"	f
double	LuaVM/luavm/bytecode/lua51.lua	/^		local function double()$/;"	f
double	LuaVM/luavm/bytecode/lua51.lua	/^		local function double(value)$/;"	f
double	LuaVM/luavm/bytecode/lua52.lua	/^		local function double()$/;"	f
double	LuaVM/luavm/bytecode/lua52.lua	/^		local function double(value)$/;"	f
double	LuaVM/luavm/bytecode/lua53.lua	/^		local function double()$/;"	f
double	LuaVM/luavm/bytecode/lua53.lua	/^		local function double(value)$/;"	f
double 	LuaVM/luavm/bytecode.lua	/^			double = function(bin, index, bigEndian)$/;"	f
double 	LuaVM/luavm/bytecode.lua	/^			double = function(x, bigEndian)$/;"	f
double 	LuaVM/luavm/bytecode/lua53.lua	/^			double = function(bin, index, bigEndian)$/;"	f
double 	LuaVM/luavm/bytecode/lua53.lua	/^			double = function(value, bigEndian)$/;"	f
dumpBlock	LuaVM/luavm/decompiler3/decompiler.lua	/^		local function dumpBlock(block, level)$/;"	f
dumpChunk	LuaVM/luavm/bytecode.lua	/^	local function dumpChunk(bc)$/;"	f
dumpChunk	LuaVM/luavm/bytecode/lua51.lua	/^		local function dumpChunk(chunk)$/;"	f
dumpChunk	LuaVM/luavm/bytecode/lua52.lua	/^		local function dumpChunk(chunk)$/;"	f
dumpChunk	LuaVM/luavm/bytecode/lua53.lua	/^		local function dumpChunk(chunk)$/;"	f
dumpValue	LuaVM/decompile2.lua	/^local function dumpValue(value, indent, skipTables)$/;"	f
dumpValue	LuaVM/luavm/decompiler/pass/inline.lua	/^local function dumpValue(value, indent, skipTables)$/;"	f
dynarec.compile	LuaVM/luavm/dynarec.lua	/^function dynarec.compile(chunk, hookemit)$/;"	f
e	LuaVMRead/lparser.c	/^- , b, c, d, e = f, g, h, i$/;"	v
e	LuaVMRead/lparser.c	/^- , c, d, e = f, g, h, i$/;"	v
e	LuaVMRead/lparser.c	/^- , d, e = f, g, h, i$/;"	v
e	LuaVMRead/lparser.c	/^- , e = f, g, h, i$/;"	v
e	LuaVMRead/lparser.c	/^- a, b, c, d, e = f, g, h, i 		\/\/ this is a whole "exprstat"$/;"	v
e	LuaVMRead/lparser.c	/^a, b, c, d, e = f, g, h, i$/;"	v
emit	LuaVM/luavm/decompiler.lua	/^	local function emit(line)$/;"	f
emit	LuaVM/luavm/decompiler3/decompiler.lua	/^		local function emit(s)$/;"	f
emit	LuaVM/luavm/dynarec.lua	/^	local function emit(line)$/;"	f
emit("local "..string.rep(registerPrefix.."r,", chunk.maxStack):sub(1,-2):gsub("r",function() i 	LuaVM/luavm/dynarec.lua	/^			emit("local "..string.rep(registerPrefix.."r,", chunk.maxStack):sub(1,-2):gsub("r",function() i = i+1 return "r"..(i-1) end))$/;"	f
emit("local "..string.rep(registerPrefix.."r,", syntaxrep.info.locals):sub(1,-2):gsub("r",function() i 	LuaVM/luavm/decompiler.lua	/^		emit("local "..string.rep(registerPrefix.."r,", syntaxrep.info.locals):sub(1,-2):gsub("r",function() i = i+1 return "r"..(i-1) end))$/;"	f
emitPlaceholder	LuaVM/luavm/decompiler3/decompiler.lua	/^		local function emitPlaceholder()$/;"	f
emitf	LuaVM/luavm/dynarec.lua	/^	local function emitf(fmt,...)$/;"	f
emitf("%s	LuaVM/luavm/dynarec.lua	/^			emitf("%s=nil",string.rep(registerPrefix.."r, ",a-c):sub(1,-2):gsub("r",function() i = i+1 return "r"..(i-1) end))$/;"	f
emitf("for %s in %s do",string.rep(registerPrefix.."r, ",tc):sub(1,-2):gsub("r",function() i 	LuaVM/luavm/dynarec.lua	/^			emitf("for %s in %s do",string.rep(registerPrefix.."r, ",tc):sub(1,-2):gsub("r",function() i = i+1 return "r"..(i-1) end),lastExpressions[ta])$/;"	f
encode	LuaVM/luavm/compiler.lua	/^local function encode(ins,a,b,c)$/;"	f
encodeLuaConstant	LuaVM/luavm/decompiler.lua	/^	local function encodeLuaConstant(c, q)$/;"	f
end,__newindex	LuaVM/luavm/dynarec.lua	/^			end,__newindex=function(_,i,v)$/;"	f
end,__newindex	LuaVM/luavm/vm51.lua	/^					end,__newindex=function(_,i,v)$/;"	f
end,__newindex	LuaVM/luavm/vm52.lua	/^					end,__newindex=function(_,i,v)$/;"	f
end,__newindex	LuaVM/patcherexample.lua	/^	end,__newindex=function(_,i,v)$/;"	f
end,{function() i 	LuaVM/vm_accuracy_test/test_repeat_until.lua	/^end,{function() i = i+1 return i end},{{1,2,3,4,5,6,7,8,9,10}}$/;"	f
end,{function() i 	LuaVM/vm_accuracy_test/test_while_loops.lua	/^end,{function() i = i+1 return i end},{{1,2,3,4,5,6,7,8,9}}$/;"	f
evaluator.eval	LuaVM/luavm/evaluator.lua	/^function evaluator.eval(code, name, language, disallowCustomMatchers)$/;"	f
expPart.preprocessedExpdef 	LuaVM/luavm/dynarec.lua	/^				expPart.preprocessedExpdef = expdef:gsub("@(R?K?)([BC])",function(typ, reg)$/;"	f
expression	LuaVMRead/lcode.c	/^Emit the last two instructions for a logical expression, one for the case the yielded$/;"	v	file:
expressionReconstruction	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function expressionReconstruction()$/;"	f
exprmgr.findWriteBefore	LuaVM/luavm/decompiler3/decompiler/expr_manager.lua	/^function exprmgr.findWriteBefore(block, reg, pc)$/;"	f
exprmgr.tryVisitReg	LuaVM/luavm/decompiler3/decompiler/expr_manager.lua	/^function exprmgr.tryVisitReg(block, reg, pc)$/;"	f
exprmgr.visit	LuaVM/luavm/decompiler3/decompiler/expr_manager.lua	/^function exprmgr.visit(block, pc)$/;"	f
exproot	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function exproot(pc)$/;"	f
f	LuaVM/test/bisect.lua	/^function f(x)$/;"	f
fib	LuaVM/test/fib.lua	/^function fib(n)$/;"	f
filter 	LuaVM/test/sieve.lua	/^function filter (p, g)$/;"	f
find	LuaVM/luavm/dynarec.lua	/^	local function find(...)$/;"	f
findAndUnemit	LuaVM/luavm/dynarec.lua	/^	local function findAndUnemit(str)$/;"	f
findExpressionWithDest	LuaVM/luavm/decompiler3/decompiler.lua	/^		local function findExpressionWithDest(pc, dest, minpc)$/;"	f
findRange	LuaVM/luavm/decompiler/analyzer.lua	/^local function findRange(ranges, pc)$/;"	f
findblock	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function findblock(pc, filter)$/;"	f
findtag	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function findtag(pc, type)$/;"	f
float	LuaVM/luavm/bytecode.lua	/^	local function float()$/;"	f
float	LuaVM/luavm/bytecode/lua51.lua	/^		local function float()$/;"	f
float	LuaVM/luavm/bytecode/lua51.lua	/^		local function float(value)$/;"	f
float	LuaVM/luavm/bytecode/lua52.lua	/^		local function float()$/;"	f
float	LuaVM/luavm/bytecode/lua52.lua	/^		local function float(value)$/;"	f
float	LuaVM/luavm/bytecode/lua53.lua	/^		local function float()$/;"	f
float	LuaVM/luavm/bytecode/lua53.lua	/^		local function float(value)$/;"	f
float 	LuaVM/luavm/bytecode.lua	/^			float = function(bin, index, bigEndian)$/;"	f
float 	LuaVM/luavm/bytecode.lua	/^			float = function(value, bigEndian)$/;"	f
float 	LuaVM/luavm/bytecode/lua53.lua	/^			float = function(bin, index, bigEndian)$/;"	f
float 	LuaVM/luavm/bytecode/lua53.lua	/^			float = function(value, bigEndian)$/;"	f
flushBlock	LuaVM/luavm/decompiler3/decompiler/block_splitter.lua	/^	local function flushBlock()$/;"	f
flushEnds	LuaVM/luavm/decompiler3/decompiler.lua	/^		local function flushEnds()$/;"	f
foo	LuaVM/vm_accuracy_test/test_call.lua	/^function foo()$/;"	f
foo	LuaVM/vm_accuracy_test/test_call_parameters.lua	/^function foo(h)$/;"	f
foo	LuaVM/vm_accuracy_test/test_table_varargs_functioncall.lua	/^function foo()$/;"	f
foo	LuaVM/vm_accuracy_test/test_tailcall.lua	/^function foo()$/;"	f
foo	LuaVM/vm_accuracy_test/test_tailcall_parameters.lua	/^function foo(h)$/;"	f
for i	LuaVM/luavm/bytecode.lua	/^		for i=0, bc.functionPrototypes.count-1 do$/;"	f
for i	LuaVM/luavm/bytecode.lua	/^		for i=0, len(chunk.functionPrototypes)-1 do$/;"	f
for i	LuaVM/luavm/decompiler3/decoder51.lua	/^		for i=0, chunk.functionPrototypes.count-1 do$/;"	f
forEachRegister	LuaVM/luavm/decompiler/analyzer.lua	/^local function forEachRegister(explet, func, parent, parentIndex)$/;"	f
forEachRegisterInEachExplet	LuaVM/luavm/decompiler/analyzer.lua	/^local function forEachRegisterInEachExplet(explets, func, toplevelOnly)$/;"	f
formatBlock	LuaVM/decompile2.lua	/^function formatBlock(block)$/;"	f
formatConstant	LuaVM/luavm/dynarec.lua	/^	local function formatConstant(constant)$/;"	f
formatDecoded	LuaVM/decompile2.lua	/^local function formatDecoded(dec)$/;"	f
formatExpressionlet	LuaVM/decompile2.lua	/^local function formatExpressionlet(explet)$/;"	f
formatExpressionlets	LuaVM/decompile2.lua	/^function formatExpressionlets(explets)$/;"	f
formatLocal	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function formatLocal(reg, lvl)$/;"	f
formatParenthesis	LuaVM/luavm/decompiler.lua	/^	local function formatParenthesis(dofmt, exp, ...)$/;"	f
formatUpvalue	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function formatUpvalue(index)$/;"	f
formatter.formatBlock	LuaVM/luavm/decompiler/formatter.lua	/^function formatter.formatBlock(bc, irblock)$/;"	f
formatter.formatExplet	LuaVM/luavm/decompiler/formatter.lua	/^function formatter.formatExplet(bc, explet)$/;"	f
formatter.formatExplets	LuaVM/luavm/decompiler/formatter.lua	/^function formatter.formatExplets(bc, explets)$/;"	f
formatter.formatExpression	LuaVM/luavm/decompiler/formatter.lua	/^function formatter.formatExpression(bc, irexp)$/;"	f
formatter.formatFunction	LuaVM/luavm/decompiler/formatter.lua	/^function formatter.formatFunction(bc, irblock, name)$/;"	f
formatter.formatValue	LuaVM/luavm/decompiler/formatter.lua	/^function formatter.formatValue(bc, value)$/;"	f
func	LuaVM/decompile.lua	/^local function func()$/;"	f
function() opscalled 	LuaVM/test.lua	/^	function() opscalled = opscalled+1 if opscalled > 480000 then error("Timeout.",0) end end)$/;"	f
functionPrototypeList	LuaVM/luavm/bytecode.lua	/^		local function functionPrototypeList()$/;"	f
functionPrototypeList	LuaVM/luavm/bytecode/lua51.lua	/^			local function functionPrototypeList()$/;"	f
functionPrototypeList	LuaVM/luavm/bytecode/lua52.lua	/^			local function functionPrototypeList()$/;"	f
functionPrototypeList	LuaVM/luavm/bytecode/lua53.lua	/^			local function functionPrototypeList()$/;"	f
functionPrototypes 	LuaVM/luavm/bytecode.lua	/^			functionPrototypes = {},$/;"	f
functionPrototypes 	LuaVM/luavm/bytecode/lua51.lua	/^			functionPrototypes = {count=0},$/;"	f
functionPrototypes 	LuaVM/luavm/bytecode/lua53.lua	/^			functionPrototypes = {count=0},$/;"	f
functionPrototypes.count 	LuaVM/luavm/bytecode/lua51.lua	/^				functionPrototypes.count = count$/;"	f
functionPrototypes.count 	LuaVM/luavm/bytecode/lua52.lua	/^				functionPrototypes.count = count$/;"	f
functionPrototypes.count 	LuaVM/luavm/bytecode/lua53.lua	/^				functionPrototypes.count = c$/;"	f
functionPrototypes[i-1] 	LuaVM/luavm/bytecode.lua	/^				functionPrototypes[i-1] = chunk()$/;"	f
functionPrototypes[i-1] 	LuaVM/luavm/bytecode/lua51.lua	/^					functionPrototypes[i-1] = chunk()$/;"	f
functionPrototypes[i-1] 	LuaVM/luavm/bytecode/lua52.lua	/^					functionPrototypes[i-1] = chunk()$/;"	f
functionPrototypes[i-1] 	LuaVM/luavm/bytecode/lua53.lua	/^					functionPrototypes[i-1] = chunk()$/;"	f
g	LuaVMRead/lparser.c	/^- , b, c, d, e = f, g, h, i$/;"	v
g	LuaVMRead/lparser.c	/^- , c, d, e = f, g, h, i$/;"	v
g	LuaVMRead/lparser.c	/^- , d, e = f, g, h, i$/;"	v
g	LuaVMRead/lparser.c	/^- , e = f, g, h, i$/;"	v
g	LuaVMRead/lparser.c	/^- = f, g, h, i$/;"	v
g	LuaVMRead/lparser.c	/^- a, b, c, d, e = f, g, h, i 		\/\/ this is a whole "exprstat"$/;"	v
g	LuaVMRead/lparser.c	/^- f, g, h, i 						\/\/ this is the tailing "explist", must contain the "="$/;"	v
g	LuaVMRead/lparser.c	/^a, b, c, d, e = f, g, h, i$/;"	v
gen 	LuaVM/test/sieve.lua	/^function gen (n)$/;"	f
generateChunk	LuaVM/luavm/dynarec.lua	/^	function generateChunk(chunk,uv)$/;"	f
generateExpression	LuaVM/luavm/dynarec.lua	/^	local function generateExpression(s,e)$/;"	f
generateInstruction	LuaVM/luavm/dynarec.lua	/^	local function generateInstruction(o,a,b,c)$/;"	f
generatefib 	LuaVM/test/fibfor.lua	/^function generatefib (n)$/;"	f
getA	LuaVM/vm_accuracy_test/test_closure_upvalue_close.lua	/^		function getA() return a end$/;"	f
getAx	LuaVM/luavm/vm52.lua	/^		local function getAx(inst)$/;"	f
getB	LuaVM/vm_accuracy_test/test_closure_upvalue_close.lua	/^				function getB() return i end$/;"	f
getC 	LuaVM/vm_accuracy_test/test_closure_upvalue_close.lua	/^	getC = (function(c) return function() return c end end)(123)$/;"	f
getContext	LuaVM/luavm/evaluator.lua	/^		local function getContext()$/;"	f
getFirstUseBefore	LuaVM/luavm/dynarec.lua	/^		local function getFirstUseBefore(r,pc)$/;"	f
getJumpTarget	LuaVM/luavm/decompiler3/decompiler/block_identifier.lua	/^local function getJumpTarget(instr, pc)$/;"	f
getLastExpression	LuaVM/luavm/decompiler.lua	/^	local function getLastExpression(r, norem, pc)$/;"	f
getLastUseIn	LuaVM/luavm/dynarec.lua	/^		local function getLastUseIn(r,s,e)$/;"	f
getTest	LuaVM/vm_accuracy_test_common.lua	/^function getTest(name)$/;"	f
getregusage	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function getregusage(reg)$/;"	f
getsBx	LuaVM/luavm/decompiler.lua	/^local function getsBx(inst)$/;"	f
getsBx	LuaVM/luavm/dynarec.lua	/^	local function getsBx(inst)$/;"	f
getsBx	LuaVM/luavm/vm51.lua	/^		local function getsBx(inst)$/;"	f
getsBx	LuaVM/luavm/vm52.lua	/^		local function getsBx(inst)$/;"	f
grab_byte	LuaVM/luavm/bytecode.lua	/^	local function grab_byte(v)$/;"	f
h	LuaVMRead/lparser.c	/^- , b, c, d, e = f, g, h, i$/;"	v
h	LuaVMRead/lparser.c	/^- , c, d, e = f, g, h, i$/;"	v
h	LuaVMRead/lparser.c	/^- , d, e = f, g, h, i$/;"	v
h	LuaVMRead/lparser.c	/^- , e = f, g, h, i$/;"	v
h	LuaVMRead/lparser.c	/^- = f, g, h, i$/;"	v
h	LuaVMRead/lparser.c	/^- a, b, c, d, e = f, g, h, i 		\/\/ this is a whole "exprstat"$/;"	v
h	LuaVMRead/lparser.c	/^- f, g, h, i 						\/\/ this is the tailing "explist", must contain the "="$/;"	v
h	LuaVMRead/lparser.c	/^a, b, c, d, e = f, g, h, i$/;"	v
handleBlockAlias	LuaVM/luavm/decompiler3/decompiler/block_identifier.lua	/^local function handleBlockAlias(block)$/;"	f
handleBlockComplex	LuaVM/luavm/decompiler3/decompiler/block_identifier.lua	/^local function handleBlockComplex(block)$/;"	f
handleBlockExit	LuaVM/luavm/decompiler3/decompiler/block_identifier.lua	/^local function handleBlockExit(block)$/;"	f
handleBlockLoop	LuaVM/luavm/decompiler3/decompiler/block_identifier.lua	/^local function handleBlockLoop(block)$/;"	f
handleCondOp	LuaVM/luavm/decompiler3/decompiler.lua	/^						local function handleCondOp()$/;"	f
handleDest	LuaVM/luavm/decompiler/analyzer.lua	/^	local function handleDest(reg, _, _, toplevel)$/;"	f
handleSource	LuaVM/luavm/decompiler/analyzer.lua	/^	local function handleSource(reg)$/;"	f
handleSource	LuaVM/luavm/decompiler/pass/inline.lua	/^		local function handleSource(reg, t, i)$/;"	f
handleSource	LuaVM/luavm/decompiler/pass/table_inline.lua	/^		local function handleSource(reg, t, i)$/;"	f
hook	LuaVM/test/trace-calls.lua	/^local function hook(event)$/;"	f
identifyStructures	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function identifyStructures()$/;"	f
if not (t 	LuaVM/luavm/vm51.lua	/^		if not (t == "function" or (t == "table" and getmetatable(v) and type(getmetatable(v).__call) == "function")) then$/;"	f
if not (t 	LuaVM/luavm/vm51.lua	/^		if not (t == typ or (t == "table" and getmetatable(v) and type(getmetatable(v)[meta]) == "function")) then$/;"	f
if not (t 	LuaVM/luavm/vm52.lua	/^		if not (t == "function" or (t == "table" and getmetatable(v) and type(getmetatable(v).__call) == "function")) then$/;"	f
if not (t 	LuaVM/luavm/vm52.lua	/^		if not (t == typ or (t == "table" and getmetatable(v) and type(getmetatable(v)[meta]) == "function")) then$/;"	f
if type(expdef) 	LuaVM/luavm/dynarec.lua	/^			if type(expdef) == "function" then$/;"	f
impl.decode	LuaVM/luavm/bytecode/lua51.lua	/^	function impl.decode(inst)$/;"	f
impl.decode	LuaVM/luavm/bytecode/lua52.lua	/^	function impl.decode(inst)$/;"	f
impl.decode	LuaVM/luavm/bytecode/lua53.lua	/^	function impl.decode(inst)$/;"	f
impl.encode	LuaVM/luavm/bytecode/lua51.lua	/^	function impl.encode(inst,a,b,c)$/;"	f
impl.encode	LuaVM/luavm/bytecode/lua52.lua	/^	function impl.encode(inst,a,b,c)$/;"	f
impl.encode	LuaVM/luavm/bytecode/lua53.lua	/^	function impl.encode(inst,a,b,c)$/;"	f
impl.load	LuaVM/luavm/bytecode/lua51.lua	/^	function impl.load(bc)$/;"	f
impl.load	LuaVM/luavm/bytecode/lua52.lua	/^	function impl.load(bc)$/;"	f
impl.load	LuaVM/luavm/bytecode/lua53.lua	/^	function impl.load(bc)$/;"	f
impl.loadHeader	LuaVM/luavm/bytecode/lua51.lua	/^	function impl.loadHeader(bc)$/;"	f
impl.loadHeader	LuaVM/luavm/bytecode/lua52.lua	/^	function impl.loadHeader(bc)$/;"	f
impl.loadHeader	LuaVM/luavm/bytecode/lua53.lua	/^	function impl.loadHeader(bc)$/;"	f
impl.new	LuaVM/luavm/bytecode/lua51.lua	/^	function impl.new(header)$/;"	f
impl.new	LuaVM/luavm/bytecode/lua53.lua	/^	function impl.new(header)$/;"	f
impl.patcher.addConstant	LuaVM/luavm/bytecode/lua51.lua	/^	function impl.patcher.addConstant(bc, const)$/;"	f
impl.patcher.find	LuaVM/luavm/bytecode/lua51.lua	/^	function impl.patcher.find(bc, pc, o)$/;"	f
impl.patcher.insert	LuaVM/luavm/bytecode/lua51.lua	/^	function impl.patcher.insert(bc, pc, inst)$/;"	f
impl.patcher.replace	LuaVM/luavm/bytecode/lua51.lua	/^	function impl.patcher.replace(bc, pc, inst)$/;"	f
impl.save	LuaVM/luavm/bytecode/lua51.lua	/^	function impl.save(chunk)$/;"	f
impl.save	LuaVM/luavm/bytecode/lua52.lua	/^	function impl.save(chunk)$/;"	f
impl.save	LuaVM/luavm/bytecode/lua53.lua	/^	function impl.save(chunk)$/;"	f
increment	LuaVM/vm_accuracy_test/test_closure_upvalues.lua	/^	local function increment()$/;"	f
inlineBlock	LuaVM/luavm/decompiler/pass/inline.lua	/^		local function inlineBlock(irBlock)$/;"	f
inlineBlock	LuaVM/luavm/decompiler/pass/table_inline.lua	/^		local function inlineBlock(irBlock)$/;"	f
instr.getRegisterDetails	LuaVM/luavm/decompiler3/decompiler/instr_utils.lua	/^	function instr.getRegisterDetails(instr)$/;"	f
instruction	LuaVMRead/lcode.c	/^3. Otherwise, change the instruction to a "TEST" instruction, set the old$/;"	v	file:
instructionBase	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function instructionBase(instr)$/;"	f
instructionList	LuaVM/luavm/bytecode.lua	/^		local function instructionList()$/;"	f
instructionList	LuaVM/luavm/bytecode/lua51.lua	/^			local function instructionList()$/;"	f
instructionList	LuaVM/luavm/bytecode/lua52.lua	/^			local function instructionList()$/;"	f
instructionList	LuaVM/luavm/bytecode/lua53.lua	/^			local function instructionList()$/;"	f
instructions	LuaVMRead/lcode.c	/^Add instruction at index "l2" to a chain of jump instructions, which is called a patch-list.$/;"	v	file:
invertCondOp	LuaVM/luavm/decompiler3/decompiler.lua	/^						local function invertCondOp(co)$/;"	f
invertCondOp	LuaVM/luavm/decompiler3/decompiler.lua	/^					local function invertCondOp(co)$/;"	f
isBlockConditional	LuaVM/luavm/decompiler3/decompiler/block_identifier.lua	/^local function isBlockConditional(block)$/;"	f
isBlockSimple	LuaVM/luavm/decompiler3/decompiler/block_identifier.lua	/^local function isBlockSimple(block)$/;"	f
isConditionalJump	LuaVM/luavm/decompiler.lua	/^	local function isConditionalJump(op)$/;"	f
isExpressionOp	LuaVM/luavm/decompiler.lua	/^	local function isExpressionOp(op,a,b,c)$/;"	f
isIgnored	LuaVM/luavm/decompiler3/decompiler/block_metadata.lua	/^	local function isIgnored(reg, i)$/;"	f
isRegUsedAfter	LuaVM/luavm/dynarec.lua	/^		local function isRegUsedAfter(r,pc)$/;"	f
isreg	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function isreg(reg)$/;"	f
istagged	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function istagged(pc, type)$/;"	f
iterateTests	LuaVM/vm_accuracy_test_common.lua	/^function iterateTests()$/;"	f
keywords 	LuaVM/luavm/evaluator.lua	/^	keywords = {"do","end","function","while","repeat","until","if","then","elseif","then","else","for","in","local","return","break",$/;"	f
lbi:addPending	LuaVM/luavm/decompiler3/decompiler/block_utils.lua	/^	function lbi:addPending(block, root)$/;"	f
lbi:addRoot	LuaVM/luavm/decompiler3/decompiler/block_utils.lua	/^	function lbi:addRoot(root)$/;"	f
lbi:iter	LuaVM/luavm/decompiler3/decompiler/block_utils.lua	/^	function lbi:iter()$/;"	f
len	LuaVM/luavm/bytecode.lua	/^	local function len(t)$/;"	f
len	LuaVM/luavm/bytecode/lua51.lua	/^		local function len(t)$/;"	f
len	LuaVM/luavm/bytecode/lua52.lua	/^		local function len(t)$/;"	f
len	LuaVM/luavm/bytecode/lua53.lua	/^		local function len(t)$/;"	f
level	LuaVMRead/lparser.c	/^		to the current "fs", call level 0, a new item is added to FunState::f->upvalues$/;"	v
loadstring 	LuaVM/run_vm.lua	/^	loadstring = function(str,name)$/;"	f
local a 	LuaVM/test/factorial.lua	/^      local a = function (f) return f(f) end$/;"	f
local bc 	LuaVM/patchertest.lua	/^local bc = bytecode.load(string.dump(function()$/;"	f
local buffer 	LuaVM/luavm/decompiler/formatter.lua	/^	local buffer = {"function", name and " "..name or "", "("}$/;"	f
local chunk 	LuaVM/decompile3.lua	/^local chunk = bc.load(dump) --.functionPrototypes[1]$/;"	f
local dec, e 	LuaVM/luavm/decompiler3/decoder51.lua	/^			local dec, e = target.decodeChunk(chunk.functionPrototypes[i])$/;"	f
local dump 	LuaVM/test.lua	/^local dump = string.dump(function(...)$/;"	f
local f	LuaVM/test/env.lua	/^local f=function (t,i) return os.getenv(i) end$/;"	f
local f	LuaVM/test/readonly.lua	/^local f=function (t,i) error("cannot redefine global variable `"..i.."'",2) end$/;"	f
local functionPrototypes 	LuaVM/luavm/bytecode.lua	/^			local functionPrototypes = {}$/;"	f
local functionPrototypes 	LuaVM/luavm/bytecode/lua51.lua	/^				local functionPrototypes = {}$/;"	f
local functionPrototypes 	LuaVM/luavm/bytecode/lua52.lua	/^				local functionPrototypes = {}$/;"	f
local functionPrototypes 	LuaVM/luavm/bytecode/lua53.lua	/^				local functionPrototypes = {}$/;"	f
local globals 	LuaVM/patcherexample.lua	/^	local globals = setmetatable({},{__index=function(_,i)$/;"	f
local lenFunctionPrototypes 	LuaVM/luavm/bytecode/lua51.lua	/^			local lenFunctionPrototypes = chunk.functionPrototypes.count or len(chunk.functionPrototypes)$/;"	f
local lenFunctionPrototypes 	LuaVM/luavm/bytecode/lua52.lua	/^			local lenFunctionPrototypes = len(chunk.functionPrototypes)$/;"	f
local lenFunctionPrototypes 	LuaVM/luavm/bytecode/lua53.lua	/^			local lenFunctionPrototypes = chunk.functionPrototypes.count or len(chunk.functionPrototypes)$/;"	f
local log	LuaVM/test/trace-globals.lua	/^ local log=function (name,old,new)$/;"	f
local nupvals 	LuaVM/luavm/decompiler3/decoder51.lua	/^			local nupvals = chunk.functionPrototypes[b].nupval$/;"	f
local pack 	LuaVM/luavm/vm51.lua	/^local pack = table.pack or function(...) return {n=select("#",...),...} end$/;"	f
local pack 	LuaVM/luavm/vm52.lua	/^local pack = table.pack or function(...) return {n=select("#",...),...} end$/;"	f
local proto 	LuaVM/luavm/dynarec.lua	/^			local proto = chunk.functionPrototypes[b]$/;"	f
local proto 	LuaVM/luavm/vm51.lua	/^					local proto = chunk.functionPrototypes[b]$/;"	f
local proto 	LuaVM/luavm/vm52.lua	/^					local proto = chunk.functionPrototypes[b]$/;"	f
local ret 	LuaVM/luavm/vm51.lua	/^		local ret = pack(pcall(function()$/;"	f
local ret 	LuaVM/luavm/vm52.lua	/^		local ret = pack(pcall(function()$/;"	f
local s, source 	LuaVM/luavm/decompiler3/decompiler.lua	/^				local s, source = pcall(decompiler.decompile, decoded.protos[expr.proto], chunk.functionPrototypes[expr.proto], copyopts)$/;"	f
local sbc 	LuaVM/dynarectest.lua	/^local sbc = string.dump(function(...)$/;"	f
local set	LuaVM/test/trace-globals.lua	/^ local set=function (t,name,value)$/;"	f
local supportedTypes 	LuaVM/luavm/bytecode.lua	/^local supportedTypes = string.dump(function() end):sub(7,12)$/;"	f
local templatedump 	LuaVM/luavm/bytecode.lua	/^local templatedump = string.dump(function() end)$/;"	f
local testbc 	LuaVM/five_point_two_test.lua	/^local testbc = string.dump(function() print "Hello" end)$/;"	f
local testbc 	LuaVM/test.lua	/^local testbc = string.dump(function() return "Hello" end)$/;"	f
local tostring	LuaVM/test/trace-globals.lua	/^ local tostring=function(a)$/;"	f
local upvalues 	LuaVM/luavm/dynarec.lua	/^			local upvalues = setmetatable({},{__index=function(_,i)$/;"	f
local upvalues 	LuaVM/luavm/vm51.lua	/^					local upvalues = setmetatable({},{__index=function(_,i)$/;"	f
local upvalues 	LuaVM/luavm/vm52.lua	/^					local upvalues = setmetatable({},{__index=function(_,i)$/;"	f
localList	LuaVM/luavm/bytecode.lua	/^		local function localList()$/;"	f
localList	LuaVM/luavm/bytecode/lua51.lua	/^			local function localList()$/;"	f
localList	LuaVM/luavm/bytecode/lua52.lua	/^			local function localList()$/;"	f
localList	LuaVM/luavm/bytecode/lua53.lua	/^			local function localList()$/;"	f
lookForJump	LuaVM/luavm/dynarec.lua	/^	local function lookForJump(to,af)$/;"	f
lookForNextJump	LuaVM/luavm/dynarec.lua	/^	local function lookForNextJump(to,at)$/;"	f
loopFilter	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function loopFilter(b)$/;"	f
makeRandomString	LuaVM/luavm/decompiler.lua	/^local function makeRandomString()$/;"	f
makeRandomString	LuaVM/luavm/dynarec.lua	/^	local function makeRandomString()$/;"	f
makeRange	LuaVM/luavm/decompiler/analyzer.lua	/^	local function makeRange(s, e, set)$/;"	f
marked	LuaVMRead/lgc.h	/^GCObject::marked$/;"	m	class:GCObject
match	LuaVM/vm_accuracy_test_common.lua	/^function match(currentRet,ret)$/;"	f
matchComment	LuaVM/luavm/compiler.lua	/^	local function matchComment()$/;"	f
matchConst	LuaVM/luavm/compiler.lua	/^	local function matchConst()$/;"	f
matchIdentifier	LuaVM/luavm/compiler.lua	/^	local function matchIdentifier()$/;"	f
matchInstruction	LuaVM/luavm/compiler.lua	/^	local function matchInstruction()$/;"	f
matchNumber	LuaVM/luavm/compiler.lua	/^	local function matchNumber()$/;"	f
matchSpace	LuaVM/luavm/compiler.lua	/^	local function matchSpace()$/;"	f
matchString	LuaVM/luavm/compiler.lua	/^	local function matchString()$/;"	f
matchValue	LuaVM/luavm/compiler.lua	/^	local function matchValue()$/;"	f
nextInst	LuaVM/luavm/dynarec.lua	/^	local function nextInst(p)$/;"	f
onRead	LuaVM/luavm/decompiler3/decompiler/block_metadata.lua	/^	local function onRead(reg)$/;"	f
onWrite	LuaVM/luavm/decompiler3/decompiler/block_metadata.lua	/^	local function onWrite(reg)$/;"	f
out	LuaVMRead/lcode.c	/^   spat out, no instruction patched. The pre-determined reg is put into "e->u.info".$/;"	v
parenthesis	LuaVM/luavm/decompiler.lua	/^	local function parenthesis(e)$/;"	f
pass	LuaVM/test.lua	/^function pass(...)$/;"	f
patchJumpsAndAdd	LuaVM/luavm/bytecode/lua51.lua	/^	local function patchJumpsAndAdd(bc, pc, op)$/;"	f
peek	LuaVM/luavm/decompiler.lua	/^	local function peek(n)$/;"	f
peek	LuaVM/luavm/dynarec.lua	/^	local function peek(...)$/;"	f
popBlockLimit	LuaVM/luavm/dynarec.lua	/^	local function popBlockLimit()$/;"	f
popIgnore	LuaVM/luavm/decompiler3/decompiler/block_metadata.lua	/^	local function popIgnore()$/;"	f
printValue	LuaVM/decompile2.lua	/^local function printValue(value)$/;"	f
printf	LuaVM/test/printf.lua	/^function printf(...)$/;"	f
processExpPart	LuaVM/luavm/dynarec.lua	/^		local function processExpPart(expPart)$/;"	f
pushBlockLimit	LuaVM/luavm/dynarec.lua	/^	local function pushBlockLimit(pc)$/;"	f
pushIgnore	LuaVM/luavm/decompiler3/decompiler/block_metadata.lua	/^	local function pushIgnore()$/;"	f
qsort	LuaVM/test/sort.lua	/^function qsort(x,l,u,f)$/;"	f
read	LuaVM/luavm/decompiler3/decompiler/instr_utils.lua	/^			local function read(reg)$/;"	f
readVA	LuaVM/luavm/decompiler3/decompiler/instr_utils.lua	/^			local function readVA(base)$/;"	f
registerGetsAfter	LuaVM/luavm/decompiler.lua	/^	local function registerGetsAfter(reg, pc, epc, notpc)$/;"	f
regrangeread	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function regrangeread(s, e, pc)$/;"	f
regrangewrite	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function regrangewrite(s, e, pc)$/;"	f
regread	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function regread(reg, pc)$/;"	f
regwrite	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function regwrite(reg, pc)$/;"	f
remove	LuaVM/luavm/decompiler3/decompiler.lua	/^		local function remove(i)$/;"	f
removeObject	LuaVM/luavm/decompiler.lua	/^local function removeObject(tab, obj)$/;"	f
renderExpression	LuaVM/luavm/decompiler3/decompiler.lua	/^		local function renderExpression(expr, raw)$/;"	f
renderSource	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function renderSource()$/;"	f
renderStandaloneExpression	LuaVM/luavm/decompiler3/decompiler.lua	/^		local function renderStandaloneExpression(expr, setCount)$/;"	f
renderStatement	LuaVM/luavm/decompiler3/decompiler.lua	/^		local function renderStatement(stat)$/;"	f
replace	LuaVM/luavm/decompiler3/decompiler.lua	/^		local function replace(i, s)$/;"	f
require 	LuaVM/run_vm.lua	/^	require = function(name)$/;"	f
ret_true	LuaVM/dynarectest.lua	/^function ret_true()$/;"	f
rototypes[b], nil, nil, context, function	LuaVM/luavm/decompiler/decoder51.lua	/^			target.decode(chunk.functionPrototypes[b], nil, nil, context, function(v)$/;"	f
scanBlock	LuaVM/luavm/decompiler/pass/table_inline.lua	/^		local function scanBlock(irBlock)$/;"	f
selectionsort	LuaVM/test/sort.lua	/^function selectionsort(x,n,f)$/;"	f
selfcall:call	LuaVM/vm_accuracy_test/test_call_self.lua	/^function selfcall:call()$/;"	f
selfcall:call	LuaVM/vm_accuracy_test/test_call_self_varargs.lua	/^function selfcall:call(...)$/;"	f
set	LuaVM/luavm/dynarec.lua	/^		local function set(r)$/;"	f
set	LuaVM/vm_accuracy_test/test_closure_upvalues.lua	/^	local function set()$/;"	f
set	LuaVMRead/lgc.c	/^If the "refering" object is a table, then a backward barrier is usually set, making$/;"	v
set	LuaVMRead/lgc.c	/^Otherwise, a forward barrier is set, mark the refered object as "black" (but possibly$/;"	v
show	LuaVM/test/sort.lua	/^function show(m,x)$/;"	f
solve	LuaVM/test/bisect.lua	/^function solve(f,a,b)$/;"	f
sourceLineList	LuaVM/luavm/bytecode.lua	/^		local function sourceLineList()$/;"	f
sourceLineList	LuaVM/luavm/bytecode/lua51.lua	/^			local function sourceLineList()$/;"	f
sourceLineList	LuaVM/luavm/bytecode/lua52.lua	/^			local function sourceLineList()$/;"	f
sourceLineList	LuaVM/luavm/bytecode/lua53.lua	/^			local function sourceLineList()$/;"	f
stalkUpvalues	LuaVM/patcherexample.lua	/^function stalkUpvalues(func)$/;"	f
statementReconstruction	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function statementReconstruction()$/;"	f
subrequire	LuaVM/luavm/bytecode.lua	/^local function subrequire(sub, ...)$/;"	f
t	LuaVM/test.lua	/^	local function t()$/;"	f
tab	LuaVM/luavm/decompiler.lua	/^	local function tab()$/;"	f
tag	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function tag(pc, t)$/;"	f
tagrange	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function tagrange(s, e, t)$/;"	f
target.decode	LuaVM/luavm/decompiler/decoder51.lua	/^	function target.decode(chunk, i, j, context, collect)$/;"	f
target.decodeChunk	LuaVM/luavm/decompiler3/decoder51.lua	/^	function target.decodeChunk(chunk)$/;"	f
test	LuaVM/test/factorial.lua	/^function test(x)$/;"	f
test	LuaVM/test/fib.lua	/^function test(s,f)$/;"	f
testFunc	LuaVM/decompile2.lua	/^local function testFunc()$/;"	f
testFunc	LuaVM/decompile3.lua	/^local function testFunc()$/;"	f
testFunc1	LuaVM/decompile3.lua	/^local function testFunc1()$/;"	f
testdest	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function testdest(instr, reg)$/;"	f
testsorts	LuaVM/test/sort.lua	/^function testsorts(x)$/;"	f
testsrc	LuaVM/luavm/decompiler3/decompiler.lua	/^	local function testsrc(instr, reg)$/;"	f
tokenise1	LuaVM/luavm/evaluator.lua	/^		local function tokenise1()$/;"	f
tryAddHookAt	LuaVM/patcherhook.lua	/^	local function tryAddHookAt(pc)$/;"	f
type 	LuaVM/luavm/decompiler3/decompiler.lua	/^								type = "function_argument",$/;"	f
type 	LuaVM/luavm/decompiler3/decompiler.lua	/^						type = "call_function",$/;"	f
u1	LuaVM/luavm/bytecode.lua	/^	local function u1()$/;"	f
u1	LuaVM/luavm/bytecode/lua51.lua	/^		local function u1()$/;"	f
u1	LuaVM/luavm/bytecode/lua51.lua	/^		local function u1(value)$/;"	f
u1	LuaVM/luavm/bytecode/lua52.lua	/^		local function u1()$/;"	f
u1	LuaVM/luavm/bytecode/lua52.lua	/^		local function u1(value)$/;"	f
u1	LuaVM/luavm/bytecode/lua53.lua	/^		local function u1()$/;"	f
u1	LuaVM/luavm/bytecode/lua53.lua	/^		local function u1(value)$/;"	f
u1 	LuaVM/luavm/bytecode.lua	/^			u1 = function(bin, index, bigEndian)$/;"	f
u1 	LuaVM/luavm/bytecode.lua	/^			u1 = function(value, bigEndian)$/;"	f
u1 	LuaVM/luavm/bytecode/lua53.lua	/^			u1 = function(bin, index, bigEndian)$/;"	f
u1 	LuaVM/luavm/bytecode/lua53.lua	/^			u1 = function(value, bigEndian)$/;"	f
u2	LuaVM/luavm/bytecode.lua	/^	local function u2()$/;"	f
u2	LuaVM/luavm/bytecode/lua51.lua	/^		local function u2()$/;"	f
u2	LuaVM/luavm/bytecode/lua51.lua	/^		local function u2(value)$/;"	f
u2	LuaVM/luavm/bytecode/lua52.lua	/^		local function u2()$/;"	f
u2	LuaVM/luavm/bytecode/lua52.lua	/^		local function u2(value)$/;"	f
u2	LuaVM/luavm/bytecode/lua53.lua	/^		local function u2()$/;"	f
u2	LuaVM/luavm/bytecode/lua53.lua	/^		local function u2(value)$/;"	f
u2 	LuaVM/luavm/bytecode.lua	/^			u2 = function(bin, index, bigEndian)$/;"	f
u2 	LuaVM/luavm/bytecode.lua	/^			u2 = function(value, bigEndian)$/;"	f
u2 	LuaVM/luavm/bytecode/lua53.lua	/^			u2 = function(bin, index, bigEndian)$/;"	f
u2 	LuaVM/luavm/bytecode/lua53.lua	/^			u2 = function(value, bigEndian)$/;"	f
u4	LuaVM/luavm/bytecode.lua	/^	local function u4()$/;"	f
u4	LuaVM/luavm/bytecode/lua51.lua	/^		local function u4()$/;"	f
u4	LuaVM/luavm/bytecode/lua51.lua	/^		local function u4(value)$/;"	f
u4	LuaVM/luavm/bytecode/lua52.lua	/^		local function u4()$/;"	f
u4	LuaVM/luavm/bytecode/lua52.lua	/^		local function u4(value)$/;"	f
u4	LuaVM/luavm/bytecode/lua53.lua	/^		local function u4()$/;"	f
u4	LuaVM/luavm/bytecode/lua53.lua	/^		local function u4(value)$/;"	f
u4 	LuaVM/luavm/bytecode.lua	/^			u4 = function(bin, index, bigEndian)$/;"	f
u4 	LuaVM/luavm/bytecode.lua	/^			u4 = function(value, bigEndian)$/;"	f
u4 	LuaVM/luavm/bytecode/lua53.lua	/^			u4 = function(bin, index, bigEndian)$/;"	f
u4 	LuaVM/luavm/bytecode/lua53.lua	/^			u4 = function(value, bigEndian)$/;"	f
u8	LuaVM/luavm/bytecode.lua	/^	local function u8()$/;"	f
u8	LuaVM/luavm/bytecode/lua51.lua	/^		local function u8()$/;"	f
u8	LuaVM/luavm/bytecode/lua51.lua	/^		local function u8(value)$/;"	f
u8	LuaVM/luavm/bytecode/lua52.lua	/^		local function u8()$/;"	f
u8	LuaVM/luavm/bytecode/lua52.lua	/^		local function u8(value)$/;"	f
u8	LuaVM/luavm/bytecode/lua53.lua	/^		local function u8()$/;"	f
u8	LuaVM/luavm/bytecode/lua53.lua	/^		local function u8(value)$/;"	f
u8 	LuaVM/luavm/bytecode.lua	/^			u8 = function(bin, index, bigEndian) --CAUTION: This may output math.huge for large 64bit numbers!$/;"	f
u8 	LuaVM/luavm/bytecode.lua	/^			u8 = function(value, bigEndian) --CAUTION: This may not output correctly!$/;"	f
u8 	LuaVM/luavm/bytecode/lua53.lua	/^			u8 = function(bin, index, bigEndian)$/;"	f
u8 	LuaVM/luavm/bytecode/lua53.lua	/^			u8 = function(value, bigEndian)$/;"	f
ub	LuaVM/luavm/bytecode.lua	/^	local function ub(n)$/;"	f
ub	LuaVM/luavm/bytecode/lua51.lua	/^		local function ub(n)$/;"	f
ub	LuaVM/luavm/bytecode/lua52.lua	/^		local function ub(n)$/;"	f
ub	LuaVM/luavm/bytecode/lua53.lua	/^		local function ub(n)$/;"	f
unemit	LuaVM/luavm/dynarec.lua	/^	local function unemit(pc)$/;"	f
unemitRange	LuaVM/luavm/dynarec.lua	/^	local function unemitRange(s,e)$/;"	f
upvalueDefinitionList	LuaVM/luavm/bytecode.lua	/^			local function upvalueDefinitionList()$/;"	f
upvalueDefinitionList	LuaVM/luavm/bytecode/lua52.lua	/^			local function upvalueDefinitionList()$/;"	f
upvalueDefinitionList	LuaVM/luavm/bytecode/lua53.lua	/^			local function upvalueDefinitionList()$/;"	f
upvalueList	LuaVM/luavm/bytecode.lua	/^		local function upvalueList()$/;"	f
upvalueList	LuaVM/luavm/bytecode/lua51.lua	/^			local function upvalueList()$/;"	f
upvalueList	LuaVM/luavm/bytecode/lua52.lua	/^			local function upvalueList()$/;"	f
upvalueList	LuaVM/luavm/bytecode/lua53.lua	/^			local function upvalueList()$/;"	f
us	LuaVM/luavm/bytecode.lua	/^	local function us()$/;"	f
us	LuaVM/luavm/bytecode/lua51.lua	/^		local function us()$/;"	f
us	LuaVM/luavm/bytecode/lua51.lua	/^		local function us(str)$/;"	f
us	LuaVM/luavm/bytecode/lua52.lua	/^		local function us()$/;"	f
us	LuaVM/luavm/bytecode/lua52.lua	/^		local function us(str)$/;"	f
us	LuaVM/luavm/bytecode/lua53.lua	/^		local function us()$/;"	f
us	LuaVM/luavm/bytecode/lua53.lua	/^		local function us(str)$/;"	f
use	LuaVM/luavm/dynarec.lua	/^		local function use(r)$/;"	f
value	LuaVMRead/lobject.h	/^Value is untagged (having no type information). TValue means "tagged" value, value augmented$/;"	v
visitExpression	LuaVM/luavm/decompiler3/decompiler.lua	/^		function visitExpression(pc, t)$/;"	f
visitExpressionImpl	LuaVM/luavm/decompiler3/decompiler.lua	/^		local function visitExpressionImpl(pc, destreg)$/;"	f
vm.get	LuaVM/luavm/vm.lua	/^function vm.get(version)$/;"	f
vm.lua51.run	LuaVM/luavm/vm51.lua	/^	function vm.lua51.run(chunk, args, upvals, globals, hook)$/;"	f
vm.lua52.run	LuaVM/luavm/vm52.lua	/^	function vm.lua52.run(chunk, args, upvals, globals, hook)$/;"	f
vm.native	LuaVM/luavm/vm.lua	/^function vm.native()$/;"	f
w1	LuaVM/luavm/bytecode.lua	/^	local function w1(b)$/;"	f
w2	LuaVM/luavm/bytecode.lua	/^	local function w2(s)$/;"	f
w4	LuaVM/luavm/bytecode.lua	/^	local function w4(s)$/;"	f
w8	LuaVM/luavm/bytecode.lua	/^	local function w8(s)$/;"	f
write	LuaVM/luavm/decompiler3/decompiler/instr_utils.lua	/^			local function write(reg)$/;"	f
writeChunk	LuaVM/luavm/bytecode.lua	/^	local function writeChunk(chunk)$/;"	f
writeVA	LuaVM/luavm/decompiler3/decompiler/instr_utils.lua	/^			local function writeVA(base)$/;"	f
ws	LuaVM/luavm/bytecode.lua	/^	local function ws(str)$/;"	f
x	LuaVM/decompile3.lua	/^		local function x()$/;"	f
