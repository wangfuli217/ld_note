!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
1	doc/manual.html	/^<h1>1 - <a name="1">Introduction<\/a><\/h1>$/;"	a
2	doc/manual.html	/^<h1>2 - <a name="2">The Language<\/a><\/h1>$/;"	a
2.1	doc/manual.html	/^<h2>2.1 - <a name="2.1">Lexical Conventions<\/a><\/h2>$/;"	a
2.10	doc/manual.html	/^<h2>2.10 - <a name="2.10">Garbage Collection<\/a><\/h2>$/;"	a
2.10.1	doc/manual.html	/^<h3>2.10.1 - <a name="2.10.1">Garbage-Collection Metamethods<\/a><\/h3>$/;"	a
2.10.2	doc/manual.html	/^<h3>2.10.2 - <a name="2.10.2">Weak Tables<\/a><\/h3>$/;"	a
2.11	doc/manual.html	/^<h2>2.11 - <a name="2.11">Coroutines<\/a><\/h2>$/;"	a
2.2	doc/manual.html	/^<h2>2.2 - <a name="2.2">Values and Types<\/a><\/h2>$/;"	a
2.2.1	doc/manual.html	/^<h3>2.2.1 - <a name="2.2.1">Coercion<\/a><\/h3>$/;"	a
2.3	doc/manual.html	/^<h2>2.3 - <a name="2.3">Variables<\/a><\/h2>$/;"	a
2.4	doc/manual.html	/^<h2>2.4 - <a name="2.4">Statements<\/a><\/h2>$/;"	a
2.4.1	doc/manual.html	/^<h3>2.4.1 - <a name="2.4.1">Chunks<\/a><\/h3>$/;"	a
2.4.2	doc/manual.html	/^<h3>2.4.2 - <a name="2.4.2">Blocks<\/a><\/h3><p>$/;"	a
2.4.3	doc/manual.html	/^<h3>2.4.3 - <a name="2.4.3">Assignment<\/a><\/h3>$/;"	a
2.4.4	doc/manual.html	/^<h3>2.4.4 - <a name="2.4.4">Control Structures<\/a><\/h3><p>$/;"	a
2.4.5	doc/manual.html	/^<h3>2.4.5 - <a name="2.4.5">For Statement<\/a><\/h3>$/;"	a
2.4.6	doc/manual.html	/^<h3>2.4.6 - <a name="2.4.6">Function Calls as Statements<\/a><\/h3><p>$/;"	a
2.4.7	doc/manual.html	/^<h3>2.4.7 - <a name="2.4.7">Local Declarations<\/a><\/h3><p>$/;"	a
2.5	doc/manual.html	/^<h2>2.5 - <a name="2.5">Expressions<\/a><\/h2>$/;"	a
2.5.1	doc/manual.html	/^<h3>2.5.1 - <a name="2.5.1">Arithmetic Operators<\/a><\/h3><p>$/;"	a
2.5.2	doc/manual.html	/^<h3>2.5.2 - <a name="2.5.2">Relational Operators<\/a><\/h3><p>$/;"	a
2.5.3	doc/manual.html	/^<h3>2.5.3 - <a name="2.5.3">Logical Operators<\/a><\/h3><p>$/;"	a
2.5.4	doc/manual.html	/^<h3>2.5.4 - <a name="2.5.4">Concatenation<\/a><\/h3><p>$/;"	a
2.5.5	doc/manual.html	/^<h3>2.5.5 - <a name="2.5.5">The Length Operator<\/a><\/h3>$/;"	a
2.5.6	doc/manual.html	/^<h3>2.5.6 - <a name="2.5.6">Precedence<\/a><\/h3><p>$/;"	a
2.5.7	doc/manual.html	/^<h3>2.5.7 - <a name="2.5.7">Table Constructors<\/a><\/h3><p>$/;"	a
2.5.8	doc/manual.html	/^<h3>2.5.8 - <a name="2.5.8">Function Calls<\/a><\/h3><p>$/;"	a
2.5.9	doc/manual.html	/^<h3>2.5.9 - <a name="2.5.9">Function Definitions<\/a><\/h3>$/;"	a
2.6	doc/manual.html	/^<h2>2.6 - <a name="2.6">Visibility Rules<\/a><\/h2>$/;"	a
2.7	doc/manual.html	/^<h2>2.7 - <a name="2.7">Error Handling<\/a><\/h2>$/;"	a
2.8	doc/manual.html	/^<h2>2.8 - <a name="2.8">Metatables<\/a><\/h2>$/;"	a
2.9	doc/manual.html	/^<h2>2.9 - <a name="2.9">Environments<\/a><\/h2>$/;"	a
3	doc/manual.html	/^<h1>3 - <a name="3">The Application Program Interface<\/a><\/h1>$/;"	a
3.1	doc/manual.html	/^<h2>3.1 - <a name="3.1">The Stack<\/a><\/h2>$/;"	a
3.2	doc/manual.html	/^<h2>3.2 - <a name="3.2">Stack Size<\/a><\/h2>$/;"	a
3.3	doc/manual.html	/^<h2>3.3 - <a name="3.3">Pseudo-Indices<\/a><\/h2>$/;"	a
3.4	doc/manual.html	/^<h2>3.4 - <a name="3.4">C Closures<\/a><\/h2>$/;"	a
3.5	doc/manual.html	/^<h2>3.5 - <a name="3.5">Registry<\/a><\/h2>$/;"	a
3.6	doc/manual.html	/^<h2>3.6 - <a name="3.6">Error Handling in C<\/a><\/h2>$/;"	a
3.7	doc/manual.html	/^<h2>3.7 - <a name="3.7">Functions and Types<\/a><\/h2>$/;"	a
3.8	doc/manual.html	/^<h2>3.8 - <a name="3.8">The Debug Interface<\/a><\/h2>$/;"	a
4	doc/manual.html	/^<h1>4 - <a name="4">The Auxiliary Library<\/a><\/h1>$/;"	a
4.1	doc/manual.html	/^<h2>4.1 - <a name="4.1">Functions and Types<\/a><\/h2>$/;"	a
5	doc/manual.html	/^<h1>5 - <a name="5">Standard Libraries<\/a><\/h1>$/;"	a
5.1	doc/manual.html	/^<h2>5.1 - <a name="5.1">Basic Functions<\/a><\/h2>$/;"	a
5.2	doc/manual.html	/^<h2>5.2 - <a name="5.2">Coroutine Manipulation<\/a><\/h2>$/;"	a
5.3	doc/manual.html	/^<h2>5.3 - <a name="5.3">Modules<\/a><\/h2>$/;"	a
5.4	doc/manual.html	/^<h2>5.4 - <a name="5.4">String Manipulation<\/a><\/h2>$/;"	a
5.4.1	doc/manual.html	/^<h3>5.4.1 - <a name="5.4.1">Patterns<\/a><\/h3>$/;"	a
5.5	doc/manual.html	/^<h2>5.5 - <a name="5.5">Table Manipulation<\/a><\/h2><p>$/;"	a
5.6	doc/manual.html	/^<h2>5.6 - <a name="5.6">Mathematical Functions<\/a><\/h2>$/;"	a
5.7	doc/manual.html	/^<h2>5.7 - <a name="5.7">Input and Output Facilities<\/a><\/h2>$/;"	a
5.8	doc/manual.html	/^<h2>5.8 - <a name="5.8">Operating System Facilities<\/a><\/h2>$/;"	a
5.9	doc/manual.html	/^<h2>5.9 - <a name="5.9">The Debug Library<\/a><\/h2>$/;"	a
6	doc/manual.html	/^<h1>6 - <a name="6">Lua Stand-alone<\/a><\/h1>$/;"	a
7	doc/manual.html	/^<h1>7 - <a name="7">Incompatibilities with the Previous Version<\/a><\/h1>$/;"	a
7.1	doc/manual.html	/^<h2>7.1 - <a name="7.1">Changes in the Language<\/a><\/h2>$/;"	a
7.2	doc/manual.html	/^<h2>7.2 - <a name="7.2">Changes in the Libraries<\/a><\/h2>$/;"	a
7.3	doc/manual.html	/^<h2>7.3 - <a name="7.3">Changes in the API<\/a><\/h2>$/;"	a
8	doc/manual.html	/^<h1>8 - <a name="8">The Complete Syntax of Lua<\/a><\/h1>$/;"	a
ALL_A	src/Makefile	/^ALL_A= $(LUA_A)$/;"	m
ALL_O	src/Makefile	/^ALL_O= $(CORE_O) $(LIB_O) $(LUA_O) $(LUAC_O)$/;"	m
ALL_T	src/Makefile	/^ALL_T= $(LUA_A) $(LUA_T) $(LUAC_T)$/;"	m
AR	src/Makefile	/^AR= ar rcu$/;"	m
ARRAY2D	test/life.lua	/^function ARRAY2D(w,h)$/;"	f
AUXMARK	src/loadlib.c	600;"	d	file:
Arith	src/lvm.c	/^static void Arith (lua_State *L, StkId ra, const TValue *rb,$/;"	f	file:
BASIC_CI_SIZE	src/lstate.h	32;"	d
BASIC_STACK_SIZE	src/lstate.h	34;"	d
BIN	etc/Makefile	/^BIN= $(TOP)\/src$/;"	m
BITRK	src/lopcodes.h	119;"	d
BLACKBIT	src/lgc.h	56;"	d
BinOpr	src/lcode.h	/^typedef enum BinOpr {$/;"	g
BinOpr	src/lcode.h	/^} BinOpr;$/;"	t	typeref:enum:BinOpr
BlockCnt	src/lparser.c	/^typedef struct BlockCnt {$/;"	s	file:
BlockCnt	src/lparser.c	/^} BlockCnt;$/;"	t	typeref:struct:BlockCnt	file:
CAP_POSITION	src/lstrlib.c	168;"	d	file:
CAP_UNFINISHED	src/lstrlib.c	167;"	d	file:
CC	etc/Makefile	/^CC= gcc$/;"	m
CC	src/Makefile	/^CC= gcc$/;"	m
CCallS	src/lapi.c	/^struct CCallS {  \/* data to `f_Ccall' *\/$/;"	s	file:
CClosure	src/lobject.h	/^typedef struct CClosure {$/;"	s
CClosure	src/lobject.h	/^} CClosure;$/;"	t	typeref:struct:CClosure
CELLS	test/life.lua	/^function CELLS(w,h)$/;"	f
CFLAGS	etc/Makefile	/^CFLAGS= -O2 -Wall -I$(INC) $(MYCFLAGS)$/;"	m
CFLAGS	src/Makefile	/^CFLAGS= -O2 -Wall $(MYCFLAGS)$/;"	m
CORE_O	src/Makefile	/^CORE_O=	lapi.o lcode.o ldebug.o ldo.o ldump.o lfunc.o lgc.o llex.o lmem.o \\$/;"	m
CO_DEAD	src/lbaselib.c	485;"	d	file:
CO_NOR	src/lbaselib.c	484;"	d	file:
CO_RUN	src/lbaselib.c	482;"	d	file:
CO_SUS	src/lbaselib.c	483;"	d	file:
CREATE_ABC	src/lopcodes.h	104;"	d
CREATE_ABx	src/lopcodes.h	109;"	d
CallInfo	src/lstate.h	/^typedef struct CallInfo {$/;"	s
CallInfo	src/lstate.h	/^} CallInfo;$/;"	t	typeref:struct:CallInfo
CallS	src/lapi.c	/^struct CallS {  \/* data to `f_call' *\/$/;"	s	file:
Closure	src/lobject.h	/^typedef union Closure {$/;"	u
Closure	src/lobject.h	/^} Closure;$/;"	t	typeref:union:Closure
ClosureHeader	src/lobject.h	/^  ClosureHeader;$/;"	m	struct:CClosure
ClosureHeader	src/lobject.h	/^  ClosureHeader;$/;"	m	struct:LClosure
ClosureHeader	src/lobject.h	316;"	d
CommonHeader	src/lobject.h	/^    CommonHeader;$/;"	m	struct:TString::__anon6
CommonHeader	src/lobject.h	/^    CommonHeader;$/;"	m	struct:Udata::__anon7
CommonHeader	src/lobject.h	/^  CommonHeader;$/;"	m	struct:GCheader
CommonHeader	src/lobject.h	/^  CommonHeader;$/;"	m	struct:Proto
CommonHeader	src/lobject.h	/^  CommonHeader;$/;"	m	struct:Table
CommonHeader	src/lobject.h	/^  CommonHeader;$/;"	m	struct:UpVal
CommonHeader	src/lobject.h	44;"	d
CommonHeader	src/lstate.h	/^  CommonHeader;$/;"	m	struct:lua_State
ConsControl	src/lparser.c	/^struct ConsControl {$/;"	s	file:
DLMSG	src/loadlib.c	236;"	d	file:
DumpBlock	src/ldump.c	/^static void DumpBlock(const void* b, size_t size, DumpState* D)$/;"	f	file:
DumpChar	src/ldump.c	/^static void DumpChar(int y, DumpState* D)$/;"	f	file:
DumpCode	src/ldump.c	76;"	d	file:
DumpConstants	src/ldump.c	/^static void DumpConstants(const Proto* f, DumpState* D)$/;"	f	file:
DumpDebug	src/ldump.c	/^static void DumpDebug(const Proto* f, DumpState* D)$/;"	f	file:
DumpFunction	src/ldump.c	/^static void DumpFunction(const Proto* f, const TString* p, DumpState* D)$/;"	f	file:
DumpHeader	src/ldump.c	/^static void DumpHeader(DumpState* D)$/;"	f	file:
DumpInt	src/ldump.c	/^static void DumpInt(int x, DumpState* D)$/;"	f	file:
DumpMem	src/ldump.c	26;"	d	file:
DumpNumber	src/ldump.c	/^static void DumpNumber(lua_Number x, DumpState* D)$/;"	f	file:
DumpState	src/ldump.c	/^} DumpState;$/;"	t	typeref:struct:__anon15	file:
DumpString	src/ldump.c	/^static void DumpString(const TString* s, DumpState* D)$/;"	f	file:
DumpVar	src/ldump.c	27;"	d	file:
DumpVector	src/ldump.c	/^static void DumpVector(const void* b, int n, size_t size, DumpState* D)$/;"	f	file:
EOZ	src/lzio.h	16;"	d
ERRFUNC	src/loadlib.c	40;"	d	file:
ERRLIB	src/loadlib.c	39;"	d	file:
EXTRA_STACK	src/lstate.h	29;"	d
F 	test/factorial.lua	/^F = function (f)$/;"	f
FINALIZEDBIT	src/lgc.h	57;"	d
FIRST_RESERVED	src/llex.h	14;"	d
FIXEDBIT	src/lgc.h	60;"	d
FLAGS	src/lstrlib.c	688;"	d	file:
FREELIST_REF	src/lauxlib.c	28;"	d	file:
FuncState	src/lparser.h	/^typedef struct FuncState {$/;"	s
FuncState	src/lparser.h	/^} FuncState;$/;"	t	typeref:struct:FuncState
G	src/lstate.h	133;"	d
GCFINALIZECOST	src/lgc.c	29;"	d	file:
GCObject	src/lobject.h	/^typedef union GCObject GCObject;$/;"	t	typeref:union:GCObject
GCObject	src/lstate.h	/^union GCObject {$/;"	u
GCSTEPSIZE	src/lgc.c	26;"	d	file:
GCSWEEPCOST	src/lgc.c	28;"	d	file:
GCSWEEPMAX	src/lgc.c	27;"	d	file:
GCSfinalize	src/lgc.h	21;"	d
GCSpause	src/lgc.h	17;"	d
GCSpropagate	src/lgc.h	18;"	d
GCSsweep	src/lgc.h	20;"	d
GCSsweepstring	src/lgc.h	19;"	d
GCTM	src/lgc.c	/^static void GCTM (lua_State *L) {$/;"	f	file:
GCheader	src/lobject.h	/^typedef struct GCheader {$/;"	s
GCheader	src/lobject.h	/^} GCheader;$/;"	t	typeref:struct:GCheader
GCthreshold	src/lstate.h	/^  lu_mem GCthreshold;$/;"	m	struct:global_State
GETARG_A	src/lopcodes.h	84;"	d
GETARG_B	src/lopcodes.h	88;"	d
GETARG_Bx	src/lopcodes.h	96;"	d
GETARG_C	src/lopcodes.h	92;"	d
GETARG_sBx	src/lopcodes.h	100;"	d
GET_OPCODE	src/lopcodes.h	80;"	d
IF	src/lundump.c	31;"	d	file:
IF	src/lundump.c	34;"	d	file:
INC	etc/Makefile	/^INC= $(TOP)\/src$/;"	m
INDEXK	src/lopcodes.h	125;"	d
INSTALL	Makefile	/^INSTALL= install -p$/;"	m
INSTALL_BIN	Makefile	/^INSTALL_BIN= $(INSTALL_TOP)\/bin$/;"	m
INSTALL_CMOD	Makefile	/^INSTALL_CMOD= $(INSTALL_TOP)\/lib\/lua\/$V$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA= $(INSTALL) -m 0644$/;"	m
INSTALL_EXEC	Makefile	/^INSTALL_EXEC= $(INSTALL) -m 0755$/;"	m
INSTALL_INC	Makefile	/^INSTALL_INC= $(INSTALL_TOP)\/include$/;"	m
INSTALL_LIB	Makefile	/^INSTALL_LIB= $(INSTALL_TOP)\/lib$/;"	m
INSTALL_LMOD	Makefile	/^INSTALL_LMOD= $(INSTALL_TOP)\/share\/lua\/$V$/;"	m
INSTALL_MAN	Makefile	/^INSTALL_MAN= $(INSTALL_TOP)\/man\/man1$/;"	m
INSTALL_TOP	Makefile	/^INSTALL_TOP= \/usr\/local$/;"	m
IO_INPUT	src/liolib.c	23;"	d	file:
IO_OUTPUT	src/liolib.c	24;"	d	file:
IS	src/luac.c	68;"	d	file:
ISK	src/lopcodes.h	122;"	d
Instruction	src/llimits.h	/^typedef lu_int32 Instruction;$/;"	t
IntPoint	src/llimits.h	42;"	d
KBx	src/lvm.c	355;"	d	file:
KEYWEAK	src/lgc.c	47;"	d	file:
KEYWEAKBIT	src/lgc.h	58;"	d
KEY_HOOK	src/ldblib.c	/^static const char KEY_HOOK = 'h';$/;"	v	file:
L	src/lauxlib.h	/^  lua_State *L;$/;"	m	struct:luaL_Buffer
L	src/ldump.c	/^ lua_State* L;$/;"	m	struct:__anon15	file:
L	src/llex.h	/^  struct lua_State *L;$/;"	m	struct:LexState	typeref:struct:LexState::lua_State
L	src/lparser.h	/^  struct lua_State *L;  \/* copy of the Lua state *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::lua_State
L	src/lstrlib.c	/^  lua_State *L;$/;"	m	struct:MatchState	file:
L	src/lundump.c	/^ lua_State* L;$/;"	m	struct:__anon13	file:
L	src/lzio.h	/^  lua_State *L;			\/* Lua state (for reader) *\/$/;"	m	struct:Zio
LAST_TAG	src/lobject.h	20;"	d
LClosure	src/lobject.h	/^typedef struct LClosure {$/;"	s
LClosure	src/lobject.h	/^} LClosure;$/;"	t	typeref:struct:LClosure
LEVELS1	src/ldblib.c	319;"	d	file:
LEVELS2	src/ldblib.c	320;"	d	file:
LFIELDS_PER_FLUSH	src/lopcodes.h	265;"	d
LG	src/lstate.c	/^typedef struct LG {$/;"	s	file:
LG	src/lstate.c	/^} LG;$/;"	t	typeref:struct:LG	file:
LHS_assign	src/lparser.c	/^struct LHS_assign {$/;"	s	file:
LIB	etc/Makefile	/^LIB= $(TOP)\/src$/;"	m
LIBPREFIX	src/loadlib.c	32;"	d	file:
LIBS	src/Makefile	/^LIBS= -lm $(MYLIBS)$/;"	m
LIB_FAIL	src/loadlib.c	232;"	d	file:
LIB_FAIL	src/loadlib.c	233;"	d	file:
LIB_FAIL	src/loadlib.c	35;"	d	file:
LIB_O	src/Makefile	/^LIB_O=	lauxlib.o lbaselib.o ldblib.o liolib.o lmathlib.o loslib.o ltablib.o \\$/;"	m
LIFE	test/life.lua	/^function LIFE(w,h)$/;"	f
LIMIT	src/lauxlib.c	395;"	d	file:
LUAC_FORMAT	src/lundump.h	31;"	d
LUAC_HEADERSIZE	src/lundump.h	34;"	d
LUAC_O	src/Makefile	/^LUAC_O=	luac.o print.o$/;"	m
LUAC_T	src/Makefile	/^LUAC_T=	luac$/;"	m
LUAC_VERSION	src/lundump.h	28;"	d
LUAI_BITSINT	src/luaconf.h	392;"	d
LUAI_BITSINT	src/luaconf.h	395;"	d
LUAI_DATA	src/luaconf.h	183;"	d
LUAI_DATA	src/luaconf.h	188;"	d
LUAI_DATA	src/luaconf.h	192;"	d
LUAI_EXTRASPACE	src/luaconf.h	718;"	d
LUAI_FUNC	src/luaconf.h	182;"	d
LUAI_FUNC	src/luaconf.h	187;"	d
LUAI_FUNC	src/luaconf.h	191;"	d
LUAI_GCMUL	src/luaconf.h	313;"	d
LUAI_GCPAUSE	src/luaconf.h	302;"	d
LUAI_INT32	src/luaconf.h	415;"	d
LUAI_INT32	src/luaconf.h	422;"	d
LUAI_MAXCALLS	src/luaconf.h	435;"	d
LUAI_MAXCCALLS	src/luaconf.h	468;"	d
LUAI_MAXCSTACK	src/luaconf.h	446;"	d
LUAI_MAXINT32	src/luaconf.h	416;"	d
LUAI_MAXINT32	src/luaconf.h	423;"	d
LUAI_MAXNUMBER2STR	src/luaconf.h	524;"	d
LUAI_MAXUPVALUES	src/luaconf.h	482;"	d
LUAI_MAXVARS	src/luaconf.h	475;"	d
LUAI_MEM	src/luaconf.h	418;"	d
LUAI_MEM	src/luaconf.h	425;"	d
LUAI_THROW	src/luaconf.h	611;"	d
LUAI_THROW	src/luaconf.h	618;"	d
LUAI_THROW	src/luaconf.h	624;"	d
LUAI_TRY	src/luaconf.h	612;"	d
LUAI_TRY	src/luaconf.h	619;"	d
LUAI_TRY	src/luaconf.h	625;"	d
LUAI_UACNUMBER	src/luaconf.h	511;"	d
LUAI_UINT32	src/luaconf.h	414;"	d
LUAI_UINT32	src/luaconf.h	421;"	d
LUAI_UMEM	src/luaconf.h	417;"	d
LUAI_UMEM	src/luaconf.h	424;"	d
LUAI_USER_ALIGNMENT_T	src/luaconf.h	598;"	d
LUALIB_API	src/luaconf.h	169;"	d
LUAL_BUFFERSIZE	src/luaconf.h	488;"	d
LUA_A	src/Makefile	/^LUA_A=	liblua.a$/;"	m
LUA_ANSI	src/luaconf.h	28;"	d
LUA_API	src/luaconf.h	157;"	d
LUA_API	src/luaconf.h	159;"	d
LUA_API	src/luaconf.h	164;"	d
LUA_AUTHORS	src/lua.h	23;"	d
LUA_CDIR	src/luaconf.h	89;"	d
LUA_CDIR	src/luaconf.h	99;"	d
LUA_COLIBNAME	src/lualib.h	18;"	d
LUA_COMPAT_GETN	src/luaconf.h	322;"	d
LUA_COMPAT_GFIND	src/luaconf.h	358;"	d
LUA_COMPAT_LOADLIB	src/luaconf.h	329;"	d
LUA_COMPAT_LSTR	src/luaconf.h	351;"	d
LUA_COMPAT_MOD	src/luaconf.h	343;"	d
LUA_COMPAT_OPENLIB	src/luaconf.h	366;"	d
LUA_COMPAT_VARARG	src/luaconf.h	336;"	d
LUA_COPYRIGHT	src/lua.h	22;"	d
LUA_CORE	etc/noparser.c	15;"	d	file:
LUA_CORE	src/lapi.c	14;"	d	file:
LUA_CORE	src/lcode.c	11;"	d	file:
LUA_CORE	src/ldebug.c	14;"	d	file:
LUA_CORE	src/ldo.c	13;"	d	file:
LUA_CORE	src/ldump.c	10;"	d	file:
LUA_CORE	src/lfunc.c	11;"	d	file:
LUA_CORE	src/lgc.c	10;"	d	file:
LUA_CORE	src/llex.c	13;"	d	file:
LUA_CORE	src/lmem.c	11;"	d	file:
LUA_CORE	src/lobject.c	14;"	d	file:
LUA_CORE	src/lopcodes.c	8;"	d	file:
LUA_CORE	src/lparser.c	11;"	d	file:
LUA_CORE	src/lstate.c	11;"	d	file:
LUA_CORE	src/lstring.c	11;"	d	file:
LUA_CORE	src/ltable.c	25;"	d	file:
LUA_CORE	src/ltm.c	11;"	d	file:
LUA_CORE	src/luac.c	13;"	d	file:
LUA_CORE	src/lundump.c	10;"	d	file:
LUA_CORE	src/lvm.c	13;"	d	file:
LUA_CORE	src/lzio.c	11;"	d	file:
LUA_CORE	src/print.c	11;"	d	file:
LUA_CPATH	src/luaconf.h	70;"	d
LUA_CPATH_DEFAULT	src/luaconf.h	103;"	d
LUA_CPATH_DEFAULT	src/luaconf.h	93;"	d
LUA_DBLIBNAME	src/lualib.h	36;"	d
LUA_DIRSEP	src/luaconf.h	114;"	d
LUA_DIRSEP	src/luaconf.h	116;"	d
LUA_DL_DLL	src/luaconf.h	708;"	d
LUA_DL_DLOPEN	src/luaconf.h	704;"	d
LUA_DL_DYLD	src/luaconf.h	44;"	d
LUA_ENVIRONINDEX	src/lua.h	37;"	d
LUA_ERRERR	src/lua.h	47;"	d
LUA_ERRFILE	src/lauxlib.h	32;"	d
LUA_ERRMEM	src/lua.h	46;"	d
LUA_ERRRUN	src/lua.h	44;"	d
LUA_ERRSYNTAX	src/lua.h	45;"	d
LUA_EXECDIR	src/luaconf.h	134;"	d
LUA_FILEHANDLE	src/lualib.h	15;"	d
LUA_GCCOLLECT	src/lua.h	223;"	d
LUA_GCCOUNT	src/lua.h	224;"	d
LUA_GCCOUNTB	src/lua.h	225;"	d
LUA_GCRESTART	src/lua.h	222;"	d
LUA_GCSETPAUSE	src/lua.h	227;"	d
LUA_GCSETSTEPMUL	src/lua.h	228;"	d
LUA_GCSTEP	src/lua.h	226;"	d
LUA_GCSTOP	src/lua.h	221;"	d
LUA_GLOBALSINDEX	src/lua.h	38;"	d
LUA_HOOKCALL	src/lua.h	311;"	d
LUA_HOOKCOUNT	src/lua.h	314;"	d
LUA_HOOKLINE	src/lua.h	313;"	d
LUA_HOOKRET	src/lua.h	312;"	d
LUA_HOOKTAILRET	src/lua.h	315;"	d
LUA_IDSIZE	src/luaconf.h	210;"	d
LUA_IGMARK	src/luaconf.h	135;"	d
LUA_INIT	src/luaconf.h	71;"	d
LUA_INTEGER	src/luaconf.h	143;"	d
LUA_INTFRMLEN	src/luaconf.h	744;"	d
LUA_INTFRMLEN	src/luaconf.h	749;"	d
LUA_INTFRM_T	src/luaconf.h	745;"	d
LUA_INTFRM_T	src/luaconf.h	750;"	d
LUA_IOLIBNAME	src/lualib.h	24;"	d
LUA_LDIR	src/luaconf.h	88;"	d
LUA_LDIR	src/luaconf.h	98;"	d
LUA_LIB	src/lauxlib.c	21;"	d	file:
LUA_LIB	src/lbaselib.c	15;"	d	file:
LUA_LIB	src/ldblib.c	13;"	d	file:
LUA_LIB	src/linit.c	9;"	d	file:
LUA_LIB	src/liolib.c	14;"	d	file:
LUA_LIB	src/lmathlib.c	12;"	d	file:
LUA_LIB	src/loadlib.c	17;"	d	file:
LUA_LIB	src/loslib.c	15;"	d	file:
LUA_LIB	src/lstrlib.c	15;"	d	file:
LUA_LIB	src/ltablib.c	11;"	d	file:
LUA_LOADLIBNAME	src/lualib.h	39;"	d
LUA_MASKCALL	src/lua.h	321;"	d
LUA_MASKCOUNT	src/lua.h	324;"	d
LUA_MASKLINE	src/lua.h	323;"	d
LUA_MASKRET	src/lua.h	322;"	d
LUA_MATHLIBNAME	src/lualib.h	33;"	d
LUA_MAXCAPTURES	src/luaconf.h	636;"	d
LUA_MAXINPUT	src/luaconf.h	262;"	d
LUA_MINBUFFER	src/llimits.h	105;"	d
LUA_MINSTACK	src/lua.h	87;"	d
LUA_MULTRET	src/lua.h	30;"	d
LUA_NOREF	src/lauxlib.h	159;"	d
LUA_NUMBER	src/luaconf.h	505;"	d
LUA_NUMBER_DOUBLE	src/luaconf.h	504;"	d
LUA_NUMBER_FMT	src/luaconf.h	522;"	d
LUA_NUMBER_SCAN	src/luaconf.h	521;"	d
LUA_O	src/Makefile	/^LUA_O=	lua.o$/;"	m
LUA_OFSEP	src/loadlib.c	29;"	d	file:
LUA_OSLIBNAME	src/lualib.h	27;"	d
LUA_PATH	src/luaconf.h	69;"	d
LUA_PATHSEP	src/luaconf.h	132;"	d
LUA_PATH_DEFAULT	src/luaconf.h	100;"	d
LUA_PATH_DEFAULT	src/luaconf.h	90;"	d
LUA_PATH_MARK	src/luaconf.h	133;"	d
LUA_POF	src/loadlib.c	26;"	d	file:
LUA_PROGNAME	src/luaconf.h	254;"	d
LUA_PROMPT	src/luaconf.h	245;"	d
LUA_PROMPT2	src/luaconf.h	246;"	d
LUA_QL	src/luaconf.h	201;"	d
LUA_QS	src/luaconf.h	202;"	d
LUA_REFNIL	src/lauxlib.h	160;"	d
LUA_REGISTRYINDEX	src/lua.h	36;"	d
LUA_RELEASE	src/lua.h	20;"	d
LUA_ROOT	src/luaconf.h	97;"	d
LUA_SIGNATURE	src/lua.h	27;"	d
LUA_STRLIBNAME	src/lualib.h	30;"	d
LUA_T	src/Makefile	/^LUA_T=	lua$/;"	m
LUA_TABLIBNAME	src/lualib.h	21;"	d
LUA_TBOOLEAN	src/lua.h	75;"	d
LUA_TDEADKEY	src/lobject.h	30;"	d
LUA_TFUNCTION	src/lua.h	80;"	d
LUA_TLIGHTUSERDATA	src/lua.h	76;"	d
LUA_TMPNAMBUFSIZE	src/luaconf.h	651;"	d
LUA_TMPNAMBUFSIZE	src/luaconf.h	659;"	d
LUA_TNIL	src/lua.h	74;"	d
LUA_TNONE	src/lua.h	72;"	d
LUA_TNUMBER	src/lua.h	77;"	d
LUA_TPROTO	src/lobject.h	28;"	d
LUA_TSTRING	src/lua.h	78;"	d
LUA_TTABLE	src/lua.h	79;"	d
LUA_TTHREAD	src/lua.h	82;"	d
LUA_TUPVAL	src/lobject.h	29;"	d
LUA_TUSERDATA	src/lua.h	81;"	d
LUA_USE_DLOPEN	src/luaconf.h	38;"	d
LUA_USE_ISATTY	src/luaconf.h	56;"	d
LUA_USE_MKSTEMP	src/luaconf.h	55;"	d
LUA_USE_POPEN	src/luaconf.h	57;"	d
LUA_USE_POSIX	src/luaconf.h	37;"	d
LUA_USE_POSIX	src/luaconf.h	43;"	d
LUA_USE_READLINE	src/luaconf.h	39;"	d
LUA_USE_ULONGJMP	src/luaconf.h	58;"	d
LUA_VERSION	src/lua.h	19;"	d
LUA_VERSION_NUM	src/lua.h	21;"	d
LUA_WIN	src/luaconf.h	33;"	d
LUA_YIELD	src/lua.h	43;"	d
L_ESC	src/lstrlib.c	182;"	d	file:
L_Umaxalign	src/llimits.h	/^typedef LUAI_USER_ALIGNMENT_T L_Umaxalign;$/;"	t
LexState	src/llex.h	/^typedef struct LexState {$/;"	s
LexState	src/llex.h	/^} LexState;$/;"	t	typeref:struct:LexState
LoadBlock	src/lundump.c	/^static void LoadBlock(LoadState* S, void* b, size_t size)$/;"	f	file:
LoadByte	src/lundump.c	44;"	d	file:
LoadChar	src/lundump.c	/^static int LoadChar(LoadState* S)$/;"	f	file:
LoadCode	src/lundump.c	/^static void LoadCode(LoadState* S, Proto* f)$/;"	f	file:
LoadConstants	src/lundump.c	/^static void LoadConstants(LoadState* S, Proto* f)$/;"	f	file:
LoadDebug	src/lundump.c	/^static void LoadDebug(LoadState* S, Proto* f)$/;"	f	file:
LoadF	src/lauxlib.c	/^typedef struct LoadF {$/;"	s	file:
LoadF	src/lauxlib.c	/^} LoadF;$/;"	t	typeref:struct:LoadF	file:
LoadFunction	src/lundump.c	/^static Proto* LoadFunction(LoadState* S, TString* p)$/;"	f	file:
LoadHeader	src/lundump.c	/^static void LoadHeader(LoadState* S)$/;"	f	file:
LoadInt	src/lundump.c	/^static int LoadInt(LoadState* S)$/;"	f	file:
LoadMem	src/lundump.c	43;"	d	file:
LoadNumber	src/lundump.c	/^static lua_Number LoadNumber(LoadState* S)$/;"	f	file:
LoadS	src/lauxlib.c	/^typedef struct LoadS {$/;"	s	file:
LoadS	src/lauxlib.c	/^} LoadS;$/;"	t	typeref:struct:LoadS	file:
LoadState	src/lundump.c	/^} LoadState;$/;"	t	typeref:struct:__anon13	file:
LoadString	src/lundump.c	/^static TString* LoadString(LoadState* S)$/;"	f	file:
LoadVar	src/lundump.c	45;"	d	file:
LoadVector	src/lundump.c	46;"	d	file:
LocVar	src/lobject.h	/^typedef struct LocVar {$/;"	s
LocVar	src/lobject.h	/^} LocVar;$/;"	t	typeref:struct:LocVar
MASK0	src/lopcodes.h	74;"	d
MASK1	src/lopcodes.h	71;"	d
MAXARG_A	src/lopcodes.h	65;"	d
MAXARG_B	src/lopcodes.h	66;"	d
MAXARG_Bx	src/lopcodes.h	57;"	d
MAXARG_Bx	src/lopcodes.h	60;"	d
MAXARG_C	src/lopcodes.h	67;"	d
MAXARG_sBx	src/lopcodes.h	58;"	d
MAXARG_sBx	src/lopcodes.h	61;"	d
MAXASIZE	src/ltable.c	47;"	d	file:
MAXBITS	src/ltable.c	42;"	d	file:
MAXBITS	src/ltable.c	44;"	d	file:
MAXINDEXRK	src/lopcodes.h	127;"	d
MAXSRC	src/llex.c	77;"	d	file:
MAXSTACK	src/llimits.h	93;"	d
MAXTAGLOOP	src/lvm.c	32;"	d	file:
MAX_FORMAT	src/lstrlib.c	693;"	d	file:
MAX_INT	src/llimits.h	35;"	d
MAX_ITEM	src/lstrlib.c	686;"	d	file:
MAX_LUMEM	src/llimits.h	32;"	d
MAX_SIZET	src/llimits.h	30;"	d
MEMERRMSG	src/lmem.h	16;"	d
MINSIZEARRAY	src/lmem.c	43;"	d	file:
MINSTRTABSIZE	src/llimits.h	99;"	d
MKDIR	Makefile	/^MKDIR= mkdir -p$/;"	m
MYCFLAGS	etc/Makefile	/^MYCFLAGS= $/;"	m
MYCFLAGS	src/Makefile	/^MYCFLAGS=$/;"	m
MYCOMPILE	etc/luavs.bat	/^@set MYCOMPILE=cl \/nologo \/MD \/O2 \/W3 \/c \/D_CRT_SECURE_NO_DEPRECATE$/;"	v
MYLDFLAGS	etc/Makefile	/^MYLDFLAGS= -Wl,-E$/;"	m
MYLDFLAGS	src/Makefile	/^MYLDFLAGS=$/;"	m
MYLIBS	etc/Makefile	/^MYLIBS= -lm$/;"	m
MYLIBS	src/Makefile	/^MYLIBS=$/;"	m
MYLINK	etc/luavs.bat	/^@set MYLINK=link \/nologo$/;"	v
MYMT	etc/luavs.bat	/^@set MYMT=mt \/nologo$/;"	v
MatchState	src/lstrlib.c	/^typedef struct MatchState {$/;"	s	file:
MatchState	src/lstrlib.c	/^} MatchState;$/;"	t	typeref:struct:MatchState	file:
Mbuffer	src/lzio.h	/^typedef struct Mbuffer {$/;"	s
Mbuffer	src/lzio.h	/^} Mbuffer;$/;"	t	typeref:struct:Mbuffer
NO_JUMP	src/lcode.h	20;"	d
NO_REG	src/lopcodes.h	136;"	d
NUM_OPCODES	src/lopcodes.h	211;"	d
NUM_RESERVED	src/llex.h	38;"	d
NUM_TAGS	src/lobject.h	22;"	d
Node	src/lobject.h	/^typedef struct Node {$/;"	s
Node	src/lobject.h	/^} Node;$/;"	t	typeref:struct:Node
OPR_ADD	src/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_AND	src/lcode.h	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr
OPR_CONCAT	src/lcode.h	/^  OPR_CONCAT,$/;"	e	enum:BinOpr
OPR_DIV	src/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_EQ	src/lcode.h	/^  OPR_NE, OPR_EQ,$/;"	e	enum:BinOpr
OPR_GE	src/lcode.h	/^  OPR_LT, OPR_LE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_GT	src/lcode.h	/^  OPR_LT, OPR_LE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_LE	src/lcode.h	/^  OPR_LT, OPR_LE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_LEN	src/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_LT	src/lcode.h	/^  OPR_LT, OPR_LE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_MINUS	src/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_MOD	src/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_MUL	src/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_NE	src/lcode.h	/^  OPR_NE, OPR_EQ,$/;"	e	enum:BinOpr
OPR_NOBINOPR	src/lcode.h	/^  OPR_NOBINOPR$/;"	e	enum:BinOpr
OPR_NOT	src/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_NOUNOPR	src/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_OR	src/lcode.h	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr
OPR_POW	src/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_SUB	src/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OP_ADD	src/lopcodes.h	/^OP_ADD,\/*	A B C	R(A) := RK(B) + RK(C)				*\/$/;"	e	enum:__anon4
OP_CALL	src/lopcodes.h	/^OP_CALL,\/*	A B C	R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1)) *\/$/;"	e	enum:__anon4
OP_CLOSE	src/lopcodes.h	/^OP_CLOSE,\/*	A 	close all variables in the stack up to (>=) R(A)*\/$/;"	e	enum:__anon4
OP_CLOSURE	src/lopcodes.h	/^OP_CLOSURE,\/*	A Bx	R(A) := closure(KPROTO[Bx], R(A), ... ,R(A+n))	*\/$/;"	e	enum:__anon4
OP_CONCAT	src/lopcodes.h	/^OP_CONCAT,\/*	A B C	R(A) := R(B).. ... ..R(C)			*\/$/;"	e	enum:__anon4
OP_DIV	src/lopcodes.h	/^OP_DIV,\/*	A B C	R(A) := RK(B) \/ RK(C)				*\/$/;"	e	enum:__anon4
OP_EQ	src/lopcodes.h	/^OP_EQ,\/*	A B C	if ((RK(B) == RK(C)) ~= A) then pc++		*\/$/;"	e	enum:__anon4
OP_FORLOOP	src/lopcodes.h	/^OP_FORLOOP,\/*	A sBx	R(A)+=R(A+2);$/;"	e	enum:__anon4
OP_FORPREP	src/lopcodes.h	/^OP_FORPREP,\/*	A sBx	R(A)-=R(A+2); pc+=sBx				*\/$/;"	e	enum:__anon4
OP_GETGLOBAL	src/lopcodes.h	/^OP_GETGLOBAL,\/*	A Bx	R(A) := Gbl[Kst(Bx)]				*\/$/;"	e	enum:__anon4
OP_GETTABLE	src/lopcodes.h	/^OP_GETTABLE,\/*	A B C	R(A) := R(B)[RK(C)]				*\/$/;"	e	enum:__anon4
OP_GETUPVAL	src/lopcodes.h	/^OP_GETUPVAL,\/*	A B	R(A) := UpValue[B]				*\/$/;"	e	enum:__anon4
OP_JMP	src/lopcodes.h	/^OP_JMP,\/*	sBx	pc+=sBx					*\/$/;"	e	enum:__anon4
OP_LE	src/lopcodes.h	/^OP_LE,\/*	A B C	if ((RK(B) <= RK(C)) ~= A) then pc++  		*\/$/;"	e	enum:__anon4
OP_LEN	src/lopcodes.h	/^OP_LEN,\/*	A B	R(A) := length of R(B)				*\/$/;"	e	enum:__anon4
OP_LOADBOOL	src/lopcodes.h	/^OP_LOADBOOL,\/*	A B C	R(A) := (Bool)B; if (C) pc++			*\/$/;"	e	enum:__anon4
OP_LOADK	src/lopcodes.h	/^OP_LOADK,\/*	A Bx	R(A) := Kst(Bx)					*\/$/;"	e	enum:__anon4
OP_LOADNIL	src/lopcodes.h	/^OP_LOADNIL,\/*	A B	R(A) := ... := R(B) := nil			*\/$/;"	e	enum:__anon4
OP_LT	src/lopcodes.h	/^OP_LT,\/*	A B C	if ((RK(B) <  RK(C)) ~= A) then pc++  		*\/$/;"	e	enum:__anon4
OP_MOD	src/lopcodes.h	/^OP_MOD,\/*	A B C	R(A) := RK(B) % RK(C)				*\/$/;"	e	enum:__anon4
OP_MOVE	src/lopcodes.h	/^OP_MOVE,\/*	A B	R(A) := R(B)					*\/$/;"	e	enum:__anon4
OP_MUL	src/lopcodes.h	/^OP_MUL,\/*	A B C	R(A) := RK(B) * RK(C)				*\/$/;"	e	enum:__anon4
OP_NEWTABLE	src/lopcodes.h	/^OP_NEWTABLE,\/*	A B C	R(A) := {} (size = B,C)				*\/$/;"	e	enum:__anon4
OP_NOT	src/lopcodes.h	/^OP_NOT,\/*	A B	R(A) := not R(B)				*\/$/;"	e	enum:__anon4
OP_POW	src/lopcodes.h	/^OP_POW,\/*	A B C	R(A) := RK(B) ^ RK(C)				*\/$/;"	e	enum:__anon4
OP_RETURN	src/lopcodes.h	/^OP_RETURN,\/*	A B	return R(A), ... ,R(A+B-2)	(see note)	*\/$/;"	e	enum:__anon4
OP_SELF	src/lopcodes.h	/^OP_SELF,\/*	A B C	R(A+1) := R(B); R(A) := R(B)[RK(C)]		*\/$/;"	e	enum:__anon4
OP_SETGLOBAL	src/lopcodes.h	/^OP_SETGLOBAL,\/*	A Bx	Gbl[Kst(Bx)] := R(A)				*\/$/;"	e	enum:__anon4
OP_SETLIST	src/lopcodes.h	/^OP_SETLIST,\/*	A B C	R(A)[(C-1)*FPF+i] := R(A+i), 1 <= i <= B	*\/$/;"	e	enum:__anon4
OP_SETTABLE	src/lopcodes.h	/^OP_SETTABLE,\/*	A B C	R(A)[RK(B)] := RK(C)				*\/$/;"	e	enum:__anon4
OP_SETUPVAL	src/lopcodes.h	/^OP_SETUPVAL,\/*	A B	UpValue[B] := R(A)				*\/$/;"	e	enum:__anon4
OP_SUB	src/lopcodes.h	/^OP_SUB,\/*	A B C	R(A) := RK(B) - RK(C)				*\/$/;"	e	enum:__anon4
OP_TAILCALL	src/lopcodes.h	/^OP_TAILCALL,\/*	A B C	return R(A)(R(A+1), ... ,R(A+B-1))		*\/$/;"	e	enum:__anon4
OP_TEST	src/lopcodes.h	/^OP_TEST,\/*	A C	if not (R(A) <=> C) then pc++			*\/ $/;"	e	enum:__anon4
OP_TESTSET	src/lopcodes.h	/^OP_TESTSET,\/*	A B C	if (R(B) <=> C) then R(A) := R(B) else pc++	*\/ $/;"	e	enum:__anon4
OP_TFORLOOP	src/lopcodes.h	/^OP_TFORLOOP,\/*	A C	R(A+3), ... ,R(A+2+C) := R(A)(R(A+1), R(A+2)); $/;"	e	enum:__anon4
OP_UNM	src/lopcodes.h	/^OP_UNM,\/*	A B	R(A) := -R(B)					*\/$/;"	e	enum:__anon4
OP_VARARG	src/lopcodes.h	/^OP_VARARG\/*	A B	R(A), R(A+1), ..., R(A+B-1) = vararg		*\/$/;"	e	enum:__anon4
OUTPUT	src/luac.c	27;"	d	file:
OpArgK	src/lopcodes.h	/^  OpArgK   \/* argument is a constant or register\/constant *\/$/;"	e	enum:OpArgMask
OpArgMask	src/lopcodes.h	/^enum OpArgMask {$/;"	g
OpArgN	src/lopcodes.h	/^  OpArgN,  \/* argument is not used *\/$/;"	e	enum:OpArgMask
OpArgR	src/lopcodes.h	/^  OpArgR,  \/* argument is a register or a jump offset *\/$/;"	e	enum:OpArgMask
OpArgU	src/lopcodes.h	/^  OpArgU,  \/* argument is used *\/$/;"	e	enum:OpArgMask
OpCode	src/lopcodes.h	/^} OpCode;$/;"	t	typeref:enum:__anon4
OpMode	src/lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx};  \/* basic instruction format *\/$/;"	g
Output	src/luac.c	/^static char Output[]={ OUTPUT };	\/* default output file name *\/$/;"	v	file:
PCRC	src/ldo.h	33;"	d
PCRLUA	src/ldo.h	32;"	d
PCRYIELD	src/ldo.h	34;"	d
PI	src/lmathlib.c	20;"	d	file:
PI	src/lmathlib.c	21;"	d	file:
PLAT	Makefile	/^PLAT= none$/;"	m
PLAT	src/Makefile	/^PLAT= none$/;"	m
PLATS	Makefile	/^PLATS= aix ansi bsd freebsd generic linux macosx mingw posix solaris$/;"	m
PLATS	src/Makefile	/^PLATS= aix ansi bsd freebsd generic linux macosx mingw posix solaris$/;"	m
POF	src/loadlib.c	155;"	d	file:
POF	src/loadlib.c	156;"	d	file:
POF	src/loadlib.c	34;"	d	file:
POS_A	src/lopcodes.h	45;"	d
POS_B	src/lopcodes.h	47;"	d
POS_Bx	src/lopcodes.h	48;"	d
POS_C	src/lopcodes.h	46;"	d
POS_OP	src/lopcodes.h	44;"	d
PROGNAME	src/luac.c	26;"	d	file:
Pfunc	src/ldo.h	/^typedef void (*Pfunc) (lua_State *L, void *ud);$/;"	t
PrintCode	src/print.c	/^static void PrintCode(const Proto* f)$/;"	f	file:
PrintConstant	src/print.c	/^static void PrintConstant(const Proto* f, int i)$/;"	f	file:
PrintConstants	src/print.c	/^static void PrintConstants(const Proto* f)$/;"	f	file:
PrintFunction	src/print.c	/^void PrintFunction(const Proto* f, int full)$/;"	f
PrintFunction	src/print.c	18;"	d	file:
PrintHeader	src/print.c	/^static void PrintHeader(const Proto* f)$/;"	f	file:
PrintLocals	src/print.c	/^static void PrintLocals(const Proto* f)$/;"	f	file:
PrintString	src/print.c	/^static void PrintString(const TString* ts)$/;"	f	file:
PrintUpvalues	src/print.c	/^static void PrintUpvalues(const Proto* f)$/;"	f	file:
Protect	src/lvm.c	361;"	d	file:
Proto	src/lobject.h	/^typedef struct Proto {$/;"	s
Proto	src/lobject.h	/^} Proto;$/;"	t	typeref:struct:Proto
R	Makefile	/^R= 5.1.5$/;"	m
RA	src/lvm.c	347;"	d	file:
RADIANS_PER_DEGREE	src/lmathlib.c	22;"	d	file:
RANLIB	Makefile	/^RANLIB= ranlib$/;"	m
RANLIB	src/Makefile	/^RANLIB= ranlib$/;"	m
RB	src/lvm.c	349;"	d	file:
RC	src/lvm.c	350;"	d	file:
RESERVED	src/llex.h	/^enum RESERVED {$/;"	g
RKASK	src/lopcodes.h	130;"	d
RKB	src/lvm.c	351;"	d	file:
RKC	src/lvm.c	353;"	d	file:
RM	etc/Makefile	/^RM= rm -f$/;"	m
RM	src/Makefile	/^RM= rm -f$/;"	m
S	src/print.c	159;"	d	file:
SETARG_A	src/lopcodes.h	85;"	d
SETARG_B	src/lopcodes.h	89;"	d
SETARG_Bx	src/lopcodes.h	97;"	d
SETARG_C	src/lopcodes.h	93;"	d
SETARG_sBx	src/lopcodes.h	101;"	d
SET_OPCODE	src/lopcodes.h	81;"	d
SFIXEDBIT	src/lgc.h	61;"	d
SIZE_A	src/lopcodes.h	40;"	d
SIZE_B	src/lopcodes.h	38;"	d
SIZE_Bx	src/lopcodes.h	39;"	d
SIZE_C	src/lopcodes.h	37;"	d
SIZE_OP	src/lopcodes.h	42;"	d
SPECIALS	src/lstrlib.c	183;"	d	file:
SParser	src/ldo.c	/^struct SParser {  \/* data to `f_parser' *\/$/;"	s	file:
SRC	etc/Makefile	/^SRC= $(TOP)\/src$/;"	m
SS	src/print.c	158;"	d	file:
SemInfo	src/llex.h	/^} SemInfo;  \/* semantics information *\/$/;"	t	typeref:union:__anon12
Sizeof	src/print.c	20;"	d	file:
Smain	src/lua.c	/^struct Smain {$/;"	s	file:
Smain	src/luac.c	/^struct Smain {$/;"	s	file:
StkId	src/lobject.h	/^typedef TValue *StkId;  \/* index to stack elements *\/$/;"	t
TK_AND	src/llex.h	/^  TK_AND = FIRST_RESERVED, TK_BREAK,$/;"	e	enum:RESERVED
TK_BREAK	src/llex.h	/^  TK_AND = FIRST_RESERVED, TK_BREAK,$/;"	e	enum:RESERVED
TK_CONCAT	src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_DO	src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_DOTS	src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_ELSE	src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_ELSEIF	src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_END	src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_EOS	src/llex.h	/^  TK_NAME, TK_STRING, TK_EOS$/;"	e	enum:RESERVED
TK_EQ	src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_FALSE	src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_FOR	src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_FUNCTION	src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_GE	src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_IF	src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_IN	src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_LE	src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_LOCAL	src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NAME	src/llex.h	/^  TK_NAME, TK_STRING, TK_EOS$/;"	e	enum:RESERVED
TK_NE	src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_NIL	src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NOT	src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NUMBER	src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_OR	src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_REPEAT	src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_RETURN	src/llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_STRING	src/llex.h	/^  TK_NAME, TK_STRING, TK_EOS$/;"	e	enum:RESERVED
TK_THEN	src/llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_TRUE	src/llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_UNTIL	src/llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_WHILE	src/llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TKey	src/lobject.h	/^typedef union TKey {$/;"	u
TKey	src/lobject.h	/^} TKey;$/;"	t	typeref:union:TKey
TMS	src/ltm.h	/^} TMS;$/;"	t	typeref:enum:__anon14
TM_ADD	src/ltm.h	/^  TM_ADD,$/;"	e	enum:__anon14
TM_CALL	src/ltm.h	/^  TM_CALL,$/;"	e	enum:__anon14
TM_CONCAT	src/ltm.h	/^  TM_CONCAT,$/;"	e	enum:__anon14
TM_DIV	src/ltm.h	/^  TM_DIV,$/;"	e	enum:__anon14
TM_EQ	src/ltm.h	/^  TM_EQ,  \/* last tag method with `fast' access *\/$/;"	e	enum:__anon14
TM_GC	src/ltm.h	/^  TM_GC,$/;"	e	enum:__anon14
TM_INDEX	src/ltm.h	/^  TM_INDEX,$/;"	e	enum:__anon14
TM_LE	src/ltm.h	/^  TM_LE,$/;"	e	enum:__anon14
TM_LEN	src/ltm.h	/^  TM_LEN,$/;"	e	enum:__anon14
TM_LT	src/ltm.h	/^  TM_LT,$/;"	e	enum:__anon14
TM_MOD	src/ltm.h	/^  TM_MOD,$/;"	e	enum:__anon14
TM_MODE	src/ltm.h	/^  TM_MODE,$/;"	e	enum:__anon14
TM_MUL	src/ltm.h	/^  TM_MUL,$/;"	e	enum:__anon14
TM_N	src/ltm.h	/^  TM_N		\/* number of elements in the enum *\/$/;"	e	enum:__anon14
TM_NEWINDEX	src/ltm.h	/^  TM_NEWINDEX,$/;"	e	enum:__anon14
TM_POW	src/ltm.h	/^  TM_POW,$/;"	e	enum:__anon14
TM_SUB	src/ltm.h	/^  TM_SUB,$/;"	e	enum:__anon14
TM_UNM	src/ltm.h	/^  TM_UNM,$/;"	e	enum:__anon14
TOKEN_LEN	src/llex.h	17;"	d
TOP	etc/Makefile	/^TOP= ..$/;"	m
TO_BIN	Makefile	/^TO_BIN= lua luac$/;"	m
TO_INC	Makefile	/^TO_INC= lua.h luaconf.h lualib.h lauxlib.h ..\/etc\/lua.hpp$/;"	m
TO_LIB	Makefile	/^TO_LIB= liblua.a$/;"	m
TO_MAN	Makefile	/^TO_MAN= lua.1 luac.1$/;"	m
TST	etc/Makefile	/^TST= $(TOP)\/test$/;"	m
TString	src/lobject.h	/^typedef union TString {$/;"	u
TString	src/lobject.h	/^} TString;$/;"	t	typeref:union:TString
TValue	src/lobject.h	/^} TValue;$/;"	t	typeref:struct:lua_TValue
TValuefields	src/lobject.h	/^    TValuefields; \/\/ key值$/;"	m	struct:TKey::__anon10
TValuefields	src/lobject.h	/^  TValuefields;  $/;"	m	struct:lua_TValue
TValuefields	src/lobject.h	73;"	d
Table	src/lobject.h	/^typedef struct Table {$/;"	s
Table	src/lobject.h	/^} Table;$/;"	t	typeref:struct:Table
Token	src/llex.h	/^typedef struct Token {$/;"	s
Token	src/llex.h	/^} Token;$/;"	t	typeref:struct:Token
UNARY_PRIORITY	src/lparser.c	824;"	d	file:
UNUSED	src/llimits.h	70;"	d
Udata	src/lobject.h	/^typedef union Udata {$/;"	u
Udata	src/lobject.h	/^} Udata;$/;"	t	typeref:union:Udata
UnOpr	src/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	g
UnOpr	src/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	t	typeref:enum:UnOpr
UpVal	src/lobject.h	/^typedef struct UpVal {$/;"	s
UpVal	src/lobject.h	/^} UpVal;$/;"	t	typeref:struct:UpVal
V	Makefile	/^V= 5.1$/;"	m
VALUEWEAK	src/lgc.c	48;"	d	file:
VALUEWEAKBIT	src/lgc.h	59;"	d
VARARG_HASARG	src/lobject.h	282;"	d
VARARG_ISVARARG	src/lobject.h	283;"	d
VARARG_NEEDSARG	src/lobject.h	284;"	d
VCALL	src/lparser.h	/^  VCALL,	\/* info = instruction pc *\/$/;"	e	enum:__anon1
VFALSE	src/lparser.h	/^  VFALSE,$/;"	e	enum:__anon1
VGLOBAL	src/lparser.h	/^  VGLOBAL,	\/* info = index of table; aux = index of global name in `k' *\/$/;"	e	enum:__anon1
VINDEXED	src/lparser.h	/^  VINDEXED,	\/* info = table register; aux = index register (or `k') *\/$/;"	e	enum:__anon1
VJMP	src/lparser.h	/^  VJMP,		\/* info = instruction pc *\/$/;"	e	enum:__anon1
VK	src/lparser.h	/^  VK,		\/* info = index of constant in `k' *\/$/;"	e	enum:__anon1
VKNUM	src/lparser.h	/^  VKNUM,	\/* nval = numerical value *\/$/;"	e	enum:__anon1
VLOCAL	src/lparser.h	/^  VLOCAL,	\/* info = local register *\/$/;"	e	enum:__anon1
VNIL	src/lparser.h	/^  VNIL,$/;"	e	enum:__anon1
VNONRELOC	src/lparser.h	/^  VNONRELOC,	\/* info = result register *\/$/;"	e	enum:__anon1
VOID	src/print.c	21;"	d	file:
VRELOCABLE	src/lparser.h	/^  VRELOCABLE,	\/* info = instruction pc *\/$/;"	e	enum:__anon1
VTRUE	src/lparser.h	/^  VTRUE,$/;"	e	enum:__anon1
VUPVAL	src/lparser.h	/^  VUPVAL,       \/* info = index of upvalue in `upvalues' *\/$/;"	e	enum:__anon1
VVARARG	src/lparser.h	/^  VVARARG	\/* info = instruction pc *\/$/;"	e	enum:__anon1
VVOID	src/lparser.h	/^  VVOID,	\/* no value *\/$/;"	e	enum:__anon1
Value	src/lobject.h	/^} Value;$/;"	t	typeref:union:__anon5
WHITE0BIT	src/lgc.h	54;"	d
WHITE1BIT	src/lgc.h	55;"	d
WHITEBITS	src/lgc.h	62;"	d
Y 	test/factorial.lua	/^Y = function (g)$/;"	f
Z	src/lundump.c	/^ ZIO* Z;$/;"	m	struct:__anon13	file:
ZIO	src/lzio.h	/^typedef struct Zio ZIO;$/;"	t	typeref:struct:Zio
Zio	src/lzio.h	/^struct Zio {$/;"	s
_CELLS:draw	test/life.lua	/^function _CELLS:draw()$/;"	f
_CELLS:evolve	test/life.lua	/^function _CELLS:evolve(next)$/;"	f
_CELLS:spawn	test/life.lua	/^function _CELLS:spawn(shape,left,top)$/;"	f
a	etc/Makefile	/^	-.\/a.out -e'a=1'$/;"	m
abs_index	src/lauxlib.c	32;"	d	file:
actvar	src/lparser.h	/^  unsigned short actvar[LUAI_MAXVARS];  \/* declared-variable stack *\/$/;"	m	struct:FuncState
add_event	doc/manual.html	/^     function add_event (op1, op2)$/;"	f
add_s	src/lstrlib.c	/^static void add_s (MatchState *ms, luaL_Buffer *b, const char *s,$/;"	f	file:
add_value	src/lstrlib.c	/^static void add_value (MatchState *ms, luaL_Buffer *b, const char *s,$/;"	f	file:
addfield	src/ltablib.c	/^static void addfield (lua_State *L, luaL_Buffer *b, int i) {$/;"	f	file:
addinfo	src/ldebug.c	/^static void addinfo (lua_State *L, const char *msg) {$/;"	f	file:
addintlen	src/lstrlib.c	/^static void addintlen (char *form) {$/;"	f	file:
addk	src/lcode.c	/^static int addk (FuncState *fs, TValue *k, TValue *v) {$/;"	f	file:
addquoted	src/lstrlib.c	/^static void addquoted (lua_State *L, luaL_Buffer *b, int arg) {$/;"	f	file:
adjust_assign	src/lparser.c	/^static void adjust_assign (LexState *ls, int nvars, int nexps, expdesc *e) {$/;"	f	file:
adjust_varargs	src/ldo.c	/^static StkId adjust_varargs (lua_State *L, Proto *p, int actual) {$/;"	f	file:
adjustlocalvars	src/lparser.c	/^static void adjustlocalvars (LexState *ls, int nvars) {$/;"	f	file:
adjustresults	src/lapi.c	780;"	d	file:
adjuststack	src/lauxlib.c	/^static void adjuststack (luaL_Buffer *B) {$/;"	f	file:
allowhook	src/lstate.h	/^  lu_byte allowhook;$/;"	m	struct:lua_State
anchor_token	src/lparser.c	/^static void anchor_token (LexState *ls) {$/;"	f	file:
api_check	src/llimits.h	58;"	d
api_check	src/llimits.h	64;"	d
api_checknelems	src/lapi.c	41;"	d	file:
api_checkvalidindex	src/lapi.c	43;"	d	file:
api_incr_top	src/lapi.c	45;"	d	file:
argc	src/lua.c	/^  int argc;$/;"	m	struct:Smain	file:
argc	src/luac.c	/^ int argc;$/;"	m	struct:Smain	file:
argv	src/lua.c	/^  char **argv;$/;"	m	struct:Smain	file:
argv	src/luac.c	/^ char** argv;$/;"	m	struct:Smain	file:
arith_op	src/lvm.c	364;"	d	file:
array	src/lobject.h	/^  TValue *array;  \/* array part *\/ \/\/ \/\/ 数组方式存储的Node结构$/;"	m	struct:Table
arrayindex	src/ltable.c	/^static int arrayindex (const TValue *key) {$/;"	f	file:
assignment	src/lparser.c	/^static void assignment (LexState *ls, struct LHS_assign *lh, int nvars) {$/;"	f	file:
atomic	src/lgc.c	/^static void atomic (lua_State *L) {$/;"	f	file:
aux	src/lparser.h	/^    struct { int info, aux; } s;$/;"	m	struct:expdesc::__anon2::__anon3
aux_close	src/liolib.c	/^static int aux_close (lua_State *L) {$/;"	f	file:
aux_getn	src/ltablib.c	19;"	d	file:
aux_lines	src/liolib.c	/^static void aux_lines (lua_State *L, int idx, int toclose) {$/;"	f	file:
aux_upvalue	src/lapi.c	/^static const char *aux_upvalue (StkId fi, int n, TValue **val) {$/;"	f	file:
auxgetinfo	src/ldebug.c	/^static int auxgetinfo (lua_State *L, const char *what, lua_Debug *ar,$/;"	f	file:
auxopen	src/lbaselib.c	/^static void auxopen (lua_State *L, const char *name,$/;"	f	file:
auxresume	src/lbaselib.c	/^static int auxresume (lua_State *L, lua_State *co, int narg) {$/;"	f	file:
auxsort	src/ltablib.c	/^static void auxsort (lua_State *L, int l, int u) {$/;"	f	file:
auxupvalue	src/ldblib.c	/^static int auxupvalue (lua_State *L, int get) {$/;"	f	file:
b	src/ldo.c	/^  luai_jmpbuf b;$/;"	m	struct:lua_longjmp	file:
b	src/lobject.h	/^  int b;          \/\/  b表示boolean$/;"	m	union:__anon5
b	src/lundump.c	/^ Mbuffer* b;$/;"	m	struct:__anon13	file:
base	src/lstate.h	/^  StkId base;  \/* base for this function *\/$/;"	m	struct:CallInfo
base	src/lstate.h	/^  StkId base;  \/* base of current function *\/   \/\/ 当前所在函数的base。这个base可以说就是栈底。只不过是当前函数的。$/;"	m	struct:lua_State
baseCcalls	src/lstate.h	/^  unsigned short baseCcalls;  \/* nested C calls when resuming coroutine *\/$/;"	m	struct:lua_State
base_ci	src/lstate.h	/^  CallInfo *base_ci;  \/* array of CallInfo's *\/$/;"	m	struct:lua_State
base_funcs	src/lbaselib.c	/^static const luaL_Reg base_funcs[] = {$/;"	v	file:
base_open	src/lbaselib.c	/^static void base_open (lua_State *L) {$/;"	f	file:
basehookcount	src/lstate.h	/^  int basehookcount;$/;"	m	struct:lua_State
bisect	test/bisect.lua	/^function bisect(f,a,b,fa,fb)$/;"	f
bit2mask	src/lgc.h	31;"	d
bitmask	src/lgc.h	30;"	d
bl	src/lparser.h	/^  struct BlockCnt *bl;  \/* chain of current blocks *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::BlockCnt
black2gray	src/lgc.c	38;"	d	file:
block	src/lparser.c	/^static void block (LexState *ls) {$/;"	f	file:
block_follow	src/lparser.c	/^static int block_follow (int token) {$/;"	f	file:
body	src/lparser.c	/^static void body (LexState *ls, expdesc *e, int needself, int line) {$/;"	f	file:
boolK	src/lcode.c	/^static int boolK (FuncState *fs, int b) {$/;"	f	file:
breaklist	src/lparser.c	/^  int breaklist;  \/* list of jumps out of this loop *\/$/;"	m	struct:BlockCnt	file:
breakstat	src/lparser.c	/^static void breakstat (LexState *ls) {$/;"	f	file:
buff	src/lauxlib.c	/^  char buff[LUAL_BUFFERSIZE];$/;"	m	struct:LoadF	file:
buff	src/ldo.c	/^  Mbuffer buff;  \/* buffer to be used by the scanner *\/$/;"	m	struct:SParser	file:
buff	src/llex.h	/^  Mbuffer *buff;  \/* buffer for tokens *\/$/;"	m	struct:LexState
buff	src/lstate.h	/^  Mbuffer buff;  \/* temporary buffer for string concatentation *\/$/;"	m	struct:global_State
buffer	src/lauxlib.h	/^  char buffer[LUAL_BUFFERSIZE];$/;"	m	struct:luaL_Buffer
buffer	src/lzio.h	/^  char *buffer;$/;"	m	struct:Mbuffer
bufffree	src/lauxlib.c	393;"	d	file:
bufflen	src/lauxlib.c	392;"	d	file:
buffreplace	src/llex.c	/^static void buffreplace (LexState *ls, char from, char to) {$/;"	f	file:
buffsize	src/lzio.h	/^  size_t buffsize;$/;"	m	struct:Mbuffer
bvalue	src/lobject.h	119;"	d
c	src/lobject.h	/^  CClosure c;$/;"	m	union:Closure
cache	test/fib.lua	/^function cache(f)$/;"	f
callTM	src/lvm.c	/^static void callTM (lua_State *L, const TValue *f, const TValue *p1,$/;"	f	file:
callTMres	src/lvm.c	/^static void callTMres (lua_State *L, StkId res, const TValue *f,$/;"	f	file:
call_binTM	src/lvm.c	/^static int call_binTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f	file:
call_orderTM	src/lvm.c	/^static int call_orderTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f	file:
callallgcTM	src/lstate.c	/^static void callallgcTM (lua_State *L, void *ud) {$/;"	f	file:
callrethooks	src/ldo.c	/^static StkId callrethooks (lua_State *L, StkId firstResult) {$/;"	f	file:
cannot	src/luac.c	/^static void cannot(const char* what)$/;"	f	file:
capture	src/lstrlib.c	/^  } capture[LUA_MAXCAPTURES];$/;"	m	struct:MatchState	typeref:struct:MatchState::__anon11	file:
capture_to_close	src/lstrlib.c	/^static int capture_to_close (MatchState *ms) {$/;"	f	file:
cast	src/llimits.h	75;"	d
cast_byte	src/llimits.h	78;"	d
cast_int	src/llimits.h	80;"	d
cast_num	src/llimits.h	79;"	d
ceillog2	src/lobject.h	406;"	d
changewhite	src/lgc.h	72;"	d
char2int	src/lzio.h	20;"	d
check	src/ldebug.c	268;"	d	file:
check	src/ldebug.c	477;"	d	file:
check	src/lparser.c	/^static void check (LexState *ls, int c) {$/;"	f	file:
checkArgMode	src/ldebug.c	/^static int checkArgMode (const Proto *pt, int r, enum OpArgMask mode) {$/;"	f	file:
checkSizes	src/lgc.c	/^static void checkSizes (lua_State *L) {$/;"	f	file:
check_capture	src/lstrlib.c	/^static int check_capture (MatchState *ms, int l) {$/;"	f	file:
check_condition	src/lparser.c	100;"	d	file:
check_conflict	src/lparser.c	/^static void check_conflict (LexState *ls, struct LHS_assign *lh, expdesc *v) {$/;"	f	file:
check_exp	src/llimits.h	57;"	d
check_exp	src/llimits.h	63;"	d
check_match	src/lparser.c	/^static void check_match (LexState *ls, int what, int who, int where) {$/;"	f	file:
check_next	src/llex.c	/^static int check_next (LexState *ls, const char *set) {$/;"	f	file:
checkconsistency	src/lobject.h	127;"	d
checkint	src/lauxlib.c	/^static int checkint (lua_State *L, int topop) {$/;"	f	file:
checkjump	src/ldebug.c	270;"	d	file:
checkjump	src/ldebug.c	478;"	d	file:
checkliveness	src/lobject.h	130;"	d
checkname	src/lparser.c	/^static void checkname(LexState *ls, expdesc *e) {$/;"	f	file:
checknext	src/lparser.c	/^static void checknext (LexState *ls, int c) {$/;"	f	file:
checkopenop	src/ldebug.c	288;"	d	file:
checkreg	src/ldebug.c	272;"	d	file:
checkreg	src/ldebug.c	479;"	d	file:
checkresults	src/lapi.c	784;"	d	file:
checkstacksizes	src/lgc.c	/^static void checkstacksizes (lua_State *L, StkId max) {$/;"	f	file:
chunk	src/lparser.c	/^static void chunk (LexState *ls) {$/;"	f	file:
ci	src/lstate.h	/^  CallInfo *ci;  \/* call info for current function *\/$/;"	m	struct:lua_State
ci_func	src/lstate.h	61;"	d
cl	src/lstate.h	/^  union Closure cl;  \/* 闭包 *\/  $/;"	m	union:GCObject	typeref:union:GCObject::Closure
classend	src/lstrlib.c	/^static const char *classend (MatchState *ms, const char *p) {$/;"	f	file:
cleartable	src/lgc.c	/^static void cleartable (GCObject *l) {$/;"	f	file:
close_func	src/lparser.c	/^static void close_func (LexState *ls) {$/;"	f	file:
close_state	src/lstate.c	/^static void close_state (lua_State *L) {$/;"	f	file:
closelistfield	src/lparser.c	/^static void closelistfield (FuncState *fs, struct ConsControl *cc) {$/;"	f	file:
clvalue	src/lobject.h	117;"	d
co_funcs	src/lbaselib.c	/^static const luaL_Reg co_funcs[] = {$/;"	v	file:
code	src/lobject.h	/^  Instruction *code;$/;"	m	struct:Proto
code_label	src/lcode.c	/^static int code_label (FuncState *fs, int A, int b, int jump) {$/;"	f	file:
codearith	src/lcode.c	/^static void codearith (FuncState *fs, OpCode op, expdesc *e1, expdesc *e2) {$/;"	f	file:
codecomp	src/lcode.c	/^static void codecomp (FuncState *fs, OpCode op, int cond, expdesc *e1,$/;"	f	file:
codenot	src/lcode.c	/^static void codenot (FuncState *fs, expdesc *e) {$/;"	f	file:
codestring	src/lparser.c	/^static void codestring (LexState *ls, expdesc *e, TString *s) {$/;"	f	file:
collectargs	src/lua.c	/^static int collectargs (char **argv, int *pi, int *pv, int *pe) {$/;"	f	file:
collectvalidlines	src/ldebug.c	/^static void collectvalidlines (lua_State *L, Closure *f) {$/;"	f	file:
combine	src/luac.c	/^static const Proto* combine(lua_State* L, int n)$/;"	f	file:
computesizes	src/ltable.c	/^static int computesizes (int nums[], int *narray) {$/;"	f	file:
concat_event	doc/manual.html	/^     function concat_event (op1, op2)$/;"	f
cond	src/lparser.c	/^static int cond (LexState *ls) {$/;"	f	file:
condhardstacktests	src/llimits.h	123;"	d
condhardstacktests	src/llimits.h	125;"	d
condjump	src/lcode.c	/^static int condjump (FuncState *fs, OpCode op, int A, int B, int C) {$/;"	f	file:
constfolding	src/lcode.c	/^static int constfolding (OpCode op, expdesc *e1, expdesc *e2) {$/;"	f	file:
constructor	src/lparser.c	/^static void constructor (LexState *ls, expdesc *t) {$/;"	f	file:
contents	doc/contents.html	/^<H2><A NAME="contents">Contents<\/A><\/H2>$/;"	a
correctstack	src/ldo.c	/^static void correctstack (lua_State *L, TValue *oldstack) {$/;"	f	file:
costatus	src/lbaselib.c	/^static int costatus (lua_State *L, lua_State *co) {$/;"	f	file:
countint	src/ltable.c	/^static int countint (const TValue *key, int *nums) {$/;"	f	file:
createmeta	src/liolib.c	/^static void createmeta (lua_State *L) {$/;"	f	file:
createmetatable	src/lstrlib.c	/^static void createmetatable (lua_State *L) {$/;"	f	file:
createstdfile	src/liolib.c	/^static void createstdfile (lua_State *L, FILE *f, int k, const char *fname) {$/;"	f	file:
currIsNewline	src/llex.c	33;"	d	file:
curr_func	src/lstate.h	60;"	d
current	src/llex.h	/^  int current;  \/* current character (charint) *\/$/;"	m	struct:LexState
currentline	src/ldebug.c	/^static int currentline (lua_State *L, CallInfo *ci) {$/;"	f	file:
currentline	src/lua.h	/^  int currentline;	\/* (l) *\/$/;"	m	struct:lua_Debug
currentpc	src/ldebug.c	/^static int currentpc (lua_State *L, CallInfo *ci) {$/;"	f	file:
currentwhite	src/lstate.h	/^  lu_byte currentwhite;$/;"	m	struct:global_State
data	src/ldump.c	/^ void* data;$/;"	m	struct:__anon15	file:
data	src/lzio.h	/^  void* data;			\/* additional data *\/$/;"	m	struct:Zio
db_debug	src/ldblib.c	/^static int db_debug (lua_State *L) {$/;"	f	file:
db_errorfb	src/ldblib.c	/^static int db_errorfb (lua_State *L) {$/;"	f	file:
db_getfenv	src/ldblib.c	/^static int db_getfenv (lua_State *L) {$/;"	f	file:
db_gethook	src/ldblib.c	/^static int db_gethook (lua_State *L) {$/;"	f	file:
db_getinfo	src/ldblib.c	/^static int db_getinfo (lua_State *L) {$/;"	f	file:
db_getlocal	src/ldblib.c	/^static int db_getlocal (lua_State *L) {$/;"	f	file:
db_getmetatable	src/ldblib.c	/^static int db_getmetatable (lua_State *L) {$/;"	f	file:
db_getregistry	src/ldblib.c	/^static int db_getregistry (lua_State *L) {$/;"	f	file:
db_getupvalue	src/ldblib.c	/^static int db_getupvalue (lua_State *L) {$/;"	f	file:
db_setfenv	src/ldblib.c	/^static int db_setfenv (lua_State *L) {$/;"	f	file:
db_sethook	src/ldblib.c	/^static int db_sethook (lua_State *L) {$/;"	f	file:
db_setlocal	src/ldblib.c	/^static int db_setlocal (lua_State *L) {$/;"	f	file:
db_setmetatable	src/ldblib.c	/^static int db_setmetatable (lua_State *L) {$/;"	f	file:
db_setupvalue	src/ldblib.c	/^static int db_setupvalue (lua_State *L) {$/;"	f	file:
dblib	src/ldblib.c	/^static const luaL_Reg dblib[] = {$/;"	v	file:
decpoint	src/llex.h	/^  char decpoint;  \/* locale decimal point *\/$/;"	m	struct:LexState
delay	test/life.lua	/^function delay() -- NOTE: SYSTEM-DEPENDENT, adjust as necessary$/;"	f
discharge2anyreg	src/lcode.c	/^static void discharge2anyreg (FuncState *fs, expdesc *e) {$/;"	f	file:
discharge2reg	src/lcode.c	/^static void discharge2reg (FuncState *fs, expdesc *e, int reg) {$/;"	f	file:
dischargejpc	src/lcode.c	/^static void dischargejpc (FuncState *fs) {$/;"	f	file:
doargs	src/luac.c	/^static int doargs(int argc, char* argv[])$/;"	f	file:
docall	src/lua.c	/^static int docall (lua_State *L, int narg, int clear) {$/;"	f	file:
dofile	src/lua.c	/^static int dofile (lua_State *L, const char *name) {$/;"	f	file:
dojump	src/lvm.c	358;"	d	file:
dolibrary	src/lua.c	/^static int dolibrary (lua_State *L, const char *name) {$/;"	f	file:
dooptions	src/loadlib.c	/^static void dooptions (lua_State *L, int n) {$/;"	f	file:
dostring	src/lua.c	/^static int dostring (lua_State *L, const char *s, const char *name) {$/;"	f	file:
dotty	src/lua.c	/^static void dotty (lua_State *L) {$/;"	f	file:
dummy	src/lobject.h	/^  L_Umaxalign dummy;  \/* ensures maximum alignment for `local' udata *\/$/;"	m	union:Udata
dummy	src/lobject.h	/^  L_Umaxalign dummy;  \/* ensures maximum alignment for strings *\/$/;"	m	union:TString
dummynode	src/ltable.c	73;"	d	file:
dummynode_	src/ltable.c	/^static const Node dummynode_ = {$/;"	v	file:
dumping	src/luac.c	/^static int dumping=1;			\/* dump bytecodes? *\/$/;"	v	file:
emptybuffer	src/lauxlib.c	/^static int emptybuffer (luaL_Buffer *B) {$/;"	f	file:
end_capture	src/lstrlib.c	/^static const char *end_capture (MatchState *ms, const char *s,$/;"	f	file:
end_ci	src/lstate.h	/^  CallInfo *end_ci;  \/* points after end of ci array*\/$/;"	m	struct:lua_State
endpc	src/lobject.h	/^  int endpc;    \/* first point where variable is dead *\/$/;"	m	struct:LocVar
enterblock	src/lparser.c	/^static void enterblock (FuncState *fs, BlockCnt *bl, lu_byte isbreakable) {$/;"	f	file:
enterlevel	src/lparser.c	/^static void enterlevel (LexState *ls) {$/;"	f	file:
env	src/lobject.h	/^    struct Table *env;$/;"	m	struct:Udata::__anon7	typeref:struct:Udata::__anon7::Table
env	src/lstate.h	/^  TValue env;  \/* temporary place for environments *\/$/;"	m	struct:lua_State
eq_event	doc/manual.html	/^     function eq_event (op1, op2)$/;"	f
equalobj	src/lvm.h	21;"	d
errfile	src/lauxlib.c	/^static int errfile (lua_State *L, const char *what, int fnameindex) {$/;"	f	file:
errfunc	src/lstate.h	/^  ptrdiff_t errfunc;  \/* current error handling function (stack index) *\/$/;"	m	struct:lua_State
error	src/lundump.c	/^static void error(LoadState* S, const char* why)$/;"	f	file:
error	src/lundump.c	32;"	d	file:
errorJmp	src/lstate.h	/^  struct lua_longjmp *errorJmp;  \/* current error recover point *\/$/;"	m	struct:lua_State	typeref:struct:lua_State::lua_longjmp
error_expected	src/lparser.c	/^static void error_expected (LexState *ls, int token) {$/;"	f	file:
errorfromcode	src/loadlib.c	/^static const char *errorfromcode (NSObjectFileImageReturnCode ret) {$/;"	f	file:
errorlimit	src/lparser.c	/^static void errorlimit (FuncState *fs, int limit, const char *what) {$/;"	f	file:
estimate	src/lstate.h	/^  lu_mem estimate;  \/* an estimate of number of bytes actually in use *\/$/;"	m	struct:global_State
event	src/lua.h	/^  int event;$/;"	m	struct:lua_Debug
exp1	src/lparser.c	/^static int exp1 (LexState *ls) {$/;"	f	file:
exp2reg	src/lcode.c	/^static void exp2reg (FuncState *fs, expdesc *e, int reg) {$/;"	f	file:
expdesc	src/lparser.h	/^typedef struct expdesc {$/;"	s
expdesc	src/lparser.h	/^} expdesc;$/;"	t	typeref:struct:expdesc
expkind	src/lparser.h	/^} expkind;$/;"	t	typeref:enum:__anon1
explist1	src/lparser.c	/^static int explist1 (LexState *ls, expdesc *v) {$/;"	f	file:
expr	src/lparser.c	/^static void expr (LexState *ls, expdesc *v) {$/;"	f	file:
exprstat	src/lparser.c	/^static void exprstat (LexState *ls) {$/;"	f	file:
extraline	src/lauxlib.c	/^  int extraline;$/;"	m	struct:LoadF	file:
f	doc/manual.html	/^     function f () <em>body<\/em> end$/;"	f
f	doc/manual.html	/^     function f(a, b) end$/;"	f
f	src/lauxlib.c	/^  FILE *f;$/;"	m	struct:LoadF	file:
f	src/lobject.h	/^  lua_CFunction f;$/;"	m	struct:CClosure
f	src/lparser.h	/^  Proto *f;  \/* current function header *\/$/;"	m	struct:FuncState
f	src/lparser.h	/^  int f;  \/* patch list of `exit when false' *\/$/;"	m	struct:expdesc
f	test/bisect.lua	/^function f(x)$/;"	f
f_Ccall	src/lapi.c	/^static void f_Ccall (lua_State *L, void *ud) {$/;"	f	file:
f_call	src/lapi.c	/^static void f_call (lua_State *L, void *ud) {$/;"	f	file:
f_flush	src/liolib.c	/^static int f_flush (lua_State *L) {$/;"	f	file:
f_isLua	src/lstate.h	62;"	d
f_lines	src/liolib.c	/^static int f_lines (lua_State *L) {$/;"	f	file:
f_luaopen	src/lstate.c	/^static void f_luaopen (lua_State *L, void *ud) {$/;"	f	file:
f_parser	src/ldo.c	/^static void f_parser (lua_State *L, void *ud) {$/;"	f	file:
f_read	src/liolib.c	/^static int f_read (lua_State *L) {$/;"	f	file:
f_seek	src/liolib.c	/^static int f_seek (lua_State *L) {$/;"	f	file:
f_setvbuf	src/liolib.c	/^static int f_setvbuf (lua_State *L) {$/;"	f	file:
f_write	src/liolib.c	/^static int f_write (lua_State *L) {$/;"	f	file:
fasttm	src/ltm.h	44;"	d
fatal	src/luac.c	/^static void fatal(const char* message)$/;"	f	file:
fib	test/fib.lua	/^function fib(n)$/;"	f
field	src/lparser.c	/^static void field (LexState *ls, expdesc *v) {$/;"	f	file:
fileerror	src/liolib.c	/^static void fileerror (lua_State *L, int arg, const char *filename) {$/;"	f	file:
filter 	test/sieve.lua	/^function filter (p, g)$/;"	f
findfile	src/loadlib.c	/^static const char *findfile (lua_State *L, const char *name,$/;"	f	file:
findindex	src/ltable.c	/^static int findindex (lua_State *L, Table *t, StkId key) {$/;"	f	file:
findlocal	src/ldebug.c	/^static const char *findlocal (lua_State *L, CallInfo *ci, int n) {$/;"	f	file:
fixjump	src/lcode.c	/^static void fixjump (FuncState *fs, int pc, int dest) {$/;"	f	file:
flags	src/lobject.h	/^  lu_byte flags;  \/* 1<<p means tagmethod(p) is not present *\/ $/;"	m	struct:Table
flib	src/liolib.c	/^static const luaL_Reg flib[] = {$/;"	v	file:
fnames	src/liolib.c	/^static const char *const fnames[] = {"input", "output"};$/;"	v	file:
foo	doc/manual.html	/^     function foo (a)$/;"	f
forbody	src/lparser.c	/^static void forbody (LexState *ls, int base, int line, int nvars, int isnum) {$/;"	f	file:
foreach	src/ltablib.c	/^static int foreach (lua_State *L) {$/;"	f	file:
foreachi	src/ltablib.c	/^static int foreachi (lua_State *L) {$/;"	f	file:
forlist	src/lparser.c	/^static void forlist (LexState *ls, TString *indexname) {$/;"	f	file:
fornum	src/lparser.c	/^static void fornum (LexState *ls, TString *varname, int line) {$/;"	f	file:
forstat	src/lparser.c	/^static void forstat (LexState *ls, int line) {$/;"	f	file:
frealloc	src/lstate.h	/^  lua_Alloc frealloc;  \/* function to reallocate memory *\/$/;"	m	struct:global_State
freeexp	src/lcode.c	/^static void freeexp (FuncState *fs, expdesc *e) {$/;"	f	file:
freeobj	src/lgc.c	/^static void freeobj (lua_State *L, GCObject *o) {$/;"	f	file:
freereg	src/lcode.c	/^static void freereg (FuncState *fs, int reg) {$/;"	f	file:
freereg	src/lparser.h	/^  int freereg;  \/* first free register *\/$/;"	m	struct:FuncState
freestack	src/lstate.c	/^static void freestack (lua_State *L, lua_State *L1) {$/;"	f	file:
fromstate	src/lstate.c	28;"	d	file:
fs	src/llex.h	/^  struct FuncState *fs;  \/* `FuncState' is private to the parser *\/$/;"	m	struct:LexState	typeref:struct:LexState::FuncState
func	src/lapi.c	/^  StkId func;$/;"	m	struct:CallS	file:
func	src/lapi.c	/^  lua_CFunction func;$/;"	m	struct:CCallS	file:
func	src/lauxlib.h	/^  lua_CFunction func;$/;"	m	struct:luaL_Reg
func	src/lstate.h	/^  StkId func;  \/* function index in the stack *\/$/;"	m	struct:CallInfo
funcargs	src/lparser.c	/^static void funcargs (LexState *ls, expdesc *f) {$/;"	f	file:
funcinfo	src/ldebug.c	/^static void funcinfo (lua_Debug *ar, Closure *cl) {$/;"	f	file:
funcname	src/lparser.c	/^static int funcname (LexState *ls, expdesc *v) {$/;"	f	file:
funcstat	src/lparser.c	/^static void funcstat (LexState *ls, int line) {$/;"	f	file:
function_event	doc/manual.html	/^     function function_event (func, ...)$/;"	f
functions	doc/contents.html	/^<H3><A NAME="functions">Lua functions<\/A><\/H3>$/;"	a
g	doc/manual.html	/^     function g(a, b, ...) end$/;"	f
g	src/lstate.c	/^  global_State g;$/;"	m	struct:LG	file:
g_iofile	src/liolib.c	/^static int g_iofile (lua_State *L, int f, const char *mode) {$/;"	f	file:
g_read	src/liolib.c	/^static int g_read (lua_State *L, FILE *f, int first) {$/;"	f	file:
g_write	src/liolib.c	/^static int g_write (lua_State *L, FILE *f, int arg) {$/;"	f	file:
gc	src/lobject.h	/^  GCObject *gc;   \/\/  gc用于表示需要垃圾回收的一些值，比如string，table等等。$/;"	m	union:__anon5
gc_event	doc/manual.html	/^     function gc_event (udata)$/;"	f
gcdept	src/lstate.h	/^  lu_mem gcdept;  \/* how much GC is `behind schedule' *\/$/;"	m	struct:global_State
gch	src/lstate.h	/^  GCheader gch;$/;"	m	union:GCObject
gclist	src/lobject.h	/^  GCObject *gclist;$/;"	m	struct:Proto
gclist	src/lobject.h	/^  GCObject *gclist;$/;"	m	struct:Table
gclist	src/lstate.h	/^  GCObject *gclist;$/;"	m	struct:lua_State
gco2cl	src/lstate.h	157;"	d
gco2h	src/lstate.h	158;"	d
gco2p	src/lstate.h	159;"	d
gco2th	src/lstate.h	163;"	d
gco2ts	src/lstate.h	154;"	d
gco2u	src/lstate.h	156;"	d
gco2uv	src/lstate.h	160;"	d
gcpause	src/lstate.h	/^  int gcpause;  \/* size of pause between successive GCs *\/$/;"	m	struct:global_State
gcstate	src/lstate.h	/^  lu_byte gcstate;  \/* state of garbage collector *\/$/;"	m	struct:global_State
gcstepmul	src/lstate.h	/^  int gcstepmul;  \/* GC `granularity' *\/$/;"	m	struct:global_State
gctm	src/loadlib.c	/^static int gctm (lua_State *L) {$/;"	f	file:
gcvalue	src/lobject.h	110;"	d
gen 	test/sieve.lua	/^function gen (n)$/;"	f
generatefib 	test/fibfor.lua	/^function generatefib (n)$/;"	f
generic_reader	src/lbaselib.c	/^static const char *generic_reader (lua_State *L, void *ud, size_t *size) {$/;"	f	file:
getBMode	src/lopcodes.h	255;"	d
getCMode	src/lopcodes.h	256;"	d
getF	src/lauxlib.c	/^static const char *getF (lua_State *L, void *ud, size_t *size) {$/;"	f	file:
getOpMode	src/lopcodes.h	254;"	d
getS	src/lauxlib.c	/^static const char *getS (lua_State *L, void *ud, size_t *size) {$/;"	f	file:
get_compTM	src/lvm.c	/^static const TValue *get_compTM (lua_State *L, Table *mt1, Table *mt2,$/;"	f	file:
get_prompt	src/lua.c	/^static const char *get_prompt (lua_State *L, int firstline) {$/;"	f	file:
getargs	src/lua.c	/^static int getargs (lua_State *L, char **argv, int n) {$/;"	f	file:
getbinhandler	doc/manual.html	/^     function getbinhandler (op1, op2, event)$/;"	f
getbinopr	src/lparser.c	/^static BinOpr getbinopr (int op) {$/;"	f	file:
getboolfield	src/loslib.c	/^static int getboolfield (lua_State *L, const char *key) {$/;"	f	file:
getcode	src/lcode.h	39;"	d
getcomphandler	doc/manual.html	/^     function getcomphandler (op1, op2, event)$/;"	f
getcurrenv	src/lapi.c	/^static Table *getcurrenv (lua_State *L) {$/;"	f	file:
getfield	src/loslib.c	/^static int getfield (lua_State *L, const char *key, int d) {$/;"	f	file:
getfreepos	src/ltable.c	/^static Node *getfreepos (Table *t) {$/;"	f	file:
getfunc	src/lbaselib.c	/^static void getfunc (lua_State *L, int opt) {$/;"	f	file:
getfuncname	src/ldebug.c	/^static const char *getfuncname (lua_State *L, CallInfo *ci, const char **name) {$/;"	f	file:
gethooktable	src/ldblib.c	/^static void gethooktable (lua_State *L) {$/;"	f	file:
getiofile	src/liolib.c	/^static FILE *getiofile (lua_State *L, int findex) {$/;"	f	file:
getjump	src/lcode.c	/^static int getjump (FuncState *fs, int pc) {$/;"	f	file:
getjumpcontrol	src/lcode.c	/^static Instruction *getjumpcontrol (FuncState *fs, int pc) {$/;"	f	file:
getline	src/ldebug.h	16;"	d
getlocvar	src/lparser.c	32;"	d	file:
getluaproto	src/ldebug.c	/^static Proto *getluaproto (CallInfo *ci) {$/;"	f	file:
getn	src/ltablib.c	/^static int getn (lua_State *L) {$/;"	f	file:
getobjname	src/ldebug.c	/^static const char *getobjname (lua_State *L, CallInfo *ci, int stackpos,$/;"	f	file:
getsizes	src/lauxlib.c	/^static void getsizes (lua_State *L) {$/;"	f	file:
getstr	src/lobject.h	235;"	d
gettable_event	doc/manual.html	/^     function gettable_event (table, key)$/;"	f
getthread	src/ldblib.c	/^static lua_State *getthread (lua_State *L, int *arg) {$/;"	f	file:
getunopr	src/lparser.c	/^static UnOpr getunopr (int op) {$/;"	f	file:
gfasttm	src/ltm.h	41;"	d
gfind_nodef	src/lstrlib.c	/^static int gfind_nodef (lua_State *L) {$/;"	f	file:
gkey	src/ltable.h	14;"	d
globalL	src/lua.c	/^static lua_State *globalL = NULL;$/;"	v	file:
global_State	src/lstate.h	/^typedef struct global_State {$/;"	s
global_State	src/lstate.h	/^} global_State;$/;"	t	typeref:struct:global_State
gmatch	src/lstrlib.c	/^static int gmatch (lua_State *L) {$/;"	f	file:
gmatch_aux	src/lstrlib.c	/^static int gmatch_aux (lua_State *L) {$/;"	f	file:
gnext	src/ltable.h	16;"	d
gnode	src/ltable.h	13;"	d
gray	src/lstate.h	/^  GCObject *gray;  \/* list of gray objects *\/$/;"	m	struct:global_State
gray2black	src/lgc.h	73;"	d
grayagain	src/lstate.h	/^  GCObject *grayagain;  \/* list of objects to be traversed atomically *\/$/;"	m	struct:global_State
growCI	src/ldo.c	/^static CallInfo *growCI (lua_State *L) {$/;"	f	file:
gt	src/lstate.h	22;"	d
gval	src/ltable.h	15;"	d
h	src/lparser.h	/^  Table *h;  \/* table to find (and reuse) elements in `k' *\/$/;"	m	struct:FuncState
h	src/lstate.h	/^  struct Table h;   \/*表*\/  $/;"	m	union:GCObject	typeref:struct:GCObject::Table
handle_luainit	src/lua.c	/^static int handle_luainit (lua_State *L) {$/;"	f	file:
handle_script	src/lua.c	/^static int handle_script (lua_State *L, char **argv, int n) {$/;"	f	file:
hash	src/lobject.h	/^    unsigned int hash;\/\/ 该字符串的散列值。Lua的字符串比较并不会像一般的做法那样进行逐位比较而是仅比较字符串的散列值$/;"	m	struct:TString::__anon6
hash	src/lstate.h	/^  GCObject **hash;$/;"	m	struct:stringtable
hashboolean	src/ltable.c	53;"	d	file:
hashmod	src/ltable.c	60;"	d	file:
hashnum	src/ltable.c	/^static Node *hashnum (const Table *t, lua_Number n) {$/;"	f	file:
hashpointer	src/ltable.c	63;"	d	file:
hashpow2	src/ltable.c	50;"	d	file:
hashstr	src/ltable.c	52;"	d	file:
hasjumps	src/lcode.c	27;"	d	file:
hasmultret	src/lparser.c	30;"	d	file:
hook	src/lstate.h	/^  lua_Hook hook;$/;"	m	struct:lua_State
hook	test/trace-calls.lua	/^local function hook(event)$/;"	f
hookcount	src/lstate.h	/^  int hookcount;$/;"	m	struct:lua_State
hookf	src/ldblib.c	/^static void hookf (lua_State *L, lua_Debug *ar) {$/;"	f	file:
hookmask	src/lstate.h	/^  lu_byte hookmask;$/;"	m	struct:lua_State
hvalue	src/lobject.h	118;"	d
iABC	src/lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iABx	src/lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iAsBx	src/lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
i_ci	src/lua.h	/^  int i_ci;  \/* active function *\/$/;"	m	struct:lua_Debug
i_key	src/lobject.h	/^  TKey i_key;$/;"	m	struct:Node
i_val	src/lobject.h	/^  TValue i_val;$/;"	m	struct:Node
ifstat	src/lparser.c	/^static void ifstat (LexState *ls, int line) {$/;"	f	file:
inc_ci	src/ldo.c	260;"	d	file:
inclinenumber	src/llex.c	/^static void inclinenumber (LexState *ls) {$/;"	f	file:
incomplete	src/lua.c	/^static int incomplete (lua_State *L, int status) {$/;"	f	file:
incr_top	src/ldo.h	22;"	d
index	doc/contents.html	/^<H2><A NAME="index">Index<\/A><\/H2>$/;"	a
index2adr	src/lapi.c	/^static TValue *index2adr (lua_State *L, int idx) {$/;"	f	file:
indexupvalue	src/lparser.c	/^static int indexupvalue (FuncState *fs, TString *name, expdesc *v) {$/;"	f	file:
info	src/lparser.h	/^    struct { int info, aux; } s;$/;"	m	struct:expdesc::__anon2::__anon3
info	src/lparser.h	/^  lu_byte info;$/;"	m	struct:upvaldesc
info_tailcall	src/ldebug.c	/^static void info_tailcall (lua_Debug *ar) {$/;"	f	file:
init	src/lstrlib.c	/^    const char *init;$/;"	m	struct:MatchState::__anon11	file:
init_exp	src/lparser.c	/^static void init_exp (expdesc *e, expkind k, int i) {$/;"	f	file:
invertjump	src/lcode.c	/^static void invertjump (FuncState *fs, expdesc *e) {$/;"	f	file:
io_close	src/liolib.c	/^static int io_close (lua_State *L) {$/;"	f	file:
io_fclose	src/liolib.c	/^static int io_fclose (lua_State *L) {$/;"	f	file:
io_flush	src/liolib.c	/^static int io_flush (lua_State *L) {$/;"	f	file:
io_gc	src/liolib.c	/^static int io_gc (lua_State *L) {$/;"	f	file:
io_input	src/liolib.c	/^static int io_input (lua_State *L) {$/;"	f	file:
io_lines	src/liolib.c	/^static int io_lines (lua_State *L) {$/;"	f	file:
io_noclose	src/liolib.c	/^static int io_noclose (lua_State *L) {$/;"	f	file:
io_open	src/liolib.c	/^static int io_open (lua_State *L) {$/;"	f	file:
io_output	src/liolib.c	/^static int io_output (lua_State *L) {$/;"	f	file:
io_pclose	src/liolib.c	/^static int io_pclose (lua_State *L) {$/;"	f	file:
io_popen	src/liolib.c	/^static int io_popen (lua_State *L) {$/;"	f	file:
io_read	src/liolib.c	/^static int io_read (lua_State *L) {$/;"	f	file:
io_readline	src/liolib.c	/^static int io_readline (lua_State *L) {$/;"	f	file:
io_tmpfile	src/liolib.c	/^static int io_tmpfile (lua_State *L) {$/;"	f	file:
io_tostring	src/liolib.c	/^static int io_tostring (lua_State *L) {$/;"	f	file:
io_type	src/liolib.c	/^static int io_type (lua_State *L) {$/;"	f	file:
io_write	src/liolib.c	/^static int io_write (lua_State *L) {$/;"	f	file:
iolib	src/liolib.c	/^static const luaL_Reg iolib[] = {$/;"	v	file:
ipairsaux	src/lbaselib.c	/^static int ipairsaux (lua_State *L) {$/;"	f	file:
isLfunction	src/lobject.h	341;"	d
isLua	src/lstate.h	63;"	d
is_vararg	src/lobject.h	/^  lu_byte is_vararg;$/;"	m	struct:Proto
isblack	src/lgc.h	66;"	d
isbreakable	src/lparser.c	/^  lu_byte isbreakable;  \/* true if `block' is a loop *\/$/;"	m	struct:BlockCnt	file:
iscfunction	src/lobject.h	340;"	d
iscleared	src/lgc.c	/^static int iscleared (const TValue *o, int iskey) {$/;"	f	file:
iscollectable	src/lobject.h	210;"	d
isdead	src/lgc.h	70;"	d
isfinalized	src/lgc.c	43;"	d	file:
isgray	src/lgc.h	67;"	d
isinstack	src/ldebug.c	/^static int isinstack (CallInfo *ci, const TValue *o) {$/;"	f	file:
isnumeral	src/lcode.c	/^static int isnumeral(expdesc *e) {$/;"	f	file:
iswhite	src/lgc.h	65;"	d
jpc	src/lparser.h	/^  int jpc;  \/* list of pending jumps to `pc' *\/$/;"	m	struct:FuncState
jumponcond	src/lcode.c	/^static int jumponcond (FuncState *fs, expdesc *e, int cond) {$/;"	f	file:
k	src/lobject.h	/^  TValue *k;  \/* constants used by the function *\/$/;"	m	struct:Proto
k	src/lparser.h	/^  expkind k;$/;"	m	struct:expdesc
k	src/lparser.h	/^  lu_byte k;$/;"	m	struct:upvaldesc
key2tval	src/ltable.h	18;"	d
kname	src/ldebug.c	/^static const char *kname (Proto *p, int c) {$/;"	f	file:
l	src/lobject.h	/^    } l;$/;"	m	union:UpVal::__anon8	typeref:struct:UpVal::__anon8::__anon9
l	src/lobject.h	/^  LClosure l;$/;"	m	union:Closure
l	src/lstate.c	/^  lua_State l;$/;"	m	struct:LG	file:
l_G	src/lstate.h	/^  global_State *l_G;$/;"	m	struct:lua_State
l_alloc	src/lauxlib.c	/^static void *l_alloc (void *ud, void *ptr, size_t osize, size_t nsize) {$/;"	f	file:
l_d	src/luaconf.h	/^union luai_Cast { double l_d; long l_l; };$/;"	m	union:luai_Cast
l_gt	src/lstate.h	/^  TValue l_gt;  \/* table of globals *\/$/;"	m	struct:lua_State
l_isfalse	src/lobject.h	122;"	d
l_l	src/luaconf.h	/^union luai_Cast { double l_d; long l_l; };$/;"	m	union:luai_Cast
l_mem	src/llimits.h	/^typedef LUAI_MEM l_mem;$/;"	t
l_message	src/lua.c	/^static void l_message (const char *pname, const char *msg) {$/;"	f	file:
l_registry	src/lstate.h	/^  TValue l_registry;$/;"	m	struct:global_State
l_setbit	src/lgc.h	32;"	d
l_strcmp	src/lvm.c	/^static int l_strcmp (const TString *ls, const TString *rs) {$/;"	f	file:
l_uacNumber	src/llimits.h	/^typedef LUAI_UACNUMBER l_uacNumber;$/;"	t
laction	src/lua.c	/^static void laction (int i) {$/;"	f	file:
lapi_c	src/lapi.c	13;"	d	file:
lapi_h	src/lapi.h	8;"	d
lastfree	src/lobject.h	/^  Node *lastfree;  \/* any free position is before this position *\/ \/\/ 指向Node数组中的最后一个空闲Node，初始化为Node数组的最后一个值$/;"	m	struct:Table
lastline	src/llex.h	/^  int lastline;  \/* line of last token `consumed' *\/$/;"	m	struct:LexState
lastlinedefined	src/lobject.h	/^  int lastlinedefined;$/;"	m	struct:Proto
lastlinedefined	src/lua.h	/^  int lastlinedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug
lastlistfield	src/lparser.c	/^static void lastlistfield (FuncState *fs, struct ConsControl *cc) {$/;"	f	file:
lasttarget	src/lparser.h	/^  int lasttarget;   \/* `pc' of last `jump target' *\/$/;"	m	struct:FuncState
lauxlib_c	src/lauxlib.c	20;"	d	file:
lauxlib_h	src/lauxlib.h	9;"	d
lbaselib_c	src/lbaselib.c	14;"	d	file:
lcode_c	src/lcode.c	10;"	d	file:
lcode_h	src/lcode.h	8;"	d
lconfig_h	src/luaconf.h	9;"	d
ldblib_c	src/ldblib.c	12;"	d	file:
ldebug_c	src/ldebug.c	13;"	d	file:
ldebug_h	src/ldebug.h	8;"	d
ldo_c	src/ldo.c	12;"	d	file:
ldo_h	src/ldo.h	8;"	d
ldump_c	src/ldump.c	9;"	d	file:
le_event	doc/manual.html	/^     function le_event (op1, op2)$/;"	f
leaveblock	src/lparser.c	/^static void leaveblock (FuncState *fs) {$/;"	f	file:
leavelevel	src/lparser.c	282;"	d	file:
left	src/lparser.c	/^  lu_byte left;  \/* left priority for each binary operator *\/$/;"	m	struct:__anon16	file:
len	src/lobject.h	/^    size_t len;       \/\/ len为字符串的长度。$/;"	m	struct:TString::__anon6
len	src/lobject.h	/^    size_t len;$/;"	m	struct:Udata::__anon7
len	src/lstrlib.c	/^    ptrdiff_t len;$/;"	m	struct:MatchState::__anon11	file:
len_event	doc/manual.html	/^     function len_event (op)$/;"	f
lessequal	src/lvm.c	/^static int lessequal (lua_State *L, const TValue *l, const TValue *r) {$/;"	f	file:
level	src/lstrlib.c	/^  int level;  \/* total number of captures (finished or unfinished) *\/$/;"	m	struct:MatchState	file:
lfunc_c	src/lfunc.c	10;"	d	file:
lfunc_h	src/lfunc.h	8;"	d
lgc_c	src/lgc.c	9;"	d	file:
lgc_h	src/lgc.h	8;"	d
libsize	src/lauxlib.c	/^static int libsize (const luaL_Reg *l) {$/;"	f	file:
linedefined	src/lobject.h	/^  int linedefined;$/;"	m	struct:Proto
linedefined	src/lua.h	/^  int linedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug
lineinfo	src/lobject.h	/^  int *lineinfo;  \/* map from opcodes to source lines *\/$/;"	m	struct:Proto
linenumber	src/llex.h	/^  int linenumber;  \/* input line counter *\/$/;"	m	struct:LexState
linit_c	src/linit.c	8;"	d	file:
liolib_c	src/liolib.c	13;"	d	file:
listfield	src/lparser.c	/^static void listfield (LexState *ls, struct ConsControl *cc) {$/;"	f	file:
listing	src/luac.c	/^static int listing=0;			\/* list bytecodes? *\/$/;"	v	file:
ll_funcs	src/loadlib.c	/^static const luaL_Reg ll_funcs[] = {$/;"	v	file:
ll_load	src/loadlib.c	/^static void *ll_load (lua_State *L, const char *path) {$/;"	f	file:
ll_loadfunc	src/loadlib.c	/^static int ll_loadfunc (lua_State *L, const char *path, const char *sym) {$/;"	f	file:
ll_loadlib	src/loadlib.c	/^static int ll_loadlib (lua_State *L) {$/;"	f	file:
ll_module	src/loadlib.c	/^static int ll_module (lua_State *L) {$/;"	f	file:
ll_register	src/loadlib.c	/^static void **ll_register (lua_State *L, const char *path) {$/;"	f	file:
ll_require	src/loadlib.c	/^static int ll_require (lua_State *L) {$/;"	f	file:
ll_seeall	src/loadlib.c	/^static int ll_seeall (lua_State *L) {$/;"	f	file:
ll_sym	src/loadlib.c	/^static lua_CFunction ll_sym (lua_State *L, void *lib, const char *sym) {$/;"	f	file:
ll_unloadlib	src/loadlib.c	/^static void ll_unloadlib (void *lib) {$/;"	f	file:
llex	src/llex.c	/^static int llex (LexState *ls, SemInfo *seminfo) {$/;"	f	file:
llex_c	src/llex.c	12;"	d	file:
llex_h	src/llex.h	8;"	d
llimits_h	src/llimits.h	8;"	d
lmathlib_c	src/lmathlib.c	11;"	d	file:
lmem_c	src/lmem.c	10;"	d	file:
lmem_h	src/lmem.h	8;"	d
lmemfind	src/lstrlib.c	/^static const char *lmemfind (const char *s1, size_t l1,$/;"	f	file:
lmod	src/lobject.h	394;"	d
load_aux	src/lbaselib.c	/^static int load_aux (lua_State *L, int status) {$/;"	f	file:
loader_C	src/loadlib.c	/^static int loader_C (lua_State *L) {$/;"	f	file:
loader_Croot	src/loadlib.c	/^static int loader_Croot (lua_State *L) {$/;"	f	file:
loader_Lua	src/loadlib.c	/^static int loader_Lua (lua_State *L) {$/;"	f	file:
loader_preload	src/loadlib.c	/^static int loader_preload (lua_State *L) {$/;"	f	file:
loaderror	src/loadlib.c	/^static void loaderror (lua_State *L, const char *filename) {$/;"	f	file:
loaders	src/loadlib.c	/^static const lua_CFunction loaders[] =$/;"	v	file:
loadlib_c	src/loadlib.c	16;"	d	file:
loadline	src/lua.c	/^static int loadline (lua_State *L) {$/;"	f	file:
lobject_c	src/lobject.c	13;"	d	file:
lobject_h	src/lobject.h	9;"	d
local a 	test/factorial.lua	/^      local a = function (f) return f(f) end$/;"	f
local f	test/env.lua	/^local f=function (t,i) return os.getenv(i) end$/;"	f
local f	test/readonly.lua	/^local f=function (t,i) error("cannot redefine global variable `"..i.."'",2) end$/;"	f
local log	test/trace-globals.lua	/^ local log=function (name,old,new)$/;"	f
local set	test/trace-globals.lua	/^ local set=function (t,name,value)$/;"	f
local tostring	test/trace-globals.lua	/^ local tostring=function(a)$/;"	f
localfunc	src/lparser.c	/^static void localfunc (LexState *ls) {$/;"	f	file:
localstat	src/lparser.c	/^static void localstat (LexState *ls) {$/;"	f	file:
locvars	src/lobject.h	/^  struct LocVar *locvars;  \/* information about local variables *\/$/;"	m	struct:Proto	typeref:struct:Proto::LocVar
lookahead	src/llex.h	/^  Token lookahead;  \/* look ahead token *\/$/;"	m	struct:LexState
lopcodes_c	src/lopcodes.c	7;"	d	file:
lopcodes_h	src/lopcodes.h	8;"	d
loslib_c	src/loslib.c	14;"	d	file:
lparser_c	src/lparser.c	10;"	d	file:
lparser_h	src/lparser.h	8;"	d
ls	src/lparser.h	/^  struct LexState *ls;  \/* lexical state *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::LexState
lsizenode	src/lobject.h	/^  lu_byte lsizenode;  \/* log2 of size of `node' array *\/ \/\/ \/\/ Node数量 = 2^lsizenode 个Node结构$/;"	m	struct:Table
lstate_c	src/lstate.c	10;"	d	file:
lstate_h	src/lstate.h	8;"	d
lstop	src/lua.c	/^static void lstop (lua_State *L, lua_Debug *ar) {$/;"	f	file:
lstring_c	src/lstring.c	10;"	d	file:
lstring_h	src/lstring.h	8;"	d
lstrlib_c	src/lstrlib.c	14;"	d	file:
lt_event	doc/manual.html	/^     function lt_event (op1, op2)$/;"	f
ltable_c	src/ltable.c	24;"	d	file:
ltable_h	src/ltable.h	8;"	d
ltablib_c	src/ltablib.c	10;"	d	file:
ltm_c	src/ltm.c	10;"	d	file:
ltm_h	src/ltm.h	8;"	d
lu_byte	src/llimits.h	/^typedef unsigned char lu_byte;$/;"	t
lu_int32	src/llimits.h	/^typedef LUAI_UINT32 lu_int32;$/;"	t
lu_mem	src/llimits.h	/^typedef LUAI_UMEM lu_mem;$/;"	t
luaA_pushobject	src/lapi.c	/^void luaA_pushobject (lua_State *L, const TValue *o) {$/;"	f
luaB_assert	src/lbaselib.c	/^static int luaB_assert (lua_State *L) {$/;"	f	file:
luaB_auxwrap	src/lbaselib.c	/^static int luaB_auxwrap (lua_State *L) {$/;"	f	file:
luaB_cocreate	src/lbaselib.c	/^static int luaB_cocreate (lua_State *L) {$/;"	f	file:
luaB_collectgarbage	src/lbaselib.c	/^static int luaB_collectgarbage (lua_State *L) {$/;"	f	file:
luaB_coresume	src/lbaselib.c	/^static int luaB_coresume (lua_State *L) {$/;"	f	file:
luaB_corunning	src/lbaselib.c	/^static int luaB_corunning (lua_State *L) {$/;"	f	file:
luaB_costatus	src/lbaselib.c	/^static int luaB_costatus (lua_State *L) {$/;"	f	file:
luaB_cowrap	src/lbaselib.c	/^static int luaB_cowrap (lua_State *L) {$/;"	f	file:
luaB_dofile	src/lbaselib.c	/^static int luaB_dofile (lua_State *L) {$/;"	f	file:
luaB_error	src/lbaselib.c	/^static int luaB_error (lua_State *L) {$/;"	f	file:
luaB_gcinfo	src/lbaselib.c	/^static int luaB_gcinfo (lua_State *L) {$/;"	f	file:
luaB_getfenv	src/lbaselib.c	/^static int luaB_getfenv (lua_State *L) {$/;"	f	file:
luaB_getmetatable	src/lbaselib.c	/^static int luaB_getmetatable (lua_State *L) {$/;"	f	file:
luaB_ipairs	src/lbaselib.c	/^static int luaB_ipairs (lua_State *L) {$/;"	f	file:
luaB_load	src/lbaselib.c	/^static int luaB_load (lua_State *L) {$/;"	f	file:
luaB_loadfile	src/lbaselib.c	/^static int luaB_loadfile (lua_State *L) {$/;"	f	file:
luaB_loadstring	src/lbaselib.c	/^static int luaB_loadstring (lua_State *L) {$/;"	f	file:
luaB_newproxy	src/lbaselib.c	/^static int luaB_newproxy (lua_State *L) {$/;"	f	file:
luaB_next	src/lbaselib.c	/^static int luaB_next (lua_State *L) {$/;"	f	file:
luaB_pairs	src/lbaselib.c	/^static int luaB_pairs (lua_State *L) {$/;"	f	file:
luaB_pcall	src/lbaselib.c	/^static int luaB_pcall (lua_State *L) {$/;"	f	file:
luaB_print	src/lbaselib.c	/^static int luaB_print (lua_State *L) {$/;"	f	file:
luaB_rawequal	src/lbaselib.c	/^static int luaB_rawequal (lua_State *L) {$/;"	f	file:
luaB_rawget	src/lbaselib.c	/^static int luaB_rawget (lua_State *L) {$/;"	f	file:
luaB_rawset	src/lbaselib.c	/^static int luaB_rawset (lua_State *L) {$/;"	f	file:
luaB_select	src/lbaselib.c	/^static int luaB_select (lua_State *L) {$/;"	f	file:
luaB_setfenv	src/lbaselib.c	/^static int luaB_setfenv (lua_State *L) {$/;"	f	file:
luaB_setmetatable	src/lbaselib.c	/^static int luaB_setmetatable (lua_State *L) {$/;"	f	file:
luaB_tonumber	src/lbaselib.c	/^static int luaB_tonumber (lua_State *L) {$/;"	f	file:
luaB_tostring	src/lbaselib.c	/^static int luaB_tostring (lua_State *L) {$/;"	f	file:
luaB_type	src/lbaselib.c	/^static int luaB_type (lua_State *L) {$/;"	f	file:
luaB_unpack	src/lbaselib.c	/^static int luaB_unpack (lua_State *L) {$/;"	f	file:
luaB_xpcall	src/lbaselib.c	/^static int luaB_xpcall (lua_State *L) {$/;"	f	file:
luaB_yield	src/lbaselib.c	/^static int luaB_yield (lua_State *L) {$/;"	f	file:
luaC_barrier	src/lgc.h	86;"	d
luaC_barrierback	src/lgc.c	/^void luaC_barrierback (lua_State *L, Table *t) {$/;"	f
luaC_barrierf	src/lgc.c	/^void luaC_barrierf (lua_State *L, GCObject *o, GCObject *v) {$/;"	f
luaC_barriert	src/lgc.h	89;"	d
luaC_callGCTM	src/lgc.c	/^void luaC_callGCTM (lua_State *L) {$/;"	f
luaC_checkGC	src/lgc.h	80;"	d
luaC_freeall	src/lgc.c	/^void luaC_freeall (lua_State *L) {$/;"	f
luaC_fullgc	src/lgc.c	/^void luaC_fullgc (lua_State *L) {$/;"	f
luaC_link	src/lgc.c	/^void luaC_link (lua_State *L, GCObject *o, lu_byte tt) {$/;"	f
luaC_linkupval	src/lgc.c	/^void luaC_linkupval (lua_State *L, UpVal *uv) {$/;"	f
luaC_objbarrier	src/lgc.h	92;"	d
luaC_objbarriert	src/lgc.h	96;"	d
luaC_separateudata	src/lgc.c	/^size_t luaC_separateudata (lua_State *L, int all) {$/;"	f
luaC_step	src/lgc.c	/^void luaC_step (lua_State *L) {$/;"	f
luaC_white	src/lgc.h	77;"	d
luaD_call	src/ldo.c	/^void luaD_call (lua_State *L, StkId func, int nResults) {$/;"	f
luaD_callhook	src/ldo.c	/^void luaD_callhook (lua_State *L, int event, int line) {$/;"	f
luaD_checkstack	src/ldo.h	16;"	d
luaD_growstack	src/ldo.c	/^void luaD_growstack (lua_State *L, int n) {$/;"	f
luaD_pcall	src/ldo.c	/^int luaD_pcall (lua_State *L, Pfunc func, void *u,$/;"	f
luaD_poscall	src/ldo.c	/^int luaD_poscall (lua_State *L, StkId firstResult) {$/;"	f
luaD_precall	src/ldo.c	/^int luaD_precall (lua_State *L, StkId func, int nresults) {$/;"	f
luaD_protectedparser	src/ldo.c	/^int luaD_protectedparser (lua_State *L, ZIO *z, const char *name) {$/;"	f
luaD_rawrunprotected	src/ldo.c	/^int luaD_rawrunprotected (lua_State *L, Pfunc f, void *ud) {$/;"	f
luaD_reallocCI	src/ldo.c	/^void luaD_reallocCI (lua_State *L, int newsize) {$/;"	f
luaD_reallocstack	src/ldo.c	/^void luaD_reallocstack (lua_State *L, int newsize) {$/;"	f
luaD_seterrorobj	src/ldo.c	/^void luaD_seterrorobj (lua_State *L, int errcode, StkId oldtop) {$/;"	f
luaD_throw	src/ldo.c	/^void luaD_throw (lua_State *L, int errcode) {$/;"	f
luaE_freethread	src/lstate.c	/^void luaE_freethread (lua_State *L, lua_State *L1) {$/;"	f
luaE_newthread	src/lstate.c	/^lua_State *luaE_newthread (lua_State *L) {$/;"	f
luaF_close	src/lfunc.c	/^void luaF_close (lua_State *L, StkId level) {$/;"	f
luaF_findupval	src/lfunc.c	/^UpVal *luaF_findupval (lua_State *L, StkId level) {$/;"	f
luaF_freeclosure	src/lfunc.c	/^void luaF_freeclosure (lua_State *L, Closure *c) {$/;"	f
luaF_freeproto	src/lfunc.c	/^void luaF_freeproto (lua_State *L, Proto *f) {$/;"	f
luaF_freeupval	src/lfunc.c	/^void luaF_freeupval (lua_State *L, UpVal *uv) {$/;"	f
luaF_getlocalname	src/lfunc.c	/^const char *luaF_getlocalname (const Proto *f, int local_number, int pc) {$/;"	f
luaF_newCclosure	src/lfunc.c	/^Closure *luaF_newCclosure (lua_State *L, int nelems, Table *e) {$/;"	f
luaF_newLclosure	src/lfunc.c	/^Closure *luaF_newLclosure (lua_State *L, int nelems, Table *e) {$/;"	f
luaF_newproto	src/lfunc.c	/^Proto *luaF_newproto (lua_State *L) {$/;"	f
luaF_newupval	src/lfunc.c	/^UpVal *luaF_newupval (lua_State *L) {$/;"	f
luaG_aritherror	src/ldebug.c	/^void luaG_aritherror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f
luaG_checkcode	src/ldebug.c	/^int luaG_checkcode (const Proto *pt) {$/;"	f
luaG_checkopenop	src/ldebug.c	/^int luaG_checkopenop (Instruction i) {$/;"	f
luaG_concaterror	src/ldebug.c	/^void luaG_concaterror (lua_State *L, StkId p1, StkId p2) {$/;"	f
luaG_errormsg	src/ldebug.c	/^void luaG_errormsg (lua_State *L) {$/;"	f
luaG_ordererror	src/ldebug.c	/^int luaG_ordererror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f
luaG_runerror	src/ldebug.c	/^void luaG_runerror (lua_State *L, const char *fmt, ...) {$/;"	f
luaG_typeerror	src/ldebug.c	/^void luaG_typeerror (lua_State *L, const TValue *o, const char *op) {$/;"	f
luaH_free	src/ltable.c	/^void luaH_free (lua_State *L, Table *t) {$/;"	f
luaH_get	src/ltable.c	/^const TValue *luaH_get (Table *t, const TValue *key) {$/;"	f
luaH_getn	src/ltable.c	/^int luaH_getn (Table *t) {$/;"	f
luaH_getnum	src/ltable.c	/^const TValue *luaH_getnum (Table *t, int key) {$/;"	f
luaH_getstr	src/ltable.c	/^const TValue *luaH_getstr (Table *t, TString *key) {$/;"	f
luaH_isdummy	src/ltable.c	/^int luaH_isdummy (Node *n) { return n == dummynode; }$/;"	f
luaH_mainposition	src/ltable.c	/^Node *luaH_mainposition (const Table *t, const TValue *key) {$/;"	f
luaH_new	src/ltable.c	/^Table *luaH_new (lua_State *L, int narray, int nhash) {$/;"	f
luaH_next	src/ltable.c	/^int luaH_next (lua_State *L, Table *t, StkId key) {$/;"	f
luaH_resizearray	src/ltable.c	/^void luaH_resizearray (lua_State *L, Table *t, int nasize) {$/;"	f
luaH_set	src/ltable.c	/^TValue *luaH_set (lua_State *L, Table *t, const TValue *key) {$/;"	f
luaH_setnum	src/ltable.c	/^TValue *luaH_setnum (lua_State *L, Table *t, int key) {$/;"	f
luaH_setstr	src/ltable.c	/^TValue *luaH_setstr (lua_State *L, Table *t, TString *key) {$/;"	f
luaI_openlib	src/lauxlib.c	/^LUALIB_API void luaI_openlib (lua_State *L, const char *libname,$/;"	f
luaI_openlib	src/lauxlib.h	27;"	d
luaK_checkstack	src/lcode.c	/^void luaK_checkstack (FuncState *fs, int n) {$/;"	f
luaK_code	src/lcode.c	/^static int luaK_code (FuncState *fs, Instruction i, int line) {$/;"	f	file:
luaK_codeABC	src/lcode.c	/^int luaK_codeABC (FuncState *fs, OpCode o, int a, int b, int c) {$/;"	f
luaK_codeABx	src/lcode.c	/^int luaK_codeABx (FuncState *fs, OpCode o, int a, unsigned int bc) {$/;"	f
luaK_codeAsBx	src/lcode.h	41;"	d
luaK_concat	src/lcode.c	/^void luaK_concat (FuncState *fs, int *l1, int l2) {$/;"	f
luaK_dischargevars	src/lcode.c	/^void luaK_dischargevars (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2RK	src/lcode.c	/^int luaK_exp2RK (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2anyreg	src/lcode.c	/^int luaK_exp2anyreg (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2nextreg	src/lcode.c	/^void luaK_exp2nextreg (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2val	src/lcode.c	/^void luaK_exp2val (FuncState *fs, expdesc *e) {$/;"	f
luaK_fixline	src/lcode.c	/^void luaK_fixline (FuncState *fs, int line) {$/;"	f
luaK_getlabel	src/lcode.c	/^int luaK_getlabel (FuncState *fs) {$/;"	f
luaK_goiffalse	src/lcode.c	/^static void luaK_goiffalse (FuncState *fs, expdesc *e) {$/;"	f	file:
luaK_goiftrue	src/lcode.c	/^void luaK_goiftrue (FuncState *fs, expdesc *e) {$/;"	f
luaK_indexed	src/lcode.c	/^void luaK_indexed (FuncState *fs, expdesc *t, expdesc *k) {$/;"	f
luaK_infix	src/lcode.c	/^void luaK_infix (FuncState *fs, BinOpr op, expdesc *v) {$/;"	f
luaK_jump	src/lcode.c	/^int luaK_jump (FuncState *fs) {$/;"	f
luaK_nil	src/lcode.c	/^void luaK_nil (FuncState *fs, int from, int n) {$/;"	f
luaK_numberK	src/lcode.c	/^int luaK_numberK (FuncState *fs, lua_Number r) {$/;"	f
luaK_patchlist	src/lcode.c	/^void luaK_patchlist (FuncState *fs, int list, int target) {$/;"	f
luaK_patchtohere	src/lcode.c	/^void luaK_patchtohere (FuncState *fs, int list) {$/;"	f
luaK_posfix	src/lcode.c	/^void luaK_posfix (FuncState *fs, BinOpr op, expdesc *e1, expdesc *e2) {$/;"	f
luaK_prefix	src/lcode.c	/^void luaK_prefix (FuncState *fs, UnOpr op, expdesc *e) {$/;"	f
luaK_reserveregs	src/lcode.c	/^void luaK_reserveregs (FuncState *fs, int n) {$/;"	f
luaK_ret	src/lcode.c	/^void luaK_ret (FuncState *fs, int first, int nret) {$/;"	f
luaK_self	src/lcode.c	/^void luaK_self (FuncState *fs, expdesc *e, expdesc *key) {$/;"	f
luaK_setlist	src/lcode.c	/^void luaK_setlist (FuncState *fs, int base, int nelems, int tostore) {$/;"	f
luaK_setmultret	src/lcode.h	43;"	d
luaK_setoneret	src/lcode.c	/^void luaK_setoneret (FuncState *fs, expdesc *e) {$/;"	f
luaK_setreturns	src/lcode.c	/^void luaK_setreturns (FuncState *fs, expdesc *e, int nresults) {$/;"	f
luaK_storevar	src/lcode.c	/^void luaK_storevar (FuncState *fs, expdesc *var, expdesc *ex) {$/;"	f
luaK_stringK	src/lcode.c	/^int luaK_stringK (FuncState *fs, TString *s) {$/;"	f
luaL_Buffer	doc/manual.html	/^<hr><h3><a name="luaL_Buffer"><code>luaL_Buffer<\/code><\/a><\/h3>$/;"	a
luaL_Buffer	src/lauxlib.h	/^typedef struct luaL_Buffer {$/;"	s
luaL_Buffer	src/lauxlib.h	/^} luaL_Buffer;$/;"	t	typeref:struct:luaL_Buffer
luaL_Reg	doc/manual.html	/^<hr><h3><a name="luaL_Reg"><code>luaL_Reg<\/code><\/a><\/h3>$/;"	a
luaL_Reg	src/lauxlib.h	/^typedef struct luaL_Reg {$/;"	s
luaL_Reg	src/lauxlib.h	/^} luaL_Reg;$/;"	t	typeref:struct:luaL_Reg
luaL_addchar	doc/manual.html	/^<hr><h3><a name="luaL_addchar"><code>luaL_addchar<\/code><\/a><\/h3><p>$/;"	a
luaL_addchar	src/lauxlib.h	136;"	d
luaL_addlstring	doc/manual.html	/^<hr><h3><a name="luaL_addlstring"><code>luaL_addlstring<\/code><\/a><\/h3><p>$/;"	a
luaL_addlstring	src/lauxlib.c	/^LUALIB_API void luaL_addlstring (luaL_Buffer *B, const char *s, size_t l) {$/;"	f
luaL_addsize	doc/manual.html	/^<hr><h3><a name="luaL_addsize"><code>luaL_addsize<\/code><\/a><\/h3><p>$/;"	a
luaL_addsize	src/lauxlib.h	143;"	d
luaL_addstring	doc/manual.html	/^<hr><h3><a name="luaL_addstring"><code>luaL_addstring<\/code><\/a><\/h3><p>$/;"	a
luaL_addstring	src/lauxlib.c	/^LUALIB_API void luaL_addstring (luaL_Buffer *B, const char *s) {$/;"	f
luaL_addvalue	doc/manual.html	/^<hr><h3><a name="luaL_addvalue"><code>luaL_addvalue<\/code><\/a><\/h3><p>$/;"	a
luaL_addvalue	src/lauxlib.c	/^LUALIB_API void luaL_addvalue (luaL_Buffer *B) {$/;"	f
luaL_argcheck	doc/manual.html	/^<hr><h3><a name="luaL_argcheck"><code>luaL_argcheck<\/code><\/a><\/h3><p>$/;"	a
luaL_argcheck	src/lauxlib.h	100;"	d
luaL_argerror	doc/manual.html	/^<hr><h3><a name="luaL_argerror"><code>luaL_argerror<\/code><\/a><\/h3><p>$/;"	a
luaL_argerror	src/lauxlib.c	/^LUALIB_API int luaL_argerror (lua_State *L, int narg, const char *extramsg) {$/;"	f
luaL_buffinit	doc/manual.html	/^<hr><h3><a name="luaL_buffinit"><code>luaL_buffinit<\/code><\/a><\/h3><p>$/;"	a
luaL_buffinit	src/lauxlib.c	/^LUALIB_API void luaL_buffinit (lua_State *L, luaL_Buffer *B) {$/;"	f
luaL_callmeta	doc/manual.html	/^<hr><h3><a name="luaL_callmeta"><code>luaL_callmeta<\/code><\/a><\/h3><p>$/;"	a
luaL_callmeta	src/lauxlib.c	/^LUALIB_API int luaL_callmeta (lua_State *L, int obj, const char *event) {$/;"	f
luaL_checkany	doc/manual.html	/^<hr><h3><a name="luaL_checkany"><code>luaL_checkany<\/code><\/a><\/h3><p>$/;"	a
luaL_checkany	src/lauxlib.c	/^LUALIB_API void luaL_checkany (lua_State *L, int narg) {$/;"	f
luaL_checkint	doc/manual.html	/^<hr><h3><a name="luaL_checkint"><code>luaL_checkint<\/code><\/a><\/h3><p>$/;"	a
luaL_checkint	src/lauxlib.h	104;"	d
luaL_checkinteger	doc/manual.html	/^<hr><h3><a name="luaL_checkinteger"><code>luaL_checkinteger<\/code><\/a><\/h3><p>$/;"	a
luaL_checkinteger	src/lauxlib.c	/^LUALIB_API lua_Integer luaL_checkinteger (lua_State *L, int narg) {$/;"	f
luaL_checklong	doc/manual.html	/^<hr><h3><a name="luaL_checklong"><code>luaL_checklong<\/code><\/a><\/h3><p>$/;"	a
luaL_checklong	src/lauxlib.h	106;"	d
luaL_checklstring	doc/manual.html	/^<hr><h3><a name="luaL_checklstring"><code>luaL_checklstring<\/code><\/a><\/h3><p>$/;"	a
luaL_checklstring	src/lauxlib.c	/^LUALIB_API const char *luaL_checklstring (lua_State *L, int narg, size_t *len) {$/;"	f
luaL_checknumber	doc/manual.html	/^<hr><h3><a name="luaL_checknumber"><code>luaL_checknumber<\/code><\/a><\/h3><p>$/;"	a
luaL_checknumber	src/lauxlib.c	/^LUALIB_API lua_Number luaL_checknumber (lua_State *L, int narg) {$/;"	f
luaL_checkoption	doc/manual.html	/^<hr><h3><a name="luaL_checkoption"><code>luaL_checkoption<\/code><\/a><\/h3><p>$/;"	a
luaL_checkoption	src/lauxlib.c	/^LUALIB_API int luaL_checkoption (lua_State *L, int narg, const char *def,$/;"	f
luaL_checkstack	doc/manual.html	/^<hr><h3><a name="luaL_checkstack"><code>luaL_checkstack<\/code><\/a><\/h3><p>$/;"	a
luaL_checkstack	src/lauxlib.c	/^LUALIB_API void luaL_checkstack (lua_State *L, int space, const char *mes) {$/;"	f
luaL_checkstring	doc/manual.html	/^<hr><h3><a name="luaL_checkstring"><code>luaL_checkstring<\/code><\/a><\/h3><p>$/;"	a
luaL_checkstring	src/lauxlib.h	102;"	d
luaL_checktype	doc/manual.html	/^<hr><h3><a name="luaL_checktype"><code>luaL_checktype<\/code><\/a><\/h3><p>$/;"	a
luaL_checktype	src/lauxlib.c	/^LUALIB_API void luaL_checktype (lua_State *L, int narg, int t) {$/;"	f
luaL_checkudata	doc/manual.html	/^<hr><h3><a name="luaL_checkudata"><code>luaL_checkudata<\/code><\/a><\/h3><p>$/;"	a
luaL_checkudata	src/lauxlib.c	/^LUALIB_API void *luaL_checkudata (lua_State *L, int ud, const char *tname) {$/;"	f
luaL_dofile	doc/manual.html	/^<hr><h3><a name="luaL_dofile"><code>luaL_dofile<\/code><\/a><\/h3><p>$/;"	a
luaL_dofile	src/lauxlib.h	111;"	d
luaL_dostring	doc/manual.html	/^<hr><h3><a name="luaL_dostring"><code>luaL_dostring<\/code><\/a><\/h3><p>$/;"	a
luaL_dostring	src/lauxlib.h	114;"	d
luaL_error	doc/manual.html	/^<hr><h3><a name="luaL_error"><code>luaL_error<\/code><\/a><\/h3><p>$/;"	a
luaL_error	src/lauxlib.c	/^LUALIB_API int luaL_error (lua_State *L, const char *fmt, ...) {$/;"	f
luaL_findtable	src/lauxlib.c	/^LUALIB_API const char *luaL_findtable (lua_State *L, int idx,$/;"	f
luaL_getmetafield	doc/manual.html	/^<hr><h3><a name="luaL_getmetafield"><code>luaL_getmetafield<\/code><\/a><\/h3><p>$/;"	a
luaL_getmetafield	src/lauxlib.c	/^LUALIB_API int luaL_getmetafield (lua_State *L, int obj, const char *event) {$/;"	f
luaL_getmetatable	doc/manual.html	/^<hr><h3><a name="luaL_getmetatable"><code>luaL_getmetatable<\/code><\/a><\/h3><p>$/;"	a
luaL_getmetatable	src/lauxlib.h	117;"	d
luaL_getn	src/lauxlib.c	/^LUALIB_API int luaL_getn (lua_State *L, int t) {$/;"	f
luaL_getn	src/lauxlib.h	22;"	d
luaL_gsub	doc/manual.html	/^<hr><h3><a name="luaL_gsub"><code>luaL_gsub<\/code><\/a><\/h3><p>$/;"	a
luaL_gsub	src/lauxlib.c	/^LUALIB_API const char *luaL_gsub (lua_State *L, const char *s, const char *p,$/;"	f
luaL_loadbuffer	doc/manual.html	/^<hr><h3><a name="luaL_loadbuffer"><code>luaL_loadbuffer<\/code><\/a><\/h3><p>$/;"	a
luaL_loadbuffer	src/lauxlib.c	/^LUALIB_API int luaL_loadbuffer (lua_State *L, const char *buff, size_t size,$/;"	f
luaL_loadfile	doc/manual.html	/^<hr><h3><a name="luaL_loadfile"><code>luaL_loadfile<\/code><\/a><\/h3><p>$/;"	a
luaL_loadfile	src/lauxlib.c	/^LUALIB_API int luaL_loadfile (lua_State *L, const char *filename) {$/;"	f
luaL_loadstring	doc/manual.html	/^<hr><h3><a name="luaL_loadstring"><code>luaL_loadstring<\/code><\/a><\/h3><p>$/;"	a
luaL_loadstring	src/lauxlib.c	/^LUALIB_API int (luaL_loadstring) (lua_State *L, const char *s) {$/;"	f
luaL_newmetatable	doc/manual.html	/^<hr><h3><a name="luaL_newmetatable"><code>luaL_newmetatable<\/code><\/a><\/h3><p>$/;"	a
luaL_newmetatable	src/lauxlib.c	/^LUALIB_API int luaL_newmetatable (lua_State *L, const char *tname) {$/;"	f
luaL_newstate	doc/manual.html	/^<hr><h3><a name="luaL_newstate"><code>luaL_newstate<\/code><\/a><\/h3><p>$/;"	a
luaL_newstate	src/lauxlib.c	/^LUALIB_API lua_State *luaL_newstate (void) {$/;"	f
luaL_openlibs	doc/manual.html	/^<hr><h3><a name="luaL_openlibs"><code>luaL_openlibs<\/code><\/a><\/h3><p>$/;"	a
luaL_openlibs	src/linit.c	/^LUALIB_API void luaL_openlibs (lua_State *L) {$/;"	f
luaL_opt	src/lauxlib.h	119;"	d
luaL_optint	doc/manual.html	/^<hr><h3><a name="luaL_optint"><code>luaL_optint<\/code><\/a><\/h3><p>$/;"	a
luaL_optint	src/lauxlib.h	105;"	d
luaL_optinteger	doc/manual.html	/^<hr><h3><a name="luaL_optinteger"><code>luaL_optinteger<\/code><\/a><\/h3><p>$/;"	a
luaL_optinteger	src/lauxlib.c	/^LUALIB_API lua_Integer luaL_optinteger (lua_State *L, int narg,$/;"	f
luaL_optlong	doc/manual.html	/^<hr><h3><a name="luaL_optlong"><code>luaL_optlong<\/code><\/a><\/h3><p>$/;"	a
luaL_optlong	src/lauxlib.h	107;"	d
luaL_optlstring	doc/manual.html	/^<hr><h3><a name="luaL_optlstring"><code>luaL_optlstring<\/code><\/a><\/h3><p>$/;"	a
luaL_optlstring	src/lauxlib.c	/^LUALIB_API const char *luaL_optlstring (lua_State *L, int narg,$/;"	f
luaL_optnumber	doc/manual.html	/^<hr><h3><a name="luaL_optnumber"><code>luaL_optnumber<\/code><\/a><\/h3><p>$/;"	a
luaL_optnumber	src/lauxlib.c	/^LUALIB_API lua_Number luaL_optnumber (lua_State *L, int narg, lua_Number def) {$/;"	f
luaL_optstring	doc/manual.html	/^<hr><h3><a name="luaL_optstring"><code>luaL_optstring<\/code><\/a><\/h3><p>$/;"	a
luaL_optstring	src/lauxlib.h	103;"	d
luaL_prepbuffer	doc/manual.html	/^<hr><h3><a name="luaL_prepbuffer"><code>luaL_prepbuffer<\/code><\/a><\/h3><p>$/;"	a
luaL_prepbuffer	src/lauxlib.c	/^LUALIB_API char *luaL_prepbuffer (luaL_Buffer *B) {$/;"	f
luaL_pushresult	doc/manual.html	/^<hr><h3><a name="luaL_pushresult"><code>luaL_pushresult<\/code><\/a><\/h3><p>$/;"	a
luaL_pushresult	src/lauxlib.c	/^LUALIB_API void luaL_pushresult (luaL_Buffer *B) {$/;"	f
luaL_putchar	src/lauxlib.h	141;"	d
luaL_ref	doc/manual.html	/^<hr><h3><a name="luaL_ref"><code>luaL_ref<\/code><\/a><\/h3><p>$/;"	a
luaL_ref	src/lauxlib.c	/^LUALIB_API int luaL_ref (lua_State *L, int t) {$/;"	f
luaL_reg	src/lauxlib.h	170;"	d
luaL_register	doc/manual.html	/^<hr><h3><a name="luaL_register"><code>luaL_register<\/code><\/a><\/h3><p>$/;"	a
luaL_register	src/lauxlib.c	/^LUALIB_API void luaL_register(lua_State *L, const char *libname,$/;"	f
luaL_setn	src/lauxlib.c	/^LUALIB_API void luaL_setn (lua_State *L, int t, int n) {$/;"	f
luaL_setn	src/lauxlib.h	23;"	d
luaL_typename	doc/manual.html	/^<hr><h3><a name="luaL_typename"><code>luaL_typename<\/code><\/a><\/h3><p>$/;"	a
luaL_typename	src/lauxlib.h	109;"	d
luaL_typerror	doc/manual.html	/^<hr><h3><a name="luaL_typerror"><code>luaL_typerror<\/code><\/a><\/h3><p>$/;"	a
luaL_typerror	src/lauxlib.c	/^LUALIB_API int luaL_typerror (lua_State *L, int narg, const char *tname) {$/;"	f
luaL_unref	doc/manual.html	/^<hr><h3><a name="luaL_unref"><code>luaL_unref<\/code><\/a><\/h3><p>$/;"	a
luaL_unref	src/lauxlib.c	/^LUALIB_API void luaL_unref (lua_State *L, int t, int ref) {$/;"	f
luaL_where	doc/manual.html	/^<hr><h3><a name="luaL_where"><code>luaL_where<\/code><\/a><\/h3><p>$/;"	a
luaL_where	src/lauxlib.c	/^LUALIB_API void luaL_where (lua_State *L, int level) {$/;"	f
luaM_free	src/lmem.h	25;"	d
luaM_freearray	src/lmem.h	26;"	d
luaM_freemem	src/lmem.h	24;"	d
luaM_growaux_	src/lmem.c	/^void *luaM_growaux_ (lua_State *L, void *block, int *size, size_t size_elems,$/;"	f
luaM_growvector	src/lmem.h	33;"	d
luaM_malloc	src/lmem.h	28;"	d
luaM_new	src/lmem.h	29;"	d
luaM_newvector	src/lmem.h	30;"	d
luaM_realloc_	src/lmem.c	/^void *luaM_realloc_ (lua_State *L, void *block, size_t osize, size_t nsize) {$/;"	f
luaM_reallocv	src/lmem.h	19;"	d
luaM_reallocvector	src/lmem.h	37;"	d
luaM_toobig	src/lmem.c	/^void *luaM_toobig (lua_State *L) {$/;"	f
luaO_chunkid	src/lobject.c	/^void luaO_chunkid (char *out, const char *source, size_t bufflen) {$/;"	f
luaO_fb2int	src/lobject.c	/^int luaO_fb2int (int x) {$/;"	f
luaO_int2fb	src/lobject.c	/^int luaO_int2fb (unsigned int x) {$/;"	f
luaO_log2	src/lobject.c	/^int luaO_log2 (unsigned int x) {$/;"	f
luaO_nilobject	src/lobject.h	402;"	d
luaO_nilobject_	src/lobject.c	/^const TValue luaO_nilobject_ = {{NULL}, LUA_TNIL};$/;"	v
luaO_nilobject_	src/lobject.h	/^LUAI_DATA const TValue luaO_nilobject_;$/;"	v
luaO_pushfstring	src/lobject.c	/^const char *luaO_pushfstring (lua_State *L, const char *fmt, ...) {$/;"	f
luaO_pushvfstring	src/lobject.c	/^const char *luaO_pushvfstring (lua_State *L, const char *fmt, va_list argp) {$/;"	f
luaO_rawequalObj	src/lobject.c	/^int luaO_rawequalObj (const TValue *t1, const TValue *t2) {$/;"	f
luaO_str2d	src/lobject.c	/^int luaO_str2d (const char *s, lua_Number *result) {$/;"	f
luaP_opmodes	src/lopcodes.c	/^const lu_byte luaP_opmodes[NUM_OPCODES] = {$/;"	v
luaP_opmodes	src/lopcodes.h	/^LUAI_DATA const lu_byte luaP_opmodes[NUM_OPCODES];$/;"	v
luaP_opnames	src/lopcodes.c	/^const char *const luaP_opnames[NUM_OPCODES+1] = {$/;"	v
luaP_opnames	src/lopcodes.h	/^LUAI_DATA const char *const luaP_opnames[NUM_OPCODES+1];  \/* opcode names *\/$/;"	v
luaS_fix	src/lstring.h	24;"	d
luaS_new	src/lstring.h	20;"	d
luaS_newliteral	src/lstring.h	21;"	d
luaS_newlstr	src/lstring.c	/^TString *luaS_newlstr (lua_State *L, const char *str, size_t l) {$/;"	f
luaS_newudata	src/lstring.c	/^Udata *luaS_newudata (lua_State *L, size_t s, Table *e) {$/;"	f
luaS_resize	src/lstring.c	/^void luaS_resize (lua_State *L, int newsize) {$/;"	f
luaT_gettm	src/ltm.c	/^const TValue *luaT_gettm (Table *events, TMS event, TString *ename) {$/;"	f
luaT_gettmbyobj	src/ltm.c	/^const TValue *luaT_gettmbyobj (lua_State *L, const TValue *o, TMS event) {$/;"	f
luaT_init	src/ltm.c	/^void luaT_init (lua_State *L) {$/;"	f
luaT_typenames	src/ltm.c	/^const char *const luaT_typenames[] = {$/;"	v
luaT_typenames	src/ltm.h	/^LUAI_DATA const char *const luaT_typenames[];$/;"	v
luaU_dump	etc/noparser.c	/^LUAI_FUNC int luaU_dump (lua_State* L, const Proto* f, lua_Writer w, void* data, int strip) {$/;"	f
luaU_dump	src/ldump.c	/^int luaU_dump (lua_State* L, const Proto* f, lua_Writer w, void* data, int strip)$/;"	f
luaU_header	src/lundump.c	/^void luaU_header (char* h)$/;"	f
luaU_undump	src/lundump.c	/^Proto* luaU_undump (lua_State* L, ZIO* Z, Mbuffer* buff, const char* name)$/;"	f
luaV_concat	src/lvm.c	/^void luaV_concat (lua_State *L, int total, int last) {$/;"	f
luaV_equalval	src/lvm.c	/^int luaV_equalval (lua_State *L, const TValue *t1, const TValue *t2) {$/;"	f
luaV_execute	src/lvm.c	/^void luaV_execute (lua_State *L, int nexeccalls) {$/;"	f
luaV_gettable	src/lvm.c	/^void luaV_gettable (lua_State *L, const TValue *t, TValue *key, StkId val) {$/;"	f
luaV_lessthan	src/lvm.c	/^int luaV_lessthan (lua_State *L, const TValue *l, const TValue *r) {$/;"	f
luaV_settable	src/lvm.c	/^void luaV_settable (lua_State *L, const TValue *t, TValue *key, StkId val) {$/;"	f
luaV_tonumber	src/lvm.c	/^const TValue *luaV_tonumber (const TValue *obj, TValue *n) {$/;"	f
luaV_tostring	src/lvm.c	/^int luaV_tostring (lua_State *L, StkId obj) {$/;"	f
luaX_init	etc/noparser.c	/^LUAI_FUNC void luaX_init (lua_State *L) {$/;"	f
luaX_init	src/llex.c	/^void luaX_init (lua_State *L) {$/;"	f
luaX_lexerror	src/llex.c	/^void luaX_lexerror (LexState *ls, const char *msg, int token) {$/;"	f
luaX_lookahead	src/llex.c	/^void luaX_lookahead (LexState *ls) {$/;"	f
luaX_newstring	src/llex.c	/^TString *luaX_newstring (LexState *ls, const char *str, size_t l) {$/;"	f
luaX_next	src/llex.c	/^void luaX_next (LexState *ls) {$/;"	f
luaX_setinput	src/llex.c	/^void luaX_setinput (lua_State *L, LexState *ls, ZIO *z, TString *source) {$/;"	f
luaX_syntaxerror	src/llex.c	/^void luaX_syntaxerror (LexState *ls, const char *msg) {$/;"	f
luaX_token2str	src/llex.c	/^const char *luaX_token2str (LexState *ls, int token) {$/;"	f
luaX_tokens	src/llex.c	/^const char *const luaX_tokens [] = {$/;"	v
luaX_tokens	src/llex.h	/^LUAI_DATA const char *const luaX_tokens [];$/;"	v
luaY_checklimit	src/lparser.c	34;"	d	file:
luaY_parser	etc/noparser.c	/^LUAI_FUNC Proto *luaY_parser (lua_State *L, ZIO *z, Mbuffer *buff, const char *name) {$/;"	f
luaY_parser	src/lparser.c	/^Proto *luaY_parser (lua_State *L, ZIO *z, Mbuffer *buff, const char *name) {$/;"	f
luaZ_buffer	src/lzio.h	32;"	d
luaZ_bufflen	src/lzio.h	34;"	d
luaZ_fill	src/lzio.c	/^int luaZ_fill (ZIO *z) {$/;"	f
luaZ_freebuffer	src/lzio.h	43;"	d
luaZ_init	src/lzio.c	/^void luaZ_init (lua_State *L, ZIO *z, lua_Reader reader, void *data) {$/;"	f
luaZ_initbuffer	src/lzio.h	30;"	d
luaZ_lookahead	src/lzio.c	/^int luaZ_lookahead (ZIO *z) {$/;"	f
luaZ_openspace	src/lzio.c	/^char *luaZ_openspace (lua_State *L, Mbuffer *buff, size_t n) {$/;"	f
luaZ_read	src/lzio.c	/^size_t luaZ_read (ZIO *z, void *b, size_t n) {$/;"	f
luaZ_resetbuffer	src/lzio.h	36;"	d
luaZ_resizebuffer	src/lzio.h	39;"	d
luaZ_sizebuffer	src/lzio.h	33;"	d
lua_Alloc	doc/manual.html	/^<hr><h3><a name="lua_Alloc"><code>lua_Alloc<\/code><\/a><\/h3>$/;"	a
lua_Alloc	src/lua.h	/^typedef void * (*lua_Alloc) (void *ud, void *ptr, size_t osize, size_t nsize);$/;"	t
lua_CFunction	doc/manual.html	/^<hr><h3><a name="lua_CFunction"><code>lua_CFunction<\/code><\/a><\/h3>$/;"	a
lua_CFunction	src/lua.h	/^typedef int (*lua_CFunction) (lua_State *L);$/;"	t
lua_Chunkreader	src/lua.h	293;"	d
lua_Chunkwriter	src/lua.h	294;"	d
lua_Debug	doc/manual.html	/^<hr><h3><a name="lua_Debug"><code>lua_Debug<\/code><\/a><\/h3>$/;"	a
lua_Debug	src/lua.h	/^struct lua_Debug {$/;"	s
lua_Debug	src/lua.h	/^typedef struct lua_Debug lua_Debug;  \/* activation record *\/$/;"	t	typeref:struct:lua_Debug
lua_Hook	doc/manual.html	/^<hr><h3><a name="lua_Hook"><code>lua_Hook<\/code><\/a><\/h3>$/;"	a
lua_Hook	src/lua.h	/^typedef void (*lua_Hook) (lua_State *L, lua_Debug *ar);$/;"	t
lua_Integer	doc/manual.html	/^<hr><h3><a name="lua_Integer"><code>lua_Integer<\/code><\/a><\/h3>$/;"	a
lua_Integer	src/lua.h	/^typedef LUA_INTEGER lua_Integer;$/;"	t
lua_Number	doc/manual.html	/^<hr><h3><a name="lua_Number"><code>lua_Number<\/code><\/a><\/h3>$/;"	a
lua_Number	src/lua.h	/^typedef LUA_NUMBER lua_Number;$/;"	t
lua_Reader	doc/manual.html	/^<hr><h3><a name="lua_Reader"><code>lua_Reader<\/code><\/a><\/h3>$/;"	a
lua_Reader	src/lua.h	/^typedef const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);$/;"	t
lua_State	doc/manual.html	/^<hr><h3><a name="lua_State"><code>lua_State<\/code><\/a><\/h3>$/;"	a
lua_State	src/lstate.h	/^struct lua_State {$/;"	s
lua_State	src/lua.h	/^typedef struct lua_State lua_State;$/;"	t	typeref:struct:lua_State
lua_TValue	src/lobject.h	/^typedef struct lua_TValue {$/;"	s
lua_Writer	doc/manual.html	/^<hr><h3><a name="lua_Writer"><code>lua_Writer<\/code><\/a><\/h3>$/;"	a
lua_Writer	src/lua.h	/^typedef int (*lua_Writer) (lua_State *L, const void* p, size_t sz, void* ud);$/;"	t
lua_assert	src/llimits.h	62;"	d
lua_assert	src/lualib.h	49;"	d
lua_atpanic	doc/manual.html	/^<hr><h3><a name="lua_atpanic"><code>lua_atpanic<\/code><\/a><\/h3><p>$/;"	a
lua_atpanic	src/lapi.c	/^LUA_API lua_CFunction lua_atpanic (lua_State *L, lua_CFunction panicf) {$/;"	f
lua_c	src/lua.c	13;"	d	file:
lua_call	doc/manual.html	/^<hr><h3><a name="lua_call"><code>lua_call<\/code><\/a><\/h3><p>$/;"	a
lua_call	src/lapi.c	/^LUA_API void lua_call (lua_State *L, int nargs, int nresults) {$/;"	f
lua_checkstack	doc/manual.html	/^<hr><h3><a name="lua_checkstack"><code>lua_checkstack<\/code><\/a><\/h3><p>$/;"	a
lua_checkstack	src/lapi.c	/^LUA_API int lua_checkstack (lua_State *L, int size) {$/;"	f
lua_close	doc/manual.html	/^<hr><h3><a name="lua_close"><code>lua_close<\/code><\/a><\/h3><p>$/;"	a
lua_close	src/lstate.c	/^LUA_API void lua_close (lua_State *L) {$/;"	f
lua_concat	doc/manual.html	/^<hr><h3><a name="lua_concat"><code>lua_concat<\/code><\/a><\/h3><p>$/;"	a
lua_concat	src/lapi.c	/^LUA_API void lua_concat (lua_State *L, int n) {$/;"	f
lua_cpcall	doc/manual.html	/^<hr><h3><a name="lua_cpcall"><code>lua_cpcall<\/code><\/a><\/h3><p>$/;"	a
lua_cpcall	src/lapi.c	/^LUA_API int lua_cpcall (lua_State *L, lua_CFunction func, void *ud) {$/;"	f
lua_createtable	doc/manual.html	/^<hr><h3><a name="lua_createtable"><code>lua_createtable<\/code><\/a><\/h3><p>$/;"	a
lua_createtable	src/lapi.c	/^LUA_API void lua_createtable (lua_State *L, int narray, int nrec) {$/;"	f
lua_dump	doc/manual.html	/^<hr><h3><a name="lua_dump"><code>lua_dump<\/code><\/a><\/h3><p>$/;"	a
lua_dump	src/lapi.c	/^LUA_API int lua_dump (lua_State *L, lua_Writer writer, void *data) {$/;"	f
lua_equal	doc/manual.html	/^<hr><h3><a name="lua_equal"><code>lua_equal<\/code><\/a><\/h3><p>$/;"	a
lua_equal	src/lapi.c	/^LUA_API int lua_equal (lua_State *L, int index1, int index2) {$/;"	f
lua_error	doc/manual.html	/^<hr><h3><a name="lua_error"><code>lua_error<\/code><\/a><\/h3><p>$/;"	a
lua_error	src/lapi.c	/^LUA_API int lua_error (lua_State *L) {$/;"	f
lua_freeline	src/luaconf.h	281;"	d
lua_freeline	src/luaconf.h	287;"	d
lua_gc	doc/manual.html	/^<hr><h3><a name="lua_gc"><code>lua_gc<\/code><\/a><\/h3><p>$/;"	a
lua_gc	src/lapi.c	/^LUA_API int lua_gc (lua_State *L, int what, int data) {$/;"	f
lua_getallocf	doc/manual.html	/^<hr><h3><a name="lua_getallocf"><code>lua_getallocf<\/code><\/a><\/h3><p>$/;"	a
lua_getallocf	src/lapi.c	/^LUA_API lua_Alloc lua_getallocf (lua_State *L, void **ud) {$/;"	f
lua_getfenv	doc/manual.html	/^<hr><h3><a name="lua_getfenv"><code>lua_getfenv<\/code><\/a><\/h3><p>$/;"	a
lua_getfenv	src/lapi.c	/^LUA_API void lua_getfenv (lua_State *L, int idx) {$/;"	f
lua_getfield	doc/manual.html	/^<hr><h3><a name="lua_getfield"><code>lua_getfield<\/code><\/a><\/h3><p>$/;"	a
lua_getfield	src/lapi.c	/^LUA_API void lua_getfield (lua_State *L, int idx, const char *k) {$/;"	f
lua_getgccount	src/lua.h	291;"	d
lua_getglobal	doc/manual.html	/^<hr><h3><a name="lua_getglobal"><code>lua_getglobal<\/code><\/a><\/h3><p>$/;"	a
lua_getglobal	src/lua.h	277;"	d
lua_gethook	doc/manual.html	/^<hr><h3><a name="lua_gethook"><code>lua_gethook<\/code><\/a><\/h3><p>$/;"	a
lua_gethook	src/ldebug.c	/^LUA_API lua_Hook lua_gethook (lua_State *L) {$/;"	f
lua_gethookcount	doc/manual.html	/^<hr><h3><a name="lua_gethookcount"><code>lua_gethookcount<\/code><\/a><\/h3><p>$/;"	a
lua_gethookcount	src/ldebug.c	/^LUA_API int lua_gethookcount (lua_State *L) {$/;"	f
lua_gethookmask	doc/manual.html	/^<hr><h3><a name="lua_gethookmask"><code>lua_gethookmask<\/code><\/a><\/h3><p>$/;"	a
lua_gethookmask	src/ldebug.c	/^LUA_API int lua_gethookmask (lua_State *L) {$/;"	f
lua_getinfo	doc/manual.html	/^<hr><h3><a name="lua_getinfo"><code>lua_getinfo<\/code><\/a><\/h3><p>$/;"	a
lua_getinfo	src/ldebug.c	/^LUA_API int lua_getinfo (lua_State *L, const char *what, lua_Debug *ar) {$/;"	f
lua_getlocal	doc/manual.html	/^<hr><h3><a name="lua_getlocal"><code>lua_getlocal<\/code><\/a><\/h3><p>$/;"	a
lua_getlocal	src/ldebug.c	/^LUA_API const char *lua_getlocal (lua_State *L, const lua_Debug *ar, int n) {$/;"	f
lua_getmetatable	doc/manual.html	/^<hr><h3><a name="lua_getmetatable"><code>lua_getmetatable<\/code><\/a><\/h3><p>$/;"	a
lua_getmetatable	src/lapi.c	/^LUA_API int lua_getmetatable (lua_State *L, int objindex) {$/;"	f
lua_getref	src/lauxlib.h	167;"	d
lua_getregistry	src/lua.h	289;"	d
lua_getstack	doc/manual.html	/^<hr><h3><a name="lua_getstack"><code>lua_getstack<\/code><\/a><\/h3><p>$/;"	a
lua_getstack	src/ldebug.c	/^LUA_API int lua_getstack (lua_State *L, int level, lua_Debug *ar) {$/;"	f
lua_gettable	doc/manual.html	/^<hr><h3><a name="lua_gettable"><code>lua_gettable<\/code><\/a><\/h3><p>$/;"	a
lua_gettable	src/lapi.c	/^LUA_API void lua_gettable (lua_State *L, int idx) {$/;"	f
lua_gettop	doc/manual.html	/^<hr><h3><a name="lua_gettop"><code>lua_gettop<\/code><\/a><\/h3><p>$/;"	a
lua_gettop	src/lapi.c	/^LUA_API int lua_gettop (lua_State *L) {$/;"	f
lua_getupvalue	doc/manual.html	/^<hr><h3><a name="lua_getupvalue"><code>lua_getupvalue<\/code><\/a><\/h3><p>$/;"	a
lua_getupvalue	src/lapi.c	/^LUA_API const char *lua_getupvalue (lua_State *L, int funcindex, int n) {$/;"	f
lua_h	src/lua.h	10;"	d
lua_ident	src/lapi.c	/^const char lua_ident[] =$/;"	v
lua_insert	doc/manual.html	/^<hr><h3><a name="lua_insert"><code>lua_insert<\/code><\/a><\/h3><p>$/;"	a
lua_insert	src/lapi.c	/^LUA_API void lua_insert (lua_State *L, int idx) {$/;"	f
lua_isboolean	doc/manual.html	/^<hr><h3><a name="lua_isboolean"><code>lua_isboolean<\/code><\/a><\/h3><p>$/;"	a
lua_isboolean	src/lua.h	268;"	d
lua_iscfunction	doc/manual.html	/^<hr><h3><a name="lua_iscfunction"><code>lua_iscfunction<\/code><\/a><\/h3><p>$/;"	a
lua_iscfunction	src/lapi.c	/^LUA_API int lua_iscfunction (lua_State *L, int idx) {$/;"	f
lua_isfunction	doc/manual.html	/^<hr><h3><a name="lua_isfunction"><code>lua_isfunction<\/code><\/a><\/h3><p>$/;"	a
lua_isfunction	src/lua.h	264;"	d
lua_islightuserdata	doc/manual.html	/^<hr><h3><a name="lua_islightuserdata"><code>lua_islightuserdata<\/code><\/a><\/h3><p>$/;"	a
lua_islightuserdata	src/lua.h	266;"	d
lua_isnil	doc/manual.html	/^<hr><h3><a name="lua_isnil"><code>lua_isnil<\/code><\/a><\/h3><p>$/;"	a
lua_isnil	src/lua.h	267;"	d
lua_isnone	doc/manual.html	/^<hr><h3><a name="lua_isnone"><code>lua_isnone<\/code><\/a><\/h3><p>$/;"	a
lua_isnone	src/lua.h	270;"	d
lua_isnoneornil	doc/manual.html	/^<hr><h3><a name="lua_isnoneornil"><code>lua_isnoneornil<\/code><\/a><\/h3><p>$/;"	a
lua_isnoneornil	src/lua.h	271;"	d
lua_isnumber	doc/manual.html	/^<hr><h3><a name="lua_isnumber"><code>lua_isnumber<\/code><\/a><\/h3><p>$/;"	a
lua_isnumber	src/lapi.c	/^LUA_API int lua_isnumber (lua_State *L, int idx) {$/;"	f
lua_isstring	doc/manual.html	/^<hr><h3><a name="lua_isstring"><code>lua_isstring<\/code><\/a><\/h3><p>$/;"	a
lua_isstring	src/lapi.c	/^LUA_API int lua_isstring (lua_State *L, int idx) {$/;"	f
lua_istable	doc/manual.html	/^<hr><h3><a name="lua_istable"><code>lua_istable<\/code><\/a><\/h3><p>$/;"	a
lua_istable	src/lua.h	265;"	d
lua_isthread	doc/manual.html	/^<hr><h3><a name="lua_isthread"><code>lua_isthread<\/code><\/a><\/h3><p>$/;"	a
lua_isthread	src/lua.h	269;"	d
lua_isuserdata	doc/manual.html	/^<hr><h3><a name="lua_isuserdata"><code>lua_isuserdata<\/code><\/a><\/h3><p>$/;"	a
lua_isuserdata	src/lapi.c	/^LUA_API int lua_isuserdata (lua_State *L, int idx) {$/;"	f
lua_lessthan	doc/manual.html	/^<hr><h3><a name="lua_lessthan"><code>lua_lessthan<\/code><\/a><\/h3><p>$/;"	a
lua_lessthan	src/lapi.c	/^LUA_API int lua_lessthan (lua_State *L, int index1, int index2) {$/;"	f
lua_load	doc/manual.html	/^<hr><h3><a name="lua_load"><code>lua_load<\/code><\/a><\/h3><p>$/;"	a
lua_load	src/lapi.c	/^LUA_API int lua_load (lua_State *L, lua_Reader reader, void *data,$/;"	f
lua_lock	src/llimits.h	110;"	d
lua_longjmp	src/ldo.c	/^struct lua_longjmp {$/;"	s	file:
lua_newstate	doc/manual.html	/^<hr><h3><a name="lua_newstate"><code>lua_newstate<\/code><\/a><\/h3><p>$/;"	a
lua_newstate	src/lstate.c	/^LUA_API lua_State *lua_newstate (lua_Alloc f, void *ud) {$/;"	f
lua_newtable	doc/manual.html	/^<hr><h3><a name="lua_newtable"><code>lua_newtable<\/code><\/a><\/h3><p>$/;"	a
lua_newtable	src/lua.h	256;"	d
lua_newthread	doc/manual.html	/^<hr><h3><a name="lua_newthread"><code>lua_newthread<\/code><\/a><\/h3><p>$/;"	a
lua_newthread	src/lapi.c	/^LUA_API lua_State *lua_newthread (lua_State *L) {$/;"	f
lua_newuserdata	doc/manual.html	/^<hr><h3><a name="lua_newuserdata"><code>lua_newuserdata<\/code><\/a><\/h3><p>$/;"	a
lua_newuserdata	src/lapi.c	/^LUA_API void *lua_newuserdata (lua_State *L, size_t size) {$/;"	f
lua_next	doc/manual.html	/^<hr><h3><a name="lua_next"><code>lua_next<\/code><\/a><\/h3><p>$/;"	a
lua_next	src/lapi.c	/^LUA_API int lua_next (lua_State *L, int idx) {$/;"	f
lua_number2int	src/luaconf.h	563;"	d
lua_number2int	src/luaconf.h	571;"	d
lua_number2int	src/luaconf.h	580;"	d
lua_number2integer	src/luaconf.h	564;"	d
lua_number2integer	src/luaconf.h	573;"	d
lua_number2integer	src/luaconf.h	581;"	d
lua_number2str	src/luaconf.h	523;"	d
lua_objlen	doc/manual.html	/^<hr><h3><a name="lua_objlen"><code>lua_objlen<\/code><\/a><\/h3><p>$/;"	a
lua_objlen	src/lapi.c	/^LUA_API size_t lua_objlen (lua_State *L, int idx) {$/;"	f
lua_open	src/lua.h	287;"	d
lua_pcall	doc/manual.html	/^<hr><h3><a name="lua_pcall"><code>lua_pcall<\/code><\/a><\/h3><p>$/;"	a
lua_pcall	src/lapi.c	/^LUA_API int lua_pcall (lua_State *L, int nargs, int nresults, int errfunc) {$/;"	f
lua_pclose	src/luaconf.h	674;"	d
lua_pclose	src/luaconf.h	679;"	d
lua_pclose	src/luaconf.h	685;"	d
lua_pop	doc/manual.html	/^<hr><h3><a name="lua_pop"><code>lua_pop<\/code><\/a><\/h3><p>$/;"	a
lua_pop	src/lua.h	254;"	d
lua_popen	src/luaconf.h	673;"	d
lua_popen	src/luaconf.h	678;"	d
lua_popen	src/luaconf.h	683;"	d
lua_pushboolean	doc/manual.html	/^<hr><h3><a name="lua_pushboolean"><code>lua_pushboolean<\/code><\/a><\/h3><p>$/;"	a
lua_pushboolean	src/lapi.c	/^LUA_API void lua_pushboolean (lua_State *L, int b) {$/;"	f
lua_pushcclosure	doc/manual.html	/^<hr><h3><a name="lua_pushcclosure"><code>lua_pushcclosure<\/code><\/a><\/h3><p>$/;"	a
lua_pushcclosure	src/lapi.c	/^LUA_API void lua_pushcclosure (lua_State *L, lua_CFunction fn, int n) {$/;"	f
lua_pushcfunction	doc/manual.html	/^<hr><h3><a name="lua_pushcfunction"><code>lua_pushcfunction<\/code><\/a><\/h3><p>$/;"	a
lua_pushcfunction	src/lua.h	260;"	d
lua_pushfstring	doc/manual.html	/^<hr><h3><a name="lua_pushfstring"><code>lua_pushfstring<\/code><\/a><\/h3><p>$/;"	a
lua_pushfstring	src/lapi.c	/^LUA_API const char *lua_pushfstring (lua_State *L, const char *fmt, ...) {$/;"	f
lua_pushinteger	doc/manual.html	/^<hr><h3><a name="lua_pushinteger"><code>lua_pushinteger<\/code><\/a><\/h3><p>$/;"	a
lua_pushinteger	src/lapi.c	/^LUA_API void lua_pushinteger (lua_State *L, lua_Integer n) {$/;"	f
lua_pushlightuserdata	doc/manual.html	/^<hr><h3><a name="lua_pushlightuserdata"><code>lua_pushlightuserdata<\/code><\/a><\/h3><p>$/;"	a
lua_pushlightuserdata	src/lapi.c	/^LUA_API void lua_pushlightuserdata (lua_State *L, void *p) {$/;"	f
lua_pushliteral	doc/manual.html	/^<hr><h3><a name="lua_pushliteral"><code>lua_pushliteral<\/code><\/a><\/h3><p>$/;"	a
lua_pushliteral	src/lua.h	273;"	d
lua_pushlstring	doc/manual.html	/^<hr><h3><a name="lua_pushlstring"><code>lua_pushlstring<\/code><\/a><\/h3><p>$/;"	a
lua_pushlstring	src/lapi.c	/^LUA_API void lua_pushlstring (lua_State *L, const char *s, size_t len) {$/;"	f
lua_pushnil	doc/manual.html	/^<hr><h3><a name="lua_pushnil"><code>lua_pushnil<\/code><\/a><\/h3><p>$/;"	a
lua_pushnil	src/lapi.c	/^LUA_API void lua_pushnil (lua_State *L) {$/;"	f
lua_pushnumber	doc/manual.html	/^<hr><h3><a name="lua_pushnumber"><code>lua_pushnumber<\/code><\/a><\/h3><p>$/;"	a
lua_pushnumber	src/lapi.c	/^LUA_API void lua_pushnumber (lua_State *L, lua_Number n) {$/;"	f
lua_pushstring	doc/manual.html	/^<hr><h3><a name="lua_pushstring"><code>lua_pushstring<\/code><\/a><\/h3><p>$/;"	a
lua_pushstring	src/lapi.c	/^LUA_API void lua_pushstring (lua_State *L, const char *s) {$/;"	f
lua_pushthread	doc/manual.html	/^<hr><h3><a name="lua_pushthread"><code>lua_pushthread<\/code><\/a><\/h3><p>$/;"	a
lua_pushthread	src/lapi.c	/^LUA_API int lua_pushthread (lua_State *L) {$/;"	f
lua_pushvalue	doc/manual.html	/^<hr><h3><a name="lua_pushvalue"><code>lua_pushvalue<\/code><\/a><\/h3><p>$/;"	a
lua_pushvalue	src/lapi.c	/^LUA_API void lua_pushvalue (lua_State *L, int idx) {$/;"	f
lua_pushvfstring	doc/manual.html	/^<hr><h3><a name="lua_pushvfstring"><code>lua_pushvfstring<\/code><\/a><\/h3><p>$/;"	a
lua_pushvfstring	src/lapi.c	/^LUA_API const char *lua_pushvfstring (lua_State *L, const char *fmt,$/;"	f
lua_rawequal	doc/manual.html	/^<hr><h3><a name="lua_rawequal"><code>lua_rawequal<\/code><\/a><\/h3><p>$/;"	a
lua_rawequal	src/lapi.c	/^LUA_API int lua_rawequal (lua_State *L, int index1, int index2) {$/;"	f
lua_rawget	doc/manual.html	/^<hr><h3><a name="lua_rawget"><code>lua_rawget<\/code><\/a><\/h3><p>$/;"	a
lua_rawget	src/lapi.c	/^LUA_API void lua_rawget (lua_State *L, int idx) {$/;"	f
lua_rawgeti	doc/manual.html	/^<hr><h3><a name="lua_rawgeti"><code>lua_rawgeti<\/code><\/a><\/h3><p>$/;"	a
lua_rawgeti	src/lapi.c	/^LUA_API void lua_rawgeti (lua_State *L, int idx, int n) {$/;"	f
lua_rawset	doc/manual.html	/^<hr><h3><a name="lua_rawset"><code>lua_rawset<\/code><\/a><\/h3><p>$/;"	a
lua_rawset	src/lapi.c	/^LUA_API void lua_rawset (lua_State *L, int idx) {$/;"	f
lua_rawseti	doc/manual.html	/^<hr><h3><a name="lua_rawseti"><code>lua_rawseti<\/code><\/a><\/h3><p>$/;"	a
lua_rawseti	src/lapi.c	/^LUA_API void lua_rawseti (lua_State *L, int idx, int n) {$/;"	f
lua_readline	src/luaconf.h	277;"	d
lua_readline	src/luaconf.h	283;"	d
lua_ref	src/lauxlib.h	162;"	d
lua_register	doc/manual.html	/^<hr><h3><a name="lua_register"><code>lua_register<\/code><\/a><\/h3><p>$/;"	a
lua_register	src/lua.h	258;"	d
lua_remove	doc/manual.html	/^<hr><h3><a name="lua_remove"><code>lua_remove<\/code><\/a><\/h3><p>$/;"	a
lua_remove	src/lapi.c	/^LUA_API void lua_remove (lua_State *L, int idx) {$/;"	f
lua_replace	doc/manual.html	/^<hr><h3><a name="lua_replace"><code>lua_replace<\/code><\/a><\/h3><p>$/;"	a
lua_replace	src/lapi.c	/^LUA_API void lua_replace (lua_State *L, int idx) {$/;"	f
lua_resume	doc/manual.html	/^<hr><h3><a name="lua_resume"><code>lua_resume<\/code><\/a><\/h3><p>$/;"	a
lua_resume	src/ldo.c	/^LUA_API int lua_resume (lua_State *L, int nargs) {$/;"	f
lua_saveline	src/luaconf.h	278;"	d
lua_saveline	src/luaconf.h	286;"	d
lua_setallocf	doc/manual.html	/^<hr><h3><a name="lua_setallocf"><code>lua_setallocf<\/code><\/a><\/h3><p>$/;"	a
lua_setallocf	src/lapi.c	/^LUA_API void lua_setallocf (lua_State *L, lua_Alloc f, void *ud) {$/;"	f
lua_setfenv	doc/manual.html	/^<hr><h3><a name="lua_setfenv"><code>lua_setfenv<\/code><\/a><\/h3><p>$/;"	a
lua_setfenv	src/lapi.c	/^LUA_API int lua_setfenv (lua_State *L, int idx) {$/;"	f
lua_setfield	doc/manual.html	/^<hr><h3><a name="lua_setfield"><code>lua_setfield<\/code><\/a><\/h3><p>$/;"	a
lua_setfield	src/lapi.c	/^LUA_API void lua_setfield (lua_State *L, int idx, const char *k) {$/;"	f
lua_setglobal	doc/manual.html	/^<hr><h3><a name="lua_setglobal"><code>lua_setglobal<\/code><\/a><\/h3><p>$/;"	a
lua_setglobal	src/lua.h	276;"	d
lua_sethook	doc/manual.html	/^<hr><h3><a name="lua_sethook"><code>lua_sethook<\/code><\/a><\/h3><p>$/;"	a
lua_sethook	src/ldebug.c	/^LUA_API int lua_sethook (lua_State *L, lua_Hook func, int mask, int count) {$/;"	f
lua_setlevel	src/lapi.c	/^LUA_API void lua_setlevel (lua_State *from, lua_State *to) {$/;"	f
lua_setlocal	doc/manual.html	/^<hr><h3><a name="lua_setlocal"><code>lua_setlocal<\/code><\/a><\/h3><p>$/;"	a
lua_setlocal	src/ldebug.c	/^LUA_API const char *lua_setlocal (lua_State *L, const lua_Debug *ar, int n) {$/;"	f
lua_setmetatable	doc/manual.html	/^<hr><h3><a name="lua_setmetatable"><code>lua_setmetatable<\/code><\/a><\/h3><p>$/;"	a
lua_setmetatable	src/lapi.c	/^LUA_API int lua_setmetatable (lua_State *L, int objindex) {$/;"	f
lua_settable	doc/manual.html	/^<hr><h3><a name="lua_settable"><code>lua_settable<\/code><\/a><\/h3><p>$/;"	a
lua_settable	src/lapi.c	/^LUA_API void lua_settable (lua_State *L, int idx) {$/;"	f
lua_settop	doc/manual.html	/^<hr><h3><a name="lua_settop"><code>lua_settop<\/code><\/a><\/h3><p>$/;"	a
lua_settop	src/lapi.c	/^LUA_API void lua_settop (lua_State *L, int idx) {$/;"	f
lua_setupvalue	doc/manual.html	/^<hr><h3><a name="lua_setupvalue"><code>lua_setupvalue<\/code><\/a><\/h3><p>$/;"	a
lua_setupvalue	src/lapi.c	/^LUA_API const char *lua_setupvalue (lua_State *L, int funcindex, int n) {$/;"	f
lua_status	doc/manual.html	/^<hr><h3><a name="lua_status"><code>lua_status<\/code><\/a><\/h3><p>$/;"	a
lua_status	src/lapi.c	/^LUA_API int  lua_status (lua_State *L) {$/;"	f
lua_stdin_is_tty	src/luaconf.h	229;"	d
lua_stdin_is_tty	src/luaconf.h	233;"	d
lua_stdin_is_tty	src/luaconf.h	235;"	d
lua_str2number	src/luaconf.h	525;"	d
lua_strlen	src/lua.h	262;"	d
lua_tmpnam	src/luaconf.h	652;"	d
lua_tmpnam	src/luaconf.h	660;"	d
lua_toboolean	doc/manual.html	/^<hr><h3><a name="lua_toboolean"><code>lua_toboolean<\/code><\/a><\/h3><p>$/;"	a
lua_toboolean	src/lapi.c	/^LUA_API int lua_toboolean (lua_State *L, int idx) {$/;"	f
lua_tocfunction	doc/manual.html	/^<hr><h3><a name="lua_tocfunction"><code>lua_tocfunction<\/code><\/a><\/h3><p>$/;"	a
lua_tocfunction	src/lapi.c	/^LUA_API lua_CFunction lua_tocfunction (lua_State *L, int idx) {$/;"	f
lua_tointeger	doc/manual.html	/^<hr><h3><a name="lua_tointeger"><code>lua_tointeger<\/code><\/a><\/h3><p>$/;"	a
lua_tointeger	src/lapi.c	/^LUA_API lua_Integer lua_tointeger (lua_State *L, int idx) {$/;"	f
lua_tolstring	doc/manual.html	/^<hr><h3><a name="lua_tolstring"><code>lua_tolstring<\/code><\/a><\/h3><p>$/;"	a
lua_tolstring	src/lapi.c	/^LUA_API const char *lua_tolstring (lua_State *L, int idx, size_t *len) {$/;"	f
lua_tonumber	doc/manual.html	/^<hr><h3><a name="lua_tonumber"><code>lua_tonumber<\/code><\/a><\/h3><p>$/;"	a
lua_tonumber	src/lapi.c	/^LUA_API lua_Number lua_tonumber (lua_State *L, int idx) {$/;"	f
lua_topointer	doc/manual.html	/^<hr><h3><a name="lua_topointer"><code>lua_topointer<\/code><\/a><\/h3><p>$/;"	a
lua_topointer	src/lapi.c	/^LUA_API const void *lua_topointer (lua_State *L, int idx) {$/;"	f
lua_tostring	doc/manual.html	/^<hr><h3><a name="lua_tostring"><code>lua_tostring<\/code><\/a><\/h3><p>$/;"	a
lua_tostring	src/lua.h	279;"	d
lua_tothread	doc/manual.html	/^<hr><h3><a name="lua_tothread"><code>lua_tothread<\/code><\/a><\/h3><p>$/;"	a
lua_tothread	src/lapi.c	/^LUA_API lua_State *lua_tothread (lua_State *L, int idx) {$/;"	f
lua_touserdata	doc/manual.html	/^<hr><h3><a name="lua_touserdata"><code>lua_touserdata<\/code><\/a><\/h3><p>$/;"	a
lua_touserdata	src/lapi.c	/^LUA_API void *lua_touserdata (lua_State *L, int idx) {$/;"	f
lua_type	doc/manual.html	/^<hr><h3><a name="lua_type"><code>lua_type<\/code><\/a><\/h3><p>$/;"	a
lua_type	src/lapi.c	/^LUA_API int lua_type (lua_State *L, int idx) {$/;"	f
lua_typename	doc/manual.html	/^<hr><h3><a name="lua_typename"><code>lua_typename<\/code><\/a><\/h3><p>$/;"	a
lua_typename	src/lapi.c	/^LUA_API const char *lua_typename (lua_State *L, int t) {$/;"	f
lua_unlock	src/llimits.h	111;"	d
lua_unref	src/lauxlib.h	165;"	d
lua_upvalueindex	doc/manual.html	/^<a name="lua_upvalueindex"><code>lua_upvalueindex<\/code><\/a>.$/;"	a
lua_upvalueindex	src/lua.h	39;"	d
lua_xmove	doc/manual.html	/^<hr><h3><a name="lua_xmove"><code>lua_xmove<\/code><\/a><\/h3><p>$/;"	a
lua_xmove	src/lapi.c	/^LUA_API void lua_xmove (lua_State *from, lua_State *to, int n) {$/;"	f
lua_yield	doc/manual.html	/^<hr><h3><a name="lua_yield"><code>lua_yield<\/code><\/a><\/h3><p>$/;"	a
lua_yield	src/ldo.c	/^LUA_API int lua_yield (lua_State *L, int nresults) {$/;"	f
luaall_c	etc/all.c	5;"	d	file:
luac_c	src/luac.c	12;"	d	file:
luac_c	src/print.c	10;"	d	file:
luai_Cast	src/luaconf.h	/^union luai_Cast { double l_d; long l_l; };$/;"	u
luai_apicheck	src/luaconf.h	379;"	d
luai_apicheck	src/luaconf.h	381;"	d
luai_jmpbuf	src/luaconf.h	614;"	d
luai_jmpbuf	src/luaconf.h	620;"	d
luai_jmpbuf	src/luaconf.h	626;"	d
luai_numadd	src/luaconf.h	533;"	d
luai_numdiv	src/luaconf.h	536;"	d
luai_numeq	src/luaconf.h	540;"	d
luai_numisnan	src/luaconf.h	543;"	d
luai_numle	src/luaconf.h	542;"	d
luai_numlt	src/luaconf.h	541;"	d
luai_nummod	src/luaconf.h	537;"	d
luai_nummul	src/luaconf.h	535;"	d
luai_numpow	src/luaconf.h	538;"	d
luai_numsub	src/luaconf.h	534;"	d
luai_numunm	src/luaconf.h	539;"	d
luai_threadyield	src/llimits.h	115;"	d
luai_userstateclose	src/luaconf.h	727;"	d
luai_userstatefree	src/luaconf.h	729;"	d
luai_userstateopen	src/luaconf.h	726;"	d
luai_userstateresume	src/luaconf.h	730;"	d
luai_userstatethread	src/luaconf.h	728;"	d
luai_userstateyield	src/luaconf.h	731;"	d
lualib_h	src/lualib.h	9;"	d
lualibs	src/linit.c	/^static const luaL_Reg lualibs[] = {$/;"	v	file:
luaopen_base	src/lbaselib.c	/^LUALIB_API int luaopen_base (lua_State *L) {$/;"	f
luaopen_debug	src/ldblib.c	/^LUALIB_API int luaopen_debug (lua_State *L) {$/;"	f
luaopen_io	src/liolib.c	/^LUALIB_API int luaopen_io (lua_State *L) {$/;"	f
luaopen_math	src/lmathlib.c	/^LUALIB_API int luaopen_math (lua_State *L) {$/;"	f
luaopen_os	src/loslib.c	/^LUALIB_API int luaopen_os (lua_State *L) {$/;"	f
luaopen_package	src/loadlib.c	/^LUALIB_API int luaopen_package (lua_State *L) {$/;"	f
luaopen_string	src/lstrlib.c	/^LUALIB_API int luaopen_string (lua_State *L) {$/;"	f
luaopen_table	src/ltablib.c	/^LUALIB_API int luaopen_table (lua_State *L) {$/;"	f
lundump_c	src/lundump.c	9;"	d	file:
lundump_h	src/lundump.h	8;"	d
lvl	src/lauxlib.h	/^  int lvl;  \/* number of strings in the stack (level) *\/$/;"	m	struct:luaL_Buffer
lvm_c	src/lvm.c	12;"	d	file:
lvm_h	src/lvm.h	8;"	d
lzio_c	src/lzio.c	10;"	d	file:
lzio_h	src/lzio.h	9;"	d
main	etc/min.c	/^int main(void)$/;"	f
main	src/lua.c	/^int main (int argc, char **argv) {$/;"	f
main	src/luac.c	/^int main(int argc, char* argv[])$/;"	f
mainposition	src/ltable.c	/^static Node *mainposition (const Table *t, const TValue *key) {$/;"	f	file:
mainthread	src/lstate.h	/^  struct lua_State *mainthread;$/;"	m	struct:global_State	typeref:struct:global_State::lua_State
makemask	src/ldblib.c	/^static int makemask (const char *smask, int count) {$/;"	f	file:
makewhite	src/lgc.c	34;"	d	file:
markfinalized	src/lgc.c	44;"	d	file:
markmt	src/lgc.c	/^static void markmt (global_State *g) {$/;"	f	file:
markobject	src/lgc.c	55;"	d	file:
markroot	src/lgc.c	/^static void markroot (lua_State *L) {$/;"	f	file:
marktmu	src/lgc.c	/^static void marktmu (global_State *g) {$/;"	f	file:
markupval	src/lparser.c	/^static void markupval (FuncState *fs, int level) {$/;"	f	file:
markvalue	src/lgc.c	52;"	d	file:
maskmarks	src/lgc.c	32;"	d	file:
match	src/lstrlib.c	/^static const char *match (MatchState *ms, const char *s, const char *p) {$/;"	f	file:
match_capture	src/lstrlib.c	/^static const char *match_capture (MatchState *ms, const char *s, int l) {$/;"	f	file:
match_class	src/lstrlib.c	/^static int match_class (int c, int cl) {$/;"	f	file:
matchbalance	src/lstrlib.c	/^static const char *matchbalance (MatchState *ms, const char *s,$/;"	f	file:
matchbracketclass	src/lstrlib.c	/^static int matchbracketclass (int c, const char *p, const char *ec) {$/;"	f	file:
math_abs	src/lmathlib.c	/^static int math_abs (lua_State *L) {$/;"	f	file:
math_acos	src/lmathlib.c	/^static int math_acos (lua_State *L) {$/;"	f	file:
math_asin	src/lmathlib.c	/^static int math_asin (lua_State *L) {$/;"	f	file:
math_atan	src/lmathlib.c	/^static int math_atan (lua_State *L) {$/;"	f	file:
math_atan2	src/lmathlib.c	/^static int math_atan2 (lua_State *L) {$/;"	f	file:
math_ceil	src/lmathlib.c	/^static int math_ceil (lua_State *L) {$/;"	f	file:
math_cos	src/lmathlib.c	/^static int math_cos (lua_State *L) {$/;"	f	file:
math_cosh	src/lmathlib.c	/^static int math_cosh (lua_State *L) {$/;"	f	file:
math_deg	src/lmathlib.c	/^static int math_deg (lua_State *L) {$/;"	f	file:
math_exp	src/lmathlib.c	/^static int math_exp (lua_State *L) {$/;"	f	file:
math_floor	src/lmathlib.c	/^static int math_floor (lua_State *L) {$/;"	f	file:
math_fmod	src/lmathlib.c	/^static int math_fmod (lua_State *L) {$/;"	f	file:
math_frexp	src/lmathlib.c	/^static int math_frexp (lua_State *L) {$/;"	f	file:
math_ldexp	src/lmathlib.c	/^static int math_ldexp (lua_State *L) {$/;"	f	file:
math_log	src/lmathlib.c	/^static int math_log (lua_State *L) {$/;"	f	file:
math_log10	src/lmathlib.c	/^static int math_log10 (lua_State *L) {$/;"	f	file:
math_max	src/lmathlib.c	/^static int math_max (lua_State *L) {$/;"	f	file:
math_min	src/lmathlib.c	/^static int math_min (lua_State *L) {$/;"	f	file:
math_modf	src/lmathlib.c	/^static int math_modf (lua_State *L) {$/;"	f	file:
math_pow	src/lmathlib.c	/^static int math_pow (lua_State *L) {$/;"	f	file:
math_rad	src/lmathlib.c	/^static int math_rad (lua_State *L) {$/;"	f	file:
math_random	src/lmathlib.c	/^static int math_random (lua_State *L) {$/;"	f	file:
math_randomseed	src/lmathlib.c	/^static int math_randomseed (lua_State *L) {$/;"	f	file:
math_sin	src/lmathlib.c	/^static int math_sin (lua_State *L) {$/;"	f	file:
math_sinh	src/lmathlib.c	/^static int math_sinh (lua_State *L) {$/;"	f	file:
math_sqrt	src/lmathlib.c	/^static int math_sqrt (lua_State *L) {$/;"	f	file:
math_tan	src/lmathlib.c	/^static int math_tan (lua_State *L) {$/;"	f	file:
math_tanh	src/lmathlib.c	/^static int math_tanh (lua_State *L) {$/;"	f	file:
mathlib	src/lmathlib.c	/^static const luaL_Reg mathlib[] = {$/;"	v	file:
max_expand	src/lstrlib.c	/^static const char *max_expand (MatchState *ms, const char *s,$/;"	f	file:
maxn	src/ltablib.c	/^static int maxn (lua_State *L) {$/;"	f	file:
maxstacksize	src/lobject.h	/^  lu_byte maxstacksize;$/;"	m	struct:Proto
metatable	src/lobject.h	/^    struct Table *metatable;$/;"	m	struct:Udata::__anon7	typeref:struct:Udata::__anon7::Table
metatable	src/lobject.h	/^  struct Table *metatable;$/;"	m	struct:Table	typeref:struct:Table::Table
min_expand	src/lstrlib.c	/^static const char *min_expand (MatchState *ms, const char *s,$/;"	f	file:
mkfuncname	src/loadlib.c	/^static const char *mkfuncname (lua_State *L, const char *modname) {$/;"	f	file:
modinit	src/loadlib.c	/^static void modinit (lua_State *L, const char *modname) {$/;"	f	file:
mt	src/lstate.h	/^  struct Table *mt[NUM_TAGS];  \/* metatables for basic types *\/$/;"	m	struct:global_State	typeref:struct:global_State::Table
mt.__index 	etc/strict.lua	/^mt.__index = function (t, n)$/;"	f
mt.__newindex 	etc/strict.lua	/^mt.__newindex = function (t, n, v)$/;"	f
n	src/lobject.h	/^  lua_Number n;   \/\/  n表示double$/;"	m	union:__anon5
n	src/lzio.h	/^  size_t n;			\/* bytes still unread *\/$/;"	m	struct:Zio
n	src/lzio.h	/^  size_t n;$/;"	m	struct:Mbuffer
nCcalls	src/lstate.h	/^  unsigned short nCcalls;  \/* number of nested C calls *\/$/;"	m	struct:lua_State
na	src/lparser.c	/^  int na;  \/* total number of array elements *\/$/;"	m	struct:ConsControl	file:
nactvar	src/lparser.c	/^  lu_byte nactvar;  \/* # active locals outside the breakable structure *\/$/;"	m	struct:BlockCnt	file:
nactvar	src/lparser.h	/^  lu_byte nactvar;  \/* number of active local variables *\/$/;"	m	struct:FuncState
name	src/lauxlib.h	/^  const char *name;$/;"	m	struct:luaL_Reg
name	src/ldo.c	/^  const char *name;$/;"	m	struct:SParser	file:
name	src/lua.h	/^  const char *name;	\/* (n) *\/$/;"	m	struct:lua_Debug
name	src/lundump.c	/^ const char* name;$/;"	m	struct:__anon13	file:
namewhat	src/lua.h	/^  const char *namewhat;	\/* (n) `global', `local', `field', `method' *\/$/;"	m	struct:lua_Debug
need_value	src/lcode.c	/^static int need_value (FuncState *fs, int list) {$/;"	f	file:
new_localvar	src/lparser.c	/^static void new_localvar (LexState *ls, TString *name, int n) {$/;"	f	file:
new_localvarliteral	src/lparser.c	156;"	d	file:
newfenv	src/liolib.c	/^static void newfenv (lua_State *L, lua_CFunction cls) {$/;"	f	file:
newfile	src/liolib.c	/^static FILE **newfile (lua_State *L) {$/;"	f	file:
newkey	src/ltable.c	/^static TValue *newkey (lua_State *L, Table *t, const TValue *key) {$/;"	f	file:
newlstr	src/lstring.c	/^static TString *newlstr (lua_State *L, const char *str, size_t l,$/;"	f	file:
next	src/llex.c	28;"	d	file:
next	src/lobject.h	/^      struct UpVal *next;$/;"	m	struct:UpVal::__anon8::__anon9	typeref:struct:UpVal::__anon8::__anon9::UpVal
next	src/lobject.h	/^    struct Node *next;  \/* for chaining *\/ \/\/ 指向像一个相同hash值的key值；$/;"	m	struct:TKey::__anon10	typeref:struct:TKey::__anon10::Node
ngcotouv	src/lstate.h	161;"	d
nh	src/lparser.c	/^  int nh;  \/* total number of `record' elements *\/$/;"	m	struct:ConsControl	file:
nilK	src/lcode.c	/^static int nilK (FuncState *fs) {$/;"	f	file:
nk	src/lobject.h	/^  } nk;$/;"	m	union:TKey	typeref:struct:TKey::__anon10
nk	src/lparser.h	/^  int nk;  \/* number of elements in `k' *\/$/;"	m	struct:FuncState
nlocvars	src/lparser.h	/^  short nlocvars;  \/* number of elements in `locvars' *\/$/;"	m	struct:FuncState
node	src/lobject.h	/^  Node *node; \/\/ \/\/ Node数组，数组的索引通过Key计算hash获取$/;"	m	struct:Table
notail	src/lua.c	263;"	d	file:
np	src/lparser.h	/^  int np;  \/* number of elements in `p' *\/$/;"	m	struct:FuncState
nresults	src/lapi.c	/^  int nresults;$/;"	m	struct:CallS	file:
nresults	src/lstate.h	/^  int nresults;  \/* expected number of results from this function *\/$/;"	m	struct:CallInfo
numints	src/ltable.c	69;"	d	file:
numparams	src/lobject.h	/^  lu_byte numparams;$/;"	m	struct:Proto
numusearray	src/ltable.c	/^static int numusearray (const Table *t, int *nums) {$/;"	f	file:
numusehash	src/ltable.c	/^static int numusehash (const Table *t, int *nums, int *pnasize) {$/;"	f	file:
nups	src/lobject.h	/^  lu_byte nups;  \/* number of upvalues *\/$/;"	m	struct:Proto
nups	src/lua.h	/^  int nups;		\/* (u) number of upvalues *\/$/;"	m	struct:lua_Debug
nuse	src/lstate.h	/^  lu_int32 nuse;  \/* number of elements *\/$/;"	m	struct:stringtable
nval	src/lparser.h	/^    lua_Number nval;$/;"	m	union:expdesc::__anon2
nvalue	src/lobject.h	112;"	d
obj2gco	src/lstate.h	169;"	d
open_func	src/lparser.c	/^static void open_func (LexState *ls, FuncState *fs) {$/;"	f	file:
openupval	src/lstate.h	/^  GCObject *openupval;  \/* list of open upvalues in this stack *\/$/;"	m	struct:lua_State
opmode	src/lopcodes.c	59;"	d	file:
os_clock	src/loslib.c	/^static int os_clock (lua_State *L) {$/;"	f	file:
os_date	src/loslib.c	/^static int os_date (lua_State *L) {$/;"	f	file:
os_difftime	src/loslib.c	/^static int os_difftime (lua_State *L) {$/;"	f	file:
os_execute	src/loslib.c	/^static int os_execute (lua_State *L) {$/;"	f	file:
os_exit	src/loslib.c	/^static int os_exit (lua_State *L) {$/;"	f	file:
os_getenv	src/loslib.c	/^static int os_getenv (lua_State *L) {$/;"	f	file:
os_pushresult	src/loslib.c	/^static int os_pushresult (lua_State *L, int i, const char *filename) {$/;"	f	file:
os_remove	src/loslib.c	/^static int os_remove (lua_State *L) {$/;"	f	file:
os_rename	src/loslib.c	/^static int os_rename (lua_State *L) {$/;"	f	file:
os_setlocale	src/loslib.c	/^static int os_setlocale (lua_State *L) {$/;"	f	file:
os_time	src/loslib.c	/^static int os_time (lua_State *L) {$/;"	f	file:
os_tmpname	src/loslib.c	/^static int os_tmpname (lua_State *L) {$/;"	f	file:
otherwhite	src/lgc.h	69;"	d
output	src/luac.c	/^static const char* output=Output;	\/* actual output file name *\/$/;"	v	file:
p	src/lauxlib.h	/^  char *p;			\/* current position in buffer *\/$/;"	m	struct:luaL_Buffer
p	src/lobject.h	/^  struct Proto **p;  \/* functions defined inside the function *\/$/;"	m	struct:Proto	typeref:struct:Proto::Proto
p	src/lobject.h	/^  struct Proto *p;$/;"	m	struct:LClosure	typeref:struct:LClosure::Proto
p	src/lobject.h	/^  void *p;        \/\/  p用于表示 light userdata它是不会被gc的$/;"	m	union:__anon5
p	src/lstate.h	/^  struct Proto p;   \/*函数*\/ $/;"	m	union:GCObject	typeref:struct:GCObject::Proto
p	src/lzio.h	/^  const char *p;		\/* current position in buffer *\/$/;"	m	struct:Zio
panic	src/lauxlib.c	/^static int panic (lua_State *L) {$/;"	f	file:
panic	src/lstate.h	/^  lua_CFunction panic;  \/* to be called in unprotected errors *\/$/;"	m	struct:global_State
parlist	src/lparser.c	/^static void parlist (LexState *ls) {$/;"	f	file:
patchlistaux	src/lcode.c	/^static void patchlistaux (FuncState *fs, int list, int vtarget, int reg,$/;"	f	file:
patchtestreg	src/lcode.c	/^static int patchtestreg (FuncState *fs, int node, int reg) {$/;"	f	file:
pc	src/lparser.h	/^  int pc;  \/* next position to code (equivalent to `ncode') *\/$/;"	m	struct:FuncState
pcRel	src/ldebug.h	14;"	d
pdf-LUAL_BUFFERSIZE	doc/manual.html	/^Returns an address to a space of size <a name="pdf-LUAL_BUFFERSIZE"><code>LUAL_BUFFERSIZE<\/code><\/a>$/;"	a
pdf-LUA_CPATH	doc/manual.html	/^using the environment variable <a name="pdf-LUA_CPATH"><code>LUA_CPATH<\/code><\/a>$/;"	a
pdf-LUA_ENVIRONINDEX	doc/manual.html	/^at pseudo-index <a name="pdf-LUA_ENVIRONINDEX"><code>LUA_ENVIRONINDEX<\/code><\/a>.$/;"	a
pdf-LUA_ERRERR	doc/manual.html	/^<li><b><a name="pdf-LUA_ERRERR"><code>LUA_ERRERR<\/code><\/a>:<\/b>$/;"	a
pdf-LUA_ERRFILE	doc/manual.html	/^but it has an extra error code <a name="pdf-LUA_ERRFILE"><code>LUA_ERRFILE<\/code><\/a>$/;"	a
pdf-LUA_ERRMEM	doc/manual.html	/^<li><b><a name="pdf-LUA_ERRMEM"><code>LUA_ERRMEM<\/code><\/a>:<\/b>$/;"	a
pdf-LUA_ERRRUN	doc/manual.html	/^<li><b><a name="pdf-LUA_ERRRUN"><code>LUA_ERRRUN<\/code><\/a>:<\/b>$/;"	a
pdf-LUA_ERRSYNTAX	doc/manual.html	/^<li><b><a name="pdf-LUA_ERRSYNTAX"><code>LUA_ERRSYNTAX<\/code><\/a>:<\/b>$/;"	a
pdf-LUA_GLOBALSINDEX	doc/manual.html	/^always at pseudo-index <a name="pdf-LUA_GLOBALSINDEX"><code>LUA_GLOBALSINDEX<\/code><\/a>.$/;"	a
pdf-LUA_HOOKCALL	doc/manual.html	/^<a name="pdf-LUA_HOOKCALL"><code>LUA_HOOKCALL<\/code><\/a>, <a name="pdf-LUA_HOOKRET"><code>LUA_HOOKRET<\/code><\/a>,$/;"	a
pdf-LUA_HOOKCOUNT	doc/manual.html	/^and <a name="pdf-LUA_HOOKCOUNT"><code>LUA_HOOKCOUNT<\/code><\/a>.$/;"	a
pdf-LUA_HOOKTAILRET	doc/manual.html	/^<a name="pdf-LUA_HOOKTAILRET"><code>LUA_HOOKTAILRET<\/code><\/a>, <a name="pdf-LUA_HOOKLINE"><code>LUA_HOOKLINE<\/code><\/a>,$/;"	a
pdf-LUA_INIT	doc/manual.html	/^the interpreter checks for an environment variable <a name="pdf-LUA_INIT"><code>LUA_INIT<\/code><\/a>.$/;"	a
pdf-LUA_MASKCALL	doc/manual.html	/^<a name="pdf-LUA_MASKCALL"><code>LUA_MASKCALL<\/code><\/a>,$/;"	a
pdf-LUA_MASKCOUNT	doc/manual.html	/^and <a name="pdf-LUA_MASKCOUNT"><code>LUA_MASKCOUNT<\/code><\/a>.$/;"	a
pdf-LUA_MASKLINE	doc/manual.html	/^<a name="pdf-LUA_MASKLINE"><code>LUA_MASKLINE<\/code><\/a>,$/;"	a
pdf-LUA_MASKRET	doc/manual.html	/^<a name="pdf-LUA_MASKRET"><code>LUA_MASKRET<\/code><\/a>,$/;"	a
pdf-LUA_MINSTACK	doc/manual.html	/^it ensures that at least <a name="pdf-LUA_MINSTACK"><code>LUA_MINSTACK<\/code><\/a> stack positions are available.$/;"	a
pdf-LUA_MULTRET	doc/manual.html	/^unless <code>nresults<\/code> is <a name="pdf-LUA_MULTRET"><code>LUA_MULTRET<\/code><\/a>.$/;"	a
pdf-LUA_NOREF	doc/manual.html	/^The constant <a name="pdf-LUA_NOREF"><code>LUA_NOREF<\/code><\/a> is guaranteed to be different$/;"	a
pdf-LUA_PATH	doc/manual.html	/^the value of the environment variable <a name="pdf-LUA_PATH"><code>LUA_PATH<\/code><\/a> or$/;"	a
pdf-LUA_REFNIL	doc/manual.html	/^<a href="#luaL_ref"><code>luaL_ref<\/code><\/a> returns the constant <a name="pdf-LUA_REFNIL"><code>LUA_REFNIL<\/code><\/a>.$/;"	a
pdf-LUA_REGISTRYINDEX	doc/manual.html	/^<a name="pdf-LUA_REGISTRYINDEX"><code>LUA_REGISTRYINDEX<\/code><\/a>.$/;"	a
pdf-LUA_YIELD	doc/manual.html	/^or <a name="pdf-LUA_YIELD"><code>LUA_YIELD<\/code><\/a> if the thread is suspended.$/;"	a
pdf-_G	doc/manual.html	/^<hr><h3><a name="pdf-_G"><code>_G<\/code><\/a><\/h3>$/;"	a
pdf-_PROMPT	doc/manual.html	/^If the global variable <a name="pdf-_PROMPT"><code>_PROMPT<\/code><\/a> contains a string,$/;"	a
pdf-_PROMPT2	doc/manual.html	/^Similarly, if the global variable <a name="pdf-_PROMPT2"><code>_PROMPT2<\/code><\/a> contains a string,$/;"	a
pdf-_VERSION	doc/manual.html	/^<hr><h3><a name="pdf-_VERSION"><code>_VERSION<\/code><\/a><\/h3>$/;"	a
pdf-assert	doc/manual.html	/^<hr><h3><a name="pdf-assert"><code>assert (v [, message])<\/code><\/a><\/h3>$/;"	a
pdf-collectgarbage	doc/manual.html	/^<hr><h3><a name="pdf-collectgarbage"><code>collectgarbage ([opt [, arg]])<\/code><\/a><\/h3>$/;"	a
pdf-coroutine	doc/manual.html	/^the basic library and come inside the table <a name="pdf-coroutine"><code>coroutine<\/code><\/a>.$/;"	a
pdf-coroutine.create	doc/manual.html	/^<hr><h3><a name="pdf-coroutine.create"><code>coroutine.create (f)<\/code><\/a><\/h3>$/;"	a
pdf-coroutine.resume	doc/manual.html	/^<hr><h3><a name="pdf-coroutine.resume"><code>coroutine.resume (co [, val1, &middot;&middot;&middot;])<\/code><\/a><\/h3>$/;"	a
pdf-coroutine.running	doc/manual.html	/^<hr><h3><a name="pdf-coroutine.running"><code>coroutine.running ()<\/code><\/a><\/h3>$/;"	a
pdf-coroutine.status	doc/manual.html	/^<hr><h3><a name="pdf-coroutine.status"><code>coroutine.status (co)<\/code><\/a><\/h3>$/;"	a
pdf-coroutine.wrap	doc/manual.html	/^<hr><h3><a name="pdf-coroutine.wrap"><code>coroutine.wrap (f)<\/code><\/a><\/h3>$/;"	a
pdf-coroutine.yield	doc/manual.html	/^<hr><h3><a name="pdf-coroutine.yield"><code>coroutine.yield (&middot;&middot;&middot;)<\/code><\/a><\/h3>$/;"	a
pdf-debug	doc/manual.html	/^inside the <a name="pdf-debug"><code>debug<\/code><\/a> table.$/;"	a
pdf-debug.debug	doc/manual.html	/^<hr><h3><a name="pdf-debug.debug"><code>debug.debug ()<\/code><\/a><\/h3>$/;"	a
pdf-debug.getfenv	doc/manual.html	/^<hr><h3><a name="pdf-debug.getfenv"><code>debug.getfenv (o)<\/code><\/a><\/h3>$/;"	a
pdf-debug.gethook	doc/manual.html	/^<hr><h3><a name="pdf-debug.gethook"><code>debug.gethook ([thread])<\/code><\/a><\/h3>$/;"	a
pdf-debug.getinfo	doc/manual.html	/^<hr><h3><a name="pdf-debug.getinfo"><code>debug.getinfo ([thread,] function [, what])<\/code><\/a><\/h3>$/;"	a
pdf-debug.getlocal	doc/manual.html	/^<hr><h3><a name="pdf-debug.getlocal"><code>debug.getlocal ([thread,] level, local)<\/code><\/a><\/h3>$/;"	a
pdf-debug.getmetatable	doc/manual.html	/^<hr><h3><a name="pdf-debug.getmetatable"><code>debug.getmetatable (object)<\/code><\/a><\/h3>$/;"	a
pdf-debug.getregistry	doc/manual.html	/^<hr><h3><a name="pdf-debug.getregistry"><code>debug.getregistry ()<\/code><\/a><\/h3>$/;"	a
pdf-debug.getupvalue	doc/manual.html	/^<hr><h3><a name="pdf-debug.getupvalue"><code>debug.getupvalue (func, up)<\/code><\/a><\/h3>$/;"	a
pdf-debug.setfenv	doc/manual.html	/^<hr><h3><a name="pdf-debug.setfenv"><code>debug.setfenv (object, table)<\/code><\/a><\/h3>$/;"	a
pdf-debug.sethook	doc/manual.html	/^<hr><h3><a name="pdf-debug.sethook"><code>debug.sethook ([thread,] hook, mask [, count])<\/code><\/a><\/h3>$/;"	a
pdf-debug.setlocal	doc/manual.html	/^<hr><h3><a name="pdf-debug.setlocal"><code>debug.setlocal ([thread,] level, local, value)<\/code><\/a><\/h3>$/;"	a
pdf-debug.setmetatable	doc/manual.html	/^<hr><h3><a name="pdf-debug.setmetatable"><code>debug.setmetatable (object, table)<\/code><\/a><\/h3>$/;"	a
pdf-debug.setupvalue	doc/manual.html	/^<hr><h3><a name="pdf-debug.setupvalue"><code>debug.setupvalue (func, up, value)<\/code><\/a><\/h3>$/;"	a
pdf-debug.traceback	doc/manual.html	/^<hr><h3><a name="pdf-debug.traceback"><code>debug.traceback ([thread,] [message [, level]])<\/code><\/a><\/h3>$/;"	a
pdf-dofile	doc/manual.html	/^<hr><h3><a name="pdf-dofile"><code>dofile ([filename])<\/code><\/a><\/h3>$/;"	a
pdf-error	doc/manual.html	/^<hr><h3><a name="pdf-error"><code>error (message [, level])<\/code><\/a><\/h3>$/;"	a
pdf-file:close	doc/manual.html	/^<hr><h3><a name="pdf-file:close"><code>file:close ()<\/code><\/a><\/h3>$/;"	a
pdf-file:flush	doc/manual.html	/^<hr><h3><a name="pdf-file:flush"><code>file:flush ()<\/code><\/a><\/h3>$/;"	a
pdf-file:lines	doc/manual.html	/^<hr><h3><a name="pdf-file:lines"><code>file:lines ()<\/code><\/a><\/h3>$/;"	a
pdf-file:read	doc/manual.html	/^<hr><h3><a name="pdf-file:read"><code>file:read (&middot;&middot;&middot;)<\/code><\/a><\/h3>$/;"	a
pdf-file:seek	doc/manual.html	/^<hr><h3><a name="pdf-file:seek"><code>file:seek ([whence] [, offset])<\/code><\/a><\/h3>$/;"	a
pdf-file:setvbuf	doc/manual.html	/^<hr><h3><a name="pdf-file:setvbuf"><code>file:setvbuf (mode [, size])<\/code><\/a><\/h3>$/;"	a
pdf-file:write	doc/manual.html	/^<hr><h3><a name="pdf-file:write"><code>file:write (&middot;&middot;&middot;)<\/code><\/a><\/h3>$/;"	a
pdf-getfenv	doc/manual.html	/^<hr><h3><a name="pdf-getfenv"><code>getfenv ([f])<\/code><\/a><\/h3>$/;"	a
pdf-getmetatable	doc/manual.html	/^<hr><h3><a name="pdf-getmetatable"><code>getmetatable (object)<\/code><\/a><\/h3>$/;"	a
pdf-io	doc/manual.html	/^all operations are supplied by table <a name="pdf-io"><code>io<\/code><\/a>.$/;"	a
pdf-io.close	doc/manual.html	/^<hr><h3><a name="pdf-io.close"><code>io.close ([file])<\/code><\/a><\/h3>$/;"	a
pdf-io.flush	doc/manual.html	/^<hr><h3><a name="pdf-io.flush"><code>io.flush ()<\/code><\/a><\/h3>$/;"	a
pdf-io.input	doc/manual.html	/^<hr><h3><a name="pdf-io.input"><code>io.input ([file])<\/code><\/a><\/h3>$/;"	a
pdf-io.lines	doc/manual.html	/^<hr><h3><a name="pdf-io.lines"><code>io.lines ([filename])<\/code><\/a><\/h3>$/;"	a
pdf-io.open	doc/manual.html	/^<hr><h3><a name="pdf-io.open"><code>io.open (filename [, mode])<\/code><\/a><\/h3>$/;"	a
pdf-io.output	doc/manual.html	/^<hr><h3><a name="pdf-io.output"><code>io.output ([file])<\/code><\/a><\/h3>$/;"	a
pdf-io.popen	doc/manual.html	/^<hr><h3><a name="pdf-io.popen"><code>io.popen (prog [, mode])<\/code><\/a><\/h3>$/;"	a
pdf-io.read	doc/manual.html	/^<hr><h3><a name="pdf-io.read"><code>io.read (&middot;&middot;&middot;)<\/code><\/a><\/h3>$/;"	a
pdf-io.stdin	doc/manual.html	/^<a name="pdf-io.stdin"><code>io.stdin<\/code><\/a>, <a name="pdf-io.stdout"><code>io.stdout<\/code><\/a>, and <a name="pdf-io.stderr"><code>io.stderr<\/code><\/a>.$/;"	a
pdf-io.tmpfile	doc/manual.html	/^<hr><h3><a name="pdf-io.tmpfile"><code>io.tmpfile ()<\/code><\/a><\/h3>$/;"	a
pdf-io.type	doc/manual.html	/^<hr><h3><a name="pdf-io.type"><code>io.type (obj)<\/code><\/a><\/h3>$/;"	a
pdf-io.write	doc/manual.html	/^<hr><h3><a name="pdf-io.write"><code>io.write (&middot;&middot;&middot;)<\/code><\/a><\/h3>$/;"	a
pdf-ipairs	doc/manual.html	/^<hr><h3><a name="pdf-ipairs"><code>ipairs (t)<\/code><\/a><\/h3>$/;"	a
pdf-load	doc/manual.html	/^<hr><h3><a name="pdf-load"><code>load (func [, chunkname])<\/code><\/a><\/h3>$/;"	a
pdf-loadfile	doc/manual.html	/^<hr><h3><a name="pdf-loadfile"><code>loadfile ([filename])<\/code><\/a><\/h3>$/;"	a
pdf-loadstring	doc/manual.html	/^<hr><h3><a name="pdf-loadstring"><code>loadstring (string [, chunkname])<\/code><\/a><\/h3>$/;"	a
pdf-lua.h	doc/manual.html	/^are declared in the header file <a name="pdf-lua.h"><code>lua.h<\/code><\/a>.$/;"	a
pdf-luai_apicheck	doc/manual.html	/^with a proper definition for the macro <a name="pdf-luai_apicheck"><code>luai_apicheck<\/code><\/a>,$/;"	a
pdf-lualib.h	doc/manual.html	/^These functions are declared in <a name="pdf-lualib.h"><code>lualib.h<\/code><\/a>$/;"	a
pdf-luaopen_base	doc/manual.html	/^<a name="pdf-luaopen_base"><code>luaopen_base<\/code><\/a> (for the basic library),$/;"	a
pdf-luaopen_debug	doc/manual.html	/^and <a name="pdf-luaopen_debug"><code>luaopen_debug<\/code><\/a> (for the debug library).$/;"	a
pdf-luaopen_io	doc/manual.html	/^<a name="pdf-luaopen_io"><code>luaopen_io<\/code><\/a> (for the I\/O library),$/;"	a
pdf-luaopen_math	doc/manual.html	/^<a name="pdf-luaopen_math"><code>luaopen_math<\/code><\/a> (for the mathematical library),$/;"	a
pdf-luaopen_os	doc/manual.html	/^<a name="pdf-luaopen_os"><code>luaopen_os<\/code><\/a> (for the Operating System library),$/;"	a
pdf-luaopen_package	doc/manual.html	/^<a name="pdf-luaopen_package"><code>luaopen_package<\/code><\/a> (for the package library),$/;"	a
pdf-luaopen_string	doc/manual.html	/^<a name="pdf-luaopen_string"><code>luaopen_string<\/code><\/a> (for the string library),$/;"	a
pdf-luaopen_table	doc/manual.html	/^<a name="pdf-luaopen_table"><code>luaopen_table<\/code><\/a> (for the table library),$/;"	a
pdf-math	doc/manual.html	/^It provides all its functions inside the table <a name="pdf-math"><code>math<\/code><\/a>.$/;"	a
pdf-math.abs	doc/manual.html	/^<hr><h3><a name="pdf-math.abs"><code>math.abs (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.acos	doc/manual.html	/^<hr><h3><a name="pdf-math.acos"><code>math.acos (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.asin	doc/manual.html	/^<hr><h3><a name="pdf-math.asin"><code>math.asin (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.atan	doc/manual.html	/^<hr><h3><a name="pdf-math.atan"><code>math.atan (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.atan2	doc/manual.html	/^<hr><h3><a name="pdf-math.atan2"><code>math.atan2 (y, x)<\/code><\/a><\/h3>$/;"	a
pdf-math.ceil	doc/manual.html	/^<hr><h3><a name="pdf-math.ceil"><code>math.ceil (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.cos	doc/manual.html	/^<hr><h3><a name="pdf-math.cos"><code>math.cos (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.cosh	doc/manual.html	/^<hr><h3><a name="pdf-math.cosh"><code>math.cosh (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.deg	doc/manual.html	/^<hr><h3><a name="pdf-math.deg"><code>math.deg (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.exp	doc/manual.html	/^<hr><h3><a name="pdf-math.exp"><code>math.exp (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.floor	doc/manual.html	/^<hr><h3><a name="pdf-math.floor"><code>math.floor (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.fmod	doc/manual.html	/^<hr><h3><a name="pdf-math.fmod"><code>math.fmod (x, y)<\/code><\/a><\/h3>$/;"	a
pdf-math.frexp	doc/manual.html	/^<hr><h3><a name="pdf-math.frexp"><code>math.frexp (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.huge	doc/manual.html	/^<hr><h3><a name="pdf-math.huge"><code>math.huge<\/code><\/a><\/h3>$/;"	a
pdf-math.ldexp	doc/manual.html	/^<hr><h3><a name="pdf-math.ldexp"><code>math.ldexp (m, e)<\/code><\/a><\/h3>$/;"	a
pdf-math.log	doc/manual.html	/^<hr><h3><a name="pdf-math.log"><code>math.log (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.log10	doc/manual.html	/^<hr><h3><a name="pdf-math.log10"><code>math.log10 (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.max	doc/manual.html	/^<hr><h3><a name="pdf-math.max"><code>math.max (x, &middot;&middot;&middot;)<\/code><\/a><\/h3>$/;"	a
pdf-math.min	doc/manual.html	/^<hr><h3><a name="pdf-math.min"><code>math.min (x, &middot;&middot;&middot;)<\/code><\/a><\/h3>$/;"	a
pdf-math.modf	doc/manual.html	/^<hr><h3><a name="pdf-math.modf"><code>math.modf (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.pi	doc/manual.html	/^<hr><h3><a name="pdf-math.pi"><code>math.pi<\/code><\/a><\/h3>$/;"	a
pdf-math.pow	doc/manual.html	/^<hr><h3><a name="pdf-math.pow"><code>math.pow (x, y)<\/code><\/a><\/h3>$/;"	a
pdf-math.rad	doc/manual.html	/^<hr><h3><a name="pdf-math.rad"><code>math.rad (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.random	doc/manual.html	/^<hr><h3><a name="pdf-math.random"><code>math.random ([m [, n]])<\/code><\/a><\/h3>$/;"	a
pdf-math.randomseed	doc/manual.html	/^<hr><h3><a name="pdf-math.randomseed"><code>math.randomseed (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.sin	doc/manual.html	/^<hr><h3><a name="pdf-math.sin"><code>math.sin (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.sinh	doc/manual.html	/^<hr><h3><a name="pdf-math.sinh"><code>math.sinh (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.sqrt	doc/manual.html	/^<hr><h3><a name="pdf-math.sqrt"><code>math.sqrt (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.tan	doc/manual.html	/^<hr><h3><a name="pdf-math.tan"><code>math.tan (x)<\/code><\/a><\/h3>$/;"	a
pdf-math.tanh	doc/manual.html	/^<hr><h3><a name="pdf-math.tanh"><code>math.tanh (x)<\/code><\/a><\/h3>$/;"	a
pdf-module	doc/manual.html	/^<hr><h3><a name="pdf-module"><code>module (name [, &middot;&middot;&middot;])<\/code><\/a><\/h3>$/;"	a
pdf-next	doc/manual.html	/^<hr><h3><a name="pdf-next"><code>next (table [, index])<\/code><\/a><\/h3>$/;"	a
pdf-os	doc/manual.html	/^This library is implemented through table <a name="pdf-os"><code>os<\/code><\/a>.$/;"	a
pdf-os.clock	doc/manual.html	/^<hr><h3><a name="pdf-os.clock"><code>os.clock ()<\/code><\/a><\/h3>$/;"	a
pdf-os.date	doc/manual.html	/^<hr><h3><a name="pdf-os.date"><code>os.date ([format [, time]])<\/code><\/a><\/h3>$/;"	a
pdf-os.difftime	doc/manual.html	/^<hr><h3><a name="pdf-os.difftime"><code>os.difftime (t2, t1)<\/code><\/a><\/h3>$/;"	a
pdf-os.execute	doc/manual.html	/^<hr><h3><a name="pdf-os.execute"><code>os.execute ([command])<\/code><\/a><\/h3>$/;"	a
pdf-os.exit	doc/manual.html	/^<hr><h3><a name="pdf-os.exit"><code>os.exit ([code])<\/code><\/a><\/h3>$/;"	a
pdf-os.getenv	doc/manual.html	/^<hr><h3><a name="pdf-os.getenv"><code>os.getenv (varname)<\/code><\/a><\/h3>$/;"	a
pdf-os.remove	doc/manual.html	/^<hr><h3><a name="pdf-os.remove"><code>os.remove (filename)<\/code><\/a><\/h3>$/;"	a
pdf-os.rename	doc/manual.html	/^<hr><h3><a name="pdf-os.rename"><code>os.rename (oldname, newname)<\/code><\/a><\/h3>$/;"	a
pdf-os.setlocale	doc/manual.html	/^<hr><h3><a name="pdf-os.setlocale"><code>os.setlocale (locale [, category])<\/code><\/a><\/h3>$/;"	a
pdf-os.time	doc/manual.html	/^<hr><h3><a name="pdf-os.time"><code>os.time ([table])<\/code><\/a><\/h3>$/;"	a
pdf-os.tmpname	doc/manual.html	/^<hr><h3><a name="pdf-os.tmpname"><code>os.tmpname ()<\/code><\/a><\/h3>$/;"	a
pdf-package	doc/manual.html	/^Everything else is exported in a table <a name="pdf-package"><code>package<\/code><\/a>.$/;"	a
pdf-package.cpath	doc/manual.html	/^<hr><h3><a name="pdf-package.cpath"><code>package.cpath<\/code><\/a><\/h3>$/;"	a
pdf-package.loaded	doc/manual.html	/^<hr><h3><a name="pdf-package.loaded"><code>package.loaded<\/code><\/a><\/h3>$/;"	a
pdf-package.loaders	doc/manual.html	/^<hr><h3><a name="pdf-package.loaders"><code>package.loaders<\/code><\/a><\/h3>$/;"	a
pdf-package.loadlib	doc/manual.html	/^<hr><h3><a name="pdf-package.loadlib"><code>package.loadlib (libname, funcname)<\/code><\/a><\/h3>$/;"	a
pdf-package.path	doc/manual.html	/^<hr><h3><a name="pdf-package.path"><code>package.path<\/code><\/a><\/h3>$/;"	a
pdf-package.preload	doc/manual.html	/^<hr><h3><a name="pdf-package.preload"><code>package.preload<\/code><\/a><\/h3>$/;"	a
pdf-package.seeall	doc/manual.html	/^<hr><h3><a name="pdf-package.seeall"><code>package.seeall (module)<\/code><\/a><\/h3>$/;"	a
pdf-pairs	doc/manual.html	/^<hr><h3><a name="pdf-pairs"><code>pairs (t)<\/code><\/a><\/h3>$/;"	a
pdf-pcall	doc/manual.html	/^<hr><h3><a name="pdf-pcall"><code>pcall (f, arg1, &middot;&middot;&middot;)<\/code><\/a><\/h3>$/;"	a
pdf-print	doc/manual.html	/^<hr><h3><a name="pdf-print"><code>print (&middot;&middot;&middot;)<\/code><\/a><\/h3>$/;"	a
pdf-rawequal	doc/manual.html	/^<hr><h3><a name="pdf-rawequal"><code>rawequal (v1, v2)<\/code><\/a><\/h3>$/;"	a
pdf-rawget	doc/manual.html	/^<hr><h3><a name="pdf-rawget"><code>rawget (table, index)<\/code><\/a><\/h3>$/;"	a
pdf-rawset	doc/manual.html	/^<hr><h3><a name="pdf-rawset"><code>rawset (table, index, value)<\/code><\/a><\/h3>$/;"	a
pdf-require	doc/manual.html	/^<hr><h3><a name="pdf-require"><code>require (modname)<\/code><\/a><\/h3>$/;"	a
pdf-select	doc/manual.html	/^<hr><h3><a name="pdf-select"><code>select (index, &middot;&middot;&middot;)<\/code><\/a><\/h3>$/;"	a
pdf-setfenv	doc/manual.html	/^<hr><h3><a name="pdf-setfenv"><code>setfenv (f, table)<\/code><\/a><\/h3>$/;"	a
pdf-setmetatable	doc/manual.html	/^<hr><h3><a name="pdf-setmetatable"><code>setmetatable (table, metatable)<\/code><\/a><\/h3>$/;"	a
pdf-string	doc/manual.html	/^<a name="pdf-string"><code>string<\/code><\/a>.$/;"	a
pdf-string.byte	doc/manual.html	/^<hr><h3><a name="pdf-string.byte"><code>string.byte (s [, i [, j]])<\/code><\/a><\/h3>$/;"	a
pdf-string.char	doc/manual.html	/^<hr><h3><a name="pdf-string.char"><code>string.char (&middot;&middot;&middot;)<\/code><\/a><\/h3>$/;"	a
pdf-string.dump	doc/manual.html	/^<hr><h3><a name="pdf-string.dump"><code>string.dump (function)<\/code><\/a><\/h3>$/;"	a
pdf-string.find	doc/manual.html	/^<hr><h3><a name="pdf-string.find"><code>string.find (s, pattern [, init [, plain]])<\/code><\/a><\/h3>$/;"	a
pdf-string.format	doc/manual.html	/^<hr><h3><a name="pdf-string.format"><code>string.format (formatstring, &middot;&middot;&middot;)<\/code><\/a><\/h3>$/;"	a
pdf-string.gmatch	doc/manual.html	/^<hr><h3><a name="pdf-string.gmatch"><code>string.gmatch (s, pattern)<\/code><\/a><\/h3>$/;"	a
pdf-string.gsub	doc/manual.html	/^<hr><h3><a name="pdf-string.gsub"><code>string.gsub (s, pattern, repl [, n])<\/code><\/a><\/h3>$/;"	a
pdf-string.len	doc/manual.html	/^<hr><h3><a name="pdf-string.len"><code>string.len (s)<\/code><\/a><\/h3>$/;"	a
pdf-string.lower	doc/manual.html	/^<hr><h3><a name="pdf-string.lower"><code>string.lower (s)<\/code><\/a><\/h3>$/;"	a
pdf-string.match	doc/manual.html	/^<hr><h3><a name="pdf-string.match"><code>string.match (s, pattern [, init])<\/code><\/a><\/h3>$/;"	a
pdf-string.rep	doc/manual.html	/^<hr><h3><a name="pdf-string.rep"><code>string.rep (s, n)<\/code><\/a><\/h3>$/;"	a
pdf-string.reverse	doc/manual.html	/^<hr><h3><a name="pdf-string.reverse"><code>string.reverse (s)<\/code><\/a><\/h3>$/;"	a
pdf-string.sub	doc/manual.html	/^<hr><h3><a name="pdf-string.sub"><code>string.sub (s, i [, j])<\/code><\/a><\/h3>$/;"	a
pdf-string.upper	doc/manual.html	/^<hr><h3><a name="pdf-string.upper"><code>string.upper (s)<\/code><\/a><\/h3>$/;"	a
pdf-table	doc/manual.html	/^It provides all its functions inside the table <a name="pdf-table"><code>table<\/code><\/a>.$/;"	a
pdf-table.concat	doc/manual.html	/^<hr><h3><a name="pdf-table.concat"><code>table.concat (table [, sep [, i [, j]]])<\/code><\/a><\/h3>$/;"	a
pdf-table.insert	doc/manual.html	/^<hr><h3><a name="pdf-table.insert"><code>table.insert (table, [pos,] value)<\/code><\/a><\/h3>$/;"	a
pdf-table.maxn	doc/manual.html	/^<hr><h3><a name="pdf-table.maxn"><code>table.maxn (table)<\/code><\/a><\/h3>$/;"	a
pdf-table.remove	doc/manual.html	/^<hr><h3><a name="pdf-table.remove"><code>table.remove (table [, pos])<\/code><\/a><\/h3>$/;"	a
pdf-table.sort	doc/manual.html	/^<hr><h3><a name="pdf-table.sort"><code>table.sort (table [, comp])<\/code><\/a><\/h3>$/;"	a
pdf-tonumber	doc/manual.html	/^<hr><h3><a name="pdf-tonumber"><code>tonumber (e [, base])<\/code><\/a><\/h3>$/;"	a
pdf-tostring	doc/manual.html	/^<hr><h3><a name="pdf-tostring"><code>tostring (e)<\/code><\/a><\/h3>$/;"	a
pdf-type	doc/manual.html	/^<hr><h3><a name="pdf-type"><code>type (v)<\/code><\/a><\/h3>$/;"	a
pdf-unpack	doc/manual.html	/^<hr><h3><a name="pdf-unpack"><code>unpack (list [, i [, j]])<\/code><\/a><\/h3>$/;"	a
pdf-xpcall	doc/manual.html	/^<hr><h3><a name="pdf-xpcall"><code>xpcall (f, err)<\/code><\/a><\/h3>$/;"	a
pk_funcs	src/loadlib.c	/^static const luaL_Reg pk_funcs[] = {$/;"	v	file:
pmain	src/lua.c	/^static int pmain (lua_State *L) {$/;"	f	file:
pmain	src/luac.c	/^static int pmain(lua_State* L)$/;"	f	file:
posrelat	src/lstrlib.c	/^static ptrdiff_t posrelat (ptrdiff_t pos, size_t len) {$/;"	f	file:
precheck	src/ldebug.c	/^static int precheck (const Proto *pt) {$/;"	f	file:
prefixexp	src/lparser.c	/^static void prefixexp (LexState *ls, expdesc *v) {$/;"	f	file:
preinit_state	src/lstate.c	/^static void preinit_state (lua_State *L, global_State *g) {$/;"	f	file:
prev	src/lobject.h	/^      struct UpVal *prev;$/;"	m	struct:UpVal::__anon8::__anon9	typeref:struct:UpVal::__anon8::__anon9::UpVal
prev	src/lparser.c	/^  struct LHS_assign *prev;$/;"	m	struct:LHS_assign	typeref:struct:LHS_assign::LHS_assign	file:
prev	src/lparser.h	/^  struct FuncState *prev;  \/* enclosing function *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::FuncState
previous	src/ldo.c	/^  struct lua_longjmp *previous;$/;"	m	struct:lua_longjmp	typeref:struct:lua_longjmp::lua_longjmp	file:
previous	src/lparser.c	/^  struct BlockCnt *previous;  \/* chain *\/$/;"	m	struct:BlockCnt	typeref:struct:BlockCnt::BlockCnt	file:
primaryexp	src/lparser.c	/^static void primaryexp (LexState *ls, expdesc *v) {$/;"	f	file:
print	etc/min.c	/^static int print(lua_State *L)$/;"	f	file:
print_usage	src/lua.c	/^static void print_usage (void) {$/;"	f	file:
print_version	src/lua.c	/^static void print_version (void) {$/;"	f	file:
printf	test/printf.lua	/^function printf(...)$/;"	f
priority	src/lparser.c	/^} priority[] = {  \/* ORDER OPR *\/$/;"	v	typeref:struct:__anon16	file:
progname	src/lua.c	/^static const char *progname = LUA_PROGNAME;$/;"	v	file:
progname	src/luac.c	/^static const char* progname=PROGNAME;	\/* actual program name *\/$/;"	v	file:
propagateall	src/lgc.c	/^static size_t propagateall (global_State *g) {$/;"	f	file:
propagatemark	src/lgc.c	/^static l_mem propagatemark (global_State *g) {$/;"	f	file:
push_captures	src/lstrlib.c	/^static int push_captures (MatchState *ms, const char *s, const char *e) {$/;"	f	file:
push_onecapture	src/lstrlib.c	/^static void push_onecapture (MatchState *ms, int i, const char *s,$/;"	f	file:
pushclosure	src/lparser.c	/^static void pushclosure (LexState *ls, FuncState *func, expdesc *v) {$/;"	f	file:
pusherror	src/loadlib.c	/^static void pusherror (lua_State *L) {$/;"	f	file:
pushline	src/lua.c	/^static int pushline (lua_State *L, int firstline) {$/;"	f	file:
pushnexttemplate	src/loadlib.c	/^static const char *pushnexttemplate (lua_State *L, const char *path) {$/;"	f	file:
pushresult	src/liolib.c	/^static int pushresult (lua_State *L, int i, const char *filename) {$/;"	f	file:
pushstr	src/lobject.c	/^static void pushstr (lua_State *L, const char *str) {$/;"	f	file:
pvalue	src/lobject.h	111;"	d
qsort	test/sort.lua	/^function qsort(x,l,u,f)$/;"	f
r	doc/manual.html	/^     function r() return 1,2,3 end$/;"	f
r	src/llex.h	/^  lua_Number r;$/;"	m	union:__anon12
rawgco2ts	src/lstate.h	153;"	d
rawgco2u	src/lstate.h	155;"	d
rawtsvalue	src/lobject.h	113;"	d
rawuvalue	src/lobject.h	115;"	d
read_chars	src/liolib.c	/^static int read_chars (lua_State *L, FILE *f, size_t n) {$/;"	f	file:
read_line	src/liolib.c	/^static int read_line (lua_State *L, FILE *f) {$/;"	f	file:
read_long_string	src/llex.c	/^static void read_long_string (LexState *ls, SemInfo *seminfo, int sep) {$/;"	f	file:
read_number	src/liolib.c	/^static int read_number (lua_State *L, FILE *f) {$/;"	f	file:
read_numeral	src/llex.c	/^static void read_numeral (LexState *ls, SemInfo *seminfo) {$/;"	f	file:
read_string	src/llex.c	/^static void read_string (LexState *ls, int del, SemInfo *seminfo) {$/;"	f	file:
readable	src/loadlib.c	/^static int readable (const char *filename) {$/;"	f	file:
reader	src/lzio.h	/^  lua_Reader reader;$/;"	m	struct:Zio
reallymarkobject	src/lgc.c	/^static void reallymarkobject (global_State *g, GCObject *o) {$/;"	f	file:
recfield	src/lparser.c	/^static void recfield (LexState *ls, struct ConsControl *cc) {$/;"	f	file:
registerlocalvar	src/lparser.c	/^static int registerlocalvar (LexState *ls, TString *varname) {$/;"	f	file:
registry	src/lstate.h	25;"	d
rehash	src/ltable.c	/^static void rehash (lua_State *L, Table *t, const TValue *ek) {$/;"	f	file:
remarkupvals	src/lgc.c	/^static void remarkupvals (global_State *g) {$/;"	f	file:
removeentry	src/lgc.c	/^static void removeentry (Node *n) {$/;"	f	file:
removevalues	src/lcode.c	/^static void removevalues (FuncState *fs, int list) {$/;"	f	file:
removevars	src/lparser.c	/^static void removevars (LexState *ls, int tolevel) {$/;"	f	file:
repeatstat	src/lparser.c	/^static void repeatstat (LexState *ls, int line) {$/;"	f	file:
report	src/lua.c	/^static int report (lua_State *L, int status) {$/;"	f	file:
reserved	src/lobject.h	/^    lu_byte reserved; \/\/ 这个变量用于标识这个字符串是否是lua虚拟机中的保留字符串。如果这个值为1，那么将不会在GC阶段 被回收，而是一直保留在系统中。只有Lua语言中的关键字才会是保留字符串。$/;"	m	struct:TString::__anon6
reset2bits	src/lgc.h	36;"	d
resetbit	src/lgc.h	33;"	d
resetbits	src/lgc.h	27;"	d
resethookcount	src/ldebug.h	18;"	d
resetstack	src/ldo.c	/^static void resetstack (lua_State *L, int status) {$/;"	f	file:
resize	src/ltable.c	/^static void resize (lua_State *L, Table *t, int nasize, int nhsize) {$/;"	f	file:
restore_stack_limit	src/ldo.c	/^static void restore_stack_limit (lua_State *L) {$/;"	f	file:
restoreci	src/ldo.h	28;"	d
restorestack	src/ldo.h	25;"	d
resume	src/ldo.c	/^static void resume (lua_State *L, void *ud) {$/;"	f	file:
resume_error	src/ldo.c	/^static int resume_error (lua_State *L, const char *msg) {$/;"	f	file:
retstat	src/lparser.c	/^static void retstat (LexState *ls) {$/;"	f	file:
right	src/lparser.c	/^  lu_byte right; \/* right priority *\/$/;"	m	struct:__anon16	file:
rootgc	src/lstate.h	/^  GCObject *rootgc;  \/* list of all collectable objects *\/$/;"	m	struct:global_State
runargs	src/lua.c	/^static int runargs (lua_State *L, char **argv, int n) {$/;"	f	file:
runtime_check	src/lvm.c	345;"	d	file:
s	src/lauxlib.c	/^  const char *s;$/;"	m	struct:LoadS	file:
s	src/lparser.h	/^    struct { int info, aux; } s;$/;"	m	union:expdesc::__anon2	typeref:struct:expdesc::__anon2::__anon3
save	src/llex.c	/^static void save (LexState *ls, int c) {$/;"	f	file:
save_and_next	src/llex.c	48;"	d	file:
saveci	src/ldo.h	27;"	d
savedpc	src/lstate.h	/^  const Instruction *savedpc;  \/* `savedpc' of current function *\/$/;"	m	struct:lua_State
savedpc	src/lstate.h	/^  const Instruction *savedpc;$/;"	m	struct:CallInfo
savestack	src/ldo.h	24;"	d
scanformat	src/lstrlib.c	/^static const char *scanformat (lua_State *L, const char *strfrmt, char *form) {$/;"	f	file:
searchvar	src/lparser.c	/^static int searchvar (FuncState *fs, TString *n) {$/;"	f	file:
selectionsort	test/sort.lua	/^function selectionsort(x,n,f)$/;"	f
seminfo	src/llex.h	/^  SemInfo seminfo;$/;"	m	struct:Token
sentinel	src/loadlib.c	448;"	d	file:
sentinel_	src/loadlib.c	/^static const int sentinel_ = 0;$/;"	v	file:
set2	src/ltablib.c	/^static void set2 (lua_State *L, int i, int j) {$/;"	f	file:
set2bits	src/lgc.h	35;"	d
setarrayvector	src/ltable.c	/^static void setarrayvector (lua_State *L, Table *t, int size) {$/;"	f	file:
setbits	src/lgc.h	28;"	d
setboolfield	src/loslib.c	/^static void setboolfield (lua_State *L, const char *key, int value) {$/;"	f	file:
setbvalue	src/lobject.h	145;"	d
setclvalue	src/lobject.h	163;"	d
setfenv	src/loadlib.c	/^static void setfenv (lua_State *L) {$/;"	f	file:
setfield	src/loslib.c	/^static void setfield (lua_State *L, const char *key, int value) {$/;"	f	file:
sethvalue	src/lobject.h	168;"	d
sethvalue2s	src/lobject.h	196;"	d
setn	src/ltablib.c	/^static int setn (lua_State *L) {$/;"	f	file:
setnilvalue	src/lobject.h	137;"	d
setnodevector	src/ltable.c	/^static void setnodevector (lua_State *L, Table *t, int size) {$/;"	f	file:
setnvalue	src/lobject.h	139;"	d
setobj	src/lobject.h	181;"	d
setobj2n	src/lobject.h	203;"	d
setobj2s	src/lobject.h	194;"	d
setobj2t	src/lobject.h	201;"	d
setobjs2s	src/lobject.h	192;"	d
setobjt2t	src/lobject.h	199;"	d
setpath	src/loadlib.c	/^static void setpath (lua_State *L, const char *fieldname, const char *envname,$/;"	f	file:
setprogdir	src/loadlib.c	/^static void setprogdir (lua_State *L) {$/;"	f	file:
setprogdir	src/loadlib.c	42;"	d	file:
setprogdir	src/loadlib.c	95;"	d	file:
setptvalue	src/lobject.h	173;"	d
setptvalue2s	src/lobject.h	197;"	d
setpvalue	src/lobject.h	142;"	d
setsvalue	src/lobject.h	148;"	d
setsvalue2n	src/lobject.h	204;"	d
setsvalue2s	src/lobject.h	195;"	d
settable_event	doc/manual.html	/^     function settable_event (table, key, value)$/;"	f
settabsi	src/ldblib.c	/^static void settabsi (lua_State *L, const char *i, int v) {$/;"	f	file:
settabss	src/ldblib.c	/^static void settabss (lua_State *L, const char *i, const char *v) {$/;"	f	file:
setthreshold	src/lgc.c	59;"	d	file:
setthvalue	src/lobject.h	158;"	d
setttype	src/lobject.h	206;"	d
setuvalue	src/lobject.h	153;"	d
short_src	src/lua.h	/^  char short_src[LUA_IDSIZE]; \/* (S) *\/$/;"	m	struct:lua_Debug
show	test/sort.lua	/^function show(m,x)$/;"	f
simpleexp	src/lparser.c	/^static void simpleexp (LexState *ls, expdesc *v) {$/;"	f	file:
singlematch	src/lstrlib.c	/^static int singlematch (int c, const char *p, const char *ep) {$/;"	f	file:
singlestep	src/lgc.c	/^static l_mem singlestep (lua_State *L) {$/;"	f	file:
singlevar	src/lparser.c	/^static void singlevar (LexState *ls, expdesc *var) {$/;"	f	file:
singlevaraux	src/lparser.c	/^static int singlevaraux (FuncState *fs, TString *n, expdesc *var, int base) {$/;"	f	file:
size	src/lauxlib.c	/^  size_t size;$/;"	m	struct:LoadS	file:
size	src/lstate.h	/^  int size;$/;"	m	struct:stringtable
sizeCclosure	src/lfunc.h	14;"	d
sizeLclosure	src/lfunc.h	17;"	d
size_ci	src/lstate.h	/^  int size_ci;  \/* size of array `base_ci' *\/$/;"	m	struct:lua_State
sizearray	src/lobject.h	/^  int sizearray;  \/* size of `array' array *\/ \/\/ 数组方式储存的Node结构数量，即数组大小$/;"	m	struct:Table
sizecode	src/lobject.h	/^  int sizecode;$/;"	m	struct:Proto
sizek	src/lobject.h	/^  int sizek;  \/* size of `k' *\/$/;"	m	struct:Proto
sizelineinfo	src/lobject.h	/^  int sizelineinfo;$/;"	m	struct:Proto
sizelocvars	src/lobject.h	/^  int sizelocvars;$/;"	m	struct:Proto
sizenode	src/lobject.h	399;"	d
sizep	src/lobject.h	/^  int sizep;  \/* size of `p' *\/$/;"	m	struct:Proto
sizestring	src/lstring.h	16;"	d
sizeudata	src/lstring.h	18;"	d
sizeupvalues	src/lobject.h	/^  int sizeupvalues;$/;"	m	struct:Proto
skip_sep	src/llex.c	/^static int skip_sep (LexState *ls) {$/;"	f	file:
solve	test/bisect.lua	/^function solve(f,a,b)$/;"	f
sort	src/ltablib.c	/^static int sort (lua_State *L) {$/;"	f	file:
sort_comp	src/ltablib.c	/^static int sort_comp (lua_State *L, int a, int b) {$/;"	f	file:
source	src/llex.h	/^  TString *source;  \/* current source name *\/$/;"	m	struct:LexState
source	src/lobject.h	/^  TString  *source;$/;"	m	struct:Proto
source	src/lua.h	/^  const char *source;	\/* (S) *\/$/;"	m	struct:lua_Debug
src_end	src/lstrlib.c	/^  const char *src_end;  \/* end (`\\0') of source string *\/$/;"	m	struct:MatchState	file:
src_init	src/lstrlib.c	/^  const char *src_init;  \/* init of source string *\/$/;"	m	struct:MatchState	file:
stack	src/lstate.h	/^  StkId stack;  \/* stack base *\/ \/\/ 栈的base，这个是整个栈的栈底。$/;"	m	struct:lua_State
stack_init	src/lstate.c	/^static void stack_init (lua_State *L1, lua_State *L) {$/;"	f	file:
stack_last	src/lstate.h	/^  StkId stack_last;  \/* last free slot in the stack *\/ \/\/ 在栈上的最后一个空闲的slot$/;"	m	struct:lua_State
stacksize	src/lstate.h	/^  int stacksize;$/;"	m	struct:lua_State
start_capture	src/lstrlib.c	/^static const char *start_capture (MatchState *ms, const char *s,$/;"	f	file:
startpc	src/lobject.h	/^  int startpc;  \/* first point where variable is active *\/$/;"	m	struct:LocVar
state_size	src/lstate.c	27;"	d	file:
statement	src/lparser.c	/^static int statement (LexState *ls) {$/;"	f	file:
statnames	src/lbaselib.c	/^static const char *const statnames[] =$/;"	v	file:
status	src/ldo.c	/^  volatile int status;  \/* error code *\/$/;"	m	struct:lua_longjmp	file:
status	src/ldump.c	/^ int status;$/;"	m	struct:__anon15	file:
status	src/lstate.h	/^  lu_byte status;$/;"	m	struct:lua_State
status	src/lua.c	/^  int status;$/;"	m	struct:Smain	file:
str_byte	src/lstrlib.c	/^static int str_byte (lua_State *L) {$/;"	f	file:
str_char	src/lstrlib.c	/^static int str_char (lua_State *L) {$/;"	f	file:
str_checkname	src/lparser.c	/^static TString *str_checkname (LexState *ls) {$/;"	f	file:
str_dump	src/lstrlib.c	/^static int str_dump (lua_State *L) {$/;"	f	file:
str_find	src/lstrlib.c	/^static int str_find (lua_State *L) {$/;"	f	file:
str_find_aux	src/lstrlib.c	/^static int str_find_aux (lua_State *L, int find) {$/;"	f	file:
str_format	src/lstrlib.c	/^static int str_format (lua_State *L) {$/;"	f	file:
str_gsub	src/lstrlib.c	/^static int str_gsub (lua_State *L) {$/;"	f	file:
str_len	src/lstrlib.c	/^static int str_len (lua_State *L) {$/;"	f	file:
str_lower	src/lstrlib.c	/^static int str_lower (lua_State *L) {$/;"	f	file:
str_match	src/lstrlib.c	/^static int str_match (lua_State *L) {$/;"	f	file:
str_rep	src/lstrlib.c	/^static int str_rep (lua_State *L) {$/;"	f	file:
str_reverse	src/lstrlib.c	/^static int str_reverse (lua_State *L) {$/;"	f	file:
str_sub	src/lstrlib.c	/^static int str_sub (lua_State *L) {$/;"	f	file:
str_upper	src/lstrlib.c	/^static int str_upper (lua_State *L) {$/;"	f	file:
stringmark	src/lgc.c	40;"	d	file:
stringtable	src/lstate.h	/^typedef struct stringtable {$/;"	s
stringtable	src/lstate.h	/^} stringtable;$/;"	t	typeref:struct:stringtable
strip	src/ldump.c	/^ int strip;$/;"	m	struct:__anon15	file:
stripping	src/luac.c	/^static int stripping=0;			\/* strip debug information? *\/$/;"	v	file:
strlib	src/lstrlib.c	/^static const luaL_Reg strlib[] = {$/;"	v	file:
strt	src/lstate.h	/^  stringtable strt;  \/* hash table for strings *\/$/;"	m	struct:global_State
subexpr	src/lparser.c	/^static BinOpr subexpr (LexState *ls, expdesc *v, unsigned int limit) {$/;"	f	file:
svalue	src/lobject.h	236;"	d
sweepgc	src/lstate.h	/^  GCObject **sweepgc;  \/* position of sweep in `rootgc' *\/$/;"	m	struct:global_State
sweeplist	src/lgc.c	/^static GCObject **sweeplist (lua_State *L, GCObject **p, lu_mem count) {$/;"	f	file:
sweepstrgc	src/lstate.h	/^  int sweepstrgc;  \/* position of sweep in `strt' *\/$/;"	m	struct:global_State
sweepwholelist	src/lgc.c	404;"	d	file:
symbexec	src/ldebug.c	/^static Instruction symbexec (const Proto *pt, int lastpc, int reg) {$/;"	f	file:
syslib	src/loslib.c	/^static const luaL_Reg syslib[] = {$/;"	v	file:
t	src/llex.h	/^  Token t;  \/* current token *\/$/;"	m	struct:LexState
t	src/lparser.c	/^  expdesc *t;  \/* table descriptor *\/$/;"	m	struct:ConsControl	file:
t	src/lparser.h	/^  int t;  \/* patch list of `exit when true' *\/$/;"	m	struct:expdesc
tab_funcs	src/ltablib.c	/^static const luaL_Reg tab_funcs[] = {$/;"	v	file:
tag_error	src/lauxlib.c	/^static void tag_error (lua_State *L, int narg, int tag) {$/;"	f	file:
tailcalls	src/lstate.h	/^  int tailcalls;  \/* number of tail calls lost under this entry *\/$/;"	m	struct:CallInfo
tconcat	src/ltablib.c	/^static int tconcat (lua_State *L) {$/;"	f	file:
test	test/factorial.lua	/^function test(x)$/;"	f
test	test/fib.lua	/^function test(s,f)$/;"	f
test2bits	src/lgc.h	37;"	d
testAMode	src/lopcodes.h	257;"	d
testTMode	src/lopcodes.h	258;"	d
test_eof	src/liolib.c	/^static int test_eof (lua_State *L, FILE *f) {$/;"	f	file:
test_then_block	src/lparser.c	/^static int test_then_block (LexState *ls) {$/;"	f	file:
testbit	src/lgc.h	34;"	d
testbits	src/lgc.h	29;"	d
testnext	src/lparser.c	/^static int testnext (LexState *ls, int c) {$/;"	f	file:
testsorts	test/sort.lua	/^function testsorts(x)$/;"	f
th	src/lstate.h	/^  struct lua_State th;  \/* thread *\/$/;"	m	union:GCObject	typeref:struct:GCObject::lua_State
thvalue	src/lobject.h	120;"	d
tinsert	src/ltablib.c	/^static int tinsert (lua_State *L) {$/;"	f	file:
tmname	src/lstate.h	/^  TString *tmname[TM_N];  \/* array with tag-method names *\/$/;"	m	struct:global_State
tmudata	src/lstate.h	/^  GCObject *tmudata;  \/* last element of list of userdata to be GC *\/$/;"	m	struct:global_State
tofile	src/liolib.c	/^static FILE *tofile (lua_State *L) {$/;"	f	file:
tofilep	src/liolib.c	54;"	d	file:
token	src/llex.h	/^  int token;$/;"	m	struct:Token
tonumber	src/lvm.h	18;"	d
top	src/lstate.h	/^  StkId	top;  \/* top for this function *\/$/;"	m	struct:CallInfo
top	src/lstate.h	/^  StkId top;  \/* first free slot in the stack *\/ \/\/ 在这个栈上的第一个空闲的slot。$/;"	m	struct:lua_State
toproto	src/luac.c	117;"	d	file:
tostate	src/lstate.c	29;"	d	file:
tostore	src/lparser.c	/^  int tostore;  \/* number of array elements pending to be stored *\/$/;"	m	struct:ConsControl	file:
tostring	src/lvm.h	16;"	d
totalbytes	src/lstate.h	/^  lu_mem totalbytes;  \/* number of bytes currently allocated *\/$/;"	m	struct:global_State
traceback	src/lua.c	/^static int traceback (lua_State *L) {$/;"	f	file:
traceexec	src/lvm.c	/^static void traceexec (lua_State *L, const Instruction *pc) {$/;"	f	file:
traverseclosure	src/lgc.c	/^static void traverseclosure (global_State *g, Closure *cl) {$/;"	f	file:
traverseproto	src/lgc.c	/^static void traverseproto (global_State *g, Proto *f) {$/;"	f	file:
traversestack	src/lgc.c	/^static void traversestack (global_State *g, lua_State *l) {$/;"	f	file:
traversetable	src/lgc.c	/^static int traversetable (global_State *g, Table *h) {$/;"	f	file:
treatstackoption	src/ldblib.c	/^static void treatstackoption (lua_State *L, lua_State *L1, const char *fname) {$/;"	f	file:
tremove	src/ltablib.c	/^static int tremove (lua_State *L) {$/;"	f	file:
trydecpoint	src/llex.c	/^static void trydecpoint (LexState *ls, SemInfo *seminfo) {$/;"	f	file:
tryfuncTM	src/ldo.c	/^static StkId tryfuncTM (lua_State *L, StkId func) {$/;"	f	file:
ts	src/llex.h	/^  TString *ts;$/;"	m	union:__anon12
ts	src/lstate.h	/^  union TString ts; \/*string*\/$/;"	m	union:GCObject	typeref:union:GCObject::TString
tsv	src/lobject.h	/^  } tsv;$/;"	m	union:TString	typeref:struct:TString::__anon6
tsvalue	src/lobject.h	114;"	d
ttisboolean	src/lobject.h	95;"	d
ttisfunction	src/lobject.h	94;"	d
ttislightuserdata	src/lobject.h	98;"	d
ttisnil	src/lobject.h	90;"	d
ttisnumber	src/lobject.h	91;"	d
ttisstring	src/lobject.h	92;"	d
ttistable	src/lobject.h	93;"	d
ttisthread	src/lobject.h	97;"	d
ttisuserdata	src/lobject.h	96;"	d
ttype	src/lobject.h	109;"	d
tvk	src/lobject.h	/^  TValue tvk; \/\/ 尾部的key值；$/;"	m	union:TKey
twoto	src/lobject.h	398;"	d
txtToken	src/llex.c	/^static const char *txtToken (LexState *ls, int token) {$/;"	f	file:
u	src/lobject.h	/^  } u;$/;"	m	struct:UpVal	typeref:union:UpVal::__anon8
u	src/lparser.h	/^  } u;$/;"	m	struct:expdesc	typeref:union:expdesc::__anon2
u	src/lstate.h	/^  union Udata u;    \/*user data*\/  $/;"	m	union:GCObject	typeref:union:GCObject::Udata
uchar	src/lstrlib.c	24;"	d	file:
ud	src/lapi.c	/^  void *ud;$/;"	m	struct:CCallS	file:
ud	src/lstate.h	/^  void *ud;         \/* auxiliary data to `frealloc' *\/$/;"	m	struct:global_State
unbound_search	src/ltable.c	/^static int unbound_search (Table *t, unsigned int j) {$/;"	f	file:
unlinkupval	src/lfunc.c	/^static void unlinkupval (UpVal *uv) {$/;"	f	file:
unm_event	doc/manual.html	/^     function unm_event (op)$/;"	f
unmakemask	src/ldblib.c	/^static char *unmakemask (int mask, char *smask) {$/;"	f	file:
upval	src/lparser.c	/^  lu_byte upval;  \/* true if some variable in the block is an upvalue *\/$/;"	m	struct:BlockCnt	file:
upvaldesc	src/lparser.h	/^typedef struct upvaldesc {$/;"	s
upvaldesc	src/lparser.h	/^} upvaldesc;$/;"	t	typeref:struct:upvaldesc
upvals	src/lobject.h	/^  UpVal *upvals[1];$/;"	m	struct:LClosure
upvalue	src/lobject.h	/^  TValue upvalue[1];$/;"	m	struct:CClosure
upvalues	src/lobject.h	/^  TString **upvalues;  \/* upvalue names *\/$/;"	m	struct:Proto
upvalues	src/lparser.h	/^  upvaldesc upvalues[LUAI_MAXUPVALUES];  \/* upvalues *\/$/;"	m	struct:FuncState
usage	src/luac.c	/^static void usage(const char* message)$/;"	f	file:
uv	src/lobject.h	/^  } uv;$/;"	m	union:Udata	typeref:struct:Udata::__anon7
uv	src/lstate.h	/^  struct UpVal uv;$/;"	m	union:GCObject	typeref:struct:GCObject::UpVal
uvalue	src/lobject.h	116;"	d
uvhead	src/lstate.h	/^  UpVal uvhead;  \/* head of double-linked list of all open upvalues *\/$/;"	m	struct:global_State
v	src/lobject.h	/^  TValue *v;  \/* points to stack or to its own value *\/$/;"	m	struct:UpVal
v	src/lparser.c	/^  expdesc v;  \/* last list item read *\/$/;"	m	struct:ConsControl	file:
v	src/lparser.c	/^  expdesc v;  \/* variable (global, local, upvalue, or indexed) *\/$/;"	m	struct:LHS_assign	file:
valiswhite	src/lgc.h	75;"	d
value	src/lobject.h	/^    TValue value;  \/* the value (when closed) *\/$/;"	m	union:UpVal::__anon8
varname	src/lobject.h	/^  TString *varname;$/;"	m	struct:LocVar
weak	src/lstate.h	/^  GCObject *weak;  \/* list of weak tables (to be cleared) *\/$/;"	m	struct:global_State
what	src/lua.h	/^  const char *what;	\/* (S) `Lua', `C', `main', `tail' *\/$/;"	m	struct:lua_Debug
what 	etc/strict.lua	/^local function what ()$/;"	f
whilestat	src/lparser.c	/^static void whilestat (LexState *ls, int line) {$/;"	f	file:
white2gray	src/lgc.c	37;"	d	file:
writer	src/ldump.c	/^ lua_Writer writer;$/;"	m	struct:__anon15	file:
writer	src/lstrlib.c	/^static int writer (lua_State *L, const void* b, size_t size, void* B) {$/;"	f	file:
writer	src/luac.c	/^static int writer(lua_State* L, const void* p, size_t size, void* u)$/;"	f	file:
yindex	src/lparser.c	/^static void yindex (LexState *ls, expdesc *v) {$/;"	f	file:
z	src/ldo.c	/^  ZIO *z;$/;"	m	struct:SParser	file:
z	src/llex.h	/^  ZIO *z;  \/* input stream *\/$/;"	m	struct:LexState
zgetc	src/lzio.h	22;"	d
