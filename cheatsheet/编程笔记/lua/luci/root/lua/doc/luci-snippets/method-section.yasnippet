# -*- mode: snippet -*-
# key: method
# contributor: Seamus Tuohy
# name: section methods
# --
function ${1:section_name}:${2:$$(yas/choose-value '("tab(tab, title, desc)" ;; Define a tab for the section
 "has_tabs()" ;; Check whether the section has tabs
 "option(class, option)" ;; Append a new option to the section
 "taboption(tab)" ;; Append a new tabbed option
 "render_tab(tab, ...)" ;; Render a single tab
 "parse_optionals(section)" ;; Parse optional options
 "add_synamic(field, optional)" ;; add a dynamic option
 "parse_dynamic(section)" ;; parse all dynamic options
 "cfgsection(section)" ;; Return the sections UCI table
 "push_events()" ;; Set map to changed
 "remove(section)" ;; Delete this section
 "create(section)" ;; Creates this section
 "parse(readinput)" ;; Main parser for the section and TODO explore table internals (Table)
 "update(data)" ;; Refresh table with new data (Table)
 "depends(option, value)" ;;Limits scope to sections that have certain option => value pairs (TypedSection)
 "checkscope(section)" ;; Verifies scope of sections (TypedSection)
 "filter(section)" ;; A function to filter out unwanted sections from a TypedSection (TypedSection)
 "validate(section)" ;; A validation function for sections (TypedSection <- dummy function)
 ))}
 $0
end