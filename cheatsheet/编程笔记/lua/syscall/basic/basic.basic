--[[ 错误出现
  在程序运行的时候总可能出现各种各样的错误.这些错误有的是用户使用不当造成的(例如给了错误的输入类型),
有的是程序设计本身造成的(也就是Bug).
  对于第一类错误,我们可以通过增加各种各样的限制和判断来预防或者排除.(比如在转化字符串和数字前先
检测字符串能不能转化为有效数字,如果不能就让用户重新输入.)这就叫做增强程序的健壮性.
  对于第二类错误应当尽量避免,如果不能避免就要获取尽量全面的错误信息,帮助我们在之后的更新中修改错误.
  
错误的避免
assert
   注意断言并不适合用于处理用户输入错误之类的问题.因为不论如何,只要它生效就会产生错误信息,
这就会终止程序运行.一般来说,处理用户输入错误之类的问题,不应当让程序终止.

生成错误
error
error函数来强制产生错误信息并停止程序运行.一般来说它应当嵌套在选择结构当中.因为一运行到它就会报错并停止运行.

异常
对于不太严重,不危及程序整体运作的小问题,我们不一定需要停止程序并产生错误信息.这时就可以使用异常机制.

--]]

-- string
a = "literal string" print(a)
b = 'literal string' print(b)

page = [[
<html>
<head>
 <title>An HTML Page</title>
</head>
<body>
 <a href = "http://www.lua.org">Lua</a>
</body>
</html>
]]
print(page)

page = [==[
	<![CDATA[Hello world]]>
    ]==]
print(page)

-- Boolean
function checkBoolean( value )
	if value == true or value == false then
		print(tostring(value) .. " is boolean")
	else
		print(tostring(value) .. " is not boolean")
	end
end
checkBoolean(true)


--[[
(a and b) or c --()高运算优先级，所以先运算a and b
a and b        --and操作符，假如a为false，则返回a，否则返回b，首先假定a为false
a and b        -- return a

--执行到第二步:or操作符
a or c
--or操作符，假如a不为false，则返回a，否则返回c，因为已假定a为false，因此这里返回c
a or c    -- return c
--]]

--[[
  从Lua5.3版本开始，Lua语言为数值格式提供了两种选择：被称为integer的64为整形和被
称为float的双精度浮点类型。对于资源受限的平台，我们可以将Lua 5.3编译为精简模式。
在该模式中使用32位整形和单精度浮点类型。
  -- Lua 3.0 才有的函数
  math.type(3)
  math.type(3.0)
  -- 十六进制的浮点数
  Lua语言还支持十六进制的浮点数，这种十六进制浮点数由小数部分和以p或P开头的指数部分组成
  可以使用%a参数，通过函数string.format对这种格式进行格式化输出。
  string.format("%a", 419) -- 0x1.a3p+8
  string.format("%a", 0.1) -- 0x1.999999999999ap-4
  float = 0x1p-1           -- 0.5
  float = 0xa.bp2          -- 42.75
  -- 整数和浮点数混合运算
  1. 如果两个操作数都是整型值，那么结果也是整型值；否则结果就是浮点型值
  2. 除法运算操作的永远是浮点数且产生浮点型值的结果。
  -- Lua 5.3 针对整数除法引入了一个称为floot的新算术运算符//
  3//2       -- 1
  3.0//2     -- 1.0
  6//2       -- 3
  6.0//2.0   -- 3.0
  -9//2      -- -5
  1.5//0.5   -- 3.0
  
  a % b = a - ((a//b)*b)
  特别地，对于任意指定的正常量K，即使x是负数，表达式x%K的结果也永远在[0,K-1]之间。
  x = math.pi
  x - x%0.01  -- 3.14
  x - x%0.001 -- 3.141
  
  幂运算的操作数也永远是浮点类型。我们可以使用x^0.5来计算x的平方根，使用x^(1/3)计算
x的立方根。
  x = math.pi
  print(x^0.5)   -- 1.7724538509055
  print(x^(1/3)) -- 1.4645918875615
  
--]]