!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
', function	sandbox.lua/spec/sandbox_spec.lua	/^    it('can run harmless functions', function()$/;"	f
', function	sandbox.lua/spec/sandbox_spec.lua	/^    it('does not persist modifications of base functions', function()$/;"	f
) sandbox.run	sandbox.lua/spec/sandbox_spec.lua	/^      assert_error(function() sandbox.run("error('foo')") end)$/;"	f
) sandbox.run	sandbox.lua/spec/sandbox_spec.lua	/^      assert_error(function() sandbox.run("error('this should be raised')") end)$/;"	f
) sandbox.run	sandbox.lua/spec/sandbox_spec.lua	/^      assert_error(function() sandbox.run("while true do end") end)$/;"	f
) sandbox.run	sandbox.lua/spec/sandbox_spec.lua	/^      assert_error(function() sandbox.run('return ("hello"):rep(5)') end)$/;"	f
) sandbox.run	sandbox.lua/spec/sandbox_spec.lua	/^      assert_error(function() sandbox.run('return setmetatable({}, {})') end)$/;"	f
) sandbox.run	sandbox.lua/spec/sandbox_spec.lua	/^      assert_error(function() sandbox.run('return string.rep("hello", 5)') end)$/;"	f
, function	sandbox.lua/spec/sandbox_spec.lua	/^    it('passes parameters to the function', function()$/;"	f
__newindex 	sandbox.lua/sandbox.lua	/^    __newindex = function(_, attr_name, _)$/;"	f
assert_error(function() sandbox.run("for i	sandbox.lua/spec/sandbox_spec.lua	/^      assert_error(function() sandbox.run("for i=1,100 do end", {quota = 20}) end)$/;"	f
assert_error(function() sandbox.run("string.char 	sandbox.lua/spec/sandbox_spec.lua	/^      assert_error(function() sandbox.run("string.char = 1") end)$/;"	f
assert_error(function() sandbox.run("string.foo 	sandbox.lua/spec/sandbox_spec.lua	/^      assert_error(function() sandbox.run("string.foo = 1") end)$/;"	f
assert_not_error(function() sandbox.run("for i	sandbox.lua/spec/sandbox_spec.lua	/^      assert_not_error(function() sandbox.run("for i=1,100 do end") end)$/;"	f
assert_not_error(function() sandbox.run("for i	sandbox.lua/spec/sandbox_spec.lua	/^      assert_not_error(function() sandbox.run("for i=1,1000000 do end", {quota = false}) end)$/;"	f
cleanup	sandbox.lua/sandbox.lua	/^local function cleanup()$/;"	f
comparetest	NumbersTutorial.lua	/^function comparetest()$/;"	f
f	env/5.1/env.lua	/^local function f(t)$/;"	f
f	env/5.2/env.lua	/^local function f(t)$/;"	f
foo	ExpressionsTutorial.lua	/^function foo(x)$/;"	f
if type(debug) ~	sandbox.lua/sandbox.lua	/^  if type(debug) ~= 'table' or type(debug.sethook) ~= 'function' then return end$/;"	f
local print 	env/5.1/env.lua	/^  local print = print -- since we will change the environment, standard functions will not be visible$/;"	f
local print 	env/5.2/env.lua	/^  local print = print -- since we will change the environment, standard functions will not be visible$/;"	f
local r 	sandbox.lua/spec/sandbox_spec.lua	/^      local r = sandbox.run(function() return 'hello' end)$/;"	f
local timeout 	sandbox.lua/sandbox.lua	/^      local timeout = function()$/;"	f
merge	sandbox.lua/sandbox.lua	/^local function merge(dest, source)$/;"	f
numtest	ExpressionsTutorial.lua	/^function numtest()$/;"	f
numtest	NumbersTutorial.lua	/^function numtest()$/;"	f
print_func1	loadfileinput.lua	/^function print_func1(var)$/;"	f
print_func2	loadfileinput.lua	/^local function print_func2(var)$/;"	f
protect_module	sandbox.lua/sandbox.lua	/^local function protect_module(module, module_name)$/;"	f
sandbox.protect	sandbox.lua/sandbox.lua	/^function sandbox.protect(f, options)$/;"	f
sandbox.run	sandbox.lua/sandbox.lua	/^function sandbox.run(f, options, ...)$/;"	f
sandbox.run('error 	sandbox.lua/spec/sandbox_spec.lua	/^      sandbox.run('error = function() end')$/;"	f
sethook	sandbox.lua/sandbox.lua	/^local function sethook(f, key, quota)$/;"	f
setmetatable(sandbox, {__call 	sandbox.lua/sandbox.lua	/^setmetatable(sandbox, {__call = function(_,f,o) return sandbox.protect(f,o) end})$/;"	f
tries to modify the base environment', function	sandbox.lua/spec/sandbox_spec.lua	/^  describe('when the sandboxed function tries to modify the base environment', function()$/;"	f
when they are provided by the base env', function	sandbox.lua/spec/sandbox_spec.lua	/^    it('DOES persist modification to base functions when they are provided by the base env', function()$/;"	f
