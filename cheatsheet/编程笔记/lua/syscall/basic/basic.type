--[[
  type(v)
  解释：这个函数只有一个参数，调用后会返回这个参数类型所对应的字符串，这些类型字符串包括
        "nil", "number", "string", "boolean", "table", "function", "thread" 和 "userdata"。
        另外这个参数是必须给的，不然会报错误："bad argument #1 to 'type' (value expected)"。
--]]

-- 定义一个局部table
local information =
{
    name = "AlbertS",
    age = 22,
    married = false,
    test = function () print("test") end,
    weight = 60.2,
}

print("phone type:", type(information.phone))     -- nil
print("name type:", type(information.name))       -- string
print("age type:", type(information.age))         -- number
print("married type:", type(information.married)) -- boolean
print("test type:", type(information.test))       -- function
print("weight type:", type(information.weight))   -- number


-- 利用type定义函数
function isnil(var)
    return type(var) == "nil"
end

function istable(var)
    return type(var) == "table"
end


print("\nuse function:")
if isnil(information.phone) then
    print("information.phone is nil")            -- information.phone is nil
end

if istable(information) then
    print("my age is", information.age)          -- my age is       22
end

print("weight type:", type())                    -- bad argument #1 to 'type' (value expected)

--[[
1. 在lua的编程中要尽可能的使用局部变量，比如例子中的local information。
2. type函数通常会被封装起来，类似于例子中的isnil和istable函数，这样使用起来更加方便。
3. "userdata"和"lightuserdata"类型只能在C/C++中创建，并且在使用type函数时统一返回"userdata"
--]]