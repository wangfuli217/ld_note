#if 0
lua_pcall: [-(nargs + 1), +(nresults|1), –]

int lua_pcall (lua_State *L, int nargs, int nresults, int msgh); 以保护模式调用一个函数。
  nargs 和 nresults 的含义与 lua_call 中的相同。 
  如果在调用过程中没有发生错误，lua_pcall 的行为和 lua_call 完全一致。 
  但是，如果有错误发生的话，lua_pcall 会捕获它，然后把唯一的值(错误消息)压栈，然后返回错误码。 
  同 lua_call 一样， lua_pcall 总是把函数本身和它的参数从栈上移除。

  如果 msgh 是0 ， 返回在栈顶的错误消息就和原始错误消息完全一致。 否则， 
  msgh 就被当成是 错误处理函数 在栈上的索引位置。(在当前的实现里，这个索引不能是伪索引。)
  在发生运行时错误时，这个函数会被调用而参数就是错误消息。错误处理函数的返回值将被 lua_pcall 作为错误消息返回在堆栈上。

  典型的用法中，错误处理函数被用来给错误消息加上更多的调试信息， 
  比如栈跟踪信息。 这些信息在 lua_pcall 返回后， 由于栈已经展开，所以收集不到了。

lua_pcall 函数会返回下列常数(定义在 lua.h 内)中的一个：
  LUA_OK (0): 成功。
  LUA_ERRRUN: 运行时错误。
  LUA_ERRMEM: 内存分配错误。对于这种错，Lua 不会调用错误处理函数。
  LUA_ERRERR: 在运行错误处理函数时发生的错误。
  LUA_ERRGCMM: 在运行 __gc 元方法时发生的错误。(这个错误和被调用的函数无关)
#endif