#if 0
    lua_checkstack : [-0, +0, –] 检查栈是否有足够的空间
int lua_checkstack (lua_State *L, int n);
n: 我们所需的额外栈位置的数量。
如果可能，函数lua_checkstack会增加栈的大小秒，以容纳所需的额外空间；否则，该函数返回零。

确保堆栈上至少有 n 个额外空位。 如果不能把堆栈扩展到相应的尺寸，函数返回假。 
失败的原因包括将把栈扩展到比固定最大尺寸还大(至少是几千个元素)或分配内存失败。 

这个函数永远不会缩小堆栈；如果堆栈已经比需要的大了，那么就保持原样。

luaL_checkstack : [-0, +0, v]
void luaL_checkstack (lua_State *L, int sz, const char *msg);
如果栈空间不能满足请求，该函数会使用指定错误信息抛出异常，而不是返回错误码。

将栈空间扩展到 top + sz 个元素。如果扩展不了，则抛出一个错误。msg 是用于错误消息的额外文本(NULL 表示不需要额外文本)。
#endif