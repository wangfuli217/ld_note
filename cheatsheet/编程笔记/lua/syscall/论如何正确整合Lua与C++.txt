    为什么Lua与C++无缝整合有问题，原因很简单：任何一个有经验的程序员都知道，如果
两个系统之间是紧密相连到成员函数成员变量都可以随便调用，那么这两个系统的耦合度一定
是相当高，容易出现的问题就是难扩展、难修改、难维护。这两个系统不如直接整成一个系统算了。

首先第一个问题是，你的系统谁是主导？
    第二个问题是，你的系统里面，作为主导部分想开放那些接口？

Be minimal: A minimal API is one that has as few public members per class and as few classes as possible. This makes it easier to understand, remember, debug, and change the API.
最小化: 一个最小化的借口是使用尽可能少的类以及尽可能少的类成员。这样使得理解、记忆、调试以及改变API更容易。
Be complete: A complete API means the expected functionality should be there. This can conflict with keeping it minimal. Also, if a member function is in the wrong class, many potential users of the function won’t find it.
完整: 一个完整的API意味着被期望的功能都包含在内。这与保持最小化有些冲突。而且，如果一个成员函数在一个错误的类中，很多有可能需要这个函数的用户没法找到它。
Have clear and simple semantics: As with other design work, you should apply the principle of least surprise. Make common tasks easy. Rare tasks should be possible but not the focus. Solve the specific problem; don’t make the solution overly general when this is not needed. (For example, QMimeSourceFactory in Qt 3 could have been called QImageLoader and have a different API.)
清楚简洁的语义： 像其他设计工作一样，你应该应用最小惊讶原则。这使得通用的任务更容易。不常用的任务可以存在但不是重点。API的目的是解决特定问题。没有必要的时候不要让解决方案互相重叠。
Be intuitive: As with anything else on a computer, an API should be intuitive. Different experience and background leads to different perceptions on what is intuitive and what isn’t. An API is intuitive if a semi-experienced user gets away without reading the documentation, and if a programmer who doesn’t know the API can understand code written using it.
直观：与计算机里面其他的事情一样，一个API应该是直观的。不同的经验以及背景导致对什么是直观什么不是直观有着不同的理解。如果一个有些经验的用户可以直接使用API而不需要阅读文档，或者一个程序员可以直接理解用这个API写的代码而不需要了解这个API，那么这个API就是直观的。
Be easy to memorize: To make the API easy to remember, choose a consistent and precise naming convention. Use recognizable patterns and concepts, and avoid abbreviations.
容易记忆：让API容易记忆，选择一个统一的简洁的命名规范。使用容易识别的模式或者概念，另外避免缩写。
Lead to readable code: Code is written once, but read (and debugged and changed) many times. Readable code may sometimes take longer to write, but saves time throughout the product’s life cycle.
产生可读性高的代码：代码是编写一次，但是要多次阅读（当你调试或者修改的时候）。可读性高的代码常常需要花费更长的时间去编写，但是从整个产品生存周期来看，时间还是节省的。
