--[[
  弱引用就是一种会被垃圾收集器忽视的对象引用, 如果一个对象的所有引用都
是弱引用, 那么lua久可以回收这个对象了, 并且还可以以某种形式来删除这些弱
引用本身;
  有3中弱引用table: 具有弱引用key的table, 具有弱引用value的table, 同时
具有两种弱引用的table; 不管是那种类型的弱引用table, 只要有一个key或value
被回收了, 那么他们所在的整个条目都会从table中删除.
  lua只会回收弱引用table中的对象, 而像数字和布尔这样的值是不可回收的; 
字符串和数字, 布尔一样, 不会从弱引用table中删除.
--]]

--[[ 1. 备忘录函数  --]]
-- 如一个服务器, 接受并处理lua代码, 如果频繁调用loadstring, 开销一定很大所以:
local results = {}
setmetatable(results, {__mode = 'v'}) -- 使value成为弱引用
function mem_loadstring(s)
  local res = results[s]
  if res == nil then
    res = assert(loadstring(s))
    results[s] = res
  end
  return res
end 

-- 由于key总是字符串, 则可以使这个table成为完全弱引用
-- setmetatable(results, {__mode = 'kv'})

--[[ 2. 对象属性 --]]
-- 1) 当对象是一个table时, 可以通过适当的key将数字那个存储在这个table中
-- 2) 具体见原书...

--[[ 3. 回顾table的默认值 --]]
-- 1) 方法一, 使用一个弱引用table, 通过它将每个table与其值关联起来
local defaults = {}
setmetatable(defaults, {__mode = 'k'})
local mt = {__index = function(t)
    return defaults[t]
  end}
function setDefault(t, d)
  defaults[t] = d
  setmetatable(t, mt)
end

-- 2) 方法二, 对每种不同默认值使用不同的元表
local metas = {}
setmetatable(metas, {__mode = 'v'})
function setDefault(t, d)
  local mt = metas[d]
  if mt == nil then 
    mt = {__index = function() return d end}
    metas[d] = mt
  end
  setmetatable(t, mt)
end 

--[[
3) 方法一需要为每个table的默认值使用内存, 方法二需要为每种不同的默认值使用一组内存;
   如果程序中有上千个table和一些默认值, 使用方法二;
   如果只有很少的table和共享几个公用的默认值, 使用方法一
--]]

--[[ 弱表
1. 弱表 指内部元素为 弱引用 的表。 垃圾收集器会忽略掉弱引用。 换句话说，如果一个对象只被弱引用引用到， 垃圾收集器就会回收这个对象。
2. 一张弱表可以有弱键或是弱值，也可以键值都是弱引用。 
  2.1 仅含有弱键的表允许收集器回收它的键，但会阻止对值所指的对象被回收。
  2.2 若一张表的键值均为弱引用， 那么收集器可以回收其中的任意键和值。任何情况下，只要键或值的任意一项被回收， 相关联的键值对都会从表中移除。
3. 属性为弱键强值的表也被称为 暂时表。 对于一张暂时表， 它的值是否可达仅取决于其对应键是否可达。 
   特别注意，如果表内的一个键仅仅被其值所关联引用，这个键值对将被表内移除。
4. 对一张表的弱属性的修改仅在下次收集循环才生效。尤其是当你把表由弱改强，Lua 还是有可能在修改生效前回收表内一些项目。
5. 只有那些有显式构造过程的对象才会从弱表中移除。 值，例如数字和轻量 C 函数，不受垃圾收集器管辖， 因此不会从弱表中移除 （除非它们的关联项被回收）。 
   虽然字符串受垃圾回收器管辖， 但它们没有显式的构造过程，所以也不会从弱表中移除。
6. 弱表针对复活的对象 （指那些正在走终结流程，仅能被终结器访问的对象） 有着特殊的行为。 
   弱值引用的对象，在运行它们的终结器前就被移除了，而弱键引用的对象则要等到终结器运行完毕后，
   到下次收集当对象真的被释放时才被移除。 这个行为使得终结器运行时得以访问到由该对象在弱表中所关联的属性。
7. 如果一张弱表在当次收集循环内的复活对象中， 那么在下个循环前这张表有可能未被正确地清理。
--]]