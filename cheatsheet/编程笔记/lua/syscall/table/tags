!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
copy	ltable/ltable.lua	/^    local function copy(object)$/;"	f
elseif type(v) 	ltable/ltable.lua	/^        elseif type(v) == "function" then$/;"	f
flatten	ltable/ltable.lua	/^    local function flatten(arr)$/;"	f
fn 	ltable/ltable.lua	/^        fn = fn or function(a, b) return a < b end$/;"	f
if type(translation) 	ltable/ltable.lua	/^        if type(translation) == "function" then$/;"	f
local format_value 	ltable/ltable.lua	/^    local format_value = function(k, v, i)$/;"	f
spairs	ltable/ltable.lua	/^function spairs(t)$/;"	f
table.arraycopy	ltable/ltable.lua	/^function table.arraycopy(object)$/;"	f
table.contains	ltable/ltable.lua	/^function table.contains(t, value)$/;"	f
table.deepcopy	ltable/ltable.lua	/^function table.deepcopy(object)$/;"	f
table.difference	ltable/ltable.lua	/^function table.difference(a, b)$/;"	f
table.equals	ltable/ltable.lua	/^function table.equals(a, b)$/;"	f
table.extract	ltable/ltable.lua	/^function table.extract(arr, fname)$/;"	f
table.filter	ltable/ltable.lua	/^function table.filter(arr, fn)$/;"	f
table.filterempty	ltable/ltable.lua	/^function table.filterempty(dirs)$/;"	f
table.flatten	ltable/ltable.lua	/^function table.flatten(arr)$/;"	f
table.fold	ltable/ltable.lua	/^function table.fold(list1, list2)$/;"	f
table.foreachi	ltable/ltable.lua	/^function table.foreachi(arr, func)$/;"	f
table.implode	ltable/ltable.lua	/^function table.implode(arr, before, after, between)$/;"	f
table.indexof	ltable/ltable.lua	/^function table.indexof(tbl, obj)$/;"	f
table.insertafter	ltable/ltable.lua	/^function table.insertafter(tbl, after, value)$/;"	f
table.insertflat	ltable/ltable.lua	/^function table.insertflat(tbl, values)$/;"	f
table.insertkeyed	ltable/ltable.lua	/^function table.insertkeyed(tbl, pos, value)$/;"	f
table.insertsorted	ltable/ltable.lua	/^function table.insertsorted(tbl, value, fn)$/;"	f
table.intersect	ltable/ltable.lua	/^function table.intersect(a, b)$/;"	f
table.isempty	ltable/ltable.lua	/^function table.isempty(t)$/;"	f
table.join	ltable/ltable.lua	/^function table.join(...)$/;"	f
table.keys	ltable/ltable.lua	/^function table.keys(tbl)$/;"	f
table.merge	ltable/ltable.lua	/^function table.merge(...)$/;"	f
table.replace	ltable/ltable.lua	/^function table.replace(self, value, replacement)$/;"	f
table.shallowcopy	ltable/ltable.lua	/^function table.shallowcopy(object)$/;"	f
table.tostring	ltable/ltable.lua	/^function table.tostring(tab, recurse, indent)$/;"	f
table.translate	ltable/ltable.lua	/^function table.translate(arr, translation)$/;"	f
table.unique	ltable/ltable.lua	/^function table.unique(tab)$/;"	f
