--[[
原型：table.insert (tab_table, [pos,] value)
参数：
      tab_table  要被插入数据的table；
      pos        插入的位置；
      value      插入的值。
解释：在一个叫做tab_table的表的pos位置上插入值value，如果需要的话，要把原pos位置及其之后的元素"向后移动"。
      其中参数pos的默认值是length+1，而length表示tab_table中"数组元素"的个数也就是说当省略参数pos时，新插入的元素默认在table连续下标的元素最后。
      如果pos位置大于表长度，直接在指定位置插入。
--]]

local tabLanguage = { 
    start = "Assemblylanguage",
    up ="Lua",
    "c",
    "c++",
    "swift",
    "java",
    [8] = "test",
    [100] = "end"
};
-- 最初的tabLanguage：tabLanguage[1] = "c", Length = 4
print("============================== PART 1 TEST:")
for k,v in pairs(tabLanguage) do
    print(k,v)
end
print(">>>> length = "..#tabLanguage.."\n")                                     -- >>>> length = 4


table.insert(tabLanguage, 3, "objective-c")
for k,v in pairs(tabLanguage) do
    print(k,v)
end
print(">>>> length = "..#tabLanguage.."\n")                                     -- >>>> length = 8

table.insert(tabLanguage, "python")
table.insert(tabLanguage, "ruby")
for k,v in pairs(tabLanguage) do
    print(k,v)
end
print(">>>> length = "..#tabLanguage.."\n")                                     -- >>>> length = 10

table.insert(tabLanguage, 20, "lex")
table.insert(tabLanguage, 22, "bison")
for k,v in pairs(tabLanguage) do
    print(k,v)
end
print(">>>> length = "..#tabLanguage.."\n")                                     -- >>>> length = 10
-- >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
-- 现在是代码的第二部分
local tabLanguage2 = { 
    start = "Assemblylanguage",
    up ="Lua",
    "c",
    "c++",
    "swift",
    "java",
    [8] = "test",
    [100] = "end"
};
print("============================== PART 2 TEST:")
for k,v in pairs(tabLanguage2) do
    print(k,v)
end
print(">>>>tabLanguage2 length = "..#tabLanguage2.."\n")                        -- length = 4


table.insert(tabLanguage2, "c#")
table.insert(tabLanguage2, 3, "objective-c")
for k,v in pairs(tabLanguage2) do
    print(k,v)
end
print(">>>>tabLanguage2 length = "..#tabLanguage2.."\n")                        -- length = 6

--[[
     #的实现算法是二分查找，6,7为nil但是8不为nil也就形成了空洞数组，
 导致#的取值可能为正确的也可能为不正确的，取决于二分时是否正好访问到nil的元素
--]]

-- TablesTutorial
t = {} -- for array
table.insert(t, 123)
t[#t+1] = 456
print(t[1], t[2])

t = {"a", "c"}
table.insert(t, 2, "b")
print(t[1], t[2], t[3])


