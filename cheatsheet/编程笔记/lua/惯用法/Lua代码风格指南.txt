1. 好的代码风格基于可读性和一致性。代码更多的时间是给人看的，风格的一致性也很重要，这样可以减少复杂度和理解成本。

命名
  最好的代码是自说明代码，一种好的命名风格是自说明代码的基础。
  命名法
    小驼峰式命名法：第一个单字以小写字母开始；第二个单字的首字母大写，例如：firstName、lastName。
    大驼峰式命名法：每一个单字的首字母都采用大写字母，例如：FirstName、LastName、CamelCase，也被称为Pascal命名法。
  下划线命名法
    小下划线命名法：所有字母均为小写，例如登录按钮：login_btn
    大下划线命名法：所有字母均为大写，常见于常量，例如：最小间隔时间MIN_GAP_TIME
    
变量名长度
  通常作用域范围更大的变量名要比作用域范围更小的变量名具有更多的描述信息。
  变量命名
    对于变量（包括函数），小驼峰式命名法或小下划线命名法是一个好选择。比如：curSpeed表示当前速度，canDrop表示是否能掉落等等。
    对于布尔值型的变量，通常前缀加上is可以方便理解，比如isRemoved比Removed更加能表示这是一个布尔值变量。
    Lua中有一种特殊的变量名：_，常用来表示可以被忽略的、不会使用到的变量，常使用在循环中。
      -- `_`表示表的键可以被忽略，只在循环内使用表中的值`v`
      for _,v in ipairs(t) do print(v) end
  
  常数命名
    Lua里没有严格的常数定义标识符，所以对于常数的命名格外重要。
    常数一般采用大下划线命名法。这样每个字母都大写，十分醒目，且各个单词都用下划线分割，便于阅读。
    比如：MAX_SPEED表示最大速度，IS_SHOW_DEBUG_ERROR_MSG表示是否显示报错消息等等。
  
  类名
    为了不与变量名和常数名混淆，类名通常使用大驼峰式命名法，即首字母大写。比如：TouchManager表示触摸管理器类。
    
  包和模块名
    包名和模块名通常很短，并且全部小写，单词间并没有下划线区分。
    比如：文件读取库名为lfs，表示Lua File System；
    XML解析库名为lxp，表示Lua XML Parser等等。
    
  文件名
    通常为了不与类名混淆，对于文件名，经常使用小驼峰式命名法或小下划线命名法。
    
  作用域
    Lua的作用域以关键字end进行标识。
    对于变量，有一条原则：在一切能使用local修饰的情况下，使用local进行修饰。
    因为不用local修饰的变量会自动变成全局变量。
    全局变量十分危险，很容易被篡改而不知道在哪里被篡改了，这很容易导致顽固的bug出现。并且全局变量的处理速度也比局部变量的速度要慢很多。
    所以，尽可能的用local来修饰变量。
    有时候，用do .. end可以用来明确限定局部变量的作用域。
    local v
    do
      local x = u2*v3-u3*v2
      local y = u3*v1-u1*v3
      local z = u1*v2-u2*v1
      v = {x,y,z}
    end -- x,y,z的作用域结束，被系统清理
    
    local count
    do
      local x = 0
      count = function() x = x + 1; return x end
    end -- x的作用域结束，被系统清理

  模块
    Lua中有一个叫module的公有函数，此函数的作用是将一组变量和函数打包在一个模块名下，便于其他文件require。
    但是这个函数受到了诸多的指责，原因是其会创建一个公共变量，并且这个公共变量中的所有细节都会暴露出来。这其实十分不符合面向对象的规范。
    
    以下有一种办法可以避免这个问题，即不采用module函数进行打包。

    -- hello/mytest.lua
    
    local M = {} -- 私有变量
    
    local function test() print(123) end
    function M.test1() test() end
    function M.test2() M.test1(); M.test1() end
    
    return M -- 关键
    以下是导入此模块的方法。
    local MT = require "hello.mytest"
    MT.test2()
    Lua内没有类这个变量类型，但是通过Lua的metatable可以轻松实现类的继承，多态等等特性。
    
注释
  通常在--前加上一个空格。
  return nil  -- not found    (建议)
  return nil  --not found     (不建议)
  注释通常用在函数接口，或者复杂，精巧的逻辑上。
  
  对于接口的注释，可以按照javadoc类似的来写。
    -- Deletes a session.
    -- @param id Session identification.
    -------------------------------------
    function delete (id)
      assert (check_id (id))
      remove (filename (id))
    end