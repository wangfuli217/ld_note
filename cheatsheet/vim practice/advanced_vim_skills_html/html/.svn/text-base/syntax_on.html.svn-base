<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>第 11 章 乱花渐欲迷人眼 - 语法高亮</title><link rel="stylesheet" href="http://easwy.com/blog/uploads/css/style.css" type="text/css"><meta name="generator" content="DocBook XSL Stylesheets V1.73.2"><link rel="start" href="index.html" title="vim使用进阶"><link rel="up" href="index.html" title="vim使用进阶"><link rel="prev" href="filetype_on.html" title="第 10 章 开启文件类型检测"><link rel="next" href="cscope.html" title="第 12 章 程序员的利器 - cscope"></head><body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="navheader"><table width="100%" summary="Navigation header"><tr><th colspan="3" align="center">第 11 章 乱花渐欲迷人眼 - 语法高亮</th></tr><tr><td width="20%" align="left"><a accesskey="p" href="filetype_on.html">上一页</a> </td><th width="60%" align="center"> </th><td width="20%" align="right"> <a accesskey="n" href="cscope.html">下一页</a></td></tr></table><hr></div><div class="chapter" lang="zh-CN"><div class="titlepage"><div><div><h2 class="title"><a name="syntax_on"></a>第 11 章 乱花渐欲迷人眼 - 语法高亮</h2></div></div></div><p>
    <span class="bold"><strong>&lt;&lt; </strong></span><a class="link" href="http://easwy.com/blog/archives/advanced-vim-skills-catalog/">返回vim使用进阶: 目录</a>
</p><p>
    本节所用命令的帮助入口：
  </p><pre class="programlisting">
:help syn-enable
:help :colorscheme
:help :highlight
:help highlight-groups
:help 2html.vim </pre><p>
    看到标题，也许你就知道本文准备讲vim的色彩机制了。
  </p><p>
    vim并不是只有黑色两色。正相反，它提供了非常灵活的机制允许用户自定义色彩。运行在终端中的vim，由于终端本身的限制，只能使用若干种固定的颜色；但对于gvim来讲，你可以根据你的喜好调出任意的颜色。
  </p><p>
    首先，把下面的Ex命令加入你的vimrc，打开vim的语法高亮功能：
  </p><pre class="programlisting">
syntax enable </pre><p>
    这条命令，实际上是执行$vimRUNTIME/syntax/syntax.vim脚本。如果你还没有打开<a class="link" href="http://easwy.com/blog/archives/advanced-vim-skills-filetype-on/">文件类型检测</a>功能，在这个脚本里会把它打开，因为要语法高亮，首先需要知道是什么文件类型。然后它会安装Filetype自动命令，在检测到文件类型时，设置syntax选项。而对syntax选项进行设置，又会触发Syntax自动命令，这条自动命令会在runtimepath的syntax子目录搜寻该类型的语法文件，并使用缺省的配色方案进行染色。
  </p><p>
    所谓语法文件，就是定义某种类型文件的语法。以C语言为例，它的语法文件定义了什么应该做为关键字来高亮，什么被做为注释来高亮，等等。vim将根据语法文件的定义，把关键字以一种颜色高亮出来，把注释以另一种颜色高亮出来。具备使用什么样的颜色，则由配色方案（colorscheme）来决定，缺省使用default配色方案。
  </p><p>
    现在，你的世界已经亮起来了：注释、关键字、常数、字符串等等都以不同的颜色显示出来，读程序轻松多了。可是你不太喜欢default配色方案的设置，可不可以换用其它的配色方案呢？
  </p><p>
    当然没可以！如果你使用的是gvim，在"编辑"菜单中选择"配色方案"，你就可以在多个配色方案中切换了。也可以使用<span class="command"><strong>colorscheme</strong></span>命令来改变你的配色方案。例如，我喜欢的GUI配色方案是darkblue，因此我在vimrc中加入这样一句话：
  </p><pre class="programlisting">
colorscheme darkblue </pre><p>
    这样，进入vim之后，我所用的就是darkblue方案了。
  </p><p>
    在<a class="link" href="http://www.vim.org/">http://www.vim.org/</a>上还有更多的配色方案，你可以在
    <a class="link" href="http://www.vim.org/scripts/script.php?script_id=625">http://www.vim.org/scripts/script.php?script_id=625</a>
    下载截止到2005年3月所有colorscheme的汇总，你可以在其中找到一个自己喜欢的。安装colorscheme时，只需要把它们拷贝到.vim/color目录下就行了。
  </p><p>
    有一个名为Color Scheme Explorer的插件，可以帮助你快速浏览你所安装的color scheme，在这里下载：
  </p><p>
    <a class="link" href="http://www.vim.org/scripts/script.php?script_id=1298">http://www.vim.org/scripts/script.php?script_id=1298</a>
  </p><p>
    选择了喜欢的colorscheme后，在<a class="link" href="http://easwy.com/blog/archives/advanced-vim-skills-introduce-vimrc/">vimrc</a>中加入一条<span class="command"><strong>colorscheme</strong></span>命令，以后vim就会使用你选定的配色方案了。
  </p><p>
    如果对配色方案某些颜色不太满意，那么你可以在原来配色方案的基础上，修改其中的一些定义。例如，我把desert.vim拷到.vim/color目录，重命名为darkblue_my.vim。然后做如下更改（只列出改变的内容）：
  </p><pre class="programlisting">
let colors_name = "darkblue_my"
hi Normal guifg=#c0c0c0 guibg=#294d4a ctermfg=gray ctermbg=black
......
"Omni menu colors
hi Pmenu guibg=#444444
hi PmenuSel ctermfg=7 ctermbg=4 guibg=#555555 guifg=#ffffff
" Matched brackets
hi MatchParen ctermfg=7 ctermbg=4 </pre><p>
    首先改变colors_name，vim在某此情况会根据这个名字重新载入color scheme。
  </p><p>
    接下来我重新设置了GUI的背景色，在<a class="link" href="http://easwy.com/blog/archives/advanced-vim-skills-prologue/">前面的抓图</a>中大家看到过这个颜色。
  </p><p>
    接下来的<span class="emphasis"><em>Pmenu</em></span>和<span class="emphasis"><em>PmenuSel</em></span>用来设置vim下拉菜单的颜色，我们在<a class="link" href="http://easwy.com/blog/archives/advanced-vim-skills-lookupfile-plugin/">使用lookupfile插件</a>中看到过下拉菜单。
  </p><p>
    vim 7中，当光标移到括号上时，vim会高亮与之匹配的括号，所使用的颜色就是<span class="emphasis"><em>MatchParen</em></span>，我在这里也更改这个颜色。
  </p><p>
    <span class="emphasis"><em>Pmenu</em></span>、<span class="emphasis"><em>PmenuSel</em></span>，以及<span class="emphasis"><em>MatchParen</em></span>，都是vim定义的缺省高亮组的名字，你可以用"<span class="command"><strong>:help highlight-groups</strong></span>"命令查看有这些高亮组及其含义。
  </p><p>
    如果你打算在终端及GUI界面中使用不同的colorscheme，可以这样设：
  </p><pre class="programlisting">
" color scheme
if has("gui_running")
  colorscheme darkblue_my
else
  colorscheme desert_my
endif " has </pre><p>
    这里的darkblue_my和desert_my都是我自已改过的colorscheme。
  </p><p>
    vim还提供了一个脚本，可以把你的文件按当前的颜色定义转化成HTML/XML文件，试试"<span class="command"><strong>:TOhtml</strong></span>"命令吧，更多信息请"<span class="command"><strong>:help 2html.vim</strong></span>"。
  </p><p>
    记得Source Insight中有一个功能，按<span class="command"><strong>SHIFT+F8</strong></span>可以把光标下的词高亮出来，在看代码时非常有用。vim下也有一个插件可以完成此功能，而且比Source Insight的这个功能强大多了。
  </p><p>
    这个插件由Yuheng Xie所写，对这个插件有什么疑问，可以水木社区的vim版找到他（<a class="link" href="http://www.newsmth.net/bbsdoc.php?board=vim">http://www.newsmth.net/bbsdoc.php?board=vim</a>）。在<a class="link" href="http://www.vim.org/scripts/script.php?script_id=1238">这里</a>下载此插件。
  </p><p>
    把此插件直接拷贝到你的.vim/plugin目录就行了。
  </p><p>
    我在vimrc中这样设置：
  </p><pre class="programlisting">
""""""""""""""""""""""""""""""
" mark setting
""""""""""""""""""""""""""""""
nmap &lt;silent&gt; &lt;leader&gt;hl &lt;Plug&gt;MarkSet
vmap &lt;silent&gt; &lt;leader&gt;hl &lt;Plug&gt;MarkSet
nmap &lt;silent&gt; &lt;leader&gt;hh &lt;Plug&gt;MarkClear
vmap &lt;silent&gt; &lt;leader&gt;hh &lt;Plug&gt;MarkClear
nmap &lt;silent&gt; &lt;leader&gt;hr &lt;Plug&gt;MarkRegex
vmap &lt;silent&gt; &lt;leader&gt;hr &lt;Plug&gt;MarkRegex </pre><p>
    这样，当我输入"<span class="command"><strong>,hl</strong></span>"时，就会把光标下的单词高亮，在此单词上按"<span class="command"><strong>,hh</strong></span>"会清除该单词的高亮。如果在高亮单词外输入"<span class="command"><strong>,hh</strong></span>"，会清除所有的高亮。
  </p><p>
    你也可以使用virsual模式选中一段文本，然后按"<span class="command"><strong>,hl</strong></span>"，会高亮你所选中的文本；或者你可以用"<span class="command"><strong>,hr</strong></span>"来输入一个正则表达式，这会高亮所有符合这个正则表达式的文本。
  </p><p>
    你可以在高亮文本上使用"<span class="command"><strong>,#</strong></span>"或"<span class="command"><strong>,*</strong></span>"来上下搜索高亮文本。在使用了"<span class="command"><strong>,#</strong></span>"或"<span class="command"><strong>,*</strong></span>"后，就可以直接输入"<span class="command"><strong>#</strong></span>"或"<span class="command"><strong>*</strong></span>"来继续查找该高亮文本，直到你又用"<span class="command"><strong>#</strong></span>"或"<span class="command"><strong>*</strong></span>"查找了其它文本。
  </p><p>
    如果你在启动vim后重新执行了<span class="command"><strong>colorscheme</strong></span>命令，或者载入了会话文件，那么mark插件的颜色就会被清掉，解决的办法是重新source一下mark插件。或者像我一样，把mark插件定义的highlight组加入到你自己的colorscheme文件中。例如，把下面的语句加到desert_my.vim及darkblue_my.vim中：
  </p><pre class="programlisting">
" For mark plugin
hi MarkWord1  ctermbg=Cyan     ctermfg=Black  guibg=#8CCBEA    guifg=Black
hi MarkWord2  ctermbg=Green    ctermfg=Black  guibg=#A4E57E    guifg=Black
hi MarkWord3  ctermbg=Yellow   ctermfg=Black  guibg=#FFDB72    guifg=Black
hi MarkWord4  ctermbg=Red      ctermfg=Black  guibg=#FF7272    guifg=Black
hi MarkWord5  ctermbg=Magenta  ctermfg=Black  guibg=#FFB3FF    guifg=Black
hi MarkWord6  ctermbg=Blue     ctermfg=Black  guibg=#9999FF    guifg=Black </pre><p>
    不知道为什么，我的vim 7.0在切换到其它缓冲区然后再切换回来时，原来被标记的文本会失去高亮。而作者说他并不存在此问题。如果你存在类似的问题，可以打上我所加的补丁：
  </p><pre class="programlisting">
    
--- easwy/mark.vim	2006-12-01 13:02:18.000000000 +0800
+++ plugin/mark.vim	2007-03-23 10:22:02.000000000 +0800
@@ -440,6 +440,43 @@
 	endif
 endfunction
 
+" easwy add
+" return the mark string under the cursor. multi-lines marks not supported
+function! &lt;SID&gt;RedoMarkWord()
+	" define variables if they don't exist
+	call s:InitMarkVariables()
+
+	let i = 1
+  while i &lt;= g:mwCycleMax
+    if b:mwWord{i} != ""
+      " quote regexp with / etc. e.g. pattern =&gt; /pattern/
+      let quote = "/?~!@#$%^&amp;*+-=,.:"
+      let j = 0
+      while j &lt; strlen(quote)
+        if stridx(b:mwWord{i}, quote[j]) &lt; 0
+          let quoted_regexp = quote[j] . b:mwWord{i} . quote[j]
+          break
+        endif
+        let j = j + 1
+      endwhile
+      if j &gt;= strlen(quote)
+        return -1
+      endif
+
+      " highlight the word
+      exe "syntax clear MarkWord" . i
+      exe "syntax match MarkWord" . i . " " . quoted_regexp . " containedin=ALL"
+    endif
+    let i = i + 1
+  endwhile
+endfunction
+
+augroup markword
+  autocmd!
+  autocmd BufWinEnter * call &lt;SID&gt;RedoMarkWord()
+augroup END
+" easwy end
+
 " Restore previous 'cpo' value
 let &amp;cpo = s:save_cpo
 
  </pre><p>
    用法：
  </p><div class="orderedlist"><ol type="1"><li>
      保存该patch到某一目录，例如：/tmp/mark.vim.patch
    </li><li>
      cd到你的.vim目录：cd ~/.vim
    </li><li>
      运行命令：cat /tmp/mark.vim.patch | patch -p0
    </li></ol></div><p>
    <span class="bold"><strong>[参考文档]</strong></span>
  </p><div class="itemizedlist"><ul type="disc"><li>
      vim手册
    </li><li><a class="link" href="http://vimcdoc.sourceforge.net/">vim中文手册</a></li></ul></div><p>
    <span class="bold"><strong>&lt;&lt; </strong></span><a class="link" href="http://easwy.com/blog/archives/advanced-vim-skills-catalog/">返回vim使用进阶: 目录</a>
</p><p><span class="bold"><strong>原创文章，转载请注明：</strong></span>转载自<a class="link" href="http://easwy.com/blog/">Easwy的博客</a> [  <a class="link" href="http://easwy.com/blog/">http://easwy.com/blog/</a> ]</p><p>
    <span class="bold"><strong>　　　　本文链接地址:</strong></span> <a class="link" href="http://easwy.com/blog/archives/advanced-vim-skills-syntax-on-colorscheme/">http://easwy.com/blog/archives/advanced-vim-skills-syntax-on-colorscheme/</a>
  </p></div><div class="navfooter"><hr><table width="100%" summary="Navigation footer"><tr><td width="40%" align="left"><a accesskey="p" href="filetype_on.html">上一页</a> </td><td width="20%" align="center"> </td><td width="40%" align="right"> <a accesskey="n" href="cscope.html">下一页</a></td></tr><tr><td width="40%" align="left" valign="top">第 10 章 开启文件类型检测 </td><td width="20%" align="center"><a accesskey="h" href="index.html">起始页</a></td><td width="40%" align="right" valign="top"> 第 12 章 程序员的利器 - cscope</td></tr></table></div></body></html>
