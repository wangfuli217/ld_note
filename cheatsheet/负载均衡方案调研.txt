负载均衡方案调研

一、负载均衡基本概念

1.负载均衡是什么？

负载均衡，英文名称为Load Balance，其意思就是将负载（工作任务）进行平衡、分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。

负载均衡建立在现有网络结构之上，它提供了一种廉价有效透明的方法扩展网络设备和服务器的带宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。需要说明的是：负载均衡设备不是基础网络设备，而是一种性能优化设备。对于网络应用而言，并不是一开始就需要负载均衡，当网络应用的访问量不断增长，单个处理单元无法满足负载需求时，网络应用流量将要出现瓶颈时，负载均衡才会起到作用。

负载均衡有两方面的含义：首先，单个重负载的运算分担到多台节点设备上做并行处理，每个节点设备处理结束后，将结果汇总，返回给用户，系统处理能力得到大幅度提高，这就是我们常说的集群（clustering）技术。第二层含义就是：大量的并发访问或数据流量分担到多台节点设备上分别处理，减少用户等待响应的时间，这主要针对Web服务器、FTP服务器、企业关键应用服务器等网络应用。

通常，负载均衡会根据网络的不同层次（网络七层）来划分。现代负载均衡技术通常操作于网络的第四层或第七层，这是针对网络应用的负载均衡技术，它完全脱离于交换机、服务器而成为独立的技术设备。使用带有负载平衡的多个服务器组件，取代单一的组件，可以通过冗余提高可靠性。负载平衡服务通常是由专用软体和硬件来完成。

2. 负载均衡原理图



负载均衡工作的流程：

1)客户发出服务请求到VIP

2)BIGIP接收到请求，将数据包中目的IP地址改为选中的后台服务器IP地址，然后将数据包发出到后台选定的服务器

3)后台服务器收到后，将应答包按照其路由发回到BIGIP

4)BIGIP收到应答包后将其中的源地址改回成VIP的地址，发回客户端，由此就完成了一个标准的服务器负载平衡的流程。
二、介绍

1.硬件：

1.1 什么是F5？

F5负载均衡器：是应用交付网络的全球领导者F5-Networks公司提供的一个负载均衡器专用设备，F5 BIG-IP LTM 的官方名称叫做本地流量管理器.一种网络性能优化设备，工作在网络的四层或七层，是一种昂贵的硬件负载均衡设备。
1.2 优势

截获和检查流量
iRules和通用检测引擎
服务器监控和健康检查
负载均衡和应用交换功能
设备自身高可用性
链路和服务器冗余
高度的安全性
高级SSL加速标准
集中系统管理
4层/7层负载均衡
1.3 调度方法

1.静态调度

轮询(RoundRobin):顺序循环将请求一次顺序循环地连接每个服务器。 当其中某个服务器发生第二到第7层的故障，BIGIP就把其从顺序循环队列中拿出，不参加下一次的轮询，直到其恢复正常。
比率(Ratio):给每个服务器分配一个加权值为比例，根椐这个比例， 把用户的请求分配到每个服务器。当其中某个服务器发生第二到第7层的故障，BIGIP就把其从服务器队列中拿出，不参加下一次的用户请求的分配，直到其恢复正常。
优先权(Priority):给所有服务器分组，给每个组定义优先权，BIGIP用户的请求，分配给优先级最高的服务器组（在同一组内，采用轮询或比率算法，分配用户的请求）；当最高优先级中所有服务器出现故障，BIGIP才将请求送给次优先级的服务器组。这种方式，实际为用户提供一种热备份的方式。
2.动态调度

最少的连接方式(LeastConnection):传递新的连接给那些进行最少连接处理的服务器。当其中某个服务器发生第二到第7层的故障，BIGIP就把其从服务器队列中拿出，不参加下一次的用户请求的分配，直到其恢复正常。
最快模式(Fastest):传递连接给那些响应最快的服务器。当其中某个服务器发生第二到第7层的故障，BIGIP就把其从服务器队列中拿出，不参加下一次的用户请求的分配，直到其恢复正常。
观察模式(Observed):连接数目和响应时间以这两项的最佳平衡为依据为新的请求选择服务器。当其中某个服务器发生第二到第7层的故障，BIGIP就把其从服务器队列中拿出，不参加下一次的用户请求的分配，直到其恢复正常。
预测模式(Predictive):BIGIP利用收集到的服务器当前的性能指标，进行预测分析，选择一台服务器在下一个时间片内，其性能将达到最佳的服务器相应用户的请求。(被BIGIP进行检测)
动态性能分配(DynamicRatio-APM):BIGIP收集到的应用程序和应用服务器的各项性能参数，动态调整流量分配。
动态服务器补充(DynamicServerAct):当主服务器群中因故障导致数量减少时，动态地将备份服务器补充至主服务器群。
服务质量(QoS):按不同的优先级对数据流进行分配。
服务类型(ToS):按不同的服务类型（在Type of Field中标识）对数据流进行分配。
规则模式:针对不同的数据流设置导向规则，用户可自行编辑流量分配规则，BIGIP利用这些规则对通过的数据流实施导向控制。
1.4 性能指标

# 此处为官方摘取，都是理论值，生产环境的数值没有实际应用没办法给出准确数值。
Alt text

1.5 运行机制

Alt text

1.6 产品列表

F5 BIG-IP LTM 1600 配置： 　售价：16w区间 　处理器：单CPU 　基本内存：4GB 　硬盘：500GB 　端口：4个千兆端口,2个可选千兆光纤端口
F5 BIG-LTM-2000S 配置： 　售价：24w区间 　处理器：Intel双核处理器 　基本内存：8GB内存 　硬盘：500GB硬盘 　端口：8个千兆以太网CU端口，包含2000TPS硬件SSL（最大2000TPS，4 Gbps批量加密）
F5 BIG-IP LTM 3900 配置: 　售价：30w区间 　处理器：单CPU 　基本内存：8GB 　硬盘：500GB 　端口：8个千兆端口，4个可选千兆光纤端口
2.软件:

2.1 什么是LVS？

LVS:是Linux Virtual Server的简称，也就是Linux虚拟服务器, 是一个由章文嵩博士发起的自由软件项目。现在已经嵌入到内核是内核标准的一部分，是基于软件功能实现的一种开源负载均衡软件。
2.2 优势

配置简单
工作于内核
稳定
适用大规模场景
无流量产生
开源软件
多种模式
开销较小
性能接近于硬件
2.3 调度方法

1.静态调度

rr（Round Robin）:轮询调度，轮叫调度 轮询调度算法的原理是每一次把来自用户的请求轮流分配给内部中的服务器，从1开始，直到N(内部服务器个数)，然后重新开始循环。算法的优点是其简洁性，它无需记录当前所有连接的状态，所以它是一种无状态调度.

wrr：weight,加权（以权重之间的比例实现在各主机之间进行调度） 由于每台服务器的配置、安装的业务应用等不同，其处理能力会不一样。所以，我们根据服务器的不同处理能力，给每个服务器分配不同的权值，使其能够接受相应权值数的服务请求。

sh:source hashing,源地址散列。主要实现会话绑定，能够将此前建立的session信息保留了 源地址散列调度算法正好与目标地址散列调度算法相反，它根据请求的源IP地址，作为散列键（Hash Key）从静态分配的散列表找出对应的服务器，若该服务器是可用的并且没有超负荷，将请求发送到该服务器，否则返回空。它采用的散列函数与目标地址散列调度算法的相同。它的算法流程与目标地址散列调度算法的基本相似，除了将请求的目标IP地址换成请求的源IP地址，所以这里不一个一个叙述。

dh:Destination hashing:目标地址散列。把同一个IP地址的请求，发送给同一个server。 目标地址散列调度算法也是针对目标IP地址的负载均衡，它是一种静态映射算法，通过一个散列（Hash）函数将一个目标IP地址映射到一台服务器。目标地址散列调度算法先根据请求的目标IP地址，作为散列键（Hash Key）从静态分配的散列表找出对应的服务器，若该服务器是可用的且未超载，将请求发送到该服务器，否则返回空。

2.动态调度

lc（Least-Connection）：最少连接 最少连接调度算法是把新的连接请求分配到当前连接数最小的服务器，最小连接调度是一种动态调度短算法，它通过服务器当前所活跃的连接数来估计服务器的负载均衡，调度器需要记录各个服务器已建立连接的数目，当一个请求被调度到某台服务器，其连接数加1，当连接中止或超时，其连接数减一，在系统实现时，我们也引入当服务器的权值为0时，表示该服务器不可用而不被调度。 简单算法：active*256+inactive(谁的小，挑谁)

wlc(Weighted Least-Connection Scheduling)：加权最少连接。 加权最小连接调度算法是最小连接调度的超集，各个服务器用相应的权值表示其处理性能。服务器的缺省权值为1，系统管理员可以动态地设置服务器的权限，加权最小连接调度在调度新连接时尽可能使服务器的已建立连接数和其权值成比例。 简单算法：（active*256+inactive）/weight[（活动的连接数+1）/除以权重]（谁的小，挑谁）

sed(Shortest Expected Delay)：最短期望延迟 基于wlc算法 简单算法：（active+1)256/weight [(活动的连接数+1)256/除以权重]

nq（never queue）:永不排队（改进的sed） 无需队列，如果有台realserver的连接数＝0就直接分配过去,不需要在进行sed运算。

LBLC（Locality-Based Least Connection）：基于局部性的最少连接 基于局部性的最少连接算法是针对请求报文的目标IP地址的负载均衡调度，不签主要用于Cache集群系统，因为Cache集群中客户请求报文的布标IP地址是变化的，这里假设任何后端服务器都可以处理任何请求，算法的设计目标在服务器的负载基本平衡的情况下，将相同的目标IP地址的请求调度到同一个台服务器，来提高个太服务器的访问局部性和主存Cache命中率，从而调整整个集群系统的处理能力。 基于局部性的最少连接调度算法根据请求的目标IP地址找出该目标IP地址最近使用的RealServer，若该Real Server是可用的且没有超载，将请求发送到该服务器；若服务器不存在，或者该服务器超载且有服务器处于一半的工作负载，则用“最少链接”的原则选出一个可用的服务器，将请求发送到该服务器。

LBLCR（Locality-Based Least Connections withReplication）：带复制的基于局部性最少链接 带复制的基于局部性最少链接调度算法也是针对目标IP地址的负载均衡，该算法根据请求的目标IP地址找出该目标IP地址对应的服务器组，按“最小连接”原则从服务器组中选出一台服务器，若服务器没有超载，将请求发送到该服务器；若服务器超载，则按“最小连接”原则从这个集群中选出一台服务器，将该服务器加入到服务器组中，将请求发送到该服务器。同时，当该服务器组有一段时间没有被修改，将最忙的服务器从服务器组中删除，以降低复制的程度。

2.4 性能指标

# 此处性能指标不完全准确，LVS并发和处理能力主要依赖于服务器自身的硬件配置。
Alt text

2.5 运行机制

# 此处给出的为最常用的DR模型运行原理
Alt text

三、综合分析

 功能

LVS：配置简单,不会出现过多的认为错误,这是优点也是缺点,功能太单一。

F5：功能丰富,可以支持多种扩展模块,有完善的Web管理界面和Shell命令接口。

 性能

LVS：在同软件级别的负载均衡设备性能最好,也是最稳定的.但是依赖于服务器本身的运算能力。

F5：通过专门的交换芯片实现的(类似有了专门的图像处理芯片,就可以省去大量的CPU对图像处理的运算),这样他的性能就不会很依赖于主机的操作系统的处理能力,性能稳定。

 维护

LVS：是一款开源软件,都是开源社区人员在维护,无相关的技术支持,出了问题需要自己去摸索或等待官方修复Bug。

F5：Web界面和Shell命令接口便于运维人员管理,商业解决方案有专业的维护团队提供有偿服务进行维护和售后。

 HA

LVS：自身无法实现高可用功能,依赖于Keepalived来实现高可用的主机切换,可能会产生脑裂等资源抢占问题。

F5：自身有完备的高可用机制,并有双冗余电源保障不会因为电源问题宕机,并可实现毫秒级切换。

 LB

LVS：基于4层做Load Balance,没有多余流量产生,不能对7层进行Load Balance。

F5：基于4/7层进行Load Balance,根据根据业务需要进行选择。

 算法

LVS：有10种调度算法,都是基于4层的调度,有静态和动态两种调度。

F5：有12种调度算法,有4层和7层的调度,有静态和动态两种(也可以说是两种半,个别算法可以说达到了智能调度)

 安全

LVS: 需要暴露过多的网络IP在网络入口,可能会受到各方面“恶性”或"无意"的攻击,需要了解一定的网络知识。
F5: 没有多余的IP入口,自身还有防火墙机制,增加额外的安全保护,防御普通网络攻击。

 成本

LVS：LVS是一款开源负载均衡软件,没有商业开销,都是免费使用的,相对比F5成本低廉。

F5：商业版本的硬件负载均衡提供商价格在15-30w之间,设备和售后支持价格昂贵。

 应用

LVS：适用于大并发和大规模服务器的场景,对负载均衡的性能要求较高,小规模场景不如Nginx、Haproxy更合适。

F5：适用于各种场景,对高可用性和稳定性要求较高业务的场景更适用。

 其他

F5: 自身健康监测,SSL加速(内置芯片),集中管理,流量检查。
LVS: 无