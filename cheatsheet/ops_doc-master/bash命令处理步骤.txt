bash命令处理的12个步骤；
                               +-------------+           单引号
    |------------------------->|             |--------------------------|
    |  ----------------------->| 1.分隔成记号|---- ---------------|     |
    |  |   ------------------->|             |      双引号        |     |
    |  |   |                   +-------------+                    |     |
    |  |   |                          ||                          |     |
    |  |   |读取下一个命令            \/                          |     |
    |  |   |     +-------------------------------------------+    |     |
    |  |   |     |                    2.                     |    |     |
    |  |   ------|              检验第一个记号               |    |     |
    |  |         |开放的关键字                    其他关键字 |    |     |
    |  |         |               非关键字                    |    |     |
    |  |         +-------------------------------------------+    |     |
    |  |                              ||                          |     |
    |  |                              \/                          |     |
    |  |            +-----------------------------+               |     |
    |  |  扩展别名  |           3. 检验第一个记号 |               |     |
    |  |------------|  别名                       |               |     |
    |               |              不是别名       |               |     |
    |               +-----------------------------+               |     |
    |                                 ||                          |     |
    |                                 \/                          |     |
    |                           +--------------+                  |     |
    |                           | 4.大括号扩展 |                  |     |
    |                           +--------------+                  |     |
    |                                 ||                          |     |
    |                                 \/                          |     |
    |                           +--------------+                  |     |
    |                           | 5.~符号扩展  |                  |     |
    |                           +--------------+                  |     |
    |                                 ||                          |     |
    |                                 \/                          |     |
    |                           +--------------+       双引号     |     |
    |                           |  6.参数扩展  |<-----------------|     |
    |                           +--------------+                        |
    |                                 ||                                |
    |                                 \/                                |
    |                    +------------------------------+               |
    |                    |  7.命令替换(嵌套命令行处理)  |               |
    |                    +------------------------------+               |
    |                                 ||                                |
    |                                 \/                                |
    |                           +--------------+      双引号            |
    |                           |  8.算术扩展  |------------------|     |
    |                           +--------------+                  |     |
    |                                 ||                          |     |
    |                                 \/                          |     |
    |                           +--------------+                  |     |
    |                           |  9.单词分割  |                  |     |
    |                           +--------------+                  |     |
    |                                 ||                          |     |
    |                                 \/                          |     |
    |                           +--------------+                  |     |
    |                           | 10.路径名扩展|                  |     |
    |                           +--------------+                  |     |
    |                                 ||                          |     |
    |                                 \/                          |     |
    |               +----------------------------------------+    |     |
    |               | 11.命令查寻：函数，内置命令，可执行文件|<---|-----|
    |               +----------------------------------------+
    |                                 ||
    |                                 \/
    |将参数带入下一个命令        +-------------+
    |----------eval--------------| 12.运行命令 |
                                 +-------------+
                     
                     
单词 (word) ： 一串字符构成一个单词, 也叫token
name (identifier) ：仅有字母、数字、下划线构成， 而且由字母或者下划线开头的word叫name, 也叫标识符(identifier)
元字符 (metacharacter) ： | & ; ( ) < > space tab (这些字符没有被引号引起来时, 可以用来分割单词)
双引号引用中除了 $ 、 ` 、 \ 、 ! , 其他特殊字符的意义都被屏蔽   
1、将命令行分成由固定元字符集分隔的记号；
    SPACE, TAB, NEWLINE, ; , (, ), <, >, |, &
    记号类型包括单词，关键字，I/O重定向符和分号。
2、检测每个命令的第一个记号，查看是否为不带引号或反斜线的关键字。
    如果是一个开放的关键字，如if和其他控制结构起始字符串，function，{或(，则命令实际上为一复合命令。
    shell在内部对复合命令进行处理，读取下一个命令，并重复这一过程。
    如果关键字不是复合命令起始字符串(如then等一个控制结构中间出现的关键字)，则给出语法错误信号。
3、依据别名列表检查每个命令的第一个关键字；
    如果找到相应匹配，则替换其别名定义，并退回第一步;否则进入第4步。该策略允许递归别名，还允许定义关键字别名。
    如alias procedure=function
4、执行大括号扩展，例如a{b,c}变成ab ac
5、如果~位于单词开头，用$HOME替换~。
    使用usr的主目录替换~user。
6、对任何以符号$开头的表达式执行参数(变量)替换;
7、对形式$(string)的表达式进行命令替换；
    这里是嵌套的命令行处理。
8、计算形式为$((string))的算术表达式；
9、把行的参数，命令和算术替换部分再次分成单词，这次它使用$IFS中的字符做分割符而不是步骤1的元字符集；
10、对出现*, ?, [ / ]对执行路径名扩展，也称为通配符扩展；
11、按命令优先级表(跳过别名)，进行命令查寻；
12、设置完I/O重定向和其他操作后执行该命令。
    
二、关于引用
    1、单引号跳过了前10个步骤，不能在单引号里放单引号
    2、双引号跳过了步骤1~5，步骤9~10，也就是说，只处理6~8个步骤。
      也就是说，双引号忽略了管道字符，别名，~替换，通配符扩展，和通过分隔符分裂成单词。
      双引号里的单引号没有作用，但双引号允许参数替换，命令替换和算术表达式求值。
      可以在双引号里包含双引号，方式是加上转义符"\"，还必须转义$, `, \。
三、eval的作用；
    eval的作用是再次执行命令行处理，也就是说，对一个命令行，执行两次命令行处理。
http://www.cnblogs.com/f-ck-need-u/p/7426371.html



以执行以下命令为例：
echo -e "some files:" ~/i* "\nThe date:$(date +%F)\n$name's age is $((a+4))" >/tmp/a.log
假设在执行该命令前，已赋值变量"name=longshuai"和"a=24"，于是重定向到/tmp/a.log中的结果为：
some files: /root/inotify.sh /root/inotify.sh.ori
The date:2017-08-14
longshuai's age is 28

(1).读取输入的命令行。
(2).解析引用并分割命令行为各个单词，各单词称为token。其中重定向所在的token会被保存下来，
    直到扩展步骤(5)结束后才进行相关处理，如进行扩展、截断文件等。
    
    shell中有3种引用方式：反斜线引用、单引号引用和双引号引用。
      反斜线转义：使得元字符变为普通的字面字符。但这只能对反斜线后一个字符进行转义。
      单引号引用：单引号内的所有字符全部变为字面符号符号。
      双引号引用：使双引号内所有字符变为字面符号，但"\"、"$"、"`"(反引号)除外，如果开启了"!"引用历史命令时，则感叹号也除外。
    
    解析引用后，于是就可以将命令行进行单词分割，分割后的每一部分都称为一个token。分隔时，不仅分割单个命令，
    还分割命令列表，所以分隔符包括：空格、tab、分号、管道符号、&、&&、||、重定向符号、圆括号等。
    于是上述命令分割为以下几个token：
    <echo> <-e> <"some files:"> <~/i*> <"\n><The date:$(date +%F)><\n><$name's age is $((a+4))"> <>/tmp/a.log>
    如果分割时发现了管道符号，或者是命令列表等组合了多个命令的情况，则每个命令都的token都相互独立。
(3).检查命令行结构。主要检查是否有命令列表、是否有shell编程结构的命令，如if判断命令、循环结构的for/while/select/until，这些命令属于保留关键字，需要特殊处理。
(4).对第一个token进行别名扩展。如果检查出它是别名，则扩展后回到(2)再次进行token分解过程。
(5).进行各种扩展。扩展顺序为：大括号扩展；波浪号扩展；参数、变量和命令替换、算术扩展(如果系统支持，此步还进行进程替换)；单词拆分；文件名扩展。
   不同引号的引用方式，将改变扩展的起始步骤，正如上图所画，
     没有任何引号时将从头到尾全部扩展，
     使用单引号时将完全不会进行任何扩展，
     使用双引号时将从变量替换开始继续扩展。
  ①大括号扩展：如/tmp/{a,b}.log扩展为/tmp/a.log和/tmp/b.log。
  ②波浪号扩展：扩展为家目录。如root用户下的~/.ssh扩展为/root/.ssh。
  ③变量扩展：即操作和替换变量值。如$a替换为它的值24，${name:-longshuai}替换为longshuai。
  ④命令替换：此过程将执行命令替换中的命令，并将结果替换到token的对应位置处。
  ⑤进程替换：将进程的执行结果替换到对应位置。类似于命令替换。替换格式为"<(cmd_list)"和">(cmd_list)"，例如"cat <(cat /etc/hosts)"。redhat系列应该都支持进程替换。
  ⑥算术扩展：计算算术值，并将计算结果替换到对应位置处。例如$((a+4))替换为28。
  经过以上几种扩展后，得到如下结果：
    <echo> <-e> <"some files:"> <root/i*> <"\n><The date:2018-03-14><\n><longshuai's age is 28"> <>/tmp/a.log>
  ⑦单词拆分：扫描变量扩展、命令替换和算术扩展的结果，对非引号内的结果按照$IFS的值对这些结果进行单词分割。
  注意，如果没有进行扩展，或者扩展结果使用引号包围了，则不会进行此步的单词拆分。
  默认情况下，$IFS值为"   \t\n"，所以扩展结果中每遇到空格、制表符、换行符都将被分割为两个单词。
  ⑧文件名扩展：对每个token进行搜索，将搜索"*"、"?"和"["符号，搜索到了将进行文件名扩展。例如将上面的"/root/i*"扩展为/root/igmpproxy-0.1 /root/igmpproxy-0.1.tar.gz 。
(6).引号去除。经过上面的过程，该扩展的都扩展了，不需要的引号在此步就可以去掉了。
所以得到如下结果。
    <echo> <-e> <some files:> <root/i*> <\n><The date:2018-03-14><\n><longshuai's age is 28> <>/tmp/a.log>
(7).搜索和执行命令。
  单词分割后，复杂的命令行将由各个简单命令结构组成。于是可以搜索每个简单命令结构的第一个token中的命令，同时还带有一系列命令选项。例如上面的"echo"和"-e"。
  如果命令中不含任何斜杠：
  ①则先判断是否有此名称的shell function存在，如果有则调用它，否则进行下一步搜索。
  ②判断该命令是否为bash内置命令，如果是则执行它，否则进行下一步搜索。
  ③从$PATH的路径下搜索该命令，如果搜索到了，则执行，否则报错。
  如果命令中包含一个或多个斜杠，则进行相对路径扩展、绝对路径查找，找到了则执行，否则报错。
(8).返回退出状态码。

eval
  a=24;name='long$a' # 注意，使用的是单引号，禁止$a被扩展
  echo $name
  eval echo $name
  
  a=b
  b=haha
  eval echo \$$a