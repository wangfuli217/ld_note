!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACLOCAL	Makefile	/^ACLOCAL = ${SHELL} \/yangyazhou\/Reading-and-comprehense-memcached-1.4.22\/memcached-1.4\/missing --run aclocal-1.11$/;"	m
ACLOCAL	doc/Makefile	/^ACLOCAL = ${SHELL} \/yangyazhou\/Reading-and-comprehense-memcached-1.4.22\/memcached-1.4\/missing --run aclocal-1.11$/;"	m
ACLOCAL_M4	Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	doc/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ADD_STAT	memcached.h	/^typedef void (*ADD_STAT)(const char *key, const uint16_t klen,$/;"	t
AMTAR	Makefile	/^AMTAR = ${SHELL} \/yangyazhou\/Reading-and-comprehense-memcached-1.4.22\/memcached-1.4\/missing --run tar$/;"	m
AMTAR	doc/Makefile	/^AMTAR = ${SHELL} \/yangyazhou\/Reading-and-comprehense-memcached-1.4.22\/memcached-1.4\/missing --run tar$/;"	m
AM_RECURSIVE_TARGETS	Makefile	/^AM_RECURSIVE_TARGETS = $(RECURSIVE_TARGETS:-recursive=) \\$/;"	m
APPEND_NUM_FMT_STAT	memcached.h	121;"	d
APPEND_NUM_STAT	memcached.h	127;"	d
APPEND_STAT	memcached.h	116;"	d
AUTOCONF	Makefile	/^AUTOCONF = ${SHELL} \/yangyazhou\/Reading-and-comprehense-memcached-1.4.22\/memcached-1.4\/missing --run autoconf$/;"	m
AUTOCONF	doc/Makefile	/^AUTOCONF = ${SHELL} \/yangyazhou\/Reading-and-comprehense-memcached-1.4.22\/memcached-1.4\/missing --run autoconf$/;"	m
AUTOHEADER	Makefile	/^AUTOHEADER = ${SHELL} \/yangyazhou\/Reading-and-comprehense-memcached-1.4.22\/memcached-1.4\/missing --run autoheader$/;"	m
AUTOHEADER	doc/Makefile	/^AUTOHEADER = ${SHELL} \/yangyazhou\/Reading-and-comprehense-memcached-1.4.22\/memcached-1.4\/missing --run autoheader$/;"	m
AUTOMAKE	Makefile	/^AUTOMAKE = ${SHELL} \/yangyazhou\/Reading-and-comprehense-memcached-1.4.22\/memcached-1.4\/missing --run automake-1.11$/;"	m
AUTOMAKE	doc/Makefile	/^AUTOMAKE = ${SHELL} \/yangyazhou\/Reading-and-comprehense-memcached-1.4.22\/memcached-1.4\/missing --run automake-1.11$/;"	m
AWK	Makefile	/^AWK = gawk$/;"	m
AWK	doc/Makefile	/^AWK = gawk$/;"	m
BIG_CONSTANT	murmur3_hash.c	25;"	d	file:
BIG_CONSTANT	murmur3_hash.c	40;"	d	file:
BIN_PKT_HDR_WORDS	memcached.h	61;"	d
BUILT_SOURCES	Makefile	/^BUILT_SOURCES = $(am__append_5)$/;"	m
BUILT_SOURCES	doc/Makefile	/^BUILT_SOURCES = $(am__append_1)$/;"	m
CACHE_H	cache.h	3;"	d
CC	Makefile	/^CC = gcc -std=gnu99$/;"	m
CC	doc/Makefile	/^CC = gcc -std=gnu99$/;"	m
CCDEPMODE	Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	doc/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	Makefile	/^CCLD = $(CC)$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g -O2 -pthread -pthread -Wall -Werror -pedantic -Wmissing-prototypes -Wmissing-declarations -Wredundant-decls$/;"	m
CFLAGS	doc/Makefile	/^CFLAGS = -g -O2 -pthread -pthread -Wall -Werror -pedantic -Wmissing-prototypes -Wmissing-declarations -Wredundant-decls$/;"	m
CHUNK_ALIGN_BYTES	memcached.h	81;"	d
CLEANFILES	Makefile	/^CLEANFILES = $(am__append_6) $(am__append_11)$/;"	m
COMMAND_TOKEN	memcached.c	2539;"	d	file:
COMPILE	Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
CONFIG_CLEAN_FILES	Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	doc/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	doc/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	Makefile	/^CONFIG_HEADER = config.h$/;"	m
CONFIG_HEADER	doc/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CPP	Makefile	/^CPP = gcc -E$/;"	m
CPP	doc/Makefile	/^CPP = gcc -E$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS = -I\/usr\/local\/libevent\/\/include $/;"	m
CPPFLAGS	doc/Makefile	/^CPPFLAGS = -I\/usr\/local\/libevent\/\/include $/;"	m
CQ	thread.c	/^typedef struct conn_queue CQ;$/;"	t	typeref:struct:conn_queue	file:
CQ_ITEM	thread.c	/^typedef struct conn_queue_item CQ_ITEM;$/;"	t	typeref:struct:conn_queue_item	file:
CRAWLER_BADCLASS	items.h	/^    CRAWLER_OK=0, CRAWLER_RUNNING, CRAWLER_BADCLASS$/;"	e	enum:crawler_result_type
CRAWLER_OK	items.h	/^    CRAWLER_OK=0, CRAWLER_RUNNING, CRAWLER_BADCLASS$/;"	e	enum:crawler_result_type
CRAWLER_RUNNING	items.h	/^    CRAWLER_OK=0, CRAWLER_RUNNING, CRAWLER_BADCLASS$/;"	e	enum:crawler_result_type
CTAGS	Makefile	/^CTAGS = ctags$/;"	m
CYGPATH_W	Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	doc/Makefile	/^CYGPATH_W = echo$/;"	m
DATA_BUFFER_SIZE	memcached.h	32;"	d
DEBUG_REFCNT	items.c	85;"	d	file:
DEFAULT_HASH_BULK_MOVE	assoc.c	237;"	d	file:
DEFAULT_INCLUDES	Makefile	/^DEFAULT_INCLUDES = -I.$/;"	m
DEFAULT_SLAB_BULK_CHECK	slabs.c	579;"	d	file:
DEFS	Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	doc/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DELTA_ITEM_CAS_MISMATCH	memcached.h	/^    OK, NON_NUMERIC, EOM, DELTA_ITEM_NOT_FOUND, DELTA_ITEM_CAS_MISMATCH$/;"	e	enum:delta_result_type
DELTA_ITEM_NOT_FOUND	memcached.h	/^    OK, NON_NUMERIC, EOM, DELTA_ITEM_NOT_FOUND, DELTA_ITEM_CAS_MISMATCH$/;"	e	enum:delta_result_type
DEPDIR	Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	doc/Makefile	/^DEPDIR = .deps$/;"	m
DESTROY	t/lib/MemcachedTest.pm	/^sub DESTROY {$/;"	s
DISTFILES	Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	doc/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_ARCHIVES	Makefile	/^DIST_ARCHIVES = $(distdir).tar.gz$/;"	m
DIST_COMMON	Makefile	/^DIST_COMMON = $(am__configure_deps) $(pkginclude_HEADERS) \\$/;"	m
DIST_COMMON	doc/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(srcdir)\/Makefile.in$/;"	m
DIST_DIRS	Makefile	/^DIST_DIRS = scripts$/;"	m
DIST_SOURCES	Makefile	/^DIST_SOURCES = $(am__memcached_SOURCES_DIST) \\$/;"	m
DIST_SOURCES	doc/Makefile	/^DIST_SOURCES =$/;"	m
DIST_SUBDIRS	Makefile	/^DIST_SUBDIRS = $(SUBDIRS)$/;"	m
DTRACE	Makefile	/^DTRACE = $/;"	m
DTRACE	doc/Makefile	/^DTRACE = $/;"	m
DTRACEFLAGS	Makefile	/^DTRACEFLAGS = $/;"	m
DTRACEFLAGS	doc/Makefile	/^DTRACEFLAGS = $/;"	m
ECHO_C	Makefile	/^ECHO_C = $/;"	m
ECHO_C	doc/Makefile	/^ECHO_C = $/;"	m
ECHO_N	Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	doc/Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	Makefile	/^ECHO_T = $/;"	m
ECHO_T	doc/Makefile	/^ECHO_T = $/;"	m
EGREP	Makefile	/^EGREP = \/usr\/bin\/grep -E$/;"	m
EGREP	doc/Makefile	/^EGREP = \/usr\/bin\/grep -E$/;"	m
ENABLE_SASL	Makefile	/^ENABLE_SASL = $/;"	m
ENABLE_SASL	config.h	8;"	d
ENABLE_SASL	doc/Makefile	/^ENABLE_SASL = $/;"	m
ENDIAN_LITTLE	config.h	17;"	d
EOM	memcached.h	/^    OK, NON_NUMERIC, EOM, DELTA_ITEM_NOT_FOUND, DELTA_ITEM_CAS_MISMATCH$/;"	e	enum:delta_result_type
ETAGS	Makefile	/^ETAGS = etags$/;"	m
EXEEXT	Makefile	/^EXEEXT = $/;"	m
EXEEXT	doc/Makefile	/^EXEEXT = $/;"	m
EXISTS	memcached.h	/^    NOT_STORED=0, STORED, EXISTS, NOT_FOUND$/;"	e	enum:store_item_type
EXTRA_DIST	Makefile	/^EXTRA_DIST = doc scripts t memcached.spec memcached_dtrace.d version.m4 README.md$/;"	m
EXTRA_DIST	doc/Makefile	/^EXTRA_DIST = *.txt$/;"	m
FORCE_INLINE	murmur3_hash.c	19;"	d	file:
FORCE_INLINE	murmur3_hash.c	31;"	d	file:
GREP	Makefile	/^GREP = \/usr\/bin\/grep$/;"	m
GREP	doc/Makefile	/^GREP = \/usr\/bin\/grep$/;"	m
GZIP_ENV	Makefile	/^GZIP_ENV = --best$/;"	m
HASHPOWER_DEFAULT	memcached.h	64;"	d
HASH_BIG_ENDIAN	jenkins_hash.c	22;"	d	file:
HASH_BIG_ENDIAN	jenkins_hash.c	26;"	d	file:
HASH_BIG_ENDIAN	jenkins_hash.c	29;"	d	file:
HASH_H	hash.h	2;"	d
HASH_LITTLE_ENDIAN	jenkins_hash.c	21;"	d	file:
HASH_LITTLE_ENDIAN	jenkins_hash.c	25;"	d	file:
HASH_LITTLE_ENDIAN	jenkins_hash.c	28;"	d	file:
HAVE_ACCEPT4	config.h	20;"	d
HAVE_CLOCK_GETTIME	config.h	23;"	d
HAVE_GCC_ATOMICS	config.h	29;"	d
HAVE_INTTYPES_H	config.h	38;"	d
HAVE_MEMORY_H	config.h	44;"	d
HAVE_MLOCKALL	config.h	47;"	d
HAVE_SASL_CALLBACK_FT	config.h	50;"	d
HAVE_SASL_SASL_H	config.h	56;"	d
HAVE_SIGIGNORE	config.h	62;"	d
HAVE_STDBOOL_H	config.h	65;"	d
HAVE_STDINT_H	config.h	68;"	d
HAVE_STDLIB_H	config.h	71;"	d
HAVE_STRINGS_H	config.h	74;"	d
HAVE_STRING_H	config.h	77;"	d
HAVE_SYS_STAT_H	config.h	80;"	d
HAVE_SYS_TYPES_H	config.h	83;"	d
HAVE_UNISTD_H	config.h	89;"	d
HAVE__BOOL	config.h	92;"	d
HEADERS	Makefile	/^HEADERS = $(pkginclude_HEADERS)$/;"	m
INCR_MAX_STORAGE_LEN	memcached.h	30;"	d
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	doc/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	doc/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	doc/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	doc/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	doc/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	doc/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
IOV_LIST_HIGHWAT	memcached.h	56;"	d
IOV_LIST_INITIAL	memcached.h	48;"	d
IOV_MAX	memcached.c	54;"	d	file:
IS_UDP	memcached.h	208;"	d
ITEMS_PER_ALLOC	thread.c	18;"	d	file:
ITEM_CAS	memcached.h	417;"	d
ITEM_FETCHED	memcached.h	423;"	d
ITEM_LINKED	memcached.h	415;"	d
ITEM_LIST_HIGHWAT	memcached.h	55;"	d
ITEM_LIST_INITIAL	memcached.h	42;"	d
ITEM_LOCK_GLOBAL	memcached.h	/^    ITEM_LOCK_GLOBAL \/\/全局级别  $/;"	e	enum:item_lock_types
ITEM_LOCK_GRANULAR	memcached.h	/^    ITEM_LOCK_GRANULAR = 0, \/\/段级别  $/;"	e	enum:item_lock_types
ITEM_SLABBED	memcached.h	421;"	d
ITEM_UPDATE_INTERVAL	memcached.h	71;"	d
ITEM_data	memcached.h	104;"	d
ITEM_get_cas	memcached.h	89;"	d
ITEM_key	memcached.h	98;"	d
ITEM_ntotal	memcached.h	108;"	d
ITEM_set_cas	memcached.h	92;"	d
ITEM_suffix	memcached.h	101;"	d
ITERATIONS	testapp.c	122;"	d	file:
ITERATIONS	testapp.c	135;"	d	file:
JENKINS_HASH	hash.h	/^    JENKINS_HASH=0, MURMUR3_HASH$/;"	e	enum:hashfunc_type
JENKINS_HASH_H	jenkins_hash.h	2;"	d
KEY_MAX_LENGTH	memcached.h	27;"	d
KEY_TOKEN	memcached.c	2541;"	d	file:
LARGEST_ID	items.c	21;"	d	file:
LDFLAGS	Makefile	/^LDFLAGS = -L\/usr\/local\/libevent\/\/lib  -Wl,-rpath,\/usr\/local\/libevent\/\/lib$/;"	m
LDFLAGS	doc/Makefile	/^LDFLAGS = -L\/usr\/local\/libevent\/\/lib  -Wl,-rpath,\/usr\/local\/libevent\/\/lib$/;"	m
LIBEVENT_DISPATCHER_THREAD	memcached.h	/^} LIBEVENT_DISPATCHER_THREAD;$/;"	t	typeref:struct:__anon6
LIBEVENT_THREAD	memcached.h	/^} LIBEVENT_THREAD; \/\/static LIBEVENT_THREAD *threads;$/;"	t	typeref:struct:__anon5
LIBOBJS	Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	doc/Makefile	/^LIBOBJS = $/;"	m
LIBS	Makefile	/^LIBS = -levent -lsasl2 $/;"	m
LIBS	doc/Makefile	/^LIBS = -levent -lsasl2 $/;"	m
LINK	Makefile	/^LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@$/;"	m
LTLIBOBJS	Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	doc/Makefile	/^LTLIBOBJS = $/;"	m
MAKEINFO	Makefile	/^MAKEINFO = ${SHELL} \/yangyazhou\/Reading-and-comprehense-memcached-1.4.22\/memcached-1.4\/missing --run makeinfo$/;"	m
MAKEINFO	doc/Makefile	/^MAKEINFO = ${SHELL} \/yangyazhou\/Reading-and-comprehense-memcached-1.4.22\/memcached-1.4\/missing --run makeinfo$/;"	m
MANS	doc/Makefile	/^MANS = $(man_MANS)$/;"	m
MAX_ENTRY_LEN	sasl_defs.c	26;"	d	file:
MAX_NUMBER_OF_SLAB_CLASSES	memcached.h	82;"	d
MAX_SASL_MECH_LEN	sasl_defs.h	5;"	d
MAX_SENDBUF_SIZE	memcached.h	36;"	d
MAX_TOKENS	memcached.c	2543;"	d	file:
MAX_VERBOSITY_LEVEL	memcached.h	302;"	d
MEMCACHED_ASSOC_DELETE	trace.h	7;"	d
MEMCACHED_ASSOC_DELETE_ENABLED	trace.h	8;"	d
MEMCACHED_ASSOC_FIND	trace.h	9;"	d
MEMCACHED_ASSOC_FIND_ENABLED	trace.h	10;"	d
MEMCACHED_ASSOC_INSERT	trace.h	11;"	d
MEMCACHED_ASSOC_INSERT_ENABLED	trace.h	12;"	d
MEMCACHED_COMMAND_ADD	trace.h	13;"	d
MEMCACHED_COMMAND_ADD_ENABLED	trace.h	14;"	d
MEMCACHED_COMMAND_APPEND	trace.h	15;"	d
MEMCACHED_COMMAND_APPEND_ENABLED	trace.h	16;"	d
MEMCACHED_COMMAND_CAS	trace.h	17;"	d
MEMCACHED_COMMAND_CAS_ENABLED	trace.h	18;"	d
MEMCACHED_COMMAND_DECR	trace.h	19;"	d
MEMCACHED_COMMAND_DECR_ENABLED	trace.h	20;"	d
MEMCACHED_COMMAND_DELETE	trace.h	21;"	d
MEMCACHED_COMMAND_DELETE_ENABLED	trace.h	22;"	d
MEMCACHED_COMMAND_GET	trace.h	23;"	d
MEMCACHED_COMMAND_GET_ENABLED	trace.h	24;"	d
MEMCACHED_COMMAND_INCR	trace.h	27;"	d
MEMCACHED_COMMAND_INCR_ENABLED	trace.h	28;"	d
MEMCACHED_COMMAND_PREPEND	trace.h	29;"	d
MEMCACHED_COMMAND_PREPEND_ENABLED	trace.h	30;"	d
MEMCACHED_COMMAND_REPLACE	trace.h	31;"	d
MEMCACHED_COMMAND_REPLACE_ENABLED	trace.h	32;"	d
MEMCACHED_COMMAND_SET	trace.h	33;"	d
MEMCACHED_COMMAND_SET_ENABLED	trace.h	34;"	d
MEMCACHED_COMMAND_TOUCH	trace.h	25;"	d
MEMCACHED_COMMAND_TOUCH_ENABLED	trace.h	26;"	d
MEMCACHED_CONN_ALLOCATE	trace.h	35;"	d
MEMCACHED_CONN_ALLOCATE_ENABLED	trace.h	36;"	d
MEMCACHED_CONN_CREATE	trace.h	37;"	d
MEMCACHED_CONN_CREATE_ENABLED	trace.h	38;"	d
MEMCACHED_CONN_DESTROY	trace.h	39;"	d
MEMCACHED_CONN_DESTROY_ENABLED	trace.h	40;"	d
MEMCACHED_CONN_DISPATCH	trace.h	41;"	d
MEMCACHED_CONN_DISPATCH_ENABLED	trace.h	42;"	d
MEMCACHED_CONN_RELEASE	trace.h	43;"	d
MEMCACHED_CONN_RELEASE_ENABLED	trace.h	44;"	d
MEMCACHED_ITEM_LINK	trace.h	45;"	d
MEMCACHED_ITEM_LINK_ENABLED	trace.h	46;"	d
MEMCACHED_ITEM_REMOVE	trace.h	47;"	d
MEMCACHED_ITEM_REMOVE_ENABLED	trace.h	48;"	d
MEMCACHED_ITEM_REPLACE	trace.h	49;"	d
MEMCACHED_ITEM_REPLACE_ENABLED	trace.h	50;"	d
MEMCACHED_ITEM_UNLINK	trace.h	51;"	d
MEMCACHED_ITEM_UNLINK_ENABLED	trace.h	52;"	d
MEMCACHED_ITEM_UPDATE	trace.h	53;"	d
MEMCACHED_ITEM_UPDATE_ENABLED	trace.h	54;"	d
MEMCACHED_PROCESS_COMMAND_END	trace.h	55;"	d
MEMCACHED_PROCESS_COMMAND_END_ENABLED	trace.h	56;"	d
MEMCACHED_PROCESS_COMMAND_START	trace.h	57;"	d
MEMCACHED_PROCESS_COMMAND_START_ENABLED	trace.h	58;"	d
MEMCACHED_SLABS_ALLOCATE	trace.h	59;"	d
MEMCACHED_SLABS_ALLOCATE_ENABLED	trace.h	60;"	d
MEMCACHED_SLABS_ALLOCATE_FAILED	trace.h	61;"	d
MEMCACHED_SLABS_ALLOCATE_FAILED_ENABLED	trace.h	62;"	d
MEMCACHED_SLABS_FREE	trace.h	63;"	d
MEMCACHED_SLABS_FREE_ENABLED	trace.h	64;"	d
MEMCACHED_SLABS_SLABCLASS_ALLOCATE	trace.h	65;"	d
MEMCACHED_SLABS_SLABCLASS_ALLOCATE_ENABLED	trace.h	66;"	d
MEMCACHED_SLABS_SLABCLASS_ALLOCATE_FAILED	trace.h	67;"	d
MEMCACHED_SLABS_SLABCLASS_ALLOCATE_FAILED_ENABLED	trace.h	68;"	d
MIN_BIN_PKT_LENGTH	memcached.h	60;"	d
MKDIR_P	Makefile	/^MKDIR_P = \/usr\/bin\/mkdir -p$/;"	m
MKDIR_P	doc/Makefile	/^MKDIR_P = \/usr\/bin\/mkdir -p$/;"	m
MOSTLYCLEANFILES	Makefile	/^MOSTLYCLEANFILES = *.gcov *.gcno *.gcda *.tcov$/;"	m
MOVE_BUSY	slabs.c	/^    MOVE_BUSY, \/\/此时还有另外一个worker线程在归还这个item  $/;"	e	enum:move_status	file:
MOVE_DONE	slabs.c	/^    MOVE_DONE, \/\/这个item处理成功  $/;"	e	enum:move_status	file:
MOVE_LOCKED	slabs.c	/^    MOVE_LOCKED$/;"	e	enum:move_status	file:
MOVE_PASS	slabs.c	/^    MOVE_PASS=0, $/;"	e	enum:move_status	file:
MSG_LIST_HIGHWAT	memcached.h	57;"	d
MSG_LIST_INITIAL	memcached.h	51;"	d
MURMUR3_HASH	hash.h	/^    JENKINS_HASH=0, MURMUR3_HASH$/;"	e	enum:hashfunc_type
MURMURHASH3_H	murmur3_hash.h	6;"	d
Memcached::Handle	t/lib/MemcachedTest.pm	/^package Memcached::Handle;$/;"	p
MemcachedTest	t/lib/MemcachedTest.pm	/^package MemcachedTest;$/;"	p
MurmurHash3_x86_32	murmur3_hash.c	/^uint32_t MurmurHash3_x86_32 ( const void * key, size_t length)$/;"	f
NDEBUG	testapp.c	2;"	d	file:
NON_NUMERIC	memcached.h	/^    OK, NON_NUMERIC, EOM, DELTA_ITEM_NOT_FOUND, DELTA_ITEM_CAS_MISMATCH$/;"	e	enum:delta_result_type
NORMAL_INSTALL	Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	doc/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	doc/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NOT_FOUND	memcached.h	/^    NOT_STORED=0, STORED, EXISTS, NOT_FOUND$/;"	e	enum:store_item_type
NOT_STORED	memcached.h	/^    NOT_STORED=0, STORED, EXISTS, NOT_FOUND$/;"	e	enum:store_item_type
NREAD_ADD	memcached.h	211;"	d
NREAD_APPEND	memcached.h	214;"	d
NREAD_CAS	memcached.h	216;"	d
NREAD_PREPEND	memcached.h	215;"	d
NREAD_REPLACE	memcached.h	213;"	d
NREAD_SET	memcached.h	212;"	d
NROFF	doc/Makefile	/^NROFF = nroff$/;"	m
OBJEXT	Makefile	/^OBJEXT = o$/;"	m
OBJEXT	doc/Makefile	/^OBJEXT = o$/;"	m
OK	memcached.h	/^    OK, NON_NUMERIC, EOM, DELTA_ITEM_NOT_FOUND, DELTA_ITEM_CAS_MISMATCH$/;"	e	enum:delta_result_type
PACKAGE	Makefile	/^PACKAGE = memcached$/;"	m
PACKAGE	config.h	101;"	d
PACKAGE	doc/Makefile	/^PACKAGE = memcached$/;"	m
PACKAGE_BUGREPORT	Makefile	/^PACKAGE_BUGREPORT = memcached@googlegroups.com$/;"	m
PACKAGE_BUGREPORT	config.h	104;"	d
PACKAGE_BUGREPORT	doc/Makefile	/^PACKAGE_BUGREPORT = memcached@googlegroups.com$/;"	m
PACKAGE_NAME	Makefile	/^PACKAGE_NAME = memcached$/;"	m
PACKAGE_NAME	config.h	107;"	d
PACKAGE_NAME	doc/Makefile	/^PACKAGE_NAME = memcached$/;"	m
PACKAGE_STRING	Makefile	/^PACKAGE_STRING = memcached 1.4.21$/;"	m
PACKAGE_STRING	config.h	110;"	d
PACKAGE_STRING	doc/Makefile	/^PACKAGE_STRING = memcached 1.4.21$/;"	m
PACKAGE_TARNAME	Makefile	/^PACKAGE_TARNAME = memcached$/;"	m
PACKAGE_TARNAME	config.h	113;"	d
PACKAGE_TARNAME	doc/Makefile	/^PACKAGE_TARNAME = memcached$/;"	m
PACKAGE_URL	Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	config.h	116;"	d
PACKAGE_URL	doc/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_VERSION	Makefile	/^PACKAGE_VERSION = 1.4.21$/;"	m
PACKAGE_VERSION	config.h	119;"	d
PACKAGE_VERSION	doc/Makefile	/^PACKAGE_VERSION = 1.4.21$/;"	m
PATH_SEPARATOR	Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	doc/Makefile	/^PATH_SEPARATOR = :$/;"	m
POST_INSTALL	Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	doc/Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	doc/Makefile	/^POST_UNINSTALL = :$/;"	m
POWER_LARGEST	memcached.h	80;"	d
POWER_SMALLEST	memcached.h	79;"	d
PREFIX_HASH_SIZE	stats.c	42;"	d	file:
PREFIX_STATS	stats.c	/^typedef struct _prefix_stats PREFIX_STATS;$/;"	t	typeref:struct:_prefix_stats	file:
PRE_INSTALL	Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	doc/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	doc/Makefile	/^PRE_UNINSTALL = :$/;"	m
PROFILER	Makefile	/^PROFILER = \/usr\/bin\/gcov$/;"	m
PROFILER	doc/Makefile	/^PROFILER = \/usr\/bin\/gcov$/;"	m
PROFILER_FLAGS	Makefile	/^PROFILER_FLAGS = -fprofile-arcs -ftest-coverage$/;"	m
PROFILER_FLAGS	doc/Makefile	/^PROFILER_FLAGS = -fprofile-arcs -ftest-coverage$/;"	m
PROFILER_LDFLAGS	Makefile	/^PROFILER_LDFLAGS = -lgcov$/;"	m
PROFILER_LDFLAGS	doc/Makefile	/^PROFILER_LDFLAGS = -lgcov$/;"	m
PROGRAMS	Makefile	/^PROGRAMS = $(bin_PROGRAMS) $(noinst_PROGRAMS)$/;"	m
PROTOCOL_BINARY_CMD_ADD	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_ADD = 0x02,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_ADDQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_ADDQ = 0x12,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_APPEND	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_APPEND = 0x0e,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_APPENDQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_APPENDQ = 0x19,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_DECREMENT	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_DECREMENT = 0x06,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_DECREMENTQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_DECREMENTQ = 0x16,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_DELETE	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_DELETE = 0x04,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_DELETEQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_DELETEQ = 0x14,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_FLUSH	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_FLUSH = 0x08,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_FLUSHQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_FLUSHQ = 0x18,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_GAT	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_GAT = 0x1d,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_GATK	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_GATK = 0x23,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_GATKQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_GATKQ = 0x24,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_GATQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_GATQ = 0x1e,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_GET	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_GET = 0x00,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_GETK	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_GETK = 0x0c,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_GETKQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_GETKQ = 0x0d,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_GETQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_GETQ = 0x09,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_INCREMENT	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_INCREMENT = 0x05,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_INCREMENTQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_INCREMENTQ = 0x15,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_NOOP	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_NOOP = 0x0a,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_PREPEND	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_PREPEND = 0x0f,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_PREPENDQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_PREPENDQ = 0x1a,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_QUIT	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_QUIT = 0x07,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_QUITQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_QUITQ = 0x17,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_RAPPEND	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RAPPEND   = 0x33,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_RAPPENDQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RAPPENDQ  = 0x34,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_RDECR	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RDECR     = 0x3b,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_RDECRQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RDECRQ    = 0x3c$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_RDELETE	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RDELETE   = 0x37,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_RDELETEQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RDELETEQ  = 0x38,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_REPLACE	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_REPLACE = 0x03,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_REPLACEQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_REPLACEQ = 0x13,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_RGET	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RGET      = 0x30,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_RINCR	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RINCR     = 0x39,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_RINCRQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RINCRQ    = 0x3a,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_RPREPEND	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RPREPEND  = 0x35,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_RPREPENDQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RPREPENDQ = 0x36,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_RSET	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RSET      = 0x31,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_RSETQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RSETQ     = 0x32,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_SASL_AUTH	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_SASL_AUTH = 0x21,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_SASL_LIST_MECHS	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_SASL_LIST_MECHS = 0x20,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_SASL_STEP	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_SASL_STEP = 0x22,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_SET	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_SET = 0x01,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_SETQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_SETQ = 0x11,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_STAT	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_STAT = 0x10,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_TOUCH	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_TOUCH = 0x1c,$/;"	e	enum:__anon11
PROTOCOL_BINARY_CMD_VERSION	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_VERSION = 0x0b,$/;"	e	enum:__anon11
PROTOCOL_BINARY_H	protocol_binary.h	36;"	d
PROTOCOL_BINARY_RAW_BYTES	protocol_binary.h	/^        PROTOCOL_BINARY_RAW_BYTES = 0x00$/;"	e	enum:__anon12
PROTOCOL_BINARY_REQ	protocol_binary.h	/^        PROTOCOL_BINARY_REQ = 0x80,$/;"	e	enum:__anon9
PROTOCOL_BINARY_RES	protocol_binary.h	/^        PROTOCOL_BINARY_RES = 0x81$/;"	e	enum:__anon9
PROTOCOL_BINARY_RESPONSE_AUTH_CONTINUE	protocol_binary.h	/^        PROTOCOL_BINARY_RESPONSE_AUTH_CONTINUE = 0x21,$/;"	e	enum:__anon10
PROTOCOL_BINARY_RESPONSE_AUTH_ERROR	protocol_binary.h	/^        PROTOCOL_BINARY_RESPONSE_AUTH_ERROR = 0x20,$/;"	e	enum:__anon10
PROTOCOL_BINARY_RESPONSE_DELTA_BADVAL	protocol_binary.h	/^        PROTOCOL_BINARY_RESPONSE_DELTA_BADVAL = 0x06,$/;"	e	enum:__anon10
PROTOCOL_BINARY_RESPONSE_E2BIG	protocol_binary.h	/^        PROTOCOL_BINARY_RESPONSE_E2BIG = 0x03,$/;"	e	enum:__anon10
PROTOCOL_BINARY_RESPONSE_EINVAL	protocol_binary.h	/^        PROTOCOL_BINARY_RESPONSE_EINVAL = 0x04,$/;"	e	enum:__anon10
PROTOCOL_BINARY_RESPONSE_ENOMEM	protocol_binary.h	/^        PROTOCOL_BINARY_RESPONSE_ENOMEM = 0x82$/;"	e	enum:__anon10
PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS	protocol_binary.h	/^        PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS = 0x02,$/;"	e	enum:__anon10
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT	protocol_binary.h	/^        PROTOCOL_BINARY_RESPONSE_KEY_ENOENT = 0x01,$/;"	e	enum:__anon10
PROTOCOL_BINARY_RESPONSE_NOT_STORED	protocol_binary.h	/^        PROTOCOL_BINARY_RESPONSE_NOT_STORED = 0x05,$/;"	e	enum:__anon10
PROTOCOL_BINARY_RESPONSE_SUCCESS	protocol_binary.h	/^        PROTOCOL_BINARY_RESPONSE_SUCCESS = 0x00,$/;"	e	enum:__anon10
PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND	protocol_binary.h	/^        PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND = 0x81,$/;"	e	enum:__anon10
READ_BUFFER_HIGHWAT	memcached.h	54;"	d
READ_DATA_RECEIVED	memcached.c	/^    READ_DATA_RECEIVED,$/;"	e	enum:try_read_result	file:
READ_ERROR	memcached.c	/^    READ_ERROR,            \/** an error occured (on the socket) (or client closed connection) *\/$/;"	e	enum:try_read_result	file:
READ_MEMORY_ERROR	memcached.c	/^    READ_MEMORY_ERROR      \/** failed to allocate more memory *\/$/;"	e	enum:try_read_result	file:
READ_NO_DATA_RECEIVED	memcached.c	/^    READ_NO_DATA_RECEIVED,$/;"	e	enum:try_read_result	file:
REALTIME_MAXDELTA	memcached.c	153;"	d	file:
REASSIGN_BADCLASS	slabs.h	/^    REASSIGN_OK=0, REASSIGN_RUNNING, REASSIGN_BADCLASS, REASSIGN_NOSPARE,$/;"	e	enum:reassign_result_type
REASSIGN_NOSPARE	slabs.h	/^    REASSIGN_OK=0, REASSIGN_RUNNING, REASSIGN_BADCLASS, REASSIGN_NOSPARE,$/;"	e	enum:reassign_result_type
REASSIGN_OK	slabs.h	/^    REASSIGN_OK=0, REASSIGN_RUNNING, REASSIGN_BADCLASS, REASSIGN_NOSPARE,$/;"	e	enum:reassign_result_type
REASSIGN_RUNNING	slabs.h	/^    REASSIGN_OK=0, REASSIGN_RUNNING, REASSIGN_BADCLASS, REASSIGN_NOSPARE,$/;"	e	enum:reassign_result_type
REASSIGN_SRC_DST_SAME	slabs.h	/^    REASSIGN_SRC_DST_SAME$/;"	e	enum:reassign_result_type
RECURSIVE_CLEAN_TARGETS	Makefile	/^RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\\$/;"	m
RECURSIVE_TARGETS	Makefile	/^RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \\$/;"	m
ROTL32	murmur3_hash.c	23;"	d	file:
ROTL32	murmur3_hash.c	38;"	d	file:
SASL_CONTINUE	sasl_defs.h	27;"	d
SASL_DEFS_H	sasl_defs.h	2;"	d
SASL_OK	sasl_defs.h	26;"	d
SET_MAKE	Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	doc/Makefile	/^SET_MAKE = $/;"	m
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	doc/Makefile	/^SHELL = \/bin\/sh$/;"	m
SLABS_H	slabs.h	3;"	d
SOURCES	Makefile	/^SOURCES = $(memcached_SOURCES) $(memcached_debug_SOURCES) sizes.c \\$/;"	m
SOURCES	doc/Makefile	/^SOURCES =$/;"	m
STATS_LOCK	thread.c	/^void STATS_LOCK() {$/;"	f
STATS_UNLOCK	thread.c	/^void STATS_UNLOCK() {$/;"	f
STAT_KEY_LEN	memcached.h	112;"	d
STAT_VAL_LEN	memcached.h	113;"	d
STDC_HEADERS	config.h	122;"	d
STORED	memcached.h	/^    NOT_STORED=0, STORED, EXISTS, NOT_FOUND$/;"	e	enum:store_item_type
STRIP	Makefile	/^STRIP = $/;"	m
STRIP	doc/Makefile	/^STRIP = $/;"	m
SUBCOMMAND_TOKEN	memcached.c	2540;"	d	file:
SUBDIRS	Makefile	/^SUBDIRS = doc$/;"	m
SUFFIX_LIST_INITIAL	memcached.h	45;"	d
SUFFIX_SIZE	memcached.h	39;"	d
TAIL_REPAIR_TIME_DEFAULT	memcached.h	86;"	d
TEST_FAIL	testapp.c	/^enum test_return { TEST_SKIP, TEST_PASS, TEST_FAIL };$/;"	e	enum:test_return	file:
TEST_FUNC	testapp.c	/^typedef enum test_return (*TEST_FUNC)(void);$/;"	t	typeref:enum:TEST_FUNC	file:
TEST_PASS	testapp.c	/^enum test_return { TEST_SKIP, TEST_PASS, TEST_FAIL };$/;"	e	enum:test_return	file:
TEST_SKIP	testapp.c	/^enum test_return { TEST_SKIP, TEST_PASS, TEST_FAIL };$/;"	e	enum:test_return	file:
TMP_TEMPLATE	testapp.c	26;"	d	file:
TRACE_H	trace.h	2;"	d
TRANSMIT_COMPLETE	memcached.c	/^    TRANSMIT_COMPLETE,   \/** All done writing. *\/$/;"	e	enum:transmit_result	file:
TRANSMIT_HARD_ERROR	memcached.c	/^    TRANSMIT_HARD_ERROR  \/** Can't write (c->state is set to conn_closing) *\/$/;"	e	enum:transmit_result	file:
TRANSMIT_INCOMPLETE	memcached.c	/^    TRANSMIT_INCOMPLETE, \/** More data remaining to write. *\/$/;"	e	enum:transmit_result	file:
TRANSMIT_SOFT_ERROR	memcached.c	/^    TRANSMIT_SOFT_ERROR, \/** Can't write any more right now. *\/$/;"	e	enum:transmit_result	file:
UDP_HEADER_SIZE	memcached.h	35;"	d
UDP_MAX_PAYLOAD_SIZE	memcached.h	34;"	d
UDP_READ_BUFFER_SIZE	memcached.h	33;"	d
VERSION	Makefile	/^VERSION = 1.4.21$/;"	m
VERSION	config.h	125;"	d
VERSION	doc/Makefile	/^VERSION = 1.4.21$/;"	m
XML2RFC	Makefile	/^XML2RFC = no$/;"	m
XML2RFC	doc/Makefile	/^XML2RFC = no$/;"	m
XSLTPROC	Makefile	/^XSLTPROC = \/usr\/bin\/xsltproc$/;"	m
XSLTPROC	doc/Makefile	/^XSLTPROC = \/usr\/bin\/xsltproc$/;"	m
_GNU_SOURCE	config.h	128;"	d
_P1003_1B_VISIBLE	memcached.c	30;"	d	file:
__builtin_expect	memcached.h	771;"	d
__gcc_attribute__	util.h	21;"	d
__gcc_attribute__	util.h	23;"	d
__need_IOV_MAX	memcached.c	34;"	d	file:
_hashitem_before	assoc.c	/^static item** _hashitem_before (const char *key, const size_t nkey, const uint32_t hv) {$/;"	f	file:
_prefix_stats	stats.c	/^struct _prefix_stats {$/;"	s	file:
_stritem	memcached.h	/^typedef struct _stritem {$/;"	s
abs_builddir	Makefile	/^abs_builddir = \/yangyazhou\/Reading-and-comprehense-memcached-1.4.22\/memcached-1.4$/;"	m
abs_builddir	doc/Makefile	/^abs_builddir = \/yangyazhou\/Reading-and-comprehense-memcached-1.4.22\/memcached-1.4\/doc$/;"	m
abs_srcdir	Makefile	/^abs_srcdir = \/yangyazhou\/Reading-and-comprehense-memcached-1.4.22\/memcached-1.4$/;"	m
abs_srcdir	doc/Makefile	/^abs_srcdir = \/yangyazhou\/Reading-and-comprehense-memcached-1.4.22\/memcached-1.4\/doc$/;"	m
abs_top_builddir	Makefile	/^abs_top_builddir = \/yangyazhou\/Reading-and-comprehense-memcached-1.4.22\/memcached-1.4$/;"	m
abs_top_builddir	doc/Makefile	/^abs_top_builddir = \/yangyazhou\/Reading-and-comprehense-memcached-1.4.22\/memcached-1.4$/;"	m
abs_top_srcdir	Makefile	/^abs_top_srcdir = \/yangyazhou\/Reading-and-comprehense-memcached-1.4.22\/memcached-1.4$/;"	m
abs_top_srcdir	doc/Makefile	/^abs_top_srcdir = \/yangyazhou\/Reading-and-comprehense-memcached-1.4.22\/memcached-1.4$/;"	m
ac_ct_CC	Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	doc/Makefile	/^ac_ct_CC = gcc$/;"	m
accept_new_conns	thread.c	/^void accept_new_conns(const bool do_accept) {$/;"	f
accepting_conns	memcached.h	/^    bool          accepting_conns;  \/* whether we are currently accepting *\/$/;"	m	struct:stats_t
access	memcached.h	/^    int access;  \/* access mask (a la chmod) for unix domain socket *\/$/;"	m	struct:settings_s
add_bin_header	memcached.c	/^static void add_bin_header(conn *c, uint16_t err, uint8_t hdr_len, uint16_t key_len, uint32_t body_len) {$/;"	f	file:
add_delta	thread.c	/^enum delta_result_type add_delta(conn *c, const char *key,$/;"	f
add_iov	memcached.c	/^static int add_iov(conn *c, const void *buf, int len) {$/;"	f	file:
add_msghdr	memcached.c	/^static int add_msghdr(conn *c)$/;"	f	file:
allow_closed_read	testapp.c	/^static bool allow_closed_read = false;$/;"	v	file:
allow_new_conns	memcached.c	/^static volatile bool allow_new_conns = true;$/;"	v	file:
am__CONFIG_DISTCLEAN_FILES	Makefile	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__aclocal_m4_deps	Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/version.m4 \\$/;"	m
am__aclocal_m4_deps	doc/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/version.m4 \\$/;"	m
am__append_1	Makefile	/^am__append_1 = cache.c$/;"	m
am__append_2	Makefile	/^am__append_2 = cache.c$/;"	m
am__append_4	Makefile	/^am__append_4 = sasl_defs.c$/;"	m
am__base_list	Makefile	/^am__base_list = \\$/;"	m
am__base_list	doc/Makefile	/^am__base_list = \\$/;"	m
am__cd	Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	doc/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	doc/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__depfiles_maybe	Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__include	Makefile	/^am__include = include$/;"	m
am__include	doc/Makefile	/^am__include = include$/;"	m
am__install_max	Makefile	/^am__install_max = 40$/;"	m
am__install_max	doc/Makefile	/^am__install_max = 40$/;"	m
am__installdirs	Makefile	/^am__installdirs = "$(DESTDIR)$(bindir)" "$(DESTDIR)$(pkgincludedir)"$/;"	m
am__installdirs	doc/Makefile	/^am__installdirs = "$(DESTDIR)$(man1dir)"$/;"	m
am__leading_dot	Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	doc/Makefile	/^am__leading_dot = .$/;"	m
am__memcached_SOURCES_DIST	Makefile	/^am__memcached_SOURCES_DIST = memcached.c memcached.h hash.c hash.h \\$/;"	m
am__memcached_debug_SOURCES_DIST	Makefile	/^am__memcached_debug_SOURCES_DIST = memcached.c memcached.h hash.c \\$/;"	m
am__mv	Makefile	/^am__mv = mv -f$/;"	m
am__nobase_list	Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_list	doc/Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_strip	Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip	doc/Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip_setup	Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__nobase_strip_setup	doc/Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__objects_1	Makefile	/^am__objects_1 = memcached-cache.$(OBJEXT)$/;"	m
am__objects_3	Makefile	/^am__objects_3 = memcached-sasl_defs.$(OBJEXT)$/;"	m
am__objects_4	Makefile	/^am__objects_4 = memcached_debug-cache.$(OBJEXT)$/;"	m
am__objects_6	Makefile	/^am__objects_6 = memcached_debug-sasl_defs.$(OBJEXT)$/;"	m
am__objects_7	Makefile	/^am__objects_7 = memcached_debug-memcached.$(OBJEXT) \\$/;"	m
am__objects_8	Makefile	/^am__objects_8 = cache.$(OBJEXT)$/;"	m
am__quote	Makefile	/^am__quote = $/;"	m
am__quote	doc/Makefile	/^am__quote = $/;"	m
am__relativize	Makefile	/^am__relativize = \\$/;"	m
am__remove_distdir	Makefile	/^am__remove_distdir = \\$/;"	m
am__strip_dir	Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__strip_dir	doc/Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__tar	Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__tar	doc/Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__testapp_SOURCES_DIST	Makefile	/^am__testapp_SOURCES_DIST = testapp.c util.c util.h cache.c$/;"	m
am__untar	Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__untar	doc/Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__vpath_adj	Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj	doc/Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj_setup	Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am__vpath_adj_setup	doc/Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am_memcached_OBJECTS	Makefile	/^am_memcached_OBJECTS = memcached-memcached.$(OBJEXT) \\$/;"	m
am_memcached_debug_OBJECTS	Makefile	/^am_memcached_debug_OBJECTS = $(am__objects_7)$/;"	m
am_testapp_OBJECTS	Makefile	/^am_testapp_OBJECTS = testapp.$(OBJEXT) util.$(OBJEXT) $(am__objects_8)$/;"	m
am_timedrun_OBJECTS	Makefile	/^am_timedrun_OBJECTS = timedrun.$(OBJEXT)$/;"	m
append_ascii_stats	memcached.c	/^static void append_ascii_stats(const char *key, const uint16_t klen,$/;"	f	file:
append_bin_stats	memcached.c	/^static void append_bin_stats(const char *key, const uint16_t klen,$/;"	f	file:
append_stat	memcached.c	/^void append_stat(const char *name, ADD_STAT add_stats, conn *c,$/;"	f
append_stats	memcached.c	/^static void append_stats(const char *key, const uint16_t klen,$/;"	f	file:
arithmetic_command	testapp.c	/^static off_t arithmetic_command(char* buf,$/;"	f	file:
ascii_prot	memcached.h	/^    ascii_prot = 3, \/* arbitrary value. *\/$/;"	e	enum:protocol
assoc_delete	assoc.c	/^void assoc_delete(const char *key, const size_t nkey, const uint32_t hv) {$/;"	f
assoc_expand	assoc.c	/^static void assoc_expand(void) {$/;"	f	file:
assoc_find	assoc.c	/^item *assoc_find(const char *key, const size_t nkey, const uint32_t hv) {$/;"	f
assoc_init	assoc.c	/^void assoc_init(const int hashtable_init) {$/;"	f
assoc_insert	assoc.c	/^int assoc_insert(item *it, const uint32_t hv) {$/;"	f
assoc_maintenance_thread	assoc.c	/^static void *assoc_maintenance_thread(void *arg) {$/;"	f	file:
assoc_start_expand	assoc.c	/^static void assoc_start_expand(void) {$/;"	f	file:
atomics_mutex	thread.c	/^pthread_mutex_t atomics_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
auth_cmds	memcached.h	/^    uint64_t          auth_cmds;$/;"	m	struct:thread_stats
auth_errors	memcached.h	/^    uint64_t          auth_errors;$/;"	m	struct:thread_stats
authenticated	memcached.c	/^static bool authenticated(conn *c) {$/;"	f	file:
authenticated	memcached.h	/^    bool authenticated;$/;"	m	struct:conn_t
backlog	memcached.h	/^    int backlog;\/\/listen函数的第二个参数，不同于settings.maxconns$/;"	m	struct:settings_s
base	memcached.h	/^    struct event_base *base;    \/* libevent handle this thread uses *\/ \/\/线程所使用的event_base$/;"	m	struct:__anon5	typeref:struct:__anon5::event_base
base	memcached.h	/^    struct event_base *base;    \/* libevent handle this thread uses *\/$/;"	m	struct:__anon6	typeref:struct:__anon6::event_base
bin_PROGRAMS	Makefile	/^bin_PROGRAMS = memcached$(EXEEXT)$/;"	m
bin_list_sasl_mechs	memcached.c	/^static void bin_list_sasl_mechs(conn *c) {$/;"	f	file:
bin_no_state	memcached.h	/^    bin_no_state,$/;"	e	enum:bin_substates
bin_read_flush_exptime	memcached.h	/^    bin_read_flush_exptime,$/;"	e	enum:bin_substates
bin_read_key	memcached.c	/^static void bin_read_key(conn *c, enum bin_substates next_substate, int extra) {$/;"	f	file:
bin_read_set_value	memcached.h	/^    bin_read_set_value,$/;"	e	enum:bin_substates
bin_reading_cas_header	memcached.h	/^    bin_reading_cas_header,$/;"	e	enum:bin_substates
bin_reading_del_header	memcached.h	/^    bin_reading_del_header,$/;"	e	enum:bin_substates
bin_reading_get_key	memcached.h	/^    bin_reading_get_key,$/;"	e	enum:bin_substates
bin_reading_incr_header	memcached.h	/^    bin_reading_incr_header,$/;"	e	enum:bin_substates
bin_reading_sasl_auth	memcached.h	/^    bin_reading_sasl_auth,$/;"	e	enum:bin_substates
bin_reading_sasl_auth_data	memcached.h	/^    bin_reading_sasl_auth_data,$/;"	e	enum:bin_substates
bin_reading_set_header	memcached.h	/^    bin_reading_set_header,$/;"	e	enum:bin_substates
bin_reading_stat	memcached.h	/^    bin_reading_stat,$/;"	e	enum:bin_substates
bin_reading_touch_key	memcached.h	/^    bin_reading_touch_key,$/;"	e	enum:bin_substates
bin_substates	memcached.h	/^enum bin_substates {$/;"	g
binary_get_key	memcached.c	/^static char* binary_get_key(conn *c) {$/;"	f	file:
binary_get_request	memcached.c	/^static void* binary_get_request(conn *c) {$/;"	f	file:
binary_header	memcached.h	/^    protocol_binary_request_header binary_header;$/;"	m	struct:conn_t
binary_hickup_recv_verification_thread	testapp.c	/^static void *binary_hickup_recv_verification_thread(void *arg) {$/;"	f	file:
binary_prot	memcached.h	/^    binary_prot,$/;"	e	enum:protocol
binding_protocol	memcached.h	/^    enum protocol binding_protocol;$/;"	m	struct:settings_s	typeref:enum:settings_s::protocol
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	doc/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
body	protocol_binary.h	/^            } body;$/;"	m	struct:__anon21::__anon22	typeref:struct:__anon21::__anon22::__anon23
body	protocol_binary.h	/^            } body;$/;"	m	struct:__anon24::__anon25	typeref:struct:__anon24::__anon25::__anon26
body	protocol_binary.h	/^            } body;$/;"	m	struct:__anon27::__anon28	typeref:struct:__anon27::__anon28::__anon29
body	protocol_binary.h	/^            } body;$/;"	m	struct:__anon30::__anon31	typeref:struct:__anon30::__anon31::__anon32
body	protocol_binary.h	/^            } body;$/;"	m	struct:__anon33::__anon34	typeref:struct:__anon33::__anon34::__anon35
body	protocol_binary.h	/^            } body;$/;"	m	struct:__anon36::__anon37	typeref:struct:__anon36::__anon37::__anon38
body	protocol_binary.h	/^            } body;$/;"	m	struct:__anon39::__anon40	typeref:struct:__anon39::__anon40::__anon41
body	protocol_binary.h	/^            } body;$/;"	m	struct:__anon42::__anon43	typeref:struct:__anon42::__anon43::__anon44
bodylen	protocol_binary.h	/^            uint32_t bodylen;$/;"	m	struct:__anon13::__anon14
bodylen	protocol_binary.h	/^            uint32_t bodylen;$/;"	m	struct:__anon15::__anon16
bool	config.h	139;"	d
buffer	memcached.h	/^        char *buffer;$/;"	m	struct:conn_t::__anon7
bufsize	cache.h	/^    size_t bufsize;$/;"	m	struct:__anon8
build	Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build	doc/Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build_alias	Makefile	/^build_alias = $/;"	m
build_alias	doc/Makefile	/^build_alias = $/;"	m
build_cpu	Makefile	/^build_cpu = x86_64$/;"	m
build_cpu	doc/Makefile	/^build_cpu = x86_64$/;"	m
build_os	Makefile	/^build_os = linux-gnu$/;"	m
build_os	doc/Makefile	/^build_os = linux-gnu$/;"	m
build_triplet	Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_triplet	doc/Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_udp_headers	memcached.c	/^static int build_udp_headers(conn *c) {$/;"	f	file:
build_vendor	Makefile	/^build_vendor = unknown$/;"	m
build_vendor	doc/Makefile	/^build_vendor = unknown$/;"	m
builddir	Makefile	/^builddir = .$/;"	m
builddir	doc/Makefile	/^builddir = .$/;"	m
busy_items	memcached.h	/^    int busy_items;\/\/是否worker线程在引用某个item,记录引用数   slab迁移过程中正在被其他线程访问的trunk数，赋值见slab_rebalance_move$/;"	m	struct:slab_rebalance
bytes	protocol_binary.h	/^        uint8_t bytes[24];$/;"	m	union:__anon13
bytes	protocol_binary.h	/^        uint8_t bytes[24];$/;"	m	union:__anon15
bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_request_header) + 20];$/;"	m	union:__anon30
bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_request_header) + 4];$/;"	m	union:__anon24
bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_request_header) + 4];$/;"	m	union:__anon36
bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_request_header) + 4];$/;"	m	union:__anon39
bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_request_header) + 4];$/;"	m	union:__anon42
bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_request_header) + 8];$/;"	m	union:__anon27
bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_request_header)];$/;"	m	union:__anon17
bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_response_header) + 4];$/;"	m	union:__anon21
bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_response_header) + 8];$/;"	m	union:__anon33
bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_response_header)];$/;"	m	union:__anon19
bytes_read	memcached.h	/^    uint64_t          bytes_read; \/\/从客户端读取的字节数$/;"	m	struct:thread_stats
bytes_written	memcached.h	/^    uint64_t          bytes_written;$/;"	m	struct:thread_stats
cache_alloc	cache.c	/^void* cache_alloc(cache_t *cache) {$/;"	f
cache_alloc	cache.h	9;"	d
cache_bulkalloc	testapp.c	/^static enum test_return cache_bulkalloc(size_t datasize)$/;"	f	file:
cache_constructor	testapp.c	/^static int cache_constructor(void *buffer, void *notused1, int notused2) {$/;"	f	file:
cache_constructor_t	cache.h	/^typedef int cache_constructor_t(void* obj, void* notused1, int notused2);$/;"	t
cache_constructor_test	testapp.c	/^static enum test_return cache_constructor_test(void)$/;"	f	file:
cache_create	cache.c	/^cache_t* cache_create(const char *name, size_t bufsize, size_t align,$/;"	f
cache_create	cache.h	11;"	d
cache_create_test	testapp.c	/^static enum test_return cache_create_test(void)$/;"	f	file:
cache_destroy	cache.c	/^void cache_destroy(cache_t *cache) {$/;"	f
cache_destroy	cache.h	12;"	d
cache_destructor	testapp.c	/^static void cache_destructor(void *buffer, void *notused) {$/;"	f	file:
cache_destructor_t	cache.h	/^typedef void cache_destructor_t(void* obj, void* notused);$/;"	t
cache_destructor_test	testapp.c	/^static enum test_return cache_destructor_test(void)$/;"	f	file:
cache_error	cache.c	/^int cache_error = 0;$/;"	v
cache_fail_constructor	testapp.c	/^static int cache_fail_constructor(void *buffer, void *notused1, int notused2) {$/;"	f	file:
cache_fail_constructor_test	testapp.c	/^static enum test_return cache_fail_constructor_test(void)$/;"	f	file:
cache_free	cache.c	/^void cache_free(cache_t *cache, void *ptr) {$/;"	f
cache_free	cache.h	10;"	d
cache_lock	thread.c	/^pthread_mutex_t cache_lock;$/;"	v
cache_redzone_test	testapp.c	/^static enum test_return cache_redzone_test(void)$/;"	f	file:
cache_reuse_test	testapp.c	/^static enum test_return cache_reuse_test(void)$/;"	f	file:
cache_t	cache.h	/^} cache_t;$/;"	t	typeref:struct:__anon8
cache_t	cache.h	8;"	d
cas	memcached.h	/^        uint64_t cas; \/\/参考process_update_command中的req_cas_id,实际是从客户端的set等命令中获取到的$/;"	m	union:_stritem::__anon3
cas	memcached.h	/^    uint64_t cas; \/* the cas to return *\/$/;"	m	struct:conn_t
cas	protocol_binary.h	/^            uint64_t cas;$/;"	m	struct:__anon13::__anon14
cas	protocol_binary.h	/^            uint64_t cas;$/;"	m	struct:__anon15::__anon16
cas_badval	memcached.h	/^    uint64_t  cas_badval;$/;"	m	struct:slab_stats
cas_hits	memcached.h	/^    uint64_t  cas_hits;$/;"	m	struct:slab_stats
cas_misses	memcached.h	/^    uint64_t          cas_misses; \/\/cas命令没查找到$/;"	m	struct:thread_stats
caught	timedrun.c	/^static int caught = 0;$/;"	v	file:
caught_signal	timedrun.c	/^static void caught_signal(int which)$/;"	f	file:
chunk_size	memcached.h	/^    int chunk_size;\/\/最小的一个item能存储多少字节的数据(set、add命令中的数据) 默认48$/;"	m	struct:settings_s
clock_handler	memcached.c	/^static void clock_handler(const int fd, const short which, void *arg) {$/;"	f	file:
clockevent	memcached.c	/^static struct event clockevent;$/;"	v	typeref:struct:event	file:
cmd	memcached.h	/^    short cmd; \/* current command being processed *\/$/;"	m	struct:conn_t
complete_incr_bin	memcached.c	/^static void complete_incr_bin(conn *c) {$/;"	f	file:
complete_nread	memcached.c	/^static void complete_nread(conn *c) {$/;"	f	file:
complete_nread_ascii	memcached.c	/^static void complete_nread_ascii(conn *c) {$/;"	f	file:
complete_nread_binary	memcached.c	/^static void complete_nread_binary(conn *c) {$/;"	f	file:
complete_update_bin	memcached.c	/^static void complete_update_bin(conn *c) {$/;"	f	file:
conn	memcached.h	/^typedef struct conn_t conn;$/;"	t	typeref:struct:conn_t
conn_cleanup	memcached.c	/^static void conn_cleanup(conn *c) {$/;"	f	file:
conn_close	memcached.c	/^static void conn_close(conn *c) {$/;"	f	file:
conn_closed	memcached.h	/^    conn_closed,     \/**< connection is closed *\/$/;"	e	enum:conn_states
conn_closing	memcached.h	/^    conn_closing,    \/**< closing this connection *\/$/;"	e	enum:conn_states
conn_free	memcached.c	/^void conn_free(conn *c) {$/;"	f
conn_init	memcached.c	/^static void conn_init(void) { $/;"	f	file:
conn_listening	memcached.h	/^    conn_listening,  \/**< the socket which listens for connections *\/$/;"	e	enum:conn_states
conn_lock	thread.c	/^pthread_mutex_t conn_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v
conn_max_state	memcached.h	/^    conn_max_state   \/**< Max state value (used for assertion) *\/$/;"	e	enum:conn_states
conn_mwrite	memcached.h	/^    conn_mwrite,     \/**< writing out many items sequentially *\/$/;"	e	enum:conn_states
conn_new	memcached.c	/^conn *conn_new(const int sfd, enum conn_states init_state,$/;"	f
conn_new_cmd	memcached.h	/^    conn_new_cmd,    \/**< Prepare connection for next command *\/$/;"	e	enum:conn_states
conn_nread	memcached.h	/^    conn_nread,      \/**< reading in a fixed number of bytes *\/$/;"	e	enum:conn_states
conn_parse_cmd	memcached.h	/^    conn_parse_cmd,  \/**< try to parse a command from the input buffer *\/$/;"	e	enum:conn_states
conn_queue	thread.c	/^struct conn_queue {$/;"	s	file:
conn_queue_item	thread.c	/^struct conn_queue_item { \/\/创建空间和赋值见dispatch_conn_new$/;"	s	file:
conn_read	memcached.h	/^    conn_read,       \/**< reading in a command line *\/$/;"	e	enum:conn_states
conn_release_items	memcached.c	/^static void conn_release_items(conn *c) {$/;"	f	file:
conn_set_state	memcached.c	/^static void conn_set_state(conn *c, enum conn_states state) {$/;"	f	file:
conn_shrink	memcached.c	/^static void conn_shrink(conn *c) {$/;"	f	file:
conn_states	memcached.h	/^enum conn_states { \/\/conn所处的状态$/;"	g
conn_structs	memcached.h	/^    unsigned int  conn_structs;$/;"	m	struct:stats_t
conn_swallow	memcached.h	/^    conn_swallow,    \/**< swallowing unnecessary bytes w\/o storing *\/$/;"	e	enum:conn_states
conn_t	memcached.h	/^struct conn_t {$/;"	s
conn_to_str	memcached.c	/^static void conn_to_str(const conn *c, char *buf) {$/;"	f	file:
conn_waiting	memcached.h	/^    conn_waiting,    \/**< waiting for a readable socket *\/$/;"	e	enum:conn_states
conn_write	memcached.h	/^    conn_write,      \/**< writing out a simple response *\/$/;"	e	enum:conn_states
conn_yields	memcached.h	/^    uint64_t          conn_yields; \/* # of yields for connections (-R option)*\/$/;"	m	struct:thread_stats
connect_server	testapp.c	/^static int connect_server(const char *hostname, in_port_t port, bool nonblock)$/;"	f	file:
conns	memcached.c	/^conn **conns; \/\/conn数组，提前分配好，见conn_init$/;"	v
constructor	cache.h	/^    cache_constructor_t* constructor;$/;"	m	struct:__anon8
constructor_pattern	testapp.c	/^const uint64_t constructor_pattern = 0xdeadcafebabebeef;$/;"	v
cq_init	thread.c	/^static void cq_init(CQ *cq) {$/;"	f	file:
cq_pop	thread.c	/^static CQ_ITEM *cq_pop(CQ *cq) {$/;"	f	file:
cq_push	thread.c	/^static void cq_push(CQ *cq, CQ_ITEM *item) {$/;"	f	file:
cqi_free	thread.c	/^static void cqi_free(CQ_ITEM *item) {$/;"	f	file:
cqi_freelist	thread.c	/^static CQ_ITEM *cqi_freelist;$/;"	v	file:
cqi_freelist_lock	thread.c	/^static pthread_mutex_t cqi_freelist_lock;$/;"	v	file:
cqi_new	thread.c	/^static CQ_ITEM *cqi_new(void) {\/\/CQ_ITEM是主线程accept后返回的已建立连接的fd的封装。$/;"	f	file:
crawler	memcached.h	/^} crawler;$/;"	t	typeref:struct:__anon4
crawler_count	items.c	/^static int crawler_count = 0; \/\/本次任务要处理多少个LRU队列  $/;"	v	file:
crawler_crawl_q	items.c	/^static item *crawler_crawl_q(item *it) {$/;"	f	file:
crawler_link_q	items.c	/^static void crawler_link_q(item *it) { \/* item is the new tail *\/$/;"	f	file:
crawler_reclaimed	items.c	/^    uint64_t crawler_reclaimed; \/\/该slabclass保存的item数  \/\/被LRU爬虫发现的过期item数量  $/;"	m	struct:__anon1	file:
crawler_result_type	items.h	/^enum crawler_result_type {$/;"	g
crawler_unlink_q	items.c	/^static void crawler_unlink_q(item *it) {$/;"	f	file:
crawlers	items.c	/^static crawler crawlers[LARGEST_ID]; \/\/lru_crawler_crawl$/;"	v	file:
create_worker	thread.c	/^static void create_worker(void *(*func)(void *), void *arg) {$/;"	f	file:
curr_bytes	memcached.h	/^    uint64_t      curr_bytes; \/\/当前占用字节数，见do_item_link$/;"	m	struct:stats_t
curr_conns	memcached.h	/^    unsigned int  curr_conns; \/\/当前已使用conn结构数目  conn_new自增，conn_close自减。包括listen使用了的conn$/;"	m	struct:stats_t
curr_items	memcached.h	/^    unsigned int  curr_items; \/\/当前使用item数，见do_item_link$/;"	m	struct:stats_t
current_test	stats.c	/^static char *current_test = "";$/;"	v	file:
current_time	globals.c	/^volatile rel_time_t current_time;$/;"	v
current_time	memcached.c	/^volatile rel_time_t current_time;$/;"	v
d_clsid	memcached.h	/^    int d_clsid;\/\/目标slab class的下标索引  $/;"	m	struct:slab_rebalance
daemonize	daemon.c	/^int daemonize(int nochdir, int noclose)$/;"	f
data	memcached.h	/^    } data[];$/;"	m	struct:_stritem	typeref:union:_stritem::__anon3
datadir	Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	doc/Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	doc/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datatype	protocol_binary.h	/^            uint8_t datatype;$/;"	m	struct:__anon13::__anon14
datatype	protocol_binary.h	/^            uint8_t datatype;$/;"	m	struct:__anon15::__anon16
decr_hits	memcached.h	/^    uint64_t  decr_hits; \/\/dec命令执行次数$/;"	m	struct:slab_stats
decr_misses	memcached.h	/^    uint64_t          decr_misses;$/;"	m	struct:thread_stats
delete_hits	memcached.h	/^    uint64_t  delete_hits;$/;"	m	struct:slab_stats
delete_misses	memcached.h	/^    uint64_t          delete_misses;$/;"	m	struct:thread_stats
delta	protocol_binary.h	/^                uint64_t delta;$/;"	m	struct:__anon30::__anon31::__anon32
delta_result_type	memcached.h	/^enum delta_result_type {$/;"	g
depcomp	Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
description	testapp.c	/^    const char *description;$/;"	m	struct:testcase	file:
destruct_data	testapp.c	/^static void *destruct_data = 0;$/;"	v	file:
destructor	cache.h	/^    cache_destructor_t* destructor;$/;"	m	struct:__anon8
detail_enabled	memcached.h	/^    int detail_enabled;     \/* nonzero if we're collecting detailed stats *\/$/;"	m	struct:settings_s
die	autogen.sh	/^die() {$/;"	f
dispatch_bin_command	memcached.c	/^static void dispatch_bin_command(conn *c) {$/;"	f	file:
dispatch_conn_new	thread.c	/^void dispatch_conn_new(int sfd, enum conn_states init_state, int event_flags,$/;"	f
dispatcher_thread	thread.c	/^static LIBEVENT_DISPATCHER_THREAD dispatcher_thread;$/;"	v	file:
display	sizes.c	/^static void display(const char *name, size_t size) {$/;"	f	file:
distcleancheck_listfiles	Makefile	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distdir	Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distuninstallcheck_listfiles	Makefile	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
do_accept_new_conns	memcached.c	/^void do_accept_new_conns(const bool do_accept) {$/;"	f
do_add_delta	memcached.c	/^enum delta_result_type do_add_delta(conn *c, const char *key, const size_t nkey,$/;"	f
do_item_alloc	items.c	/^item *do_item_alloc(char *key, const size_t nkey, const int flags,$/;"	f
do_item_cachedump	items.c	/^char *do_item_cachedump(const unsigned int slabs_clsid, const unsigned int limit, unsigned int *bytes) {$/;"	f
do_item_flush_expired	items.c	/^void do_item_flush_expired(void) { $/;"	f
do_item_get	items.c	/^item *do_item_get(const char *key, const size_t nkey, const uint32_t hv) {$/;"	f
do_item_link	items.c	/^int do_item_link(item *it, const uint32_t hv) {$/;"	f
do_item_remove	items.c	/^void do_item_remove(item *it) {$/;"	f
do_item_replace	items.c	/^int do_item_replace(item *it, item *new_it, const uint32_t hv) {  \/\/注意这里面old_it->refcount会减1，new_it会增1$/;"	f
do_item_stats	items.c	/^void do_item_stats(ADD_STAT add_stats, void *c) {$/;"	f
do_item_stats_sizes	items.c	/^void do_item_stats_sizes(ADD_STAT add_stats, void *c) {$/;"	f
do_item_stats_totals	items.c	/^void do_item_stats_totals(ADD_STAT add_stats, void *c) {$/;"	f
do_item_touch	items.c	/^item *do_item_touch(const char *key, size_t nkey, uint32_t exptime,$/;"	f
do_item_unlink	items.c	/^void do_item_unlink(item *it, const uint32_t hv) {$/;"	f
do_item_unlink_nolock	items.c	/^void do_item_unlink_nolock(item *it, const uint32_t hv) {$/;"	f
do_item_update	items.c	/^void do_item_update(item *it) {$/;"	f
do_item_update_nolock	items.c	/^void do_item_update_nolock(item *it) {$/;"	f
do_run_lru_crawler_thread	items.c	/^static volatile int do_run_lru_crawler_thread = 0; \/\/为1标识已经启用爬虫线程$/;"	v	file:
do_run_maintenance_thread	assoc.c	/^static volatile int do_run_maintenance_thread = 1;$/;"	v	file:
do_run_slab_rebalance_thread	slabs.c	/^static volatile int do_run_slab_rebalance_thread = 1;$/;"	v	file:
do_run_slab_thread	slabs.c	/^static volatile int do_run_slab_thread = 1;$/;"	v	file:
do_slabs_alloc	slabs.c	/^static void *do_slabs_alloc(const size_t size, unsigned int id) {$/;"	f	file:
do_slabs_free	slabs.c	/^static void do_slabs_free(void *ptr, const size_t size, unsigned int id) {$/;"	f	file:
do_slabs_newslab	slabs.c	/^static int do_slabs_newslab(const unsigned int id) {$/;"	f	file:
do_slabs_reassign	slabs.c	/^static enum reassign_result_type do_slabs_reassign(int src, int dst) {$/;"	f	file:
do_slabs_stats	slabs.c	/^static void do_slabs_stats(ADD_STAT add_stats, void *c) {$/;"	f	file:
do_store_item	memcached.c	/^enum store_item_type do_store_item(item *it, int comm, conn *c, const uint32_t hv) {$/;"	f
docdir	Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	doc/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
done	memcached.h	/^    uint8_t done;\/\/是否完成了内存页移动  $/;"	m	struct:slab_rebalance
drive_machine	memcached.c	/^static void drive_machine(conn *c) {$/;"	f	file:
drop_privileges	memcached.h	766;"	d
drop_privileges	solaris_priv.c	/^void drop_privileges(void) {$/;"	f
dvidir	Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	doc/Makefile	/^dvidir = ${docdir}$/;"	m
enable_large_pages	memcached.c	/^static int enable_large_pages(void) {$/;"	f	file:
end	memcached.h	/^        char end;$/;"	m	union:_stritem::__anon3
ensure_iov_space	memcached.c	/^static int ensure_iov_space(conn *c) {$/;"	f	file:
ev_flags	memcached.h	/^    short  ev_flags;$/;"	m	struct:conn_t
event	memcached.h	/^    struct event event;$/;"	m	struct:conn_t	typeref:struct:conn_t::event
event_flags	thread.c	/^    int               event_flags; \/\/EV_READ | EV_PERSIST等$/;"	m	struct:conn_queue_item	file:
event_handler	memcached.c	/^void event_handler(const int fd, const short which, void *arg) {$/;"	f
evict_to_free	memcached.h	/^    int evict_to_free;$/;"	m	struct:settings_s
evicted	items.c	/^    uint64_t evicted; \/\/因为LRU踢了多少个item $/;"	m	struct:__anon1	file:
evicted_nonzero	items.c	/^    uint64_t evicted_nonzero;\/\/被踢的item中，超时时间(exptime)不为0的item数  $/;"	m	struct:__anon1	file:
evicted_time	items.c	/^    rel_time_t evicted_time;\/\/最后一次踢item时，被踢的item已经过期多久了  $/;"	m	struct:__anon1	file:
evicted_unfetched	items.c	/^    uint64_t evicted_unfetched; \/\/直到被LRU踢出时都还没有被访问过的item数量  $/;"	m	struct:__anon1	file:
evicted_unfetched	memcached.h	/^    uint64_t      evicted_unfetched; \/* items evicted but never touched *\/$/;"	m	struct:stats_t
evictions	memcached.h	/^    uint64_t      evictions;$/;"	m	struct:stats_t
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	doc/Makefile	/^exec_prefix = ${prefix}$/;"	m
expand_bucket	assoc.c	/^static unsigned int expand_bucket = 0;$/;"	v	file:
expanding	assoc.c	/^static bool expanding = false; \/\/hash扩展的时候置1，见assoc_expand$/;"	v	file:
expiration	protocol_binary.h	/^                uint32_t expiration;$/;"	m	struct:__anon24::__anon25::__anon26
expiration	protocol_binary.h	/^                uint32_t expiration;$/;"	m	struct:__anon27::__anon28::__anon29
expiration	protocol_binary.h	/^                uint32_t expiration;$/;"	m	struct:__anon30::__anon31::__anon32
expiration	protocol_binary.h	/^                uint32_t expiration;$/;"	m	struct:__anon36::__anon37::__anon38
expiration	protocol_binary.h	/^                uint32_t expiration;$/;"	m	struct:__anon39::__anon40::__anon41
expired_unfetched	items.c	/^    uint64_t expired_unfetched; \/\/被访问过并且超时的item,赋值见do_item_alloc   \/\/直到被超时删除时都还没被访问过的item数量  $/;"	m	struct:__anon1	file:
expired_unfetched	memcached.h	/^    uint64_t      expired_unfetched; \/* items reclaimed but never touched *\/$/;"	m	struct:stats_t
exptime	memcached.h	/^	rel_time_t      exptime;    \/* expire time *\/$/;"	m	struct:_stritem
exptime	memcached.h	/^    rel_time_t      exptime;    \/* expire time *\/$/;"	m	struct:__anon4
ext_command	testapp.c	/^static off_t ext_command(char* buf,$/;"	f	file:
extlen	protocol_binary.h	/^            uint8_t extlen;$/;"	m	struct:__anon13::__anon14
extlen	protocol_binary.h	/^            uint8_t extlen;$/;"	m	struct:__anon15::__anon16
factor	memcached.h	/^    double factor;          \/* chunk size growth factor *\/$/;"	m	struct:settings_s
fail	stats.c	/^static void fail(char *what) { printf("\\tFAIL: %s\\n", what); fflush(stdout); fail_count++; }$/;"	f	file:
fail_count	stats.c	/^static int fail_count = 0;$/;"	v	file:
false	config.h	140;"	d
final	jenkins_hash.c	114;"	d	file:
flags	protocol_binary.h	/^                uint32_t flags;$/;"	m	struct:__anon21::__anon22::__anon23
flags	protocol_binary.h	/^                uint32_t flags;$/;"	m	struct:__anon27::__anon28::__anon29
flags	protocol_binary.h	/^                uint8_t  flags;$/;"	m	struct:__anon42::__anon43::__anon44
flush_cmds	memcached.h	/^    uint64_t          flush_cmds;$/;"	m	struct:thread_stats
flush_command	testapp.c	/^static off_t flush_command(char* buf, size_t bufsz, uint8_t cmd, uint32_t exptime, bool use_extra) {$/;"	f	file:
flush_enabled	memcached.h	/^    bool flush_enabled;     \/* flush_all enabled *\/$/;"	m	struct:settings_s
fmix32	murmur3_hash.c	/^static FORCE_INLINE uint32_t fmix32 ( uint32_t h )$/;"	f	file:
free_port	t/lib/MemcachedTest.pm	/^sub free_port {$/;"	s
freecurr	cache.h	/^    int freecurr;$/;"	m	struct:__anon8
freetotal	cache.h	/^    int freetotal;$/;"	m	struct:__anon8
function	testapp.c	/^    TEST_FUNC function;$/;"	m	struct:testcase	file:
get_cas_id	items.c	/^uint64_t get_cas_id(void) {$/;"	f
get_cmds	memcached.h	/^    uint64_t          get_cmds;$/;"	m	struct:thread_stats
get_cmds	memcached.h	/^    uint64_t      get_cmds;$/;"	m	struct:stats_t
get_hits	memcached.h	/^    uint64_t      get_hits;$/;"	m	struct:stats_t
get_hits	memcached.h	/^    uint64_t  get_hits;$/;"	m	struct:slab_stats
get_misses	memcached.h	/^    uint64_t          get_misses;$/;"	m	struct:thread_stats
get_misses	memcached.h	/^    uint64_t      get_misses;$/;"	m	struct:stats_t
get_object	cache.c	/^static inline void* get_object(void *ptr) {$/;"	f	file:
get_stats	slabs.c	/^bool get_stats(const char *stat_type, int nkey, ADD_STAT add_stats, void *c) {$/;"	f
getblock32	murmur3_hash.c	/^static FORCE_INLINE uint32_t getblock32 ( const uint32_t * p, int i )$/;"	f	file:
grow_slab_list	slabs.c	/^static int grow_slab_list (const unsigned int id) {$/;"	f	file:
grow_stats_buf	memcached.c	/^static bool grow_stats_buf(conn *c, size_t needed) {$/;"	f	file:
h_next	memcached.h	/^    struct _stritem *h_next;    \/* hash chain next *\/$/;"	m	struct:__anon4	typeref:struct:__anon4::_stritem
h_next	memcached.h	/^    struct _stritem *h_next;    \/* hash chain next *\/$/;"	m	struct:_stritem	typeref:struct:_stritem::_stritem
handle_binary_protocol_error	memcached.c	/^static void handle_binary_protocol_error(conn *c) {$/;"	f	file:
hash	hash.h	/^hash_func hash; \/\/默认赋值见hash_init$/;"	v
hash_algorithm	memcached.h	/^    char *hash_algorithm;     \/* Hash algorithm in use *\/$/;"	m	struct:settings_s
hash_bulk_move	assoc.c	/^int hash_bulk_move = DEFAULT_HASH_BULK_MOVE;$/;"	v
hash_bytes	memcached.h	/^    uint64_t      hash_bytes;       \/* size used for hash tables *\/$/;"	m	struct:stats_t
hash_func	hash.h	/^typedef uint32_t (*hash_func)(const void *key, size_t length);$/;"	t
hash_init	hash.c	/^int hash_init(enum hashfunc_type type) {$/;"	f
hash_is_expanding	memcached.h	/^    bool          hash_is_expanding; \/* If the hash table is being expanded *\/$/;"	m	struct:stats_t
hash_items	assoc.c	/^static unsigned int hash_items = 0;$/;"	v	file:
hash_power_level	memcached.h	/^    unsigned int  hash_power_level; \/* Better hope it's not over 9000 *\/$/;"	m	struct:stats_t
hashfunc_type	hash.h	/^enum hashfunc_type {$/;"	g
hashmask	assoc.c	41;"	d	file:
hashmask	thread.c	65;"	d	file:
hashpower	assoc.c	/^unsigned int hashpower = HASHPOWER_DEFAULT;$/;"	v
hashpower_init	memcached.h	/^    int hashpower_init;     \/* Starting hash power level *\/$/;"	m	struct:settings_s
hashsize	assoc.c	39;"	d	file:
hashsize	thread.c	64;"	d	file:
hdrbuf	memcached.h	/^    unsigned char *hdrbuf; \/* udp packet headers *\/$/;"	m	struct:conn_t
hdrsize	memcached.h	/^    int    hdrsize;   \/* number of headers' worth of space is allocated *\/$/;"	m	struct:conn_t
head	thread.c	/^    CQ_ITEM *head; \/\/指向队列的第一个节点$/;"	m	struct:conn_queue	file:
header	protocol_binary.h	/^            protocol_binary_request_header header;$/;"	m	struct:__anon17::__anon18
header	protocol_binary.h	/^            protocol_binary_request_header header;$/;"	m	struct:__anon24::__anon25
header	protocol_binary.h	/^            protocol_binary_request_header header;$/;"	m	struct:__anon27::__anon28
header	protocol_binary.h	/^            protocol_binary_request_header header;$/;"	m	struct:__anon30::__anon31
header	protocol_binary.h	/^            protocol_binary_request_header header;$/;"	m	struct:__anon36::__anon37
header	protocol_binary.h	/^            protocol_binary_request_header header;$/;"	m	struct:__anon39::__anon40
header	protocol_binary.h	/^            protocol_binary_response_header header;$/;"	m	struct:__anon19::__anon20
header	protocol_binary.h	/^            protocol_binary_response_header header;$/;"	m	struct:__anon21::__anon22
header	protocol_binary.h	/^            protocol_binary_response_header header;$/;"	m	struct:__anon33::__anon34
header	protocol_binary.h	/^            protocol_binary_response_header header;$/;"	m	struct:__anon42::__anon43
heads	items.c	/^static item *heads[LARGEST_ID]; \/\/LRU链首指针,  每个classid一个LRU链$/;"	v	file:
hickup_thread_running	testapp.c	/^volatile bool hickup_thread_running;$/;"	v
host	Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host	doc/Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host	t/lib/MemcachedTest.pm	/^sub host { $_[0]{host} }$/;"	s
host_alias	Makefile	/^host_alias = $/;"	m
host_alias	doc/Makefile	/^host_alias = $/;"	m
host_cpu	Makefile	/^host_cpu = x86_64$/;"	m
host_cpu	doc/Makefile	/^host_cpu = x86_64$/;"	m
host_os	Makefile	/^host_os = linux-gnu$/;"	m
host_os	doc/Makefile	/^host_os = linux-gnu$/;"	m
host_triplet	Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_triplet	doc/Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_vendor	Makefile	/^host_vendor = unknown$/;"	m
host_vendor	doc/Makefile	/^host_vendor = unknown$/;"	m
htmldir	Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	doc/Makefile	/^htmldir = ${docdir}$/;"	m
htonll	util.c	/^uint64_t htonll(uint64_t val) {$/;"	f
icurr	memcached.h	/^    item   **icurr;$/;"	m	struct:conn_t
ileft	memcached.h	/^    int    ileft;$/;"	m	struct:conn_t
ilist	memcached.h	/^    item   **ilist;   \/* list of items to write out *\/$/;"	m	struct:conn_t
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	doc/Makefile	/^includedir = ${prefix}\/include$/;"	m
incr_hits	memcached.h	/^    uint64_t  incr_hits; \/\/inc命令执行次数$/;"	m	struct:slab_stats
incr_misses	memcached.h	/^    uint64_t          incr_misses;$/;"	m	struct:thread_stats
infodir	Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	doc/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
init_cond	thread.c	/^static pthread_cond_t init_cond;$/;"	v	file:
init_count	thread.c	/^static int init_count = 0;$/;"	v	file:
init_lock	thread.c	/^static pthread_mutex_t init_lock;$/;"	v	file:
init_lru_crawler	items.c	/^int init_lru_crawler(void) {$/;"	f
init_sasl	sasl_defs.c	/^void init_sasl(void) {$/;"	f
init_sasl	sasl_defs.h	18;"	d
init_sasl_conn	memcached.c	/^static void init_sasl_conn(conn *c) {$/;"	f	file:
init_state	thread.c	/^    enum conn_states  init_state;$/;"	m	struct:conn_queue_item	typeref:enum:conn_queue_item::conn_states	file:
initial	protocol_binary.h	/^                uint64_t initial;$/;"	m	struct:__anon30::__anon31::__anon32
initial_pool_size	cache.c	/^const int initial_pool_size = 64;$/;"	v
install_sh	Makefile	/^install_sh = ${SHELL} \/yangyazhou\/Reading-and-comprehense-memcached-1.4.22\/memcached-1.4\/install-sh$/;"	m
install_sh	doc/Makefile	/^install_sh = ${SHELL} \/yangyazhou\/Reading-and-comprehense-memcached-1.4.22\/memcached-1.4\/install-sh$/;"	m
install_sh_DATA	Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	doc/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	doc/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	doc/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
inter	memcached.h	/^    char *inter;\/\/memcached绑定的ip地址。如果该值为NULL，那么就是INADDR_ANY。否则该值指向一个ip字符串$/;"	m	struct:settings_s
iov	memcached.h	/^    struct iovec *iov;$/;"	m	struct:conn_t	typeref:struct:conn_t::iovec
iovsize	memcached.h	/^    int    iovsize;   \/* number of elements allocated in iov[] *\/$/;"	m	struct:conn_t
iovused	memcached.h	/^    int    iovused;   \/* number of elements used in iov[] *\/$/;"	m	struct:conn_t
is_listen_thread	thread.c	/^int is_listen_thread() {$/;"	f
isize	memcached.h	/^    int    isize;$/;"	m	struct:conn_t
it_flags	memcached.h	/^    uint8_t         it_flags;   \/* ITEM_* above *\/ \/\/标识是一个爬虫伪item,为1标识需要清除其对于的slabclass，参考item_crawler_thread$/;"	m	struct:__anon4
it_flags	memcached.h	/^    uint8_t         it_flags;   \/* ITEM_* above *\/$/;"	m	struct:_stritem
item	memcached.h	/^    void   *item;     \/* for commands set\/add\/replace  *\/$/;"	m	struct:conn_t
item	memcached.h	/^} item;$/;"	t	typeref:struct:_stritem
item_alloc	thread.c	/^item *item_alloc(char *key, size_t nkey, int flags, rel_time_t exptime, int nbytes) {$/;"	f
item_cachedump	thread.c	/^char *item_cachedump(unsigned int slabs_clsid, unsigned int limit, unsigned int *bytes) {$/;"	f
item_crawler_evaluate	items.c	/^static void item_crawler_evaluate(item *search, uint32_t hv, int i) {$/;"	f	file:
item_crawler_thread	items.c	/^static void *item_crawler_thread(void *arg) {$/;"	f	file:
item_crawler_tid	items.c	/^static pthread_t item_crawler_tid; \/\/爬虫线程ID$/;"	v	file:
item_flush_expired	thread.c	/^void item_flush_expired() {$/;"	f
item_free	items.c	/^void item_free(item *it) {$/;"	f
item_get	thread.c	/^item *item_get(const char *key, const size_t nkey) {$/;"	f
item_global_lock	thread.c	/^static pthread_mutex_t item_global_lock;$/;"	v	file:
item_link	thread.c	/^int item_link(item *item) {$/;"	f
item_link_q	items.c	/^static void item_link_q(item *it) { \/* item is the new head *\/$/;"	f	file:
item_lock	thread.c	/^void item_lock(uint32_t hv) {$/;"	f
item_lock_count	thread.c	/^static uint32_t item_lock_count;$/;"	v	file:
item_lock_global	thread.c	/^void item_lock_global(void) {$/;"	f
item_lock_hashpower	thread.c	/^static unsigned int item_lock_hashpower;$/;"	v	file:
item_lock_type	memcached.h	/^    uint8_t item_lock_type;     \/* use fine-grained or global item lock *\/$/;"	m	struct:__anon5
item_lock_type_key	thread.c	/^static pthread_key_t item_lock_type_key; \/\/\/\/线程私有数据的键值    不同线程的修改互不干扰$/;"	v	file:
item_lock_types	memcached.h	/^enum item_lock_types {\/\/item锁级别  $/;"	g
item_locks	thread.c	/^static pthread_mutex_t *item_locks; \/\/初始化和赋值见thread_init$/;"	v	file:
item_make_header	items.c	/^static size_t item_make_header(const uint8_t nkey, const int flags, const int nbytes,$/;"	f	file:
item_remove	thread.c	/^void item_remove(item *item) {$/;"	f
item_replace	thread.c	/^int item_replace(item *old_it, item *new_it, const uint32_t hv) { \/\/这里面会unlink old_it,然后link new_it$/;"	f
item_size_max	memcached.h	/^    int item_size_max;        \/* Maximum item size, and upper end for slabs *\/$/;"	m	struct:settings_s
item_size_ok	items.c	/^bool item_size_ok(const size_t nkey, const int flags, const int nbytes) {$/;"	f
item_stats	thread.c	/^void  item_stats(ADD_STAT add_stats, void *c) {$/;"	f
item_stats_evictions	items.c	/^void item_stats_evictions(uint64_t *evicted) {$/;"	f
item_stats_reset	items.c	/^void item_stats_reset(void) {$/;"	f
item_stats_sizes	thread.c	/^void  item_stats_sizes(ADD_STAT add_stats, void *c) {$/;"	f
item_stats_totals	thread.c	/^void  item_stats_totals(ADD_STAT add_stats, void *c) {$/;"	f
item_touch	thread.c	/^item *item_touch(const char *key, size_t nkey, uint32_t exptime) {$/;"	f
item_trylock	thread.c	/^void *item_trylock(uint32_t hv) {$/;"	f
item_trylock_unlock	thread.c	/^void item_trylock_unlock(void *lock) {$/;"	f
item_unlink	thread.c	/^void item_unlink(item *item) {$/;"	f
item_unlink_q	items.c	/^static void item_unlink_q(item *it) {$/;"	f	file:
item_unlock	thread.c	/^void item_unlock(uint32_t hv) {$/;"	f
item_unlock_global	thread.c	/^void item_unlock_global(void) {$/;"	f
item_update	thread.c	/^void item_update(item *item) {$/;"	f
itemstats	items.c	/^static itemstats_t itemstats[LARGEST_ID];$/;"	v	file:
itemstats_t	items.c	/^} itemstats_t; \/\/item的状态统计信息，这里就不分析了$/;"	t	typeref:struct:__anon1	file:
jenkins_hash	jenkins_hash.c	/^uint32_t jenkins_hash( const void *key, size_t length)$/;"	f
jenkins_hash	jenkins_hash.c	/^uint32_t jenkins_hash($/;"	f
key	t/stress-memcached.pl	/^sub key {$/;"	s
keylen	memcached.h	/^    int keylen;$/;"	m	struct:conn_t
keylen	protocol_binary.h	/^            uint16_t keylen;$/;"	m	struct:__anon13::__anon14
keylen	protocol_binary.h	/^            uint16_t keylen;$/;"	m	struct:__anon15::__anon16
killing	slabs.c	/^    unsigned int killing;  \/* index+1 of dying slab, or zero if none *\/$/;"	m	struct:__anon2	file:
last_cmd_time	memcached.h	/^    rel_time_t last_cmd_time;\/\/最后一次处理客户端命令key value的时间$/;"	m	struct:conn_t
last_thread	thread.c	/^static int last_thread = -1; $/;"	v	file:
length	memcached.c	/^    size_t length;$/;"	m	struct:token_s	file:
libdir	Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	doc/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	doc/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
likely	memcached.h	774;"	d
list_size	slabs.c	/^    unsigned int list_size; \/* size of prev array *\/ \/\/grow_slab_list中创建空间和赋值$/;"	m	struct:__anon2	file:
listen_conn	memcached.c	/^static conn *listen_conn = NULL;$/;"	v	file:
listen_disabled_num	memcached.h	/^    uint64_t      listen_disabled_num;$/;"	m	struct:stats_t
local_transport	memcached.h	/^    local_transport, \/* Unix sockets*\/$/;"	e	enum:network_transport
localedir	Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	doc/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	doc/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
locate_binary	autogen.sh	/^locate_binary() {$/;"	f
locations	sasl_defs.c	/^const char * const locations[] = {$/;"	v
lock	thread.c	/^    pthread_mutex_t lock; \/\/一个队列就对应一个锁$/;"	m	struct:conn_queue	file:
lookuphost	testapp.c	/^static struct addrinfo *lookuphost(const char *hostname, in_port_t port)$/;"	f	file:
lru_crawler	memcached.h	/^    bool lru_crawler;        \/* Whether or not to enable the autocrawler thread *\/$/;"	m	struct:settings_s
lru_crawler_cond	items.c	/^static pthread_cond_t  lru_crawler_cond = PTHREAD_COND_INITIALIZER;$/;"	v	file:
lru_crawler_crawl	items.c	/^enum crawler_result_type lru_crawler_crawl(char *slabs) {$/;"	f
lru_crawler_initialized	items.c	/^static int lru_crawler_initialized = 0;\/\/表示是否初始化lru爬虫线程锁和lru爬虫线程条件变量$/;"	v	file:
lru_crawler_lock	items.c	/^static pthread_mutex_t lru_crawler_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
lru_crawler_running	memcached.h	/^    bool          lru_crawler_running; \/* crawl in progress *\/$/;"	m	struct:stats_t
lru_crawler_sleep	memcached.h	/^    int lru_crawler_sleep;  \/* Microsecond sleep between items *\/$/;"	m	struct:settings_s
lru_crawler_tocrawl	memcached.h	/^    uint32_t lru_crawler_tocrawl; \/* Number of items to crawl per run *\/$/;"	m	struct:settings_s
lrutail_reflocked	items.c	/^    uint64_t lrutail_reflocked;\/\/申请item而搜索LRU队列时，被其他worker线程引用的item数量  $/;"	m	struct:__anon1	file:
magic	protocol_binary.h	/^            uint8_t magic;$/;"	m	struct:__anon13::__anon14
magic	protocol_binary.h	/^            uint8_t magic;$/;"	m	struct:__anon15::__anon16
main	memcached.c	/^int main (int argc, char **argv) {$/;"	f
main	sizes.c	/^int main(int argc, char **argv) {$/;"	f
main	testapp.c	/^int main(int argc, char **argv)$/;"	f
main	timedrun.c	/^int main(int argc, char **argv)$/;"	f
main11	stats.c	/^main11(int argc, char **argv) {$/;"	f
main_base	memcached.c	/^static struct event_base *main_base;$/;"	v	typeref:struct:event_base	file:
maintenance_cond	assoc.c	/^static pthread_cond_t maintenance_cond = PTHREAD_COND_INITIALIZER;$/;"	v	file:
maintenance_cond	slabs.c	/^static pthread_cond_t maintenance_cond = PTHREAD_COND_INITIALIZER;$/;"	v	file:
maintenance_tid	assoc.c	/^static pthread_t maintenance_tid;$/;"	v	file:
maintenance_tid	slabs.c	/^static pthread_t maintenance_tid;$/;"	v	file:
malloc_fails	memcached.h	/^    uint64_t      malloc_fails;$/;"	m	struct:stats_t
man1dir	doc/Makefile	/^man1dir = $(mandir)\/man1$/;"	m
man_MANS	doc/Makefile	/^man_MANS = memcached.1$/;"	m
mandir	Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	doc/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
max_fds	memcached.c	/^static int max_fds;$/;"	v	file:
max_results	protocol_binary.h	/^                uint32_t max_results;$/;"	m	struct:__anon42::__anon43::__anon44
maxbytes	memcached.h	/^    size_t maxbytes; \/\/memcached能够使用的最大内存$/;"	m	struct:settings_s
maxconns	memcached.h	/^    int maxconns;\/\/最多允许多少个客户端同时在线。不同于setting.backlog$/;"	m	struct:settings_s
maxconns_fast	memcached.h	/^    bool maxconns_fast;     \/* Whether or not to early close connections *\/$/;"	m	struct:settings_s
maxconns_handler	memcached.c	/^static void maxconns_handler(const int fd, const short which, void *arg) {$/;"	f	file:
maxconnsevent	memcached.c	/^static struct event maxconnsevent;$/;"	v	typeref:struct:event	file:
maximize_sndbuf	memcached.c	/^static void maximize_sndbuf(const int sfd) {$/;"	f	file:
mc_swap64	util.c	/^static uint64_t mc_swap64(uint64_t in) {$/;"	f	file:
mem_avail	slabs.c	/^static size_t mem_avail = 0; \/\/mem_avail指明还有多少内存可以使用$/;"	v	file:
mem_base	slabs.c	/^static void *mem_base = NULL;  \/\/如果不为NULL，则为已启动就把该memcached进程允许的最大使用空间一次性分配好，见slabs_init$/;"	v	file:
mem_current	slabs.c	/^static void *mem_current = NULL;$/;"	v	file:
mem_get_is	t/lib/MemcachedTest.pm	/^sub mem_get_is {$/;"	s
mem_gets	t/lib/MemcachedTest.pm	/^sub mem_gets {$/;"	s
mem_gets_is	t/lib/MemcachedTest.pm	/^sub mem_gets_is {$/;"	s
mem_limit	slabs.c	/^static size_t mem_limit = 0;$/;"	v	file:
mem_malloced	slabs.c	/^static size_t mem_malloced = 0;$/;"	v	file:
mem_stats	t/lib/MemcachedTest.pm	/^sub mem_stats {$/;"	s
memcached_CPPFLAGS	Makefile	/^memcached_CPPFLAGS = -DNDEBUG$/;"	m
memcached_DEPENDENCIES	Makefile	/^memcached_DEPENDENCIES = $(am__append_8)$/;"	m
memcached_LDADD	Makefile	/^memcached_LDADD = $(am__append_7)$/;"	m
memcached_OBJECTS	Makefile	/^memcached_OBJECTS = $(am_memcached_OBJECTS)$/;"	m
memcached_SOURCES	Makefile	/^memcached_SOURCES = memcached.c memcached.h hash.c hash.h \\$/;"	m
memcached_debug_CFLAGS	Makefile	/^memcached_debug_CFLAGS = -fprofile-arcs -ftest-coverage$/;"	m
memcached_debug_DEPENDENCIES	Makefile	/^memcached_debug_DEPENDENCIES = $(am__append_10)$/;"	m
memcached_debug_LDADD	Makefile	/^memcached_debug_LDADD = -lgcov $(am__append_9)$/;"	m
memcached_debug_LINK	Makefile	/^memcached_debug_LINK = $(CCLD) $(memcached_debug_CFLAGS) $(CFLAGS) \\$/;"	m
memcached_debug_OBJECTS	Makefile	/^memcached_debug_OBJECTS = $(am_memcached_debug_OBJECTS)$/;"	m
memcached_debug_SOURCES	Makefile	/^memcached_debug_SOURCES = $(memcached_SOURCES)$/;"	m
memcached_sasl_pwdb	sasl_defs.c	/^static const char *memcached_sasl_pwdb;$/;"	v	file:
memory_allocate	slabs.c	/^static void *memory_allocate(size_t size) { \/\/这里的size一般是settings.item_size_max大小也就是默认1M$/;"	f	file:
message	protocol_binary.h	/^        } message;$/;"	m	union:__anon17	typeref:struct:__anon17::__anon18
message	protocol_binary.h	/^        } message;$/;"	m	union:__anon19	typeref:struct:__anon19::__anon20
message	protocol_binary.h	/^        } message;$/;"	m	union:__anon21	typeref:struct:__anon21::__anon22
message	protocol_binary.h	/^        } message;$/;"	m	union:__anon24	typeref:struct:__anon24::__anon25
message	protocol_binary.h	/^        } message;$/;"	m	union:__anon27	typeref:struct:__anon27::__anon28
message	protocol_binary.h	/^        } message;$/;"	m	union:__anon30	typeref:struct:__anon30::__anon31
message	protocol_binary.h	/^        } message;$/;"	m	union:__anon33	typeref:struct:__anon33::__anon34
message	protocol_binary.h	/^        } message;$/;"	m	union:__anon36	typeref:struct:__anon36::__anon37
message	protocol_binary.h	/^        } message;$/;"	m	union:__anon39	typeref:struct:__anon39::__anon40
message	protocol_binary.h	/^        } message;$/;"	m	union:__anon42	typeref:struct:__anon42::__anon43
mix	jenkins_hash.c	79;"	d	file:
mkdir_p	Makefile	/^mkdir_p = \/usr\/bin\/mkdir -p$/;"	m
mkdir_p	doc/Makefile	/^mkdir_p = \/usr\/bin\/mkdir -p$/;"	m
mkinstalldirs	Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	doc/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
move_status	slabs.c	/^enum move_status {$/;"	g	file:
msgbytes	memcached.h	/^    int    msgbytes;  \/* number of bytes in current msg *\/$/;"	m	struct:conn_t
msgcurr	memcached.h	/^    int    msgcurr;   \/* element in msglist[] being transmitted now *\/$/;"	m	struct:conn_t
msglist	memcached.h	/^    struct msghdr *msglist; \/\/指向msghdr数组  add_msghdr分配空间$/;"	m	struct:conn_t	typeref:struct:conn_t::msghdr
msgsize	memcached.h	/^    int    msgsize;   \/* number of elements allocated in msglist[] *\/$/;"	m	struct:conn_t
msgused	memcached.h	/^    int    msgused;   \/* number of elements used in msglist[] *\/$/;"	m	struct:conn_t
mt_stats_lock	stats.c	/^void mt_stats_lock() { }$/;"	f
mt_stats_unlock	stats.c	/^void mt_stats_unlock() { }$/;"	f
mutex	cache.h	/^    pthread_mutex_t mutex;$/;"	m	struct:__anon8
mutex	memcached.h	/^    pthread_mutex_t   mutex;$/;"	m	struct:thread_stats
mutex	memcached.h	/^    pthread_mutex_t mutex;$/;"	m	struct:stats_t
mutex_lock	memcached.h	/^static inline int mutex_lock(pthread_mutex_t *mutex)$/;"	f
mutex_unlock	memcached.h	698;"	d
my_sasl_hostname	sasl_defs.c	/^char my_sasl_hostname[1025];$/;"	v
name	cache.h	/^    char *name;$/;"	m	struct:__anon8
nbytes	memcached.h	/^    int             nbytes;     \/* size of data *\/$/;"	m	struct:__anon4
nbytes	memcached.h	/^    int             nbytes;     \/* size of data *\/$/;"	m	struct:_stritem
negotiating_prot	memcached.h	/^    negotiating_prot \/* Discovering the protocol *\/$/;"	e	enum:protocol
network_transport	memcached.h	/^enum network_transport {$/;"	g
new	t/lib/MemcachedTest.pm	/^sub new {$/;"	s
new_conn_queue	memcached.h	/^    struct conn_queue *new_conn_queue; \/* queue of new connections to handle *\/$/;"	m	struct:__anon5	typeref:struct:__anon5::conn_queue
new_memcached	t/lib/MemcachedTest.pm	/^sub new_memcached {$/;"	s
new_sock	t/lib/MemcachedTest.pm	/^sub new_sock {$/;"	s
new_socket	memcached.c	/^static int new_socket(struct addrinfo *ai) {$/;"	f	file:
new_socket_unix	memcached.c	/^static int new_socket_unix(void) {$/;"	f	file:
new_udp_sock	t/lib/MemcachedTest.pm	/^sub new_udp_sock {$/;"	s
next	memcached.h	/^    conn   *next;     \/* Used for generating a list of conn structures *\/$/;"	m	struct:conn_t
next	memcached.h	/^    struct _stritem *next;$/;"	m	struct:__anon4	typeref:struct:__anon4::_stritem
next	memcached.h	/^    struct _stritem *next;$/;"	m	struct:_stritem	typeref:struct:_stritem::_stritem
next	stats.c	/^    PREFIX_STATS *next;$/;"	m	struct:_prefix_stats	file:
next	thread.c	/^    CQ_ITEM          *next;$/;"	m	struct:conn_queue_item	file:
nkey	memcached.h	/^    uint8_t         nkey;       \/* key length, w\/terminating null and padding *\/$/;"	m	struct:__anon4
nkey	memcached.h	/^    uint8_t         nkey;       \/* key length, w\/terminating null and padding *\/$/;"	m	struct:_stritem
noinst_PROGRAMS	Makefile	/^noinst_PROGRAMS = memcached-debug$(EXEEXT) sizes$(EXEEXT) \\$/;"	m
noreply	memcached.h	/^    bool   noreply;   \/* True if the reply should not be sent. *\/$/;"	m	struct:conn_t
notify_event	memcached.h	/^    struct event notify_event;  \/* listen event for notify pipe *\/ \/\/用于监听管道读事件的event$/;"	m	struct:__anon5	typeref:struct:__anon5::event
notify_receive_fd	memcached.h	/^    int notify_receive_fd;      \/* receiving end of notify pipe *\/ \/\/管道的读端fd$/;"	m	struct:__anon5
notify_send_fd	memcached.h	/^    int notify_send_fd;         \/* sending end of notify pipe *\/ \/\/管道的写端fd$/;"	m	struct:__anon5
nsuffix	memcached.h	/^    uint8_t         nsuffix;    \/* length of flags-and-length string *\/$/;"	m	struct:__anon4
nsuffix	memcached.h	/^    uint8_t         nsuffix;    \/* length of flags-and-length string *\/$/;"	m	struct:_stritem
ntohll	util.c	/^uint64_t ntohll(uint64_t val) {$/;"	f
num_deletes	stats.c	/^    uint64_t      num_deletes;\/\/删除次数$/;"	m	struct:_prefix_stats	file:
num_gets	stats.c	/^    uint64_t      num_gets;\/\/get次数$/;"	m	struct:_prefix_stats	file:
num_hits	stats.c	/^    uint64_t      num_hits;\/\/get命中次数$/;"	m	struct:_prefix_stats	file:
num_prefixes	stats.c	/^static int num_prefixes = 0; \/\/prefix_stats hash表中总的key节点个数$/;"	v	file:
num_sets	stats.c	/^    uint64_t      num_sets;\/\/设置次数$/;"	m	struct:_prefix_stats	file:
num_threads	memcached.h	/^    int num_threads;        \/* number of worker (without dispatcher) libevent threads to run *\/$/;"	m	struct:settings_s
num_threads_per_udp	memcached.h	/^    int num_threads_per_udp; \/* number of worker threads serving each udp socket *\/$/;"	m	struct:settings_s
nz_strcmp	slabs.c	/^static int nz_strcmp(int nzlength, const char *nz, const char *z) {$/;"	f	file:
offset	memcached.h	/^        size_t offset;$/;"	m	struct:conn_t::__anon7
old_hashtable	assoc.c	/^static item** old_hashtable = 0;$/;"	v	file:
oldest_live	memcached.h	/^    rel_time_t oldest_live; \/* ignore existing items older than this *\/$/;"	m	struct:settings_s
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	doc/Makefile	/^oldincludedir = \/usr\/include$/;"	m
opaque	memcached.h	/^    int opaque;$/;"	m	struct:conn_t
opaque	protocol_binary.h	/^            uint32_t opaque;$/;"	m	struct:__anon13::__anon14
opaque	protocol_binary.h	/^            uint32_t opaque;$/;"	m	struct:__anon15::__anon16
opcode	protocol_binary.h	/^            uint8_t opcode;$/;"	m	struct:__anon13::__anon14
opcode	protocol_binary.h	/^            uint8_t opcode;$/;"	m	struct:__anon15::__anon16
out_of_memory	memcached.c	/^static void out_of_memory(conn *c, char *ascii_error) {$/;"	f	file:
out_string	memcached.c	/^static void out_string(conn *c, const char *str) {$/;"	f	file:
outofmemory	items.c	/^    uint64_t outofmemory; \/\/从slab中获取mem失败的次数，见do_item_alloc  \/\/为item申请内存，失败的次数  $/;"	m	struct:__anon1	file:
pdfdir	Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	doc/Makefile	/^pdfdir = ${docdir}$/;"	m
perslab	slabs.c	/^    unsigned int perslab;   \/* how many items per slab *\/$/;"	m	struct:__anon2	file:
pkgdatadir	Makefile	/^pkgdatadir = $(datadir)\/memcached$/;"	m
pkgdatadir	doc/Makefile	/^pkgdatadir = $(datadir)\/memcached$/;"	m
pkginclude_HEADERS	Makefile	/^pkginclude_HEADERS = protocol_binary.h$/;"	m
pkgincludedir	Makefile	/^pkgincludedir = $(includedir)\/memcached$/;"	m
pkgincludedir	doc/Makefile	/^pkgincludedir = $(includedir)\/memcached$/;"	m
pkglibdir	Makefile	/^pkglibdir = $(libdir)\/memcached$/;"	m
pkglibdir	doc/Makefile	/^pkglibdir = $(libdir)\/memcached$/;"	m
pkglibexecdir	Makefile	/^pkglibexecdir = $(libexecdir)\/memcached$/;"	m
pkglibexecdir	doc/Makefile	/^pkglibexecdir = $(libexecdir)\/memcached$/;"	m
port	memcached.h	/^    int port; \/\/监听端口，默认11211$/;"	m	struct:settings_s
port	t/lib/MemcachedTest.pm	/^sub port { $_[0]{port} }$/;"	s
port	testapp.c	/^static in_port_t port;$/;"	v	file:
power_largest	slabs.c	/^static int power_largest; \/\/chunk最大的item对应的slabclass[]id号，也就是chunk等于settings.item_size_max的item$/;"	v	file:
prefix	Makefile	/^prefix = \/usr\/local$/;"	m
prefix	doc/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	stats.c	/^    char         *prefix;$/;"	m	struct:_prefix_stats	file:
prefix_delimiter	memcached.h	/^    char prefix_delimiter;  \/* character that marks a key prefix (for stats) *\/ \/\/一般多业务功能的时候有用到$/;"	m	struct:settings_s
prefix_len	stats.c	/^    size_t        prefix_len;$/;"	m	struct:_prefix_stats	file:
prefix_stats	stats.c	/^static PREFIX_STATS *prefix_stats[PREFIX_HASH_SIZE]; \/\/存储key相关的详细信息 $/;"	v	file:
prev	memcached.h	/^    struct _stritem *prev;$/;"	m	struct:__anon4	typeref:struct:__anon4::_stritem
prev	memcached.h	/^    struct _stritem *prev;$/;"	m	struct:_stritem	typeref:struct:_stritem::_stritem
primary_hashtable	assoc.c	/^static item** primary_hashtable = 0;$/;"	v	file:
process_arithmetic_command	memcached.c	/^static void process_arithmetic_command(conn *c, token_t *tokens, const size_t ntokens, const bool incr) {$/;"	f	file:
process_bin_append_prepend	memcached.c	/^static void process_bin_append_prepend(conn *c) {$/;"	f	file:
process_bin_complete_sasl_auth	memcached.c	/^static void process_bin_complete_sasl_auth(conn *c) {$/;"	f	file:
process_bin_delete	memcached.c	/^static void process_bin_delete(conn *c) {$/;"	f	file:
process_bin_flush	memcached.c	/^static void process_bin_flush(conn *c) {$/;"	f	file:
process_bin_get_or_touch	memcached.c	/^static void process_bin_get_or_touch(conn *c) {$/;"	f	file:
process_bin_sasl_auth	memcached.c	/^static void process_bin_sasl_auth(conn *c) {$/;"	f	file:
process_bin_stat	memcached.c	/^static void process_bin_stat(conn *c) {$/;"	f	file:
process_bin_update	memcached.c	/^static void process_bin_update(conn *c) {$/;"	f	file:
process_command	memcached.c	/^static void process_command(conn *c, char *command) {$/;"	f	file:
process_delete_command	memcached.c	/^static void process_delete_command(conn *c, token_t *tokens, const size_t ntokens) {$/;"	f	file:
process_get_command	memcached.c	/^static inline void process_get_command(conn *c, token_t *tokens, size_t ntokens, bool return_cas) {$/;"	f	file:
process_slabs_automove_command	memcached.c	/^static void process_slabs_automove_command(conn *c, token_t *tokens, const size_t ntokens) {$/;"	f	file:
process_started	memcached.c	/^time_t process_started;     \/* when the process was started *\/$/;"	v
process_stat	memcached.c	/^static void process_stat(conn *c, token_t *tokens, const size_t ntokens) {$/;"	f	file:
process_stat_settings	memcached.c	/^static void process_stat_settings(ADD_STAT add_stats, void *c) {$/;"	f	file:
process_stats_conns	memcached.c	/^static void process_stats_conns(ADD_STAT add_stats, void *c) {$/;"	f	file:
process_stats_detail	memcached.c	/^inline static void process_stats_detail(conn *c, const char *command) {$/;"	f	file:
process_touch_command	memcached.c	/^static void process_touch_command(conn *c, token_t *tokens, const size_t ntokens) {$/;"	f	file:
process_update_command	memcached.c	/^static void process_update_command(conn *c, token_t *tokens, const size_t ntokens, int comm, bool handle_cas) {$/;"	f	file:
process_verbosity_command	memcached.c	/^static void process_verbosity_command(conn *c, token_t *tokens, const size_t ntokens) {$/;"	f	file:
program_transform_name	Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	doc/Makefile	/^program_transform_name = s,x,x,$/;"	m
prot_text	memcached.c	/^static const char *prot_text(enum protocol prot) {$/;"	f	file:
protocol	memcached.h	/^    enum protocol protocol;   \/* which protocol this connection speaks *\/$/;"	m	struct:conn_t	typeref:enum:conn_t::protocol
protocol	memcached.h	/^enum protocol {$/;"	g
protocol_binary_command	protocol_binary.h	/^    } protocol_binary_command;$/;"	t	typeref:enum:__anon11
protocol_binary_datatypes	protocol_binary.h	/^    } protocol_binary_datatypes;$/;"	t	typeref:enum:__anon12
protocol_binary_magic	protocol_binary.h	/^    } protocol_binary_magic;$/;"	t	typeref:enum:__anon9
protocol_binary_request_add	protocol_binary.h	/^    typedef protocol_binary_request_set protocol_binary_request_add;$/;"	t
protocol_binary_request_append	protocol_binary.h	/^    typedef protocol_binary_request_no_extras protocol_binary_request_append;$/;"	t
protocol_binary_request_decr	protocol_binary.h	/^    typedef protocol_binary_request_incr protocol_binary_request_decr;$/;"	t
protocol_binary_request_delete	protocol_binary.h	/^    typedef protocol_binary_request_no_extras protocol_binary_request_delete;$/;"	t
protocol_binary_request_flush	protocol_binary.h	/^    } protocol_binary_request_flush;$/;"	t	typeref:union:__anon24
protocol_binary_request_gat	protocol_binary.h	/^    } protocol_binary_request_gat;$/;"	t	typeref:union:__anon39
protocol_binary_request_gatk	protocol_binary.h	/^    typedef protocol_binary_request_gat protocol_binary_request_gatk;$/;"	t
protocol_binary_request_gatkq	protocol_binary.h	/^    typedef protocol_binary_request_gat protocol_binary_request_gatkq;$/;"	t
protocol_binary_request_gatq	protocol_binary.h	/^    typedef protocol_binary_request_gat protocol_binary_request_gatq;$/;"	t
protocol_binary_request_get	protocol_binary.h	/^    typedef protocol_binary_request_no_extras protocol_binary_request_get;$/;"	t
protocol_binary_request_getk	protocol_binary.h	/^    typedef protocol_binary_request_no_extras protocol_binary_request_getk;$/;"	t
protocol_binary_request_getkq	protocol_binary.h	/^    typedef protocol_binary_request_no_extras protocol_binary_request_getkq;$/;"	t
protocol_binary_request_getq	protocol_binary.h	/^    typedef protocol_binary_request_no_extras protocol_binary_request_getq;$/;"	t
protocol_binary_request_header	protocol_binary.h	/^    } protocol_binary_request_header;$/;"	t	typeref:union:__anon13
protocol_binary_request_incr	protocol_binary.h	/^    } protocol_binary_request_incr;$/;"	t	typeref:union:__anon30
protocol_binary_request_no_extras	protocol_binary.h	/^    } protocol_binary_request_no_extras;$/;"	t	typeref:union:__anon17
protocol_binary_request_noop	protocol_binary.h	/^    typedef protocol_binary_request_no_extras protocol_binary_request_noop;$/;"	t
protocol_binary_request_prepend	protocol_binary.h	/^    typedef protocol_binary_request_no_extras protocol_binary_request_prepend;$/;"	t
protocol_binary_request_quit	protocol_binary.h	/^    typedef protocol_binary_request_no_extras protocol_binary_request_quit;$/;"	t
protocol_binary_request_rangeop	protocol_binary.h	/^    } protocol_binary_request_rangeop;$/;"	t	typeref:union:__anon42
protocol_binary_request_rappend	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rappend;$/;"	t
protocol_binary_request_rappendq	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rappendq;$/;"	t
protocol_binary_request_rdecr	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rdecr;$/;"	t
protocol_binary_request_rdecrq	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rdecrq;$/;"	t
protocol_binary_request_rdelete	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rdelete;$/;"	t
protocol_binary_request_rdeleteq	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rdeleteq;$/;"	t
protocol_binary_request_replace	protocol_binary.h	/^    typedef protocol_binary_request_set protocol_binary_request_replace;$/;"	t
protocol_binary_request_rget	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rget;$/;"	t
protocol_binary_request_rincr	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rincr;$/;"	t
protocol_binary_request_rincrq	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rincrq;$/;"	t
protocol_binary_request_rprepend	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rprepend;$/;"	t
protocol_binary_request_rprependq	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rprependq;$/;"	t
protocol_binary_request_rset	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rset;$/;"	t
protocol_binary_request_rsetq	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rsetq;$/;"	t
protocol_binary_request_set	protocol_binary.h	/^    } protocol_binary_request_set;$/;"	t	typeref:union:__anon27
protocol_binary_request_stats	protocol_binary.h	/^    typedef protocol_binary_request_no_extras protocol_binary_request_stats;$/;"	t
protocol_binary_request_touch	protocol_binary.h	/^    } protocol_binary_request_touch;$/;"	t	typeref:union:__anon36
protocol_binary_request_version	protocol_binary.h	/^    typedef protocol_binary_request_no_extras protocol_binary_request_version;$/;"	t
protocol_binary_response_add	protocol_binary.h	/^    typedef protocol_binary_response_no_extras protocol_binary_response_add;$/;"	t
protocol_binary_response_append	protocol_binary.h	/^    typedef protocol_binary_response_no_extras protocol_binary_response_append;$/;"	t
protocol_binary_response_decr	protocol_binary.h	/^    typedef protocol_binary_response_incr protocol_binary_response_decr;$/;"	t
protocol_binary_response_delete	protocol_binary.h	/^    typedef protocol_binary_response_no_extras protocol_binary_response_delete;$/;"	t
protocol_binary_response_flush	protocol_binary.h	/^    typedef protocol_binary_response_no_extras protocol_binary_response_flush;$/;"	t
protocol_binary_response_gat	protocol_binary.h	/^    typedef protocol_binary_response_get protocol_binary_response_gat;$/;"	t
protocol_binary_response_gatk	protocol_binary.h	/^    typedef protocol_binary_response_get protocol_binary_response_gatk;$/;"	t
protocol_binary_response_gatkq	protocol_binary.h	/^    typedef protocol_binary_response_get protocol_binary_response_gatkq;$/;"	t
protocol_binary_response_gatq	protocol_binary.h	/^    typedef protocol_binary_response_get protocol_binary_response_gatq;$/;"	t
protocol_binary_response_get	protocol_binary.h	/^    } protocol_binary_response_get;$/;"	t	typeref:union:__anon21
protocol_binary_response_getk	protocol_binary.h	/^    typedef protocol_binary_response_get protocol_binary_response_getk;$/;"	t
protocol_binary_response_getkq	protocol_binary.h	/^    typedef protocol_binary_response_get protocol_binary_response_getkq;$/;"	t
protocol_binary_response_getq	protocol_binary.h	/^    typedef protocol_binary_response_get protocol_binary_response_getq;$/;"	t
protocol_binary_response_header	protocol_binary.h	/^    } protocol_binary_response_header;$/;"	t	typeref:union:__anon15
protocol_binary_response_incr	protocol_binary.h	/^    } protocol_binary_response_incr;$/;"	t	typeref:union:__anon33
protocol_binary_response_no_extras	protocol_binary.h	/^    } protocol_binary_response_no_extras;$/;"	t	typeref:union:__anon19
protocol_binary_response_noop	protocol_binary.h	/^    typedef protocol_binary_response_no_extras protocol_binary_response_noop;$/;"	t
protocol_binary_response_prepend	protocol_binary.h	/^    typedef protocol_binary_response_no_extras protocol_binary_response_prepend;$/;"	t
protocol_binary_response_quit	protocol_binary.h	/^    typedef protocol_binary_response_no_extras protocol_binary_response_quit;$/;"	t
protocol_binary_response_replace	protocol_binary.h	/^    typedef protocol_binary_response_no_extras protocol_binary_response_replace;$/;"	t
protocol_binary_response_set	protocol_binary.h	/^    typedef protocol_binary_response_no_extras protocol_binary_response_set;$/;"	t
protocol_binary_response_stats	protocol_binary.h	/^    typedef protocol_binary_response_no_extras protocol_binary_response_stats;$/;"	t
protocol_binary_response_status	protocol_binary.h	/^    } protocol_binary_response_status;$/;"	t	typeref:enum:__anon10
protocol_binary_response_touch	protocol_binary.h	/^    typedef protocol_binary_response_no_extras protocol_binary_response_touch;$/;"	t
protocol_binary_response_version	protocol_binary.h	/^    typedef protocol_binary_response_no_extras protocol_binary_response_version;$/;"	t
psdir	Makefile	/^psdir = ${docdir}$/;"	m
psdir	doc/Makefile	/^psdir = ${docdir}$/;"	m
ptr	cache.h	/^    void **ptr;$/;"	m	struct:__anon8
raw_command	testapp.c	/^static off_t raw_command(char* buf,$/;"	f	file:
rbuf	memcached.h	/^    char   *rbuf;   \/** buffer to read commands into *\/$/;"	m	struct:conn_t
rbytes	memcached.h	/^    int    rbytes;  \/** how much data, starting from rcur, do we have unparsed *\/$/;"	m	struct:conn_t
rcurr	memcached.h	/^    char   *rcurr;  \/** but if we parsed some already, this is where we stopped *\/$/;"	m	struct:conn_t
read_ascii_response	testapp.c	/^static void read_ascii_response(char *buffer, size_t size) {$/;"	f	file:
read_buffer_size	thread.c	/^    int               read_buffer_size; \/\/默认DATA_BUFFER_SIZE$/;"	m	struct:conn_queue_item	file:
read_file	version.pl	/^sub read_file {$/;"	s
realtime	memcached.c	/^static rel_time_t realtime(const time_t exptime) {$/;"	f	file:
reassign_result_type	slabs.h	/^enum reassign_result_type {$/;"	g
rebalance_tid	slabs.c	/^static pthread_t rebalance_tid;$/;"	v	file:
reclaimed	items.c	/^    uint64_t reclaimed; \/\/item被重复使用的次数，赋值见do_item_alloc  \/\/在申请item时，发现过期并回收的item数量  $/;"	m	struct:__anon1	file:
reclaimed	memcached.h	/^    uint64_t      reclaimed;$/;"	m	struct:stats_t
redzone_pattern	cache.c	/^const uint64_t redzone_pattern = 0xdeadbeefcafebabe;$/;"	v
refcount	memcached.h	/^    unsigned short  refcount;  \/\/在do_item_link中增加  \/\/新开盘的默认初值为1$/;"	m	struct:_stritem
refcount	memcached.h	/^    unsigned short  refcount;$/;"	m	struct:__anon4
refcount_decr	thread.c	/^unsigned short refcount_decr(unsigned short *refcount) {$/;"	f
refcount_incr	thread.c	/^unsigned short refcount_incr(unsigned short *refcount) {$/;"	f
register_thread_initialized	thread.c	/^static void register_thread_initialized(void) {$/;"	f	file:
rejected_conns	memcached.h	/^    uint64_t      rejected_conns;$/;"	m	struct:stats_t
rel_time_t	memcached.h	/^typedef unsigned int rel_time_t;$/;"	t
remaining	memcached.h	/^    uint32_t        remaining;  \/* Max keys to crawl per slab per invocation *\/$/;"	m	struct:__anon4
remove_pidfile	memcached.c	/^static void remove_pidfile(const char *pid_file) {$/;"	f	file:
reqs_per_event	memcached.h	/^    int reqs_per_event;     \/* Maximum number of io to process on each$/;"	m	struct:settings_s
request	protocol_binary.h	/^        } request;$/;"	m	union:__anon13	typeref:struct:__anon13::__anon14
request_addr	memcached.h	/^    struct sockaddr_in6 request_addr; \/* udp: Who sent the most recent request *\/$/;"	m	struct:conn_t	typeref:struct:conn_t::sockaddr_in6
request_addr_size	memcached.h	/^    socklen_t request_addr_size;$/;"	m	struct:conn_t
request_id	memcached.h	/^    int    request_id; \/* Incoming UDP request ID, if this is a UDP "connection" *\/$/;"	m	struct:conn_t
requested	slabs.c	/^    size_t requested; \/* The number of requested bytes *\/$/;"	m	struct:__anon2	file:
reserved	protocol_binary.h	/^                uint8_t  reserved;$/;"	m	struct:__anon42::__anon43::__anon44
reserved	protocol_binary.h	/^            uint16_t reserved;$/;"	m	struct:__anon13::__anon14
reserved_fds	memcached.h	/^    unsigned int  reserved_fds;$/;"	m	struct:stats_t
reset_cmd_handler	memcached.c	/^static void reset_cmd_handler(conn *c) {$/;"	f	file:
response	protocol_binary.h	/^        } response;$/;"	m	union:__anon15	typeref:struct:__anon15::__anon16
ritem	memcached.h	/^    char   *ritem;  \/** when we read in an item's value, it goes here *\/$/;"	m	struct:conn_t
rlbytes	memcached.h	/^    int    rlbytes; \/\/数据部分还差多少 赋值见process_update_command和drive_machine$/;"	m	struct:conn_t
rot	jenkins_hash.c	33;"	d	file:
rotl32	murmur3_hash.c	/^static inline uint32_t rotl32 ( uint32_t x, int8_t r )$/;"	f	file:
rsize	memcached.h	/^	int    rsize;   \/** total allocated size of rbuf *\/$/;"	m	struct:conn_t
run_test	stats.c	/^static void run_test(char *what, void (*func)(void)) {$/;"	f	file:
s_clsid	memcached.h	/^    int s_clsid;\/\/源slab class的下标索引  $/;"	m	struct:slab_rebalance
safe_recv	testapp.c	/^static bool safe_recv(void *buf, size_t len) {$/;"	f	file:
safe_recv_packet	testapp.c	/^static bool safe_recv_packet(void *buf, size_t size) {$/;"	f	file:
safe_send	testapp.c	/^static void safe_send(const void* buf, size_t len, bool hickup)$/;"	f	file:
safe_strtol	util.c	/^bool safe_strtol(const char *str, int32_t *out) {$/;"	f
safe_strtoll	util.c	/^bool safe_strtoll(const char *str, int64_t *out) {$/;"	f
safe_strtoul	util.c	/^bool safe_strtoul(const char *str, uint32_t *out) {$/;"	f
safe_strtoull	util.c	/^bool safe_strtoull(const char *str, uint64_t *out) {$/;"	f
sanitycheck	memcached.c	/^static bool sanitycheck(void) {$/;"	f	file:
sasl	memcached.h	/^    bool sasl;              \/* SASL on\/off *\/$/;"	m	struct:settings_s
sasl_callback_ft	sasl_defs.c	/^typedef int (*sasl_callback_ft)(void);$/;"	t	file:
sasl_callbacks	sasl_defs.c	/^static sasl_callback_t sasl_callbacks[] = {$/;"	v	file:
sasl_conn	memcached.h	/^    sasl_conn_t *sasl_conn;$/;"	m	struct:conn_t
sasl_conn_t	sasl_defs.h	/^typedef void* sasl_conn_t;$/;"	t
sasl_dispose	sasl_defs.h	19;"	d
sasl_getconf	sasl_defs.c	/^static int sasl_getconf(void *context, const char **path)$/;"	f	file:
sasl_getprop	sasl_defs.h	24;"	d
sasl_listmech	sasl_defs.h	21;"	d
sasl_log	sasl_defs.c	/^static int sasl_log(void *context, int level, const char *message)$/;"	f	file:
sasl_server_new	sasl_defs.h	20;"	d
sasl_server_start	sasl_defs.h	22;"	d
sasl_server_step	sasl_defs.h	23;"	d
sasl_server_userdb_checkpass	sasl_defs.c	/^static int sasl_server_userdb_checkpass(sasl_conn_t *conn,$/;"	f	file:
save_pid	memcached.c	/^static void save_pid(const char *pid_file) {$/;"	f	file:
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	doc/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbytes	memcached.h	/^    int    sbytes;    \/* how many bytes to swallow *\/$/;"	m	struct:conn_t
send_ascii_command	testapp.c	/^static void send_ascii_command(const char *buf) {$/;"	f	file:
server_pid	testapp.c	/^static pid_t server_pid;$/;"	v	file:
server_socket	memcached.c	/^static int server_socket(const char *interface,$/;"	f	file:
server_socket_unix	memcached.c	/^static int server_socket_unix(const char *path, int access_mask) {$/;"	f	file:
server_sockets	memcached.c	/^static int server_sockets(int port, enum network_transport transport,$/;"	f	file:
server_stats	memcached.c	/^static void server_stats(ADD_STAT add_stats, conn *c) {$/;"	f	file:
set_cmds	memcached.h	/^    uint64_t      set_cmds;$/;"	m	struct:stats_t
set_cmds	memcached.h	/^    uint64_t  set_cmds; \/\/set次数$/;"	m	struct:slab_stats
set_noreply_maybe	memcached.c	/^static inline bool set_noreply_maybe(conn *c, token_t *tokens, size_t ntokens)$/;"	f	file:
settings	globals.c	/^struct settings settings;$/;"	v	typeref:struct:settings
settings	memcached.c	/^struct settings_s settings;$/;"	v	typeref:struct:settings_s
settings	stats.c	/^struct settings_s settings;$/;"	v	typeref:struct:settings_s
settings_init	memcached.c	/^static void settings_init(void) {$/;"	f	file:
settings_s	memcached.h	/^struct settings_s {$/;"	s
setup_thread	thread.c	/^static void setup_thread(LIBEVENT_THREAD *me) {$/;"	f	file:
sfd	memcached.h	/^    int    sfd;$/;"	m	struct:conn_t
sfd	thread.c	/^    int               sfd; \/\/客户端连接的fd$/;"	m	struct:conn_queue_item	file:
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	doc/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
shutdown_command	memcached.h	/^    bool shutdown_command; \/* allow shutdown command *\/$/;"	m	struct:settings_s
shutdown_memcached_server	testapp.c	/^static enum test_return shutdown_memcached_server(void) {$/;"	f	file:
sig_handler	memcached.c	/^static void sig_handler(const int sig) {$/;"	f	file:
sigignore	memcached.c	/^static int sigignore(int sig) {$/;"	f	file:
size	memcached.h	/^        size_t size;$/;"	m	struct:conn_t::__anon7
size	protocol_binary.h	/^                uint16_t size;$/;"	m	struct:__anon42::__anon43::__anon44
size	slabs.c	/^    unsigned int size;      \/* sizes of items *\/$/;"	m	struct:__anon2	file:
sizes	items.c	/^static unsigned int sizes[LARGEST_ID];\/\/每个classid的LRU链的长度(item个数）$/;"	v	file:
sizes_LDADD	Makefile	/^sizes_LDADD = $(LDADD)$/;"	m
sizes_OBJECTS	Makefile	/^sizes_OBJECTS = sizes.$(OBJEXT)$/;"	m
sizes_SOURCES	Makefile	/^sizes_SOURCES = sizes.c$/;"	m
sl_curr	slabs.c	/^    unsigned int sl_curr;   \/* total free items in list *\/$/;"	m	struct:__anon2	file:
slab_automove	memcached.h	/^    int slab_automove;     \/* Whether or not to automatically move slabs *\/ $/;"	m	struct:settings_s
slab_automove_decision	slabs.c	/^static int slab_automove_decision(int *src, int *dst) {$/;"	f	file:
slab_bulk_check	slabs.c	/^int slab_bulk_check = DEFAULT_SLAB_BULK_CHECK;$/;"	v
slab_end	memcached.h	/^    void *slab_end;$/;"	m	struct:slab_rebalance
slab_list	slabs.c	/^    void **slab_list;       \/* array of slab pointers *\/ \/\/例如多个1M大小chunk的slab，就通过该list管理$/;"	m	struct:__anon2	file:
slab_maintenance_thread	slabs.c	/^static void *slab_maintenance_thread(void *arg) { \/\/automove线程需要知道每一个尺寸的item的被踢情况，然后判断哪一类item资源紧缺，哪一类item资源又过剩。$/;"	f	file:
slab_pos	memcached.h	/^    void *slab_pos;$/;"	m	struct:slab_rebalance
slab_reassign	memcached.h	/^    bool slab_reassign;     \/* Whether or not slab reassignment is allowed *\/$/;"	m	struct:settings_s
slab_reassign_running	memcached.h	/^    bool          slab_reassign_running; \/* slab reassign in progress *\/ \/\/是否正在进行页迁移 slab_rebalance_finish$/;"	m	struct:stats_t
slab_rebal	globals.c	/^struct slab_rebalance slab_rebal;$/;"	v	typeref:struct:slab_rebalance
slab_rebal	memcached.c	/^struct slab_rebalance slab_rebal; \/\/真正进行分页操作在函数slab_rebalance_move$/;"	v	typeref:struct:slab_rebalance
slab_rebalance	memcached.h	/^struct slab_rebalance { \/\/存储在slab_rebal   赋值可以参考slab_rebalance_start  重分页的时候用$/;"	s
slab_rebalance_cond	slabs.c	/^static pthread_cond_t slab_rebalance_cond = PTHREAD_COND_INITIALIZER;$/;"	v	file:
slab_rebalance_finish	slabs.c	/^static void slab_rebalance_finish(void) {$/;"	f	file:
slab_rebalance_move	slabs.c	/^static int slab_rebalance_move(void) {$/;"	f	file:
slab_rebalance_signal	globals.c	/^volatile int slab_rebalance_signal;$/;"	v
slab_rebalance_signal	memcached.c	/^volatile int slab_rebalance_signal;$/;"	v
slab_rebalance_start	slabs.c	/^static int slab_rebalance_start(void) {$/;"	f	file:
slab_rebalance_thread	slabs.c	/^static void *slab_rebalance_thread(void *arg) {$/;"	f	file:
slab_start	memcached.h	/^    void *slab_start;$/;"	m	struct:slab_rebalance
slab_stats	memcached.h	/^    struct slab_stats slab_stats[MAX_NUMBER_OF_SLAB_CLASSES];$/;"	m	struct:thread_stats	typeref:struct:thread_stats::slab_stats
slab_stats	memcached.h	/^struct slab_stats { \/\/存储于thread_stats->slab_stats$/;"	s
slab_stats_aggregate	thread.c	/^void slab_stats_aggregate(struct thread_stats *stats, struct slab_stats *out) {$/;"	f
slabclass	slabs.c	/^static slabclass_t slabclass[MAX_NUMBER_OF_SLAB_CLASSES];$/;"	v	file:
slabclass_t	slabs.c	/^} slabclass_t;$/;"	t	typeref:struct:__anon2	file:
slabs	slabs.c	/^    unsigned int slabs;     \/* how many slabs were allocated for this class *\/$/;"	m	struct:__anon2	file:
slabs_adjust_mem_requested	slabs.c	/^void slabs_adjust_mem_requested(unsigned int id, size_t old, size_t ntotal)$/;"	f
slabs_alloc	slabs.c	/^void *slabs_alloc(size_t size, unsigned int id) {$/;"	f
slabs_clsid	memcached.h	/^    uint8_t         slabs_clsid;\/* which slab class we're in *\/$/;"	m	struct:__anon4
slabs_clsid	memcached.h	/^    uint8_t         slabs_clsid;\/* which slab class we're in *\/$/;"	m	struct:_stritem
slabs_clsid	slabs.c	/^unsigned int slabs_clsid(const size_t size) {$/;"	f
slabs_free	slabs.c	/^void slabs_free(void *ptr, size_t size, unsigned int id) {$/;"	f
slabs_get_curr	slabs.c	/^unsigned int slabs_get_curr(item *it) {$/;"	f
slabs_init	slabs.c	/^void slabs_init(const size_t limit, const double factor, const bool prealloc) {$/;"	f
slabs_lock	slabs.c	/^static pthread_mutex_t slabs_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
slabs_moved	memcached.h	/^    uint64_t      slabs_moved;       \/* times slabs were moved around *\/ \/\/进行页迁移的次数 slab_rebalance_finish$/;"	m	struct:stats_t
slabs_preallocate	slabs.c	/^static void slabs_preallocate (const unsigned int maxslabs) {$/;"	f	file:
slabs_reassign	slabs.c	/^enum reassign_result_type slabs_reassign(int src, int dst) {$/;"	f
slabs_reassign_pick_any	slabs.c	/^static int slabs_reassign_pick_any(int dst) { \/\/随机从slabclass[]中选出一个slabs数大于1的$/;"	f	file:
slabs_rebalance_lock	slabs.c	/^static pthread_mutex_t slabs_rebalance_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
slabs_rebalancer_pause	slabs.c	/^void slabs_rebalancer_pause(void) {$/;"	f
slabs_rebalancer_resume	slabs.c	/^void slabs_rebalancer_resume(void) {$/;"	f
slabs_stats	slabs.c	/^void slabs_stats(ADD_STAT add_stats, void *c) {$/;"	f
sleep	t/lib/MemcachedTest.pm	/^sub sleep {$/;"	s
slots	slabs.c	/^    void *slots;           \/* list of item ptrs *\/$/;"	m	struct:__anon2	file:
sock	t/lib/MemcachedTest.pm	/^sub sock {$/;"	s
sock	testapp.c	/^static int sock;$/;"	v	file:
socketpath	memcached.h	/^    char *socketpath;   \/* path to unix socket if using local socket *\/$/;"	m	struct:settings_s
spawn_and_wait	timedrun.c	/^static int spawn_and_wait(char **argv)$/;"	f	file:
split_slab_page_into_freelist	slabs.c	/^static void split_slab_page_into_freelist(char *ptr, const unsigned int id) {$/;"	f	file:
srcdir	Makefile	/^srcdir = .$/;"	m
srcdir	doc/Makefile	/^srcdir = .$/;"	m
start_assoc_maintenance_thread	assoc.c	/^int start_assoc_maintenance_thread() {$/;"	f
start_item_crawler_thread	items.c	/^int start_item_crawler_thread(void) {\/\/可以在启动命令行中加上-o lru_crawler或者客户端执行lru_crawler enable命令来启动爬虫线程$/;"	f
start_memcached_server	testapp.c	/^static enum test_return start_memcached_server(void) {$/;"	f	file:
start_server	testapp.c	/^static pid_t start_server(in_port_t *port_out, bool daemon, int timeout) {$/;"	f	file:
start_slab_maintenance_thread	slabs.c	/^int start_slab_maintenance_thread(void) { \/\/由main函数调用，如果settings.slab_reassign为false将不会调用本函数(默认是false)  $/;"	f
started	memcached.h	/^    time_t        started;          \/* when the process was started *\/$/;"	m	struct:stats_t
started_expanding	assoc.c	/^static bool started_expanding = false;$/;"	v	file:
state	memcached.h	/^    enum conn_states  state;$/;"	m	struct:conn_t	typeref:enum:conn_t::conn_states
state_text	memcached.c	/^static const char *state_text(enum conn_states state) {$/;"	f	file:
stats	globals.c	/^struct stats stats;$/;"	v	typeref:struct:stats
stats	memcached.c	/^struct stats_t stats;$/;"	v	typeref:struct:stats_t
stats	memcached.h	/^    struct thread_stats stats;  \/* Stats generated by this thread *\/$/;"	m	struct:__anon5	typeref:struct:__anon5::thread_stats
stats	memcached.h	/^    } stats;$/;"	m	struct:conn_t	typeref:struct:conn_t::__anon7
stats_init	memcached.c	/^static void stats_init(void) {$/;"	f	file:
stats_lock	thread.c	/^static pthread_mutex_t stats_lock;$/;"	v	file:
stats_prefix_clear	stats.c	/^void stats_prefix_clear() {$/;"	f
stats_prefix_dump	stats.c	/^char *stats_prefix_dump(int *length) {$/;"	f
stats_prefix_find	stats.c	/^static PREFIX_STATS *stats_prefix_find(const char *key, const size_t nkey) {$/;"	f	file:
stats_prefix_init	stats.c	/^void stats_prefix_init() {$/;"	f
stats_prefix_record_delete	stats.c	/^void stats_prefix_record_delete(const char *key, const size_t nkey) {$/;"	f
stats_prefix_record_get	stats.c	/^void stats_prefix_record_get(const char *key, const size_t nkey, const bool is_hit) {$/;"	f
stats_prefix_record_set	stats.c	/^void stats_prefix_record_set(const char *key, const size_t nkey) {\/\/记录某key被设置的次数$/;"	f
stats_reset	memcached.c	/^static void stats_reset(void) {$/;"	f	file:
stats_t	memcached.h	/^struct stats_t { \/\/struct stats_t stats;$/;"	s
status	protocol_binary.h	/^            uint16_t status;$/;"	m	struct:__anon15::__anon16
stop	t/lib/MemcachedTest.pm	/^sub stop {$/;"	s
stop_assoc_maintenance_thread	assoc.c	/^void stop_assoc_maintenance_thread() {$/;"	f
stop_item_crawler_thread	items.c	/^int stop_item_crawler_thread(void) {$/;"	f
stop_memcached_server	testapp.c	/^static enum test_return stop_memcached_server(void) {$/;"	f	file:
stop_slab_maintenance_thread	slabs.c	/^void stop_slab_maintenance_thread(void) {$/;"	f
storage_command	testapp.c	/^static off_t storage_command(char*buf,$/;"	f	file:
store_item	thread.c	/^enum store_item_type store_item(item *item, int comm, conn* c) { \/\/注意该函数外层在该函数执行完后一般会调用一次item_remove$/;"	f
store_item_type	memcached.h	/^enum store_item_type {$/;"	g
stress	t/stress-memcached.pl	/^sub stress {$/;"	s
subdir	Makefile	/^subdir = .$/;"	m
subdir	doc/Makefile	/^subdir = doc$/;"	m
substate	memcached.h	/^    enum bin_substates substate;$/;"	m	struct:conn_t	typeref:enum:conn_t::bin_substates
suffix_cache	memcached.h	/^    cache_t *suffix_cache;      \/* suffix cache *\/$/;"	m	struct:__anon5
suffixcurr	memcached.h	/^    char   **suffixcurr;$/;"	m	struct:conn_t
suffixleft	memcached.h	/^    int    suffixleft;$/;"	m	struct:conn_t
suffixlist	memcached.h	/^    char   **suffixlist;$/;"	m	struct:conn_t
suffixsize	memcached.h	/^    int    suffixsize;$/;"	m	struct:conn_t
supports_sasl	t/lib/MemcachedTest.pm	/^sub supports_sasl {$/;"	s
supports_udp	t/lib/MemcachedTest.pm	/^sub supports_udp {$/;"	s
switch_item_lock_type	thread.c	/^void switch_item_lock_type(enum item_lock_types type) { \/\/函数thread_libevent_process接收l 或者g信息$/;"	f
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	doc/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
tail	thread.c	/^    CQ_ITEM *tail; \/\/指向队列的最后一个节点$/;"	m	struct:conn_queue	file:
tail_repair_time	memcached.h	/^    int tail_repair_time;   \/* LRU tail refcount leak repair time *\/$/;"	m	struct:settings_s
tailrepairs	items.c	/^    uint64_t tailrepairs; \/\/需要修复的item数量(除非worker线程有问题否则一般为0)  $/;"	m	struct:__anon1	file:
tails	items.c	/^static item *tails[LARGEST_ID]; \/\/LRU链尾指针，每个classid一个LRU链 $/;"	v	file:
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | bzip2 -9 -c >$(distdir).tar.bz2$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | lzma -9 -c >$(distdir).tar.lzma$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | xz -c >$(distdir).tar.xz$/;"	m
target	Makefile	/^target = x86_64-unknown-linux-gnu$/;"	m
target	doc/Makefile	/^target = x86_64-unknown-linux-gnu$/;"	m
target_alias	Makefile	/^target_alias = $/;"	m
target_alias	doc/Makefile	/^target_alias = $/;"	m
target_cpu	Makefile	/^target_cpu = x86_64$/;"	m
target_cpu	doc/Makefile	/^target_cpu = x86_64$/;"	m
target_os	Makefile	/^target_os = linux-gnu$/;"	m
target_os	doc/Makefile	/^target_os = linux-gnu$/;"	m
target_triplet	Makefile	/^target_triplet = x86_64-unknown-linux-gnu$/;"	m
target_triplet	doc/Makefile	/^target_triplet = x86_64-unknown-linux-gnu$/;"	m
target_vendor	Makefile	/^target_vendor = unknown$/;"	m
target_vendor	doc/Makefile	/^target_vendor = unknown$/;"	m
tcp_transport	memcached.h	/^    tcp_transport,$/;"	e	enum:network_transport
test_binary_add	testapp.c	/^static enum test_return test_binary_add(void) {$/;"	f	file:
test_binary_add_impl	testapp.c	/^static enum test_return test_binary_add_impl(const char *key, uint8_t cmd) {$/;"	f	file:
test_binary_addq	testapp.c	/^static enum test_return test_binary_addq(void) {$/;"	f	file:
test_binary_append	testapp.c	/^static enum test_return test_binary_append(void) {$/;"	f	file:
test_binary_appendq	testapp.c	/^static enum test_return test_binary_appendq(void) {$/;"	f	file:
test_binary_concat_impl	testapp.c	/^static enum test_return test_binary_concat_impl(const char *key, uint8_t cmd) {$/;"	f	file:
test_binary_decr	testapp.c	/^static enum test_return test_binary_decr(void) {$/;"	f	file:
test_binary_decr_impl	testapp.c	/^static enum test_return test_binary_decr_impl(const char* key, uint8_t cmd) {$/;"	f	file:
test_binary_decrq	testapp.c	/^static enum test_return test_binary_decrq(void) {$/;"	f	file:
test_binary_delete	testapp.c	/^static enum test_return test_binary_delete(void) {$/;"	f	file:
test_binary_delete_impl	testapp.c	/^static enum test_return test_binary_delete_impl(const char *key, uint8_t cmd) {$/;"	f	file:
test_binary_deleteq	testapp.c	/^static enum test_return test_binary_deleteq(void) {$/;"	f	file:
test_binary_flush	testapp.c	/^static enum test_return test_binary_flush(void) {$/;"	f	file:
test_binary_flush_impl	testapp.c	/^static enum test_return test_binary_flush_impl(const char *key, uint8_t cmd) {$/;"	f	file:
test_binary_flushq	testapp.c	/^static enum test_return test_binary_flushq(void) {$/;"	f	file:
test_binary_gat	testapp.c	/^static enum test_return test_binary_gat(void) {$/;"	f	file:
test_binary_gatk	testapp.c	/^static enum test_return test_binary_gatk(void) {$/;"	f	file:
test_binary_gatkq	testapp.c	/^static enum test_return test_binary_gatkq(void) {$/;"	f	file:
test_binary_gatq	testapp.c	/^static enum test_return test_binary_gatq(void) {$/;"	f	file:
test_binary_get	testapp.c	/^static enum test_return test_binary_get(void) {$/;"	f	file:
test_binary_get_impl	testapp.c	/^static enum test_return test_binary_get_impl(const char *key, uint8_t cmd) {$/;"	f	file:
test_binary_getk	testapp.c	/^static enum test_return test_binary_getk(void) {$/;"	f	file:
test_binary_getkq	testapp.c	/^static enum test_return test_binary_getkq(void) {$/;"	f	file:
test_binary_getq	testapp.c	/^static enum test_return test_binary_getq(void) {$/;"	f	file:
test_binary_getq_impl	testapp.c	/^static enum test_return test_binary_getq_impl(const char *key, uint8_t cmd) {$/;"	f	file:
test_binary_illegal	testapp.c	/^static enum test_return test_binary_illegal(void) {$/;"	f	file:
test_binary_incr	testapp.c	/^static enum test_return test_binary_incr(void) {$/;"	f	file:
test_binary_incr_impl	testapp.c	/^static enum test_return test_binary_incr_impl(const char* key, uint8_t cmd) {$/;"	f	file:
test_binary_incrq	testapp.c	/^static enum test_return test_binary_incrq(void) {$/;"	f	file:
test_binary_noop	testapp.c	/^static enum test_return test_binary_noop(void) {$/;"	f	file:
test_binary_pipeline_hickup	testapp.c	/^static enum test_return test_binary_pipeline_hickup(void)$/;"	f	file:
test_binary_pipeline_hickup_chunk	testapp.c	/^static enum test_return test_binary_pipeline_hickup_chunk(void *buffer, size_t buffersize) {$/;"	f	file:
test_binary_prepend	testapp.c	/^static enum test_return test_binary_prepend(void) {$/;"	f	file:
test_binary_prependq	testapp.c	/^static enum test_return test_binary_prependq(void) {$/;"	f	file:
test_binary_quit	testapp.c	/^static enum test_return test_binary_quit(void) {$/;"	f	file:
test_binary_quit_impl	testapp.c	/^static enum test_return test_binary_quit_impl(uint8_t cmd) {$/;"	f	file:
test_binary_quitq	testapp.c	/^static enum test_return test_binary_quitq(void) {$/;"	f	file:
test_binary_replace	testapp.c	/^static enum test_return test_binary_replace(void) {$/;"	f	file:
test_binary_replace_impl	testapp.c	/^static enum test_return test_binary_replace_impl(const char* key, uint8_t cmd) {$/;"	f	file:
test_binary_replaceq	testapp.c	/^static enum test_return test_binary_replaceq(void) {$/;"	f	file:
test_binary_set	testapp.c	/^static enum test_return test_binary_set(void) {$/;"	f	file:
test_binary_set_impl	testapp.c	/^static enum test_return test_binary_set_impl(const char *key, uint8_t cmd) {$/;"	f	file:
test_binary_setq	testapp.c	/^static enum test_return test_binary_setq(void) {$/;"	f	file:
test_binary_stat	testapp.c	/^static enum test_return test_binary_stat(void) {$/;"	f	file:
test_binary_version	testapp.c	/^static enum test_return test_binary_version(void) {$/;"	f	file:
test_count	stats.c	/^static int test_count = 0;$/;"	v	file:
test_equals_int	stats.c	/^static void test_equals_int(char *what, int a, int b) { test_count++; if (a != b) fail(what); }$/;"	f	file:
test_equals_ptr	stats.c	/^static void test_equals_ptr(char *what, void *a, void *b) { test_count++; if (a != b) fail(what); }$/;"	f	file:
test_equals_str	stats.c	/^static void test_equals_str(char *what, const char *a, const char *b) { test_count++; if (strcmp(a, b)) fail(what); }$/;"	f	file:
test_equals_ull	stats.c	/^static void test_equals_ull(char *what, uint64_t a, uint64_t b) { test_count++; if (a != b) fail(what); }$/;"	f	file:
test_issue_101	testapp.c	/^static enum test_return test_issue_101(void) {$/;"	f	file:
test_issue_102	testapp.c	/^static enum test_return test_issue_102(void) {$/;"	f	file:
test_issue_161	testapp.c	/^static enum test_return test_issue_161(void)$/;"	f	file:
test_issue_44	testapp.c	/^static enum test_return test_issue_44(void) {$/;"	f	file:
test_issue_92	testapp.c	/^static enum test_return test_issue_92(void) {$/;"	f	file:
test_notequals_ptr	stats.c	/^static void test_notequals_ptr(char *what, void *a, void *b) { test_count++; if (a == b) fail(what); }$/;"	f	file:
test_notnull_ptr	stats.c	/^static void test_notnull_ptr(char *what, void *a) { test_count++; if (NULL == a) fail(what); }$/;"	f	file:
test_prefix_dump	stats.c	/^static void test_prefix_dump() {$/;"	f	file:
test_prefix_find	stats.c	/^static void test_prefix_find() {$/;"	f	file:
test_prefix_record_delete	stats.c	/^static void test_prefix_record_delete() {$/;"	f	file:
test_prefix_record_get	stats.c	/^static void test_prefix_record_get() {$/;"	f	file:
test_prefix_record_set	stats.c	/^static void test_prefix_record_set() {$/;"	f	file:
test_return	testapp.c	/^enum test_return { TEST_SKIP, TEST_PASS, TEST_FAIL };$/;"	g	file:
test_safe_strtol	testapp.c	/^static enum test_return test_safe_strtol(void) {$/;"	f	file:
test_safe_strtoll	testapp.c	/^static enum test_return test_safe_strtoll(void) {$/;"	f	file:
test_safe_strtoul	testapp.c	/^static enum test_return test_safe_strtoul(void) {$/;"	f	file:
test_safe_strtoull	testapp.c	/^static enum test_return test_safe_strtoull(void) {$/;"	f	file:
test_vperror	testapp.c	/^static enum test_return test_vperror(void) {$/;"	f	file:
testapp_LDADD	Makefile	/^testapp_LDADD = $(LDADD)$/;"	m
testapp_OBJECTS	Makefile	/^testapp_OBJECTS = $(am_testapp_OBJECTS)$/;"	m
testapp_SOURCES	Makefile	/^testapp_SOURCES = testapp.c util.c util.h $(am__append_2)$/;"	m
testcase	testapp.c	/^struct testcase {$/;"	s	file:
testcases	testapp.c	/^struct testcase testcases[] = {$/;"	v	typeref:struct:testcase
thread	memcached.h	/^    LIBEVENT_THREAD *thread; \/* Pointer to the thread object serving this connection *\/$/;"	m	struct:conn_t
thread_id	memcached.h	/^    pthread_t thread_id;        \/* unique ID of this thread *\/ \/\/线程id$/;"	m	struct:__anon5
thread_id	memcached.h	/^    pthread_t thread_id;        \/* unique ID of this thread *\/$/;"	m	struct:__anon6
thread_init	thread.c	/^void thread_init(int nthreads, struct event_base *main_base) {$/;"	f
thread_libevent_process	thread.c	/^static void thread_libevent_process(int fd, short which, void *arg) {$/;"	f	file:
thread_stats	memcached.h	/^struct thread_stats { \/\/存储于LIBEVENT_THREAD->stats$/;"	s
threadlocal_stats_aggregate	thread.c	/^void threadlocal_stats_aggregate(struct thread_stats *stats) {$/;"	f
threadlocal_stats_reset	thread.c	/^void threadlocal_stats_reset(void) {$/;"	f
threads	thread.c	/^static LIBEVENT_THREAD *threads;$/;"	v	file:
time	memcached.h	/^    rel_time_t      time;       \/* least recent access *\/$/;"	m	struct:__anon4
time	memcached.h	/^    rel_time_t      time;       \/* least recent access *\/$/;"	m	struct:_stritem
timedrun_LDADD	Makefile	/^timedrun_LDADD = $(LDADD)$/;"	m
timedrun_OBJECTS	Makefile	/^timedrun_OBJECTS = $(am_timedrun_OBJECTS)$/;"	m
timedrun_SOURCES	Makefile	/^timedrun_SOURCES = timedrun.c$/;"	m
token_s	memcached.c	/^typedef struct token_s {$/;"	s	file:
token_t	memcached.c	/^} token_t;$/;"	t	typeref:struct:token_s	file:
tokenize_command	memcached.c	/^static size_t tokenize_command(char *command, token_t *tokens, const size_t max_tokens) {$/;"	f	file:
top_build_prefix	Makefile	/^top_build_prefix = $/;"	m
top_build_prefix	doc/Makefile	/^top_build_prefix = ..\/$/;"	m
top_builddir	Makefile	/^top_builddir = .$/;"	m
top_builddir	doc/Makefile	/^top_builddir = ..$/;"	m
top_distdir	Makefile	/^top_distdir = $(distdir)$/;"	m
top_srcdir	Makefile	/^top_srcdir = .$/;"	m
top_srcdir	doc/Makefile	/^top_srcdir = ..$/;"	m
total_conns	memcached.h	/^    unsigned int  total_conns; \/\/总共使用过多少conn结构，只增不减$/;"	m	struct:stats_t
total_items	memcached.h	/^    unsigned int  total_items; \/\/总共使用item数，只加不减$/;"	m	struct:stats_t
total_prefix_size	stats.c	/^static int total_prefix_size = 0;$/;"	v	file:
touch_cmds	memcached.h	/^    uint64_t          touch_cmds;$/;"	m	struct:thread_stats
touch_cmds	memcached.h	/^    uint64_t      touch_cmds;$/;"	m	struct:stats_t
touch_command	testapp.c	/^static off_t touch_command(char* buf,$/;"	f	file:
touch_hits	memcached.h	/^    uint64_t      touch_hits;$/;"	m	struct:stats_t
touch_hits	memcached.h	/^    uint64_t  touch_hits;$/;"	m	struct:slab_stats
touch_misses	memcached.h	/^    uint64_t          touch_misses;$/;"	m	struct:thread_stats
touch_misses	memcached.h	/^    uint64_t      touch_misses;$/;"	m	struct:stats_t
transform	Makefile	/^transform = $(program_transform_name)$/;"	m
transform	doc/Makefile	/^transform = $(program_transform_name)$/;"	m
transmit	memcached.c	/^static enum transmit_result transmit(conn *c) {$/;"	f	file:
transmit_result	memcached.c	/^enum transmit_result {$/;"	g	file:
transport	memcached.h	/^    enum network_transport transport; \/* what transport is used by this connection *\/$/;"	m	struct:conn_t	typeref:enum:conn_t::network_transport
transport	thread.c	/^    enum network_transport     transport; \/\/tcp连接还是udp连接$/;"	m	struct:conn_queue_item	typeref:enum:conn_queue_item::network_transport	file:
true	config.h	141;"	d
try_read_command	memcached.c	/^static int try_read_command(conn *c) {$/;"	f	file:
try_read_network	memcached.c	/^static enum try_read_result try_read_network(conn *c) {$/;"	f	file:
try_read_result	memcached.c	/^enum try_read_result {$/;"	g	file:
try_read_udp	memcached.c	/^static enum try_read_result try_read_udp(conn *c) {$/;"	f	file:
ub1	assoc.c	/^typedef  unsigned       char ub1;   \/* unsigned 1-byte quantities *\/$/;"	t	file:
ub4	assoc.c	/^typedef  unsigned long  int  ub4;   \/* unsigned 4-byte quantities *\/$/;"	t	file:
udp_transport	memcached.h	/^    udp_transport$/;"	e	enum:network_transport
udpport	memcached.h	/^    int udpport; \/\/memcached监听的udp端口$/;"	m	struct:settings_s
udpport	t/lib/MemcachedTest.pm	/^sub udpport { $_[0]{udpport} }$/;"	s
unlikely	memcached.h	775;"	d
update_event	memcached.c	/^static bool update_event(conn *c, const int new_flags) {$/;"	f	file:
usage	memcached.c	/^static void usage(void) {$/;"	f	file:
usage_license	memcached.c	/^static void usage_license(void) {$/;"	f	file:
use_cas	memcached.h	/^    bool use_cas; \/\/参考do_item_alloc$/;"	m	struct:settings_s
validate_response_header	testapp.c	/^static void validate_response_header(protocol_binary_response_no_extras *response,$/;"	f	file:
value	memcached.c	/^    char *value;$/;"	m	struct:token_s	file:
value	protocol_binary.h	/^                uint64_t value;$/;"	m	struct:__anon33::__anon34::__anon35
verbose	memcached.h	/^    int verbose;\/\/运行信息的输出级别。该值越大输出的信息就越详细$/;"	m	struct:settings_s
vperror	util.c	/^void vperror(const char *fmt, ...) {$/;"	f
wait_for_process	timedrun.c	/^static int wait_for_process(pid_t pid)$/;"	f	file:
wait_for_thread_registration	thread.c	/^static void wait_for_thread_registration(int nthreads) {$/;"	f	file:
wbuf	memcached.h	/^    char   *wbuf;$/;"	m	struct:conn_t
wbytes	memcached.h	/^    int    wbytes;$/;"	m	struct:conn_t
wcurr	memcached.h	/^    char   *wcurr;$/;"	m	struct:conn_t
which	memcached.h	/^    short  which;   \/** which events were just triggered *\/$/;"	m	struct:conn_t
worker_libevent	thread.c	/^static void *worker_libevent(void *arg) {$/;"	f	file:
write_and_free	memcached.c	/^static void write_and_free(conn *c, char *buf, int bytes) {$/;"	f	file:
write_and_free	memcached.h	/^    void   *write_and_free; \/** free this memory after finishing writing *\/$/;"	m	struct:conn_t
write_and_go	memcached.h	/^    enum conn_states  write_and_go;\/\/写完后的下一个状态  $/;"	m	struct:conn_t	typeref:enum:conn_t::conn_states
write_bin_error	memcached.c	/^static void write_bin_error(conn *c, protocol_binary_response_status err,$/;"	f	file:
write_bin_response	memcached.c	/^static void write_bin_response(conn *c, void *d, int hlen, int keylen, int dlen) {$/;"	f	file:
write_file	version.pl	/^sub write_file {$/;"	s
wsize	memcached.h	/^    int    wsize;$/;"	m	struct:conn_t
xisspace	util.c	13;"	d	file:
