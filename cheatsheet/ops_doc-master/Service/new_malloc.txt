C++的内存布局 在C++中，内存区分为5个区，分别是堆、栈、自由存储区、全局/静态存储区、常量存储区

    1.栈，就是那些由编译器在需要的时候分配，在不需要的时候自动清楚的变量的存储区。里面的变量通常是局部变量、函数参数等。
    2.堆，malloc在堆上分配的内存块，使用free释放内存
    3.自由存储区，而new所申请的内存则是在自由存储区上，使用delete来释放.
    4.全局/静态存储区，全局变量和静态变量被分配到同一块内存中，在以前的C语言中，全局变量又分为初始化的和未初始化的，在C++里面没有这个区分了，他们共同占用同一块内存区。
    5.常量存储区，这是一块比较特殊的存储区，他们里面存放的是常量，不允许修改(当然，你要通过非正当手段也可以修改)

堆和自由存储区的区别

    从技术上来说，堆（heap）是C语言和操作系统的术语。堆是操作系统所维护的一块特殊内存，它提供了动态分配的功能，当运行程序调用malloc()时就会从中分配，稍后调用free可把内存交还。
    而自由存储是C++中通过new和delete动态分配和释放对象的抽象概念，通过new来申请的内存区域可称为自由存储区。
    基本上，所有的C++编译器默认使用堆来实现自由存储，也即是缺省的全局运算符new和delete也许会按照malloc和free的方式来被实现，这时藉由new运算符分配的对象，说它在堆上也对，说它在自由存储区上也正确。
    但程序员也可以通过重载操作符，改用其他内存来实现自由存储，例如全局变量做的对象池，这时自由存储区就区别于堆了。

new与malloc的10点区别

    申请的内存所在位置

        new操作符从自由存储区（free store）上为对象动态分配内存空间，而malloc函数从堆上动态分配内存。自由存储区是C++基于new操作符的一个抽象概念，凡是通过new操作符进行内存申请，该内存即为自由存储区。而堆是操作系统中的术语，是操作系统所维护的一块特殊内存，用于程序的内存动态分配，C语言使用malloc从堆上分配内存，使用free释放已分配的对应内存。

    返回类型安全性

        new操作符内存分配成功时，返回的是对象类型的指针，类型严格与对象匹配，无须进行类型转换，故new是符合类型安全性的操作符。而malloc内存分配成功则是返回void * ，需要通过强制类型转换将void*指针转换成我们需要的类型。 类型安全很大程度上可以等价于内存安全，类型安全的代码不会试图方法自己没被授权的内存区域。关于C++的类型安全性可说的又有很多了。

    内存分配失败时的返回值

        new内存分配失败时，会抛出bac_alloc异常，它不会返回NULL；malloc分配内存失败时返回NULL。

    是否需要指定内存大小

        使用new操作符申请内存分配时无须指定内存块的大小，编译器会根据类型信息自行计算，而malloc则需要显式地指出所需内存的尺寸。

    是否调用构造函数/析构函数

        使用new操作符来分配对象内存时会经历三个步骤：
        第一步：调用operator new 函数（对于数组是operator new[]）分配一块足够大的，原始的，未命名的内存空间以便存储特定类型的对象。
        第二步：编译器运行相应的构造函数以构造对象，并为其传入初值。
        第三步：对象构造完成后，返回一个指向该对象的指针。
        使用delete操作符来释放对象内存时会经历两个步骤：
        第一步：调用对象的析构函数。
        第二步：编译器调用operator delete(或operator delete[])函数释放内存空间。

    对数组的处理

        C++提供了new[]与delete[]来专门处理数组类型:

    new与malloc是否可以相互调用

        operator new /operator delete的实现可以基于malloc，而malloc的实现不可以去调用new。

    是否可以被重载

        opeartor new /operator delete可以被重载。标准库是定义了operator new函数和operator delete函数的8个重载版本：

     //这些版本可能抛出异常
     void * operator new(size_t);
     void * operator new[](size_t);
     void * operator delete (void * )noexcept;
     void * operator delete[](void *0）noexcept;
     //这些版本承诺不抛出异常
     void * operator new(size_t ,nothrow_t&) noexcept;
     void * operator new[](size_t, nothrow_t& );
     void * operator delete (void *,nothrow_t& )noexcept;
     void * operator delete[](void *0,nothrow_t& ）noexcept;

        而malloc/free并不允许重载。

    能够直观地重新分配内存

        使用malloc分配的内存后，如果在使用过程中发现内存不足，可以使用realloc函数进行内存重新分配实现内存的扩充。realloc先判断当前的指针所指内存是否有足够的连续空间，如果有，原地扩大可分配的内存地址，并且返回原来的地址指针；如果空间不够，先按照新指定的大小分配空间，将原有数据从头到尾拷贝到新分配的内存区域，而后释放原来的内存区域。
        new没有这样直观的配套设施来扩充内存。

    客户处理内存分配不足

        在operator new抛出异常以反映一个未获得满足的需求之前，它会先调用一个用户指定的错误处理函数，这就是new-handler。new_handler是一个指针类型：

    namespace std
    {
        typedef void (*new_handler)();
    }

        指向了一个没有参数没有返回值的函数,即为错误处理函数。为了指定错误处理函数，客户需要调用set_new_handler，这是一个声明于的一个标准库函数:

    namespace std
    {
        new_handler set_new_handler(new_handler p ) throw();
    }

        set_new_handler的参数为new_handler指针，指向了operator new 无法分配足够内存时该调用的函数。其返回值也是个指针，指向set_new_handler被调用前正在执行（但马上就要发生替换）的那个new_handler函数。
        对于malloc，客户并不能够去编程决定内存不足以分配时要干什么事，只能看着malloc返回NULL。