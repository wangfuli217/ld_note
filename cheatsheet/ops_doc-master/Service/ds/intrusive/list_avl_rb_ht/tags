!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AVL_HDR	avl.h	2;"	d
CFLAGS	Makefile	/^CFLAGS := \\$/;"	m
HASH_HDR	ht.h	2;"	d
LIST_HDR	list.h	2;"	d
NO_COLOR	Makefile	/^NO_COLOR = \\e[0m$/;"	m
OBJS	Makefile	/^OBJS := \\$/;"	m
PASS_COLOR	Makefile	/^PASS_COLOR = \\e[32;01m$/;"	m
PRINTF	Makefile	/^    PRINTF = env printf$/;"	m
PRINTF	Makefile	/^    PRINTF = printf$/;"	m
RB_BLACK	rb.c	22;"	d	file:
RB_HDR	rb.h	2;"	d
RB_RED	rb.c	21;"	d	file:
TESTS	Makefile	/^TESTS := \\$/;"	m
UNAME_S	Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
__avl_node_align	avl.c	/^typedef char __avl_node_align[!!(__alignof__(avl_node_t) > 4) * 2 - 1];$/;"	t	file:
__avl_node_align	avl.c	/^typedef char __avl_node_align[$/;"	t	file:
__has_feature	avl.c	5;"	d	file:
__has_feature	rb.c	6;"	d	file:
__rb_node_align	rb.c	/^typedef char __rb_node_align[!!(__alignof__(rb_node_t) > 4) * 2 - 1];$/;"	t	file:
__rb_node_align	rb.c	/^typedef char __rb_node_align[$/;"	t	file:
aux	avl.h	/^    void *aux;$/;"	m	struct:avl_tree_internal
aux	rb.h	/^    void *aux;$/;"	m	struct:rb_tree_internal
avl	tests/avl.c	/^int avl()$/;"	f
avl_abs	avl.c	/^static int avl_abs(int n)$/;"	f	file:
avl_balance	avl.c	/^static avl_node_t *avl_balance(avl_node_t *node, int factor)$/;"	f	file:
avl_compare_t	avl.h	/^typedef int (*avl_compare_t)(const avl_node_t *a,$/;"	t
avl_get_balance	avl.c	/^static inline int avl_get_balance(const avl_node_t *const node)$/;"	f	file:
avl_get_factor	avl.c	/^static inline int avl_get_factor(const avl_node_t *const node)$/;"	f	file:
avl_get_parent	avl.c	/^static inline avl_node_t *avl_get_parent(const avl_node_t *const node)$/;"	f	file:
avl_head	avl.c	/^avl_node_t *avl_head(const avl_tree_t *tree)$/;"	f
avl_init	avl.c	/^void avl_init(avl_tree_t *tree, void *aux)$/;"	f
avl_insert	avl.c	/^void avl_insert(avl_tree_t *tree, avl_node_t *node, avl_compare_t compare)$/;"	f
avl_max	avl.c	/^static inline int avl_max(int lhs, int rhs)$/;"	f	file:
avl_next	avl.c	/^avl_node_t *avl_next(const avl_node_t *node)$/;"	f
avl_node_internal	avl.h	/^struct avl_node_internal {$/;"	s
avl_node_t	avl.h	/^typedef struct avl_node_internal avl_node_t;$/;"	t	typeref:struct:avl_node_internal
avl_prev	avl.c	/^avl_node_t *avl_prev(const avl_node_t *node)$/;"	f
avl_ref	avl.h	44;"	d
avl_remove	avl.c	/^void avl_remove(avl_tree_t *tree, avl_node_t *node)$/;"	f
avl_rotate_ll	avl.c	/^static avl_node_t *avl_rotate_ll(avl_node_t *parent,$/;"	f	file:
avl_rotate_lr	avl.c	/^static inline avl_node_t *avl_rotate_lr(avl_node_t *parent, int pfactor)$/;"	f	file:
avl_rotate_rl	avl.c	/^static inline avl_node_t *avl_rotate_rl(avl_node_t *parent, int pfactor)$/;"	f	file:
avl_rotate_rr	avl.c	/^static avl_node_t *avl_rotate_rr(avl_node_t *parent,$/;"	f	file:
avl_search	avl.c	/^avl_node_t *avl_search(avl_tree_t *tree,$/;"	f
avl_set_factor	avl.c	/^static inline void avl_set_factor(avl_node_t *node, int factor)$/;"	f	file:
avl_set_parent	avl.c	/^static inline void avl_set_parent(avl_node_t *node, avl_node_t *parent)$/;"	f	file:
avl_tail	avl.c	/^avl_node_t *avl_tail(const avl_tree_t *tree)$/;"	f
avl_tree_internal	avl.h	/^struct avl_tree_internal {$/;"	s
avl_tree_t	avl.h	/^typedef struct avl_tree_internal avl_tree_t;$/;"	t	typeref:struct:avl_tree_internal
deps	Makefile	/^deps := $(OBJS:%.o=%.d)$/;"	m
hash	ht.h	/^    size_t (*hash)(const void *key, size_t keylen);$/;"	m	struct:hashtable_internal
hash	tests/ht.c	/^int hash(void)$/;"	f
hash_func	tests/ht.c	/^size_t hash_func(const void *key, size_t keylen)$/;"	f
hash_node_bin	ht.c	/^static inline size_t hash_node_bin(size_t bins, size_t keyhash)$/;"	f	file:
hash_node_find	ht.c	/^static hashnode_t *hash_node_find(hashnode_t *node,$/;"	f	file:
hash_node_init	ht.c	/^static void hash_node_init(hashnode_t *node, void *key, size_t keylen)$/;"	f	file:
hashnode_internal	ht.h	/^struct hashnode_internal {$/;"	s
hashnode_t	ht.h	/^typedef struct hashnode_internal hashnode_t;$/;"	t	typeref:struct:hashnode_internal
hashtable_destroy	ht.c	/^void hashtable_destroy(hashtable_t *table)$/;"	f
hashtable_init	ht.c	/^bool hashtable_init(hashtable_t *table,$/;"	f
hashtable_insert	ht.c	/^void hashtable_insert(hashtable_t *table,$/;"	f
hashtable_internal	ht.h	/^struct hashtable_internal {$/;"	s
hashtable_ref	ht.h	42;"	d
hashtable_remove	ht.c	/^void hashtable_remove(hashtable_t *table, const void *key, size_t keylen)$/;"	f
hashtable_search	ht.c	/^hashnode_t *hashtable_search(hashtable_t *table, const void *key, size_t keylen)$/;"	f
hashtable_t	ht.h	/^typedef struct hashtable_internal hashtable_t;$/;"	t	typeref:struct:hashtable_internal
head	list.h	/^    link_t *head, *tail;$/;"	m	struct:list_internal
key	ht.h	/^    void *key;$/;"	m	struct:hashnode_internal
keylen	ht.h	/^    size_t keylen;$/;"	m	struct:hashnode_internal
left	avl.h	/^    avl_node_t *left, *right;$/;"	m	struct:avl_node_internal
left	rb.h	/^    rb_node_t *right, *left;$/;"	m	struct:rb_node_internal
link	tests/list.c	/^    link_t link;$/;"	m	struct:__anon2	file:
link_internal	list.h	/^struct link_internal {$/;"	s
link_t	list.h	/^typedef struct link_internal link_t;$/;"	t	typeref:struct:link_internal
list	tests/list.c	/^int list()$/;"	f
list_head	list.c	/^link_t *list_head(const list_t *list)$/;"	f
list_init	list.c	/^void list_init(list_t *list)$/;"	f
list_insert_after	list.c	/^void list_insert_after(list_t *list, link_t *after, link_t *link)$/;"	f
list_insert_before	list.c	/^void list_insert_before(list_t *list, link_t *before, link_t *link)$/;"	f
list_internal	list.h	/^struct list_internal {$/;"	s
list_next	list.c	/^link_t *list_next(const link_t *link)$/;"	f
list_pop_back	list.c	/^link_t *list_pop_back(list_t *list)$/;"	f
list_pop_front	list.c	/^link_t *list_pop_front(list_t *list)$/;"	f
list_prev	list.c	/^link_t *list_prev(const link_t *link)$/;"	f
list_push_back	list.c	/^void list_push_back(list_t *list, link_t *link)$/;"	f
list_push_front	list.c	/^void list_push_front(list_t *list, link_t *link)$/;"	f
list_ref	list.h	39;"	d
list_remove	list.c	/^void list_remove(list_t *list, link_t *link)$/;"	f
list_t	list.h	/^typedef struct list_internal list_t;$/;"	t	typeref:struct:list_internal
list_tail	list.c	/^link_t *list_tail(const list_t *list)$/;"	f
main	tests/avl.c	/^int main()$/;"	f
main	tests/ht.c	/^int main()$/;"	f
main	tests/list.c	/^int main()$/;"	f
main	tests/rb.c	/^int main()$/;"	f
message	tests/ht.c	/^    const char *message;$/;"	m	struct:__anon4	file:
message	tests/list.c	/^    const char *message;$/;"	m	struct:__anon2	file:
next	avl.h	/^    avl_node_t *prev, *next;$/;"	m	struct:avl_node_internal
next	ht.h	/^    hashnode_t *next;$/;"	m	struct:hashnode_internal
next	list.h	/^    link_t *prev, *next;$/;"	m	struct:link_internal
node	tests/avl.c	/^    avl_node_t node;$/;"	m	struct:__anon3	file:
node	tests/ht.c	/^    hashnode_t node;$/;"	m	struct:__anon4	file:
node	tests/rb.c	/^    rb_node_t node;$/;"	m	struct:__anon1	file:
nodes	ht.h	/^    hashnode_t **nodes;$/;"	m	struct:hashtable_internal
number	tests/avl.c	/^    int number;$/;"	m	struct:__anon3	file:
number	tests/rb.c	/^    int number;$/;"	m	struct:__anon1	file:
parent	avl.h	/^    uintptr_t parent;$/;"	m	struct:avl_node_internal
parent	rb.h	/^    uintptr_t parent;$/;"	m	struct:rb_node_internal
prev	avl.h	/^    avl_node_t *prev, *next;$/;"	m	struct:avl_node_internal
prev	list.h	/^    link_t *prev, *next;$/;"	m	struct:link_internal
rb	tests/rb.c	/^int rb()$/;"	f
rb_color	rb.c	25;"	d	file:
rb_compare_t	rb.h	/^typedef int (*rb_compare_t)(const rb_node_t *lhs,$/;"	t
rb_empty_black	rb.c	160;"	d	file:
rb_erase_color	rb.c	/^static void rb_erase_color(rb_node_t *node, rb_node_t *parent, rb_tree_t *tree)$/;"	f	file:
rb_erase_left	rb.c	/^static bool rb_erase_left(rb_node_t *node, rb_node_t *parent, rb_tree_t *tree)$/;"	f	file:
rb_erase_right	rb.c	/^static bool rb_erase_right(rb_node_t *node, rb_node_t *parent, rb_tree_t *tree)$/;"	f	file:
rb_head	rb.c	/^rb_node_t *rb_head(const rb_tree_t *tree)$/;"	f
rb_init	rb.c	/^void rb_init(rb_tree_t *tree, void *aux)$/;"	f
rb_insert	rb.c	/^void rb_insert(rb_tree_t *tree, rb_node_t *node, rb_compare_t compare)$/;"	f
rb_insert_color	rb.c	/^static void rb_insert_color(rb_node_t *node, rb_tree_t *tree)$/;"	f	file:
rb_insert_try	rb.c	/^static rb_node_t *rb_insert_try(rb_tree_t *tree,$/;"	f	file:
rb_is_black	rb.c	27;"	d	file:
rb_is_red	rb.c	26;"	d	file:
rb_link_node	rb.c	/^static inline void rb_link_node(rb_node_t *node,$/;"	f	file:
rb_next	rb.c	/^rb_node_t *rb_next(const rb_node_t *node)$/;"	f
rb_node_internal	rb.h	/^struct rb_node_internal {$/;"	s
rb_node_t	rb.h	/^typedef struct rb_node_internal rb_node_t;$/;"	t	typeref:struct:rb_node_internal
rb_parent	rb.c	24;"	d	file:
rb_prev	rb.c	/^rb_node_t *rb_prev(const rb_node_t *node)$/;"	f
rb_ref	rb.h	41;"	d
rb_remove	rb.c	/^void rb_remove(rb_tree_t *tree, rb_node_t *node)$/;"	f
rb_rotate_left	rb.c	/^static void rb_rotate_left(rb_node_t *node, rb_tree_t *tree)$/;"	f	file:
rb_rotate_right	rb.c	/^static void rb_rotate_right(rb_node_t *node, rb_tree_t *tree)$/;"	f	file:
rb_search	rb.c	/^rb_node_t *rb_search(rb_tree_t *tree, rb_node_t *node, rb_compare_t compare)$/;"	f
rb_set_black	rb.c	32;"	d	file:
rb_set_color	rb.c	/^static inline void rb_set_color(rb_node_t *rb, int color)$/;"	f	file:
rb_set_parent	rb.c	/^static inline void rb_set_parent(rb_node_t *rb, rb_node_t *p)$/;"	f	file:
rb_set_red	rb.c	28;"	d	file:
rb_tail	rb.c	/^rb_node_t *rb_tail(const rb_tree_t *tree)$/;"	f
rb_tree_init	rb.c	/^static inline void rb_tree_init(rb_tree_t *tree, rb_node_t *node)$/;"	f	file:
rb_tree_internal	rb.h	/^struct rb_tree_internal {$/;"	s
rb_tree_t	rb.h	/^typedef struct rb_tree_internal rb_tree_t;$/;"	t	typeref:struct:rb_tree_internal
right	avl.h	/^    avl_node_t *left, *right;$/;"	m	struct:avl_node_internal
right	rb.h	/^    rb_node_t *right, *left;$/;"	m	struct:rb_node_internal
root	avl.h	/^    avl_node_t *root;$/;"	m	struct:avl_tree_internal
root	rb.h	/^    rb_node_t *root;$/;"	m	struct:rb_tree_internal
size	ht.h	/^    size_t size;$/;"	m	struct:hashtable_internal
tail	list.h	/^    link_t *head, *tail;$/;"	m	struct:list_internal
test_avl_compare	tests/avl.c	/^static int test_avl_compare(const avl_node_t *lhs,$/;"	f	file:
test_avl_t	tests/avl.c	/^} test_avl_t;$/;"	t	typeref:struct:__anon3	file:
test_hash_t	tests/ht.c	/^} test_hash_t;$/;"	t	typeref:struct:__anon4	file:
test_list_t	tests/list.c	/^} test_list_t;$/;"	t	typeref:struct:__anon2	file:
test_rb_compare	tests/rb.c	/^int test_rb_compare(const rb_node_t *lhs, const rb_node_t *rhs, const void *aux)$/;"	f
test_rb_t	tests/rb.c	/^} test_rb_t;$/;"	t	typeref:struct:__anon1	file:
