Raymond(与 C 语言长别离){
只要能用 Python 时就写 Python ，而只在必须使用 C 语言时写 C。
C 语言受限的数据类型本体论以及其脆弱的底层数据管理问题，尝试用 C 写的话可能会很恐怖，并注定失败。
在可预见的未来里，C 语言还会是操作系统的内核编程以及设备固件编程的主流语言，在这些场景下，尽力压榨硬件性能的古老规则还在奏效，尽管它可能不是那么安全。
C 语言的替代者实现。Go 、Rust 或者 Cx ，
}


编程的原则(s)是什么？
KISS – Keep It Simple Stupid
DRY – Don’t Repeat Yourself

1.勇于去研究你不懂的代码
如果你想变得越来越好，无论是写代码，与人沟通或者其它的技能，都是需要投入时间去学习的。
2.精通代码调试(debug)
最简单的就是在代码里输出日志来判断。你需要去接触一些高级的工具或者直接带有Debug功能的编辑器。
3.重视能够节约时间的工具
高效率的程序员都把时间花在制作工具上。
4.优化你的迭代速度
千万不要小看这些琐碎的细节，改善它们的回报是巨大。
5.系统性的思考方式
任何没有发布到生产环境的代码都不会产生任何价值。

最大的障碍：从c到c++，最大的障碍不是语法的障碍，而是思维方式的转变：由面向过程到面向对象的转变。

你若不想做，会找到一个借口。你若想做，会找到一个方法

性痴则其志凝。故书痴者文必工，艺痴者技必良。世之落拓而无成者，皆自谓不痴者也。

thinking(为何技术人员要懂业务){
    1. 技术是鞋子，业务是脚。先考虑技术，再考虑业务，往往会导致削足适履，让你怎么穿都别扭；
不考虑技术，只考虑业务，会导致打赤脚或穿草鞋，让你天天肉痛。两者一起考虑，才能找到合适你的跑鞋、
登山靴或轮滑。
    2. 不懂业务的技术人员，很难设计出一双适合用户的好鞋子；不懂技术的业务人员，至少知道用户要
一双什么样的鞋子。所以，你不懂业务，技术再牛，也要听懂业务的。
    3. 一句话，除非你是搞理论研究或专业分工的，否则，脱离了业务说技术都在是耍流氓，
    脱离了业务谈架构同样是在耍流氓，
    脱离了业务天天扯一堆前沿名词就是大流氓。
}
thinking(封神榜){
Edsger Wybe Dijkstra    Algo60之父,算法大师
Rob Pike                Unix之父,UTF-8缔造者
Bill Joy                Unix之父,C语言之父
Ken Thompson            Unix之父,B之父,UTF-8编码发明者,ed作者,Go之父
Anders Hejlsberg        Turbo Pascal之父,Delphi之父,C#之父
Doug Cutting            Lucene作者,Nutch作者,Hadoop作者 
Richard Stallman        GNU项目发起人，引起了业界革命,Emacs作者,GCC作者,GDB作者,GMake作者
Linus Torvalds          Linux之父
David Cutler            VMS首席设计师,Windows NT首席设计师
John Carmack            计算机图形领域大师,多款设计游戏的作者
Donald Knuth            The Art of Computer Programming作者,TeX作者
Jeff Dean                Google搜索引擎幕后大神
Jon Skeet                Stack Overflow总排名第一
}
thinking(程序员戒律){
1、不得讨论哪一种计算机语言最好；
2、不得讨论Tab和Space应该用哪一个；
3、不得评判他人使用的编辑器；
}
errors(软件质量质能方程){
errors=(more codes)*(more codes)
e=m*m
}
implementation(现场实施原则){
1、一定要分清正式环境和测试环境，对正式环境修改一定要有充分的理由
2、不要在现场高峰期，做影响现场效率或稳定性工作
3、做批量操作或危险操作，一定要做好备份，并与项目经理沟通
4、如果要停止现场服务，一定要与现场人员沟通，否则现场人员会十分被动
5、普通实施人员，有时对整体流程和要达到的最终目标并不一定很了解，所以研发人员不可以与现场实施工程师沟通后直接修改方案，要经过产品经理或项目经理
6、如果流程变动，一定要与现场做好充分沟通；架构调整，一定要与产品经理做好沟通；
7、任务都有时效性，如果任务不能按计划完成，一定要提前沟通，不要等到一切都太迟了再沟通
8、紧急情况下，做的紧急处理，要将事件描述及处理情况及时通知到相关人员，并进行总结
9、多写一些防御性代码预防小概率事件，而不是做过多美好的假设，该发生的总会发生
10、遇到重复发生的随机性问题，要有刨根问底的精神
11、问题总会出现，不需要害怕并没有出现的问题，问题出现了以后要积极解决问题，并总结经验，尽量不再出现相同的问题
12、责任明晰，自己负责的事情要做好，其他相关人员应该做的事情，要积极推进。对于其他厂商应该做好但没有去做的问题，要与项目经理积极沟通
13、可以理解，但不可一味姑息纵容其他厂商，否则事情会越来越难处理。
14、研发人员与实施人员压力都很大，平时大家要相互体谅，相互帮助
}
passion(保持热情原则){
经过一段时间的磨练，你的激情可以褪去，但你的热情必须保持。
对新技术、新知识、新框架、新的设备，你还有热情吗？
}
accident(对事不对人原则){
处理任何事情，尤其是紧急的事情，都要做到对事不对人。
其根本原则为，先解决问题，弥补损失，再去总结经验和教训。
如果一个人做事情屡次失误，那错误有四成是这个人的问题，六成是管理者或公司的问题。
下属失败次数太多，那自己首先是自己用人有问题的，管理者要有这个觉悟。
}
communication(要沟通不要吵架，时刻注意语气及用词原则){
我们沟通的目的，是解决问题，不是引起更多的问题。
吵架，往往不能解决问题，只会引起纷争，
过于强势的沟通，就算暂时取得了自己想要的结果，往往也只会引起更多的问题。
无论你多着急、无奈、甚至是气愤，
请注意你沟通时的语气及用词。
错误的语气及用词，永远只会起到反作用。
(原则性问题不可以让步，但语气缓和与让步是两个完全不同的问题)
}
communication(沟通及写文档时对方无知的原则){
程序员沟通时，经常会犯一个错误，就是假设对方有自己全部的背景知识，这样沟通下来，很多时候效果不好，别人一头雾水，自己很受打击。
有小朋友问我应该怎么去做此类沟通时，我给他们的建议是：“假设对方什么都不知道，或者干脆当他是傻子，然后你试着把事情讲给他听”。
文档也一样。自己写的接口文档，自己把自己当成不清楚系统架构的人，或把自己当成傻子，如果你能读懂了，那别人有60%的几率也就能读懂了。
}
new(不乱用新技术原则){
当技术用到了正确的地方，才会变成生产力。技术在转化为生产力之前，就是单纯的技术。
一个技术是否用到产品中，是要看其是否可以解决亟待解决的问题，是否不会引入更多新的问题，是否可以提高工作效率，学习曲线是否陡峭、人才招聘是否容易、是否有广泛的社区支持。
1、是否可以解决亟待解决的问题、是否不会引入更多新的问题
为了技术而技术在产品上是没有任何意义的，只有新技术可以解决产品的重要问题、并不会为产品引入更多新问题的时候，才具备了被选中的价值
2、是否可以提高工作效率
该技术引入后，是否可以提高编码、测试、实施的效率？
3、学习曲线是否陡峭、人才招聘是否容易
是本公司人员进行培训，还是社会人员招聘，要考虑清楚
}
select(善良比聪明更难，选择比天赋更重要){
贝索斯 
}
project(Linux 开发模式带给创业者的启示){
1、最初的想法，并不是决定性的
2、好的软件产品，常常源于开发者自身的需求
3、优秀的程序员知道如何编程，卓越的程序员知道合理复用
4、如果你有正确的态度，有趣的事情自然会找到你
5、如果你对一件事情不感兴趣了，最好的做法是找到一个有能力的接棒者
6、把早期用户当做你的合作者或开发者，这是提高代码质量和产品质量的有效途径。
7、最好的领导就是「不要试图去领导」
8、及早发布，快速发布，并倾听用户的声音
9、如果一个问题解决不了，那么要问问自己，是不是提出了正确的问题。
10、设计上的完美并不是没有东西可以加了，而是没东西可以减。
}
project(造成代码难以维护的 35 个恶习){
代码组织
  1.总是说“一会弄好”，但从来不兑现。(缺乏任务管理和时间管理能力)
  2.坚持所谓的高效、优雅的“一行代码流”，事实上，可读性才是最重要的，聪明是第二位的。
  3.无意义的优化。(类似网页大小之类的优化最后再做)
  4.不注重代码样式和风格的严谨。
  5.使用无意义的命名。
  6.忽略经过验证的最佳实践(例如代码审核、TDD、QA、自动化部署等，
        推荐阅读软件开发必读经典著作：Making Software：What Really Works，and Why We Believe It)。
  7.给自己埋雷。(例如使用不会报错的库或者忽略例外)
团队工作
  8.过早放弃计划
  9.坚持一个无效的计划
  10.总是单打独斗。(必须强迫自己与团队分享进度和想法，避免错觉，提高效率)
  11.拒绝书写糟糕的代码。(日程紧迫的时候可以写一些“糟糕”的代码，这是程序员的能力而不是bug，当然，有时间的时候一定要回头偿还“技术债”)
  12.抱怨他人。
  13.不与团队分享所学。
  14.向主管/客户反馈的速度过慢
  15.不会充分利用Google
  16.看重个人编码风格
  17.带着个人情绪看待他人对自己代码的评论和注释
写代码
  18.不懂优化策略
  19.使用错误的工具。
  20.不追求对开发工具和IDE的精熟。
  21.忽略报错消息。
  22.迷恋称手的开发工具。(不同类型的开发任务需要匹配对应的最佳开发工具，例如Sublime适合动态语言，而Eclipse适合Java，如果你喜欢vim或emacs，并不意味着能用这些工具干所有事)
  23.不注重代码中赋值的可配置性。(不养成把代码中的活动部件分离出来的习惯，会导致技术债暴增)
  24.喜欢重新发明车轮。
  25.盲目地剪切/粘贴代码。
  26.应付差事，不求甚解，不花时间搞清楚项目运作的机理。
  27.对自己写的代码过度自信。
  28.不去考虑每一个设计、方案或者代码库的“副作用”。(一个成功的用例并不意味着“万灵药”)
  29.在一个地方卡住了但坚持不呼救。
测试与维护
  30.只去写能通过的测试
  31.重要项目中忽略性能测试
  32.不去核实代码是否真的可用，没有养成开发中及时快速测试的习惯。
  33.重大改动延迟推送
  34.抛弃和逃避自己的代码。
  35.忽略其他非功能性需求。(例如安全和性能，准备一份这方面的清单，忽略这些会毁掉你的所有成果)
}
http://mindhacks.cn/topics/computer-science/
liuweipeng(你的不可替代性和核心竞争力){
专业领域技能：成为一个专业领域的专家，你的专业技能越强，在这个领域的不可替代性就越高。这个自是不用多说的。
跨领域的技能：解决问题的能力，创新思维，判断与决策能力，Critical-Thinking，表达沟通能力，Open Mind 等等。
学习能力：严格来说学习能力也属于跨领域的技能，但由于实在太重要，并且跨任何领域，所以独立出来。如何培养学习能力，到目前为止我所知道的最有效的办法就是持续学习和思考新知识。
性格要素：严格来说这也属于跨领域技能，理由同上。一些我相信很重要的性格要素包括：专注、持之以恒、自省（意识到自己的问题所在的能力，这是改进自身的大前提）、好奇心、自信、谦卑（自信和谦卑是不悖的，前者是相信别人能够做到的自己也能够做到，后者是不要总认为自己确信正确的就一定是正确的，Keep an open mind）等等。
}