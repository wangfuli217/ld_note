http://c-faq-chn.sourceforge.net/ccfaq/node1.html 中文
http://c-faq.com/index.html  English
https://book.douban.com/subject/3422332/ 中文书

http://www.eskimo.com/~scs/src/ source

http://blog.pkh.me/p/20-templating-in-c.html

http://developerweb.net/viewforum.php?id=70 Unix-socket-FAQ
https://www.tutorialspoint.com/tutorialslibrary.htm  Learn Language

https://wiki.sei.cmu.edu/confluence/display/c



## C99
support for // comments
long, long, bool, complex numbers
gcc flag: add -std=c99
## 
gcc flag: add -std=c1x -> -std=c11

clang(gcc){ https://matt.sh/howto-c
clang, default
    clang 是一个C11的默认扩展版本（GNU C11 模式），所以对最新的特征编译不需要额外的参数配置。
    如果希望用C11标准，需要添加 -std=c11；如果想要使用C99，使用 -std=c99
    clang 编译源代码会比 gcc 要快。

gcc 需要指定 -std=c99 或者 -std=c11
    gcc 编译源文件比 clang 要慢，但是有时会生成更快的代码。性能对比和回归测试很重要。
    gcc-5 默认是指 GNU C11 模式（跟 clang 一样），但是如果需要确切的 C11 或者 C99，需要加上参数 -std=c11 或 -std-c99
    
警告
    1. -Wall -Wextra -pedantic
        更新版本的编译器已经有 -Wpedantic，同时这些编译器还在支持 -pedantic 以保证向后的兼容性。
    2. 测试时，所有平台都要加上 -Werror 和 -Wshadow
        如果在最终的正式代码编译时加上 -Werror，情况会变得很微妙。因为不同的平台、编译器和类库会提示不同的警告。
    因为不同平台GCC版本问题，出现一些意想不到的提示，让编译到一半的程序终止是大家都不想看到的。
    3. 其他的不错的选项，-Wstrict-overflow -fno-strict-aliasing
        要么指明 -fno-strict-aliasing，要么确定访问的指针从它们创建开始类型一值不变。使用 -fno-strict-aliasing 
    是更佳稳妥的方式，因为现存的C代码中，用到强制类型转换的地方还是挺多的。［注：Strict aliasing 是C或C++编译器
    的一种假设：不同类型的指针绝对不会指向同一块内存区域。可参考进一步了解］
    4. 现在，Clang 对于一些正当的语法也会报警告，所以你需要添加 -Wno-missing-field-initalizers
        GCC 在 4.7.0 版本之后修正了这些不必要的警告。

构建
    1. 隔离原则 (Compilation units 编译单元)
        构建C项目的通常办法是拆分每一个源文件编译成一个个目标文件，最后再把所有的目标文件link到一起。
    这个做在进行开发时是非常好的方法，但是对于代码的性能和优化就不太友好了。用这种方法，编译器不能发现
    一些存在在文件边界之间的潜在优化点。
    2. LTO - Link Time Optimisation （链接时的优化）
        LTO 解决了“被分离的源代码文件分析和优化的问题”。通过中间语言来标注编译生成的目标文件，
    所以LTO能够在链接的时候实现代码优化。
        LTO 明显的降低了链接过程的速度，但是使用 make -j 可以有所改善，如果你的构建的的文件包含
    很多并不相互依赖的目标文件（.a, .so, .dylib, 测试可执行文件，应用程序可执行文件等）
        clang LTO (guide)
        gcc LTO
        在2016年，clang 和 gcc 支持 LTO 只需要在编译目标文件和最终链接库和程序时，加上 -flto 到命令行的选项。
        LTO 仍然需要被细心看管。有时，你的程序有部分代码被当作附加库，没有被直接使用。在链接时，LTO 会放弃部分函数或代码，因为LTO检查到这些代码没有被使用，不需要被包含到最终的链接结果中。 架构
    3. -march=native
        给予编译器使用所有的CPU特性的权限。
        再一次强调，性能测试和回归测试很重要（比较不同编译器且不同编译器版本的性能）。确保性能提升的同时没有带来问题。
    4. -msse2 和 -msse4.2 如果你需要的编译结果不是根据“你自己编译环境”的特征。
    

现代的编译器支持 #pragma once
所以，不要这么写：

#ifndef PROJECT_HEADERNAME
#define PROJECT_HEADERNAME
.
.
.
#endif /* PROJECT_HEADERNAME */

要这么写：

#pragma once
#pragma once 告诉编译器只引入头文件一次，你不再需要用头文件中的三行预处理命令来确保。
pragma 预处理命令已经被所有平台所有编译器支持，推荐使用。
}

cfaq(gnu99){
C 允许静态自动分配初始化数组
uint32_t numbers[64];
memset(numbers, 0, sizeof(numbers));
-> 优化
uint32_t numbers[64] = {0};

--------------------------------------------------------------------------------
C 允许静态自动分配初始化结构体
struct thing {
    uint64_t index;
    uint32_t counter;
};

struct thing localThing;

void initThing(void) {
    memset(&localThing, 0, sizeof(localThing));
}
-> 优化
struct thing {
    uint64_t index;
    uint32_t counter;
};
struct thing localThing = {0};
重要提示：如果结构体有填充，{0} 将不能把多余的填充字节置为零。举例来说，stuct thing 在 counter 之后有4字节填充
(在64位平台)，因为结构体被按照字节大小来填充。如果需要使整个结构体置为零，包括未使用的填充字节，使用
 memset(&localThing, 0, sizeof(localThing))，因为sizeof(localThing) == 16 bytes，即使可寻址内容只有 8 + 4 = 12 bytes。

struct thing { uint64_t index; uint32_t counter; }; 
static const struct thing localThingNull = {0}; 
. . . 
struct thing localThing = {.counter = 3}; 
. . . 
localThing = localThingNull;

复合字面量允许你的编译器自动的创建临时匿名结构体，然后复制它们给一个目标值。
localThing = (struct thing){0};
--------------------------------------------------------------------------------
如果一个函数接受任意的输入数据和将要执行的长度，则不要限制参数类型。
void processAddBytesOverflow(uint8_t *bytes, uint32_t len) {
    for ((uint32_t i = 0; i < len; i++)) {
        bytes[0] += bytes[i];
    }
}
-> 优化
void processAddBytesOverflow(void *input, uint32_t len) {
    uint8_t *bytes = input;
    for ((uint32_t i = 0; i < len; i++)) {
        bytes[0] += bytes[i];
    }
}
函数的输入类型描述了代码的接口，而不是代码如何处理这些参数。

返回参数类型
C99 提供了强大的头文件 <stdbool.h>，其中定义了 true 是 1， false 是 0 。

}

cfaq(stdint){ https://matt.sh/howto-c
如果你写C代码还是使用 char、int、short、long、unsigned，那么你已经是在犯错误了。
现如今，你应该使用 #include <stdint.h>，然后使用标准的类型。
常用的标准类型如下：
    int8_t, int16_t, int32_t, int64_t -- 有符号的整型
    uint8_t, uint16_t, uint32_t, uint64_t -- 无符号的整型
    float -- 标准的32位浮点数
    double -- 标准的64位浮点数
注意，char 已经不存在了。char 在C语言中经常是一个误称，且被误用了。
    开发者通常会滥用 char 去表示“字节”，即使是去做无符号的字节操作。当要表示无符号的字节或
8位字节值时应该使用 uint8_t。当要表示无符号的字节序列或一串字节值应该使用 uint8_t *。

特殊的标准类型
作为标准固定长度的 uint16_t 和 int32_t，我们也有 fast 和 least 类型

1. 快速类型：
    有符号的整型：int_fast8_t，int_fast16_t，int_fast32_t，int_fast64_t
    无符号的整型：uint_fast8_t，uint_fast16_t，uint_fast32_t，uint_fast64_t
    快速类型提供了一个最小的占用 X位的字节数，但是没有办法真正需要的存储大小是多少。
如果在你的目标平台有更大的类型被更好的支持，fast类型将会自动去选择这个的更大类型。
    有个非常好的例子，在一些 64 位系统中，当你需要 uint_fast16_t，最终会使用 uint64_t。
因为处理一个字量长度的整型将会比操作32位一半（16位）的整型要快得多。

    快速类型和 int 一样，在不同平台，有不确定的标准长度。但是对于快速类型，你能够在代码中
限制这种不确定性到安全位置（计数器、有边界检测的临时变量）。

2. 最小类型有：
    有符号整型：int_least8_t, int_least16_t, int_least32_t, int_least64_t
    无符号的整型：uint_least8_t, uint_least16_t, uint_least32_t, uint_least64_t
最小类型提供给你申请类型的最紧凑的字节位。
事实上，最小类型规范是指最小类型只是定义标准固定宽度类型，因为标准款度类型已经提供了确切的对应的最小字节数。

3. 要不要使用 int 类型
如果你使用的类型的长度是不可控的话，这样在技术上是不可能正确的。

4. 永远不要使用 char 的一个特例
在C11中增加了本地 unicode 支持，对于像 const char *abcgrr = u8"abc";多字节UTF-8字符串 类型仍然是 char [] 。

5. 永远不要使用{int，long等}的一个特例
如果你调用函数时使用它其作为原本的返回类型或原本的参数，参照使用函数原型或API文档中说明的类型。

6. 符号
任何情况下，都不应该在代码中输入 unsigned 字符。

7. 整数指针
运算时，正确的指针类型是定义在 <stdint.h> 头文件中的 uintptr_t，同时也可以用 stddef.h 头文件中的 ptrdiff_t。
long diff = (long)ptrOld - (long)ptrNew;
->优化
ptrdiff_t diff = (uintptr_t)ptrOld - (uintptr_t)ptrNew;
或者使用
printf("%p is unaligned by %" PRIuPTR " bytes.\n", (void *)p, ((uintptr_t)somePtr & (sizeof(void *) - 1)));

8. 系统相关的类型
如果继续争论，“在32位平台我要使用32位long类型，64位平台我要使用64位long类型！”
在这种情况下，你应该使用 intptr_t 当前平台存储一个指针值的整型类型。
在现代的32位平台，intptr_t 是 int32_t 类型。
在现代的64位平台，intptr_t 是 int63_t 类型。
还有，intptr_t 对应 uintptr_t 类型。
对于指针便宜量，我们有一个更适合的类型 ptrdiff_t，它是存储指针差值的正确类型。

9. 最大值存储问题
对于任意的整数，最安全的容器就是 intmax_t (uintmax_t也可以)。

10. 其他类型
size_t 基本表示为“能够存储数组最大索引的整数”，同时它也表示程序中能够存储内的存最大偏移量。
在实际应用中，size_t 是 sizeof 操作符的返回类型。

    无论在哪种情况下：在所有平台，size_t 实际上的定义都跟 uintptr_t 是一样的，
所以在32位平台 size_t 是 uint32_t，在64位平台 size_t 是 uint64_t。
    还有 ssize_t，它表示一个有符号的 size_t，用于库函数的返回值，出错时返回 -1。
(注意： ssize_t 是 POSIX 中的定义，在windows接口中不可用。)


11. 打印类型
在打印时，不能做类型转换。
通常需要选择使用正确的说明符

size_t - %zu
ssize_t - %zd
ptrdiff_t - %td
原始指针的值 - %p （现代的编译器中打印16进制；先转换指针为 (void *)）
int64_t - "%" PRId64
uint64_t - "%" PRIu64
    64位类型打印时，只需要使用 PRI[udixXo]64 的宏打印。
intptr_t - "%" PRIdPTR
uintptr_t - "%" PRIuPTR
intmax_t - "%" PRIdMAX
uintmax_t - "%" PRIuMAX

关于 PRI* 格式说明符的一个注释：它们是宏，并且宏在特定平台上扩展为正确的 printf 类型说明符。这意味着你不能做：
printf("Local number: %PRIdPTR\n\n", someIntPtr);
但是因为它们是宏，你可以：
printf("Local number: %" PRIdPTR "\n\n", someIntPtr);
    注意你需要把 % 写在格式字符串文字中，但是类型说明符是在格式字符串文字之外。因为所有相邻字符串被预处理器
连接成一个最终的字符串。
}

faq(怎样写数据文件, 使之可以在不同字大小、字节顺序或浮点 格式的机器上读入?){
    最可移植的方法是是用文本文件(通常是 ASCII), 用fprintf()写入, 用 fscanf() 读入, 或类似的函数。
同理, 这也适用于网络 协议。不必太相信那些说文本文件太大或读写太慢的论点。大多数现实情况下, 操作的
效率是可接受的, 而可以在不同机器间交换和用标准工具就可以对其进行 操作是个巨大的优势。
    如果你必须使用二进制文件, 你可以通过使用某些标准格式来提高可移植性, 还可以利用已经写好的 I/O 函数库。
这些格式包括： Sun 的 XDR (RFC 1014)、  OSI 的 ASN.1 (在  CCITT X.409 和 ISO 8825 Basic Encoding Rules
中都有引用)、 CDF、 netCDF 或 HDF
}

faq(我如何决定使用那种整数类型?){
    如果需要大数值(大于 32,767 或小于 -32,767),使用long型。否则, 如果空间很重要(如有大数组或很多结构),
使用short型。除此之外, 就使用int型。
    如果严格定义的溢出特征很重要而负值无关紧要,或者你希望在操作二进制位和字节时避免符号扩展的问题, 
请使用对应的无符号类型。
    要注意在表达式中混用有符号和无符号值的情况。
    尽管字符类型(尤其是无符号字符型)可以当成'小'整型使用, 但由于不可预知的符号扩展和代码增大，有时
这样做可能得不偿失。
    使用无符号字符型有所帮助;
    在选择浮点float型和双精度浮点double型时也有类似的权衡。
    (很多编译器会把表达式中的float类型转换为double进行计算)。
    
    如果一个变量的指针必须为特定的类型时, 以上规则不再适用。
    size_t用于sizeof等计算系统中内存长度时返回的长度。
    如果因为某种原因你需要声明一个有严格大小的变量, 确保象C99的<limits.h>那样用某种适当的typedef封装这种选择。
通常, 这样做唯一的好原因是试图符合某种外部强加的存储方案

    注意: int类型所代表的天然机器字长；这是多数整型变量的当然之选。
}

faq(vlc 实现方法){

struct name {
	int namelen;
	char namestr[1];
};
struct name *ret = malloc(sizeof(struct name)-1 + strlen(newname)+1);
或者
#define MAXSIZE 100
struct name {
	int namelen;
	char namestr[MAXSIZE];
};
struct name *ret = malloc(sizeof(struct name)-MAXSIZE+strlen(newname)+1);
或者
struct name {
	int namelen;
	char *namep;
};
struct name *ret = malloc(sizeof(struct name));
ret->namelen = strlen(newname);
ret->namep = malloc(ret->namelen + 1);
或者
char *buf = malloc(sizeof(struct name) + strlen(newname) + 1);
struct name *ret = (struct name *)buf;
ret->namelen = strlen(newname);
ret->namep = buf + sizeof(struct name);
strcpy(ret->namep, newname);
}
faq(数组大小){ 确定数组大小或边界?
file1.c:                        file2.c:
int array[] = {1, 2, 3};        extern int array[];
int arraysz = sizeof(array);    extern int arraysz;
或者
file1.h:
#define ARRAYSZ 3
extern int array[ARRAYSZ];

file1.c:                file2.c:
#include "file1.h"      #include "file1.h"
int array[ARRAYSZ];
或者 (将0，-1，NULL作为数组结束标志)
file1.c:                        file2.c:
int array[] = {1, 2, 3, -1};    extern int array[];
}

faq(无符号保护和值保护规则的区别){
1. 无符号保护规则：提升的类型总是无符号的。
2. 值保护规则：
   如果提升的类型足够大，即提升后的有符号类型能够表示的了无符号类型，则用有符号类型表示提升前的无符号类型。
   若提升的类型和之前的无符号类型一样大，则和无符号保护规则一致。 
}
faq(getchar){
    这样的代码有什么问题? char c; while((c = getchar()) != EOF) ... 
    第一, 保存 getchar 的返回值的变量必须是 int 型。getchar() 可能返回任何字符 值, 包括 EOF。
如果把 getchar 的返回值截为 char 型, 则正常的字符可能会被错误的解释为 EOF,
或者 EOF 可能会被修改 (尤其是 char 型为无符号的时候), 从而永不出现。
}

faq(怎样定义和声明全局变量和函数最好?){
    首先, 尽管一个全局变量或函数可以(在多个编译单元中)有多处声明, 但是定义却只能允许出现一次。
定义是分配空间并赋初值 (如果有)的声明。
    最好的安排是在某个相关的.c文件中定义, 然后在头文件(.h)中进行外部声明,在需要使用的时候, 
只要包含对应的头文件即可。定义变量的.c文件也应该包含该头文件, 以便编译器检查定义和声明的一致性。
    如果希望让编译器检查声明的一致性, 一定要把全局声明放到头文件中。特别是, 永远不要把外部函数
的原型放到.c 文件中: 通常它与定义的一致性不能得到检查, 而矛盾的原型比不用还糟糕。
}

faq(extern 在函数声明中是什么意思?){
extern 可以用作一种格式上的提示表明函数的定义可能在另一个源文件中, 但在
    extern int f();
和
    int f();
之间并没有实质的区别。
}
faq(关键字auto到底有什么用途?){
毫无用途；它已经过时
}

faq(typedef和define 定义类型之间差别){
typedef char *String_t;
#define String_d char *
String_t s1, s2;
String_d s3, s4;
s1, s2, 和 s3 被声明为 char *; s4被声明char类型。

typedef接收作用域，可以在局部、函数和代码块内使用。
define 场合ifdef一起使用
}

faq(多个不确定副作用){
int i=7; printf("%d\n", i++ * i++);
是指在同一个表达式中使用导致同一对象修改两 次或修改以后又被引用的自增, 自减和赋值操作符的任何组合。
如果你不知道它们在不同的机器上如何实现, 这样的无知可能恰恰会有助于保护你。
}
faq(sequence point 序列点){
    序列点是一个时间点(在整个表达式全部计算完毕之后或在 ||、&&、? : 或逗号 运算符处, 
或在函数调用之前), 此刻尘埃落定, 所有的副作用都已确保结束。 
ANSI/ISO C 标准这样描述:
    在上一个和下一个序列点之间, 一个对象所保存的值至多只能被表达式的 计算修改一次。
    而且前一个值只能用于决定将要保存的值。
    
    第二句话比较费解。它说在一个表达式中如果某个对象需要写入, 则在同一表达式中对该
对象的访问应该只局限于直接用于计算将要 写入的值。这条规则有效地限制了只有能确保在
修改之前才访问 变量的表达式为合法。例如 i = i+1 合法, 而 a[i] = i++ 则非法。
}
faq(对于没有初始化的变量的初始值可以作怎样的假定? 如果一个全局变量初始值为零, 它可否作为空指针或浮点零?){
    具有静态生存期的未初始化变量(即, 在函数外声明的变量和有静态存储类型的变量) 
可以确保初始值为零, 就像程序员键入了=0一样。
    因此, 这些变量，如果是指针会被初始化为正确的空指针, 如果是浮点数会被初始化为 0.0
    
    具有自动生存期的变量 (即, 没有静态存储类型的局部变量) 如果没有显示地初始化, 则包含的是垃圾内容。
对垃圾内容不能作任何有用的假设。

    这些规则也适用于数组和结构 (称为聚合体); 对于初始化来说, 数组和结构都被认为是变量。
    
    用 malloc() 和 realloc() 动态分配的内存也可能包含垃圾数据, 因此必须由调用者正确地初始化。
用 calloc()获得的内存为全零, 但这对指针和浮点值不一定有用.
}

structure tag; 结构标签
typedef.       类型定义
faq(声明 struct x1{...}; 和 typedef struct { ...} x2; 有什么不同? ){
    第一种形式声明了一个 '结构标签'; 第二种声明了一个 '类型定义'。
主要的区别是在后文中你需要用 struct x1 引用第一种, 而用 x2 引用第二种。

    也就是说, 第二 种声明更像一种抽象类新 --- 用户不必知道它是一个结构, 而在声明它的 
实例时也不需要使用 struct 关键字。

    typedef struct x3 { ... } x3; x3既是一个结构标签，也是一个类型定义，结构标签和类型定义分别在不同的命名空间。
    C 不是 C++。结构标签不能自动生成类型。
}

faq(C语言中用什么方法实现抽象数据类型最好?){
    答：用户使用指向未公开定义的结构类型的指针绝对是个好办法。换言之，用户只需要使用结构的指针，
如不需要知道结构的成员是什么，如调用参数或返回值为该结构指针的函数；只要不使用->、sizeof()、操作符
及真实结构的声明，C语言就可以正确的处理不完全类型的结构指针；只有在实现抽象数据类型的原文件中才需要
此范围内的完整声明。
}

faq(如何确定域在结构中的字节偏移?){
    ANSI C 在 <stddef.h> 中定义了offsetof()宏, 用 offsetof(struct s, f) 可以计算 
出域f在结构s中的偏移量。 如果出于某种原因, 你需要自己实现这个功能, 可以使用下边这样的代码:
	#define offsetof(type, f) ((size_t) \
	    ((char *)&((type *)0)->f - (char *)(type *)0))
这种实现不是 100% 的可移植; 某些编译器可能会合法地拒绝接受。

怎样在运行时用名字访问结构中的域? 
    保持用 offsetof()计算的域偏移量。如果 structp 是个结构实体的指针, 而域 f 是个整数, 
它的偏移量是 offsetf, f 的值可以间接地设置:
    *(int *)((char *)structp + offsetf) = value;
}

faq(是否有自动比较结构的方法?){
没有。
编译器没有简单的好办法实现结构比较 (即, 支持结构的 == 操作符), 这也符合 C 的低层特性。
简单的按字节比较会由于结构中没有用到的 "空洞" 中的随机数据而失败; 
而按域比较在处理大结构时需要难以接受的大量重复代码。
如果你需要比较两个结构, 你必须自己写函数按域比较。
}

faq(我可否用括号来强制执行我所需要的计算顺序?){
一般来讲, 不行。 运算符优先级和括弧只能赋予表达是计算部分的顺序. 在如下的代码中
    f() + g() * h()
尽管我们知道乘法运算在加法之前, 但这并不能说明这三个函数 哪个会被首先调用。
如果你需要确保子表达式的计算顺序, 你可能需要使用明确的临时 变量和独立的语句。
}

faq(枚举和一组预处理的define有什么不同?){
只有很小的区别。
C 标准中允许枚举和其它整形类别自由混用而不会出错。
但是, 假如编译器不允许在未经明确类型转换的情况下混用这些类型，则聪明地使用枚举可以捕捉到某些程序错误。

枚举的一些优点: 自动赋值; 调试器在检验枚举变量时, 可以显示符号值; 它们服从数据块作用域规则。
一个缺点是程序员不能控制这些对非重要的警告; 有些程序员则反感于无法 控制枚举变量的大小。
}
faq(跟踪union中字段变化){
struct taggedunion {
	enum {UNKNOWN, INT, LONG, DOUBLE, POINTER} code;
	union {
		int i;
		long l;
		double d;
		void *p;
	} u;
};
}
faq(为什么这样的代码:a[i] = i++; 不能工作?){
    子表达式 i++ 有一个副作用 --- 它会改变 i 的值 --- 由于  i 在同一表达式的其它地方被引用, 
这会导致无定义的结果, 无从判断该引用(左边的 a[i] 中)是旧值还是新值。
}

faq(如果我不使用表达式的值, 我应该用++i或i++ 来自增一个变量吗?){
    由于这两种格式区别仅在于生成的值, 所以在仅使用它们的副作用时, 二者 完全一样。
但是, 在 C++ 中, 前缀方式却是首选。
}

faq(为什么如下的代码  int a = 100, b = 100; long int c = a * b; 不能工作?){
    根据 C 的内部类型转换规则, 乘法是用 int 进行的, 而其结果可能在转 换为 long 型并
赋给左边的 c 之前溢出或被截短。可以使用明确的类型 转换, 强迫乘法以 long 型进行:
    long int c = (long int)a * b;
注意, (long int)(a * b) 不能达到需要的效果。
当两个整数做除法而结果赋与一个浮点变量时, 也有可能有同样类型的问题, 解决方法也是类似的。
}

faq(*p++ 自增p还是p所指向的变量?){
    后缀 ++ 和 -- 操作符本质上比前缀一目操作的优先级高, 因此 *p++ 和 *(p++) 等价, 
它自增 p 并返回  p 自增之前所指向的值。要自增 p 指向的值, 使用  (*p)++, 如果副作用
的顺序无关紧要也可以使用 ++*p。
}

faq(我看到了用指针调用函数的不同语法形式。到底怎么回事?){
最初,一个函数指针必须用*操作符 (和一对额外的括弧) 转换为一个 真正的 函数才能调用:
    int r, func(), (*fp)() = func;
    r = (*fp)();
而函数总是通过指针进行调用的, 所有 真正的 函数名总是隐式的退化为 指针 (在表达式中, 
正如在初始化时一样)。这个 推论表明无论 fp 是函数名和函数的指针
    r = fp();
ANSI C 标准实际上接受后边的解释, 这意味着 * 操作符不再需要, 尽管依然允许。
}

faq(NULL是什么,它是怎么定义的?){
    作为一种风格, 很多人不愿意在程序中到处出现未加修饰的 0。因此定义了预处理宏  NULL 
(在 <stdio.h> 和其它几个头文件中) 为空指针常数, 通常是 0 或者 ((void *)0)
希望区别整数 0 和空指针 0  的人可以在需要空指针的地方使用 NULL。

    使用 NULL 只是一种风格习惯; 预处理器把所有的 NULL 都还原回 0, 而编译还是依照 
上文的描述处理指针上下文的 0。特别是, 在函数调用的参数里, NULL 之前的类型转换还是需要。

NULL 只能用作指针常数; 
free(NULL)是可以的，不会报错
}

faq(在一个源文件中定义了char a[6], 在另一个中声明了  extern char *a 。为什么不行 ?){
你在一个源文件中定义了一个字符串, 而在另一个文件中定义了指向 字符的指针。
extern char * 的申明不能和真正的定义匹配。 
类型  T 的指针和类型 T 的数组并非同种类型。 请使用 extern char a[ ]。
}
faq(char a[ ] 和 char *a 是一样的){
 一个图形胜过千言万语。声明
    char a[] = "hello";
    char *p = "world";
将会初始化下图所示的数据结果:
       +---+---+---+---+---+---+
    a: | h | e | l | l | o |\0 |
       +---+---+---+---+---+---+
       +-----+     +---+---+---+---+---+---+
    p: |  *======> | w | o | r | l | d |\0 |
       +-----+     +---+---+---+---+---+---+
    当编译器看到表达式a[3]的时候, 它生成代码从a的位置开始跳过3个, 然后取出那个字符. 
如果它看到p[3],它生成代码找到p的位置, 取出其中的指针值, 在指针上加3然后取出指向的字符。
换言之, a[3]是名为a的对象(的起始位置)之后3个位置的值, 而p[3]是p指向的对象的3个位置之后的值.
在上例中, a[3]和p[3]碰巧都是'l' , 但是编译器到达那里的途径不尽相同。

本质的区别在于类似a的数组和类似p指针一旦在表达式中出现就会按照不同的方法计算, 不论它们是否有下标。
}

faq(怎样建立和理解非常复杂的声明?
例如定义一个包含 N 个指向返回指向字符的指针的函数的指针的数组?){
这个问题至少有以下 3 种答案:
    char *(*(*a[N])())();
    用 typedef 逐步完成声明:
        typedef char *pc;       /* 字符指针           */
        typedef pc fpc();       /* 返回字符指针的函数 */
        typedef fpc *pfpc;      /* 上面函数的指针     */
        typedef pfpc fpfpc();   /* 返回函数指针的函数 */
        typedef fpfpc *pfpfpc;  /* 上面函数的指针     */
        pfpfpc a[N];           /* 上面指针的数组     */
    使用 cdecl 程序, 它可以把英文翻译成 C 或者把 C 翻译成英文:
        cdecl> declare a as array of pointer to function returning pointer to function returning pointer to char
        char *(*(*a[])())()
        
*(*pfpc)()  is a char 
(*pfpc)()   is a pointer to char 
(*pfpc)     is a function returning pointer to char 
pfpc        is a pointer to function returning pointer to char
}
faq(那么为什么作为函数形参的数组和指针申明可以互换呢){
这是一种便利。
由于数组会马上蜕变为指针, 数组事实上从来没有传入过函数。允许指针参数声明为数组只不过
是为让它看起来好像传入了数组, 因为该参数可能在函数内当作数组使用。特别地, 任何声明 
看起来象 数组的参数, 例如
    void f(char a[])
    { ... }
在编译器里都被当作指针来处理, 因为在传入数组的时候,那正是函数接收到的.
    void f(char *a)
    { ... }
这种转换仅限于函数形参的声明, 别的地方并不适用。
}

faq(现实地讲, 数组和指针地区别是什么 ?){
    数组自动分配空间, 但是不能重分配或改变大小。
    指针必须明确赋值以指向 分配的空间 (可能使用 malloc), 但是可以随意重新赋值 (即, 指向不同的对 象), 
同时除了表示一个内存块的基址之外, 还有许多其它的用途。
}

faq(既然数组引用会蜕化为指针, 如果arr是数组, 那么arr和 &arr又有什么区别呢?){
区别在于类型。
在标准 C 中, &arr 生成一个 T 型数组 的指针, 指向整个数组。
在  ANSI 之前的 C 中, &arr 中的 & 通常会引起一个警告, 它通常被忽略。
在所有的 C 编译器中, 对数组的简单引用(不包括 & 操作符)生成一个 T 的指 针类型的指针, 指向数组的第一成员。
}

faq(我该如何动态分配多维数组?){
    传统的解决方案是分配一个指针数组, 然后把每个指针初始化为动态分配的 列。 以下为 一个二维的例子:
#include <stdlib.h> 
int **array1 = malloc(nrows * sizeof(int *)); 
for(i = 0; i < nrows; i++) 
    array1[i] = malloc(ncolumns * sizeof(int));
    当然, 在真实代码中, 所有的 malloc 返回值都必须检查。你也可以使用 sizeof(*array1)  
和 sizeof(**array1) 代替 sizeof(int *) 和 sizeof(int)。

你可以让数组的内容连续, 但在后来重新分配列的时候会比较困难, 得使用一点指针算术:
    int **array2 = malloc(nrows * sizeof(int *));
    array2[0] = malloc(nrows * ncolumns * sizeof(int));
    for(i = 1; i < nrows; i++)
        array2[i] = array2[0] + i * ncolumns;
在两种情况下, 动态数组的成员都可以用正常的数组下标 arrayx[i][j] 来访问  
(for 0 <= i <nrows 和 0 <= j <ncolumns)。
   
   如果上述方案的两次间接因为某种原因不能接受, 你还可以同一个单独的动态分配 的一维数组来模拟二维数组:
    int *array3 = malloc(nrows * ncolumns * sizeof(int));
    #define Arrayaccess(a, i, j) ((a)[(i) * ncolumns + (j)])
但是, 你现在必须手工计算下标, 用 array3[i * ncolumns + j] 访问第 i, j 个成员。
使用宏可以隐藏显示的计算, 但是调用它的时候要使用括号和逗号, 这看起来不太象 多维数组语法, 而且宏需要至少访问一维。
 
当然, 使用这些技术, 你都必须记住在不用的时候释放数组。而且你可能不能混用动态数组和传统的静态分配数组。
}
faq(当我向一个接受指针的指针的函数传入二维数组的时候, 编译器报错了){
    数组蜕化为指针的规则 不能递归应用。数组的数组(即 C 语言中的二维数组) 
蜕化为数组的指针, 而不是指针的指针。数组指针常常令人困惑, 需要小心对待;

如果你向函数传递二位数组:
    int array[NROWS][NCOLUMNS];
    f(array);
那么函数的声明必须匹配:
    void f(int a[][NCOLUMNS])
    { ... }
或者
    void f(int (*ap)[NCOLUMNS]) /* ap 是个数组指针 */
    { ... }
在第一个声明中, 编译器进行了通常的从数组的数组到数组的指针的隐式转换。

    第二种形式中的指针 定义显而易见。因为被调函数并不为数组分配地址, 所以它并不需要知道总的 大小, 
所以行数 NROWS 可以省略。但数组的宽度依然重要, 所以列维度  NCOLUMNS (对于三维或多维数组, 相关的维度) 
必须保留。
   如果一个函数已经定义为接受指针的指针, 那么几乎可以肯定直接向它传入 二维数组 毫无意义。
}

faq(我怎样编写接受编译时宽度未知的二维数组的函数?){
这并非易事。一种办法是传入指向 [0][0] 成员的的指针和两个维数, 然后 手工 模拟数组下标。
    void f2(int *aryp, int nrows, int ncolumns)
    { ... array[i][j] is accessed as aryp[i * ncolumns + j] ... }
这个函数可以用问题 6.15 的数组如下调用:
    f2(&array[0][0], NROWS, NCOLUMNS);
但是, 必须注明的一点是, 用这种方法通过 手工 方式模拟下标的程序 未能严格遵循 ANSI C 标准; 
根据官方的解释, 当 x >= NCOLUMNS 时, 访问 &array[0][0][x] 的结果未定义。

    C99 允许变长数组, 一旦接受 C99 扩展的编译器广泛流传以后, VLA 可能是 首选的解决方案。
gcc 支持可变数组已经有些时日了。
}

faq(我怎样在函数参数传递时混用静态和动态多维数组 ?){
没有完美的方法。假设有如下声明
    int array[NROWS][NCOLUMNS];
    int **array1;		/* 不齐的   */
    int **array2;		/* 连续的   */
    int *array3;		 /* "变平的" */
    int (*array4)[NCOLUMNS];

指针的初始值如问题 6.13 的程序片段, 函数声明如下
    void f1a(int a[][NCOLUMNS], int nrows, int ncolumns);
    void f1b(int (*a)[NCOLUMNS], int nrows, int ncolumns);
    void f2(int *aryp, int nrows, int ncolumns);
    void f3(int **pp, int nrows, int ncolumns);

其中 f1a() 和 f1b() 接受传统的二维数组, f2() 接受 扁平的 二维数组, f3() 接受指针的指针模拟的数组
下面的调用应该可以如愿运行:
    f1a(array, NROWS, NCOLUMNS);
    f1b(array, NROWS, NCOLUMNS);
    f1a(array4, nrows, NCOLUMNS);
    f1b(array4, nrows, NCOLUMNS);
    f2(&array[0][0], NROWS, NCOLUMNS);
    f2(*array, NROWS, NCOLUMNS);
    f2(*array2, nrows, ncolumns);
    f2(array3, nrows, ncolumns);
    f2(*array4, nrows, NCOLUMNS);
    f3(array1, nrows, ncolumns);
    f3(array2, nrows, ncolumns);

下面的调用在大多数系统上可能可行, 但是有可疑的类型转换, 而且只有动态  ncolumns 和静态 NCOLUMNS 匹配才行:
    f1a((int (*)[NCOLUMNS])(*array2), nrows, ncolumns);
    f1a((int (*)[NCOLUMNS])(*array2), nrows, ncolumns);
    f1b((int (*)[NCOLUMNS])array3, nrows, ncolumns);
    f1b((int (*)[NCOLUMNS])array3, nrows, ncolumns);

同时必须注意向 f2() 传递 &array[0][0] (或者等价的 *array) 并不完全符合标准; 参见问题 6.16。

如果你能理解为何上述调用可行且必须这样书写, 而未列出的组合不行, 那么你对 C  语言中的数组和指针就有了很好的理解了。
}

faq(在调用 malloc() 的时候, 错误 "不能把 void * 转换为 int *" 是什么意思?){
说明你用的是 C++ 编译器而不是 C 编译器。
}
faq(那么返回字符串或其它集合的争取方法是什么呢?){
返回指针必须是静态分配的缓冲区
或者调用者传入的缓冲区, 
或者用 malloc() 获得的内存, 但不能是局部 (自动) 数组。
}

faq(我必须在程序退出之前释放分配的所有内存吗?){
    你不必这样做。一个真正的操作系统毫无疑问会在程序退出的时候回收所有的 内存和其它资源。
然而, 有些个人电脑据称不能可靠地释放内存, 从  ANSI/ISO C 的角度来看这不过是一个 实现的质量问题。
}

faq(alloca() 是什么?为什么不提倡使用它?){
    在调用 alloca() 的函数返回的时候, 它分配的内存会自动释放。也就是说, 用 alloca 
分配的内存在某种程度上局部于函数的 堆栈帧 或上下文中。
    alloca() 不具可移植性, 而且在没有传统堆栈的机器上很难实现。 当它的返回值直接传入
另一个函数时会带来问题, 如  fgets(alloca(100), 100, stdin)。
    由于这些原因, alloca() 不合标准, 不宜使用在必须广泛移植的程序中, 不管它可能多么有用。
既然 C99 支持变长数组(VLA), 它可以用来更好的 完成 alloca() 以前的任务。
}

faq(){
我认为我的编译器有问题: 我注意到 sizeof('a') 是 2 而不是  1 (即, 不是 sizeof(char))。
可能有些令人吃惊, C 语言中的字符常数是 int 型, 因此 sizeof('a') 是  sizeof(int), 这是另一个与 C++ 不同的地方
}

faq(当 p 是指针时, if(p) 是合法的表达式吗?){
是的. 
}

faq(书写多语句宏的最好方法是什么? ){
    通常的目标是书写一个象包含一个单独的函数调用语句的宏。这意味着 调用者 需要提供最终的分号, 
而宏体则不需要。因此宏体不能为简单 的括弧包围的复合语句, 因为如果这样, 调用的时候就会发生语法错 
(明显是 一个单独语句, 但却多了一个额外的分号), 就像在 if/else 语句的 if 分支 中多了一个 else 分句一样。

所以, 传统的结局方案就是这样使用:
#define MACRO(arg1, arg2) do {  \
	/* declarations */      \
	stmt1;		   \
	stmt2;		   \
	/* ... */	        \
	} while(0)	/* 没有结尾的 ; */
    当调用者加上分号后, 宏在任何情况下都会扩展为一个单独的语句。 优化的 编译器会去掉条件为 0 的 无效 
测试或分支, 尽管 lint 可能会警告。
}

faq(怎样写参数个数可变的宏?){
    一种流行的技巧是用一个单独的用括弧括起来的的 参数 定义和调用宏, 参数在 宏扩展的时候成为类似 
printf() 那样的函数的整个参数列表。
    #define DEBUG(args) (printf("DEBUG: "), printf args)
    if(n != 0) DEBUG(("n is %d\n", n));
明显的缺陷是调用者必须记住使用一对额外的括弧。

    gcc 有一个扩展可以让函数式的宏接受可变个数的参数。 但这不是标准。
另一种 可能的解决方案是根据参数个数使用多个宏 (DEBUG1, DEBUG2, 等等), 或者用 逗号玩个这样的花招:
#define DEBUG(args) (printf("DEBUG: "), printf(args)) 
#define _ , 
DEBUG("i = %d" _ i);
    C99 引入了对参数个数可变的函数式宏的正式支持。在宏 原型 的末尾加上符号 ... 
(就像在参数可变的函数定义中), 宏定义中的伪宏 __VA_ARGS__ 就会在调用是 替换成可变参数。
最后, 你总是可以使用真实的函数, 接受明确定义的可变参数。
如果你需要替换宏, 使用一个 函数和一个非函数式宏, 如 #define printf myprintf。
}

faq(把什么放到 .c 文件, 把什么放到 .h 文件){
(a)宏定义；(b)结构、联合和枚举声明；(c)typedef声明；(d)外部函数声明；(e)全局变量声明。

另一方面，如果定义或声明为一个源文件私有，则最好留在该文件中(并声明为static)。
最后，不能把实际的代码或全局变量放在头文件中。
}

faq(){
我怎样构造比较字符串的 #if 预处理表达式?
你不能直接这样做; #if 预处理指令只处理整数。 有一种替代的方法是定义多 个整数值不一样的宏, 用它们来实现条件比较。
}

faq(如何列出所有的预定义标识符?){
尽管这是种常见的需求, 但却没有什么标准的办法。
gcc 提供了和 -E 一起使用 的 -dM 选项, 其它编译器也有类似的选项。 
如果编译器文档没有帮助, 那么可 以使用类似 Unix 字符串工具的程序取出编译和预处理生成的可执行文件中的 可打印字符串。
}

faq(为什么我不能象这样在初始化和数组维度中使用常量: const int n = 5; int a[n];){
    const 限定词真正的含义是只读的; 用它限定的对象是运行时(通常)不能被赋值的对象。
因此用const限定的对象的值并不完全是一个真正的常量。在这点上C和C++不一样。
如果你需要真正的运行时常量, 使用预定义宏 #define (或enum)。
}

faq(const char *p 和 char * const p 有何区别?){
    const char *p(也可以写成char const *p)声明了一个指向字符常量的指针, 因此不能改变它所指向的字符;
char * const p 声明一个指向(可变)字符的指针常量, 就是说, 你不能修改指针。
}

faq(实现定义, 未明确, 无定义){
人们好像有些在意实现定义(implementation-defin-ed)未明确(unspecified)和无定义(undefined)行为的区别。
它们的区别到底在哪里?

首先，这3种情况都代表了C语言标准中没有明确要求某个特定的构造或使用它的程序必须完成的
事情的领域。C语言定义中的这种松散性是传统的，也是经过深思熟虑的，它允许编译器作者:
1. 选择某些构造可以按照"硬件完成的方式"生成高效的代码
2. 忽略某些太难准确的定义、可能在良好书写的程序中没有什么实际用处的边界构造
这3种"标准中没有准确定义的 "行为的定义如下:
1. 实现定义的：实现必须选择某种行为。对程序不能编译失败。(使用这种构造的程序不错误)
这种选择必须有文档说明。标准对此可以提供一些允许的行为供选择，也可能不强加任何特定要求。
2. 不确定的：跟未定义的类似，但是无需提供文档。
3. 未定义的：任何事情都可能发生。标准对此没有任何要求。程序可能编译失败、运行错误(
崩溃或静悄悄地生成错误结果)或者幸运地如程序员所愿。

注意：既然标准对无定义行为没有强制要求, 编译器就绝对可以做任何事情。特别地, 
对程序其它部分的正常运行没有任何保证;
如果你对书写可移植代码有兴趣, 你可以忽略它们的区别, 因为通常你都希望避免依赖三种行为中的任何一种。

一个程序"合法legal" 有效"valid" 或 "符合标准的(conforming)"到底是什么意思?
简单地说，标准谈到3种符合性:符合标准的程序、严格符合标准的程序和符合标准的实现。
1. 符合标准的程序： 是可以由符合标准的实现接受的程序。
2. 严格符合标准的程序： 是完全按照标准的规定使用语言，不依赖任何实现定义、不确定或未定义行为的程序
3. 符合标准的实现: 是按标准生成的实现的程序
}

faq(ANSI 标准竟然有那么多没有定义的东西。 标准的唯一任务不就是让这些东西标准化吗?){
    某些构造随编译器和硬件的实现而变化, 这一直是C语言的一个特点。

    这种有意的不严格规定可以让编译器生成效率更高的代码, 而不必让所有程序为了不合理的
情况承担额外的负担。因此, 标准只是把现存的实践整理成文。

编程语言标准可以看作是语言使用者和编译器实现者之间的协议。
协议的一部分是编译器实现者同意提供, 用户可以使用的功能。
而其它部分则包 括用户同意遵守, 编译器实现者认为会被最受的规则。
只要双方都恪守 自己的保证, 程序就可以正确运行。如果任何一方违背它的诺言, 则结果肯定失败。

面对未定义行为的时候(包括范围内的实现定义行为和不确定行为), 编译器可能做任何实现, 其中也
包括你所期望的结果. 但是依赖这个实现却不明智.
}

faq(EOF){
我有个读取直到 EOF 的简单程序, 但是我如何才能在键盘上输入那个EOF呢?
其实, 你的C程序看到的EOF的值和你用键盘发出的文件结束按键组合之间没有任何直接联系。
根据你的操作系统,你可能使用不同的按键组合来表示文件结束, 通常是 Control-D 或 Control-Z。 
}

faq(printf){ printf()后面使用fflush(stdout)
1. %之后的称为格式码(指明了格式转换的类型)
2. 修饰符， %和格式码之间 %3.1g（宽度修饰符、精度修饰符等）
3. 标志， %和域宽修饰符之间，如%-14s(左对齐), %+d
4. #对数值的输出格式进行微调,0%o和%#o，针对数值0，其分别打印00和0；
   %#x和%#X打印出的16进制数前加上0x或0X；
   用在浮点数中则其要求小数点必须打印出来(即使小数点后没有数字)，
   如果用于%g或%G格式项，打印出的数值尾缀的0将不会被去掉
5. printf允许间接指定域宽，只需用*替换域宽修饰符或精度修饰符或两者，printf("%*.*s", 12, 5, str);
6. printf("%*%\n", n) 打印出n-1个空白字符，后面再跟一个%符号
7. 新增格式码：%p 打印出该指针所指向的地址； 
               %n 指出已经打印的字符数，这个数被存储在对应参数所指向的整数中(一个整型指针)，
               如下int n; printf("hello\n%n", &n)
}

printf(scanf){
格式              printf              scanf
%c                 int                   char *
%d,%i              int                   int *
%u,%o,%x           unsigned int          unsigned int *
%ld, %li           long int              long int*
%lu, %lo, %lx      unsigned long int     unsigned long int *
%hd,%hi            int                   short int *
%ho, %hu, %hx      unsigned int          unsigned short int *
%e, %f, %g         double                float *
%le, %lf, %lg      n/a                   double *
%s                 char*                 char *
%[...]             n/a                   char *
%p                 void                  void *
%n                 int *                 int *
%%                 none                  none
}
faq(printf){
posix要求ANSI C 中标准输入输出函数式线程安全的.

1. 我如何在 printf 的格式串中输出一个 '%'? 我试过 \%, 但是不行。
只需要重复百分号: %%。
百分号%是编译器的转义字符,
\%不行, 因为反斜杠\是编译器的转义字符, 而这里我们的问题最终是printf的转义字符。

2. 我如何用 printf 实现可变的域宽度?就是说, 我想在运行时确定宽度而不是使用 %8d?
printf("%*d", width, x) 就能达到你的要求。
printf("%*.*s\n", 12, 5, str);
printf("%12.5s\n", str);

3. 对于size_t那样的类型定义, 当我不知道它到底是long还是其它类型的时候, 我应该使用什么样的printf格式呢?
把那个值转换为一个已知的长度够大的类型, 然后使用与之对应的printf格式。例如, 输出某种类型的长度, 
你可以使用
printf("%lu", (unsigned long)sizeof(thetype));

4. 有人告诉我在printf中使用%lf不正确。那么, 如果scanf()需要%lf, 怎么可以用在 printf()中用 %f 输出双精度数呢?
printf的%f标识符的确既可以输出浮点数又可以输出双精度数。根据"缺省参数提升"规则, 不论范围内有没有原形都会在在类似 
printf的可变长度参数列表中采用, 浮点型的变量或扩展为双精度型, 因此 printf()只会看到双精度数。
printf()的确接受 %Lf, 用于输出长双精度数。

5. 为什么调用 printf() 之后 errno 内有 ENOTTY?
    如果stdout是终端, 很多stdio包都会对其行为进行细微的调整。为了做出判断, 这些实现会执行某些当 stdout 
为终端时会失败的操作。尽管输出操作成功完成, errno 还是会被置为 ENOTTY。注意, 只有当函数报告错误之后检查
errno 的内容才有意义。errno在其它情况下也不保证为 0。

6. 为什么调用 printf() 前, 必须要用 #include <stdio.h>?
为了把 printf() 的正确原型说明引入作用域。
对于用可变参数的函数, 编译器可能用不同的调用次序。例如, 如果可变参数的调用 比固定参数的调用效率低。
所以在调用可变参数的函数前, 它的原型说明必须在 作用域内, 编译器由此知道要用不定长调用机制。在原型
说明中用省略号  "..." 来表示可变参数。

注意: 头文件一般只包含定义类型与定义函数原型，是不会产生汇编代码的，不能声明任何存储空间(除非定义共享全局变量)

7. 为什么 %f 可以在 printf() 参数中, 同时表示 float 和  double?他们难道不是不同类型吗?
"参数默认晋级" 规则适用于在可变参数中的可变动部分: char 和  short int 晋级到 int, float 晋级到 
double。 同样的晋级也适用于在作用域中没有原型说明的函数调用, 即所谓的 "旧风格" 函数 调用,
所以 printf 的 %f 格式总是得到  double。类似的, %c 总是得到 int, %hd 也是。

为什么编译器不让我定义一个没有固定参数项的可变参数函数?
标准 C 要求用可变参数的函数至少有一个固定参数项, 这样你才可以 使用 va_start()。 所以编译器不会接受下面定义的函数：
    int f(...){
        ...
    }

我有个接受 float 的可变参函数, 为什么  va_arg(argp, float) 不工作?
参数默认晋级规则适用于在可变参数中的可变动部分: 
参数类型为 float 的总是晋级 (扩展) 到 double, 
char 和 short int 晋级到 int。所以  va_arg(arpg, float) 是错误的用法。
应该总是用  va_arg(arpg, double)。 同理, 要用 va_arg(argp, int) 来取得原来类型是 char, short 或 int 的参数。
基于相同理由, 传给 va_start() 的最后一个 固定 参数项 的类型不会被晋级。

怎样实现一个可变参数函数, 它把参数再传给另一个可变参数函数?
通常来说, 你做不到。
}

对于 printf()，float 和 double 共用了%f。在 printf()中使用%lf，其实这种行为根本没有在规范中定义
如果想在 scanf()中使用 double，必须指定%lf。

scanf(){ scan formatted
注意: scanf()不是以行单位对输入内容进行解释，而是对连续字符流进行解释(换行符也视为一个字符)。
实例: scanf()连续的从流读入字符，并且对和格式说明符"%d"相匹配的部分进行变换处理，如输入"123\n"时，
从流中取得123部分的内容，并对它进行处理，换行符依旧会残留在流中，后续如果存在getchar()就会
吞食这个留下的换行符。
此外，当scanf()变换失败的时候，将导致失败的部分遗留在流中。
在读入过程中有几个对象被成功地变换，则scanf()的返回值就为几。
为了避免后续字符的遗留影响后面的输入时，可使用如下方式：
char buf[256];
int hoge;
fgets(buf, sizeof(buf), stdin);
sscanf(buf, "%d", &hoge);

为什么大家都说不要使用 scanf()?那我该用什么来代替呢?
    scanf()有很多问题,而且,它的%s格式有着和gets()一样的问题---很难保证接收缓冲不溢出。
    更一般地讲, scanf()的设计使用于相对结构化的, 格式整齐的输入。设计上, 它的名称就是来自于
"scan formatted".如果你注意到, 它会告诉你成功或失败, 但它只能提供失败的大略位置, 
至于失败的原因, 就无从得知了。对scanf()多得体的错误恢复几乎是不可能的; 
    通常先用类似 fgets() 的函数读入整行, 然后再用sscanf()或其它技术解释。
strtol(),strtok()和atoi()等函数通常有用;
    如果你真的要用任何scanf的变体,你要确保检查返回值,以确定找到了期待的值。
而使用%s格式的时候, 一定要小心缓冲区溢出。
    
1. 为什么这些代码double d; scanf("%f", &d); 不行?
跟printf()不同, scanf()用 %lf 代表双精度数, 用 %f 代表浮点数。

2. 怎样在scanf()格式串中指定可变的宽度?
    不能: scanf()格式串中的星号表示禁止赋值。你可以使用ANSI的字符串化和字符连接完成
同样的事情, 或者你可以在运行时创建 scanf 格式串。

3. 当我用%d\n 调用 scanf 从键盘读取数字的时候, 好像要多输入一行函数才返回。
可能令人吃惊, \n 在 scanf 格式串中不表示 等待换行符, 而是读取并放弃所有的空白字符。

4. 怎样写类似scanf()的函数,再把参数转传给scanf()去完成大部分工作?
C99 支持 vscanf(), vfscanf() 和 vsscanf(), C99 以前的标准不支持。

5. short int s;
scanf("%d", &s); 不能正常工作，-> scanf("%hd", &s); 

6. int n; char str[80]; 
printf("enter a number: "); 
scanf("%d", &n); 
printf("enter a string: "); 
gets(str); 
printf("you typed %d and \"%s\"\n", n, str); 为何str总是空字符串；
答：42
    a string
因为scanf虽然解释了输入字符，但是把回车丢在了输入流缓冲区，而gets从输入流中获得了回车符

7. 我发现如果坚持检查返回值以确保用户输入的是我期待的数值, 则 scanf() 的使用会安全很多, 
   但有的时候好像会陷入无限循环。
  在 scanf() 转换数字的时候, 它遇到的任何非数字字符都会终止转换并被保留在输入流中。
因此, 除非采用了其它的步骤, 那么未预料到的 非数字输入会不断 阻塞 scanf(): scanf() 
永远都不能越过错误的非数字字符而处理后边的合法数字字符。如果用户在数字格式的scanf 
如%d或%f中输入字符x, 那么提示后并用同样的scanf()调用重试的代码会立即遇到同一个'x'。
}

gets(为什么大家都说不要使用 gets()?){
跟fgets()不同, gets()不能被告知输入缓冲区的大小, 因此不能避免缓冲区的溢出。
标准库的fgets()函数对gets()作了很大的改进, 尽管它仍然不完善。
如果真的可能输入很长的行, 还是需要仔细思考, 正确处理。
}

faq(怎样在程序里把 stdin 或 stdout 重定向到文件?){
使用 freopen(),
}
faq(一旦使用freopen()之后, 怎样才能恢复原来的stdout|stdin?){
没有什么好办法。如果你需要恢复回去, 那么最好一开始就不要使用  freopen()。
可以使用你自己的可以随意赋值的输出(输入)流变量, 而不要去动原来的输出 (或输入) 流。

有一种不可移植的办法, 可以在调用 freopen() 之前保存流的信息, 以便其后恢复原来的流。
一种办法是使用系统相关的调用如 dup(), dup2() 等。
另一种办法是复制或查看 FILE 结构的内容, 但是这种 方法完全没有可移植性而且很不可靠。
}

faq(怎样正确的读取二进制文件?
我有时看到 0x0a 和 0x0d 混淆了, 而且如果数据中包含 0x1a 的话, 我好像会提前遇到 EOF。
){
读取二进制数据文件的时候你应该用 rb 调用 fopen(), 确保不会发生 文本文件的解释。类似的, 写二进制文件时, 使用 wb。
注意文本/二进制区别只是发生在文件打开时: 一旦文件打开之后, 在其上调用何种 I/O 函数无关紧要。
}

faq(怎样把字符串分隔成用空白作间隔符的段?怎样实现类似传递给  main() 的 argc 和 argv?){
标准中唯一用于这种分隔的函数是 strtok(), 虽然用起来需要些技巧, 而且 不一定能做到你所要求的所有事。
例如, 它不能处理引用。
}

faq(如何判断哪些标识符可以使用, 那些被保留了?){
(1) 标识符的3个属性: 作用域, 命名空间和链接类型.
    1.1 C语言有4种作用域(标识符声明的有效区域): 函数,文件,块和原型.(第4种类型仅仅存在于函
数原型声明的参数列表中)
    全局变量; 文件内部的静态变量; 局部变量; 
    存储期: 
静态存储期(static storage duration): 全局变量、文件内的 static 变量、指定 static 的局部变量都持有静态存储期。
自动存储期(auto storage duration)  : 没有指定 static 的局部变量，持有自动存储期。
    静态变量的寿命从程序运行时开始，到程序关闭时结束。
    自动变量的寿命到声明该变量的语句块执行结束为止。
    通过 malloc() 分配的领域的寿命到调用 free() 为止。
    
    存储类型修饰符: typedef extern static auto register
    
1.2 C语言有4种命名空间: 行标(label, 即goto的目的地), 标签(tag,结构, 联合和枚举名称), 结构
联合成员, 以及标准所谓的其它"普通标识符"(函数, 变量, 类型定义名称和枚举常量). 另一个名称集(
虽然标准并没有称其为"命名空间")包括了预处理宏.这些宏在编译器开始考虑上述4种命名空间之前
就会被扩展.
　　1.3 标准定义了3中"链接类型": 外部链接, 内部链接, 无链接. 对我们来说, 外部链接就是指全部变量,
非静态变量和函数(在所有的源文件中有效); 内部链接就是指限于文件作用域内的静态函数和变量; 而
"无链接"则是指局部变量及类型定义(typedef)名称和枚举常量.
(2) ANSI/ISO C标准标识符标准建议规则:
　　规则1: 所有下划线大头, 后跟一个大写字母或另一个下划线的标识符永远保留(所有的作用域, 所
有的命名空间).
　　规则2: 所有以下划线打头的标识符作为文件作用域的普通标识符(函数, 变量, 类型定义和枚举常
量)保留(为编译器后续实现保留).
　　规则3: 被包含的标准头文件中的宏名称的所有用法保留.
　　规则4: 标准中所有具有外部链接属性的标识符(即函数名)永远保留用作外部链接标识符.
　　规则5: 在标准头文件中定义的类型定义和标签名称, 如果对应的头文件被包含, 则在(同一个命名
空间中的)文件作用域内保留.(事实上, 标准声称"所有作用于文件作用域的标识符", 但规则4没有包含
标识符只剩下类型定义和标签名称.)

<ctyle.h>       is[a-z]*,to[a-z]* (函数)
<errno.h>       E[0-9]*、E[A-Z]*  (宏定义)
<locale.h>      LC[A-Z]*          (宏定义)
<math.h>        cosf、sinf和sqrtf等 cosl sinl和sqrtl等函数
<signal.h>      SIG[A-Z]          (宏定义)
<stdlib.h>      str[a-z]*         (函数)
<string.h>      mem[a-z]* str[a-z] wcs[a-z]* (函数)

* 在标准中，"作用域"(scope)和"连接"(linkage)是分别定义的，用语句块包围的是作用域，
static 和 extern 分别控制静态连接和外部连接。对于全局变量，作用域指文件作用域，链接指外部链接。
对于程序员来说，这些方式都是控制命名空间的，它们没有什么不同。
}

faq(怎样同时向两个地方输出, 如同时输出到屏幕和文件?){

#include <stdio.h>
#include <stdarg.h>

extern FILE *logfp;

void logprintf(char *fmt, ...){
	va_list argp;
	va_start(argp, fmt);
	vfprintf(stdout, fmt, argp);
	va_end(argp);
	va_start(argp, fmt);
	vfprintf(logfp, fmt, argp);
	va_end(argp);
}

void f2printf(FILE *fp1, FILE *fp2, char *fmt, ...){
	va_list argp;
	va_start(argp, fmt); vfprintf(fp1, fmt, argp); va_end(argp);
	va_start(argp, fmt); vfprintf(fp2, fmt, argp); va_end(argp);
}

}

printf()和 strcpy()都把这一点作为默认的前提条件。此外，编译器也会在字符串常量的末尾自动加上空字符。
可是，strncpy()却令人迷惑地打破了这个规则。
strncpy()像 strncpy(dest, src, len);这样使用，从 src 复制最大长度为 len 的字符到 dest 中。当 src 的长度大于 len 时，dest 不会以空字符结束*。
反过来，如果 src 比 len 短，就会使用空字符补足剩余的长度。这个规则也是有点奇怪的。
因此，冒冒失失地使用了 strncpy()，之后再使用 printf()、sprintf()、strcpy()等处理 dest，由于其末尾可能没有空字符，进而可能会发生处理越界，以至于破坏大片内存区域的数据。因此，strncpy()是危险的。
要　点
如果使用 strncpy()，请注意它可能会产生没有空字符结尾的字符串。

strncpy(字符串拷贝不会追加\0结束符){
char * strncpy(char *dest, const char *src, size_t n){
   size_t i;

   for (i = 0; i < n && src[i] != '\0'; i++)
       dest[i] = src[i];
   for ( ; i < n; i++)
       dest[i] = '\0';

   return dest;
}

strncpy(buf, str, n);
if (n > 0)
   buf[n - 1]= '\0';
   
sprintf(dest, "%.*s", n, source)
}

faq(怎样获得在一定范围内的随机数?){
直接的方法是
    rand() % N      /* 不好 */
试图返回从 0 到 N - 1 的数字。但这个方法不好, 因为许多随机数 发生器的低位比特并不随机, 参见问题 13.16。 一个较好的方法是:
    (int)((double)rand() / ((double)RAND_MAX + 1) * N)
如果你不希望使用浮点, 另一个方法是:
    rand() / (RAND_MAX / N + 1)
两种方法都需要知道 RAND_MAX, 而且假设 N 要远远小于 RAND_MAX。  RAND_MAX 在 ANSI 里 #define 在 <stdlib.h>。
顺便提一下, RAND_MAX 是个常数, 它告诉你 C 库函数 rand()  的固定范围。你不可以设 RAND_MAX 为其它的值, 也没有办法要求 rand()  返回其它范围的值。
如果你用的随机数发生器返回的是 0 到 1 的浮点值, 要取得范围在 0 到  N - 1 内的整数, 只要将随机数乘以 N 就可以了。
}

faq(每次执行程序, rand() 都返回相同顺序的数字){
你可以调用 srand() 来初始化模拟随机数发生器的种子, 用的值可以是 真正随机数或至少是个变量, 例如当前时间。这儿有个例子:
    #include <stdlib.h>
    #include <time.h>
    srand((unsigned int)time((time_t *)NULL));
不幸的是, 这个代码并不完美---其中, time() 返回的 time_t 可能是 浮点值, 转换到无符号整数时有可能上溢, 这造成不可移植。 参见问题: 19.36。
还要注意到, 在一个程序执行中多次调用 srand() 并不见得有帮助; 特别是不要为了试图取得 "真随机数" 而在每次调用 rand() 前都调用  srand()。 
}

faq(怎样取整数?){
最简单、直接的方法：
	(int)(x + 0.5)
这个方法对于负数并不正常工作。可以使用一个类似的方法：
	(int)(x < 0 ? x - 0.5 : x + 0.5)
}

faq(怎样测试 IEEE NaN 以及其它特殊值?){
    许多实现高质量 IEEE 浮点的系统会提供简洁的工具去处理这些特殊值。例如, 在 <math.h> 
以非标准扩展功能, 或可能以  <ieee.h> 或  <nan.h> 提供预定义常数, 及象  isnan() 这类的函数。
这些工具的 标准化进程正在进行中。 一个粗陋但通常有效的测试 NaN 的方法：
	#define isnan(x)    ((x) != (x))
虽然一些不支持 IEEE 的编译器可能会把这个判断优化掉。
C99 提供 isnan(), fpclassify() 及其它一些类别的例程。
必要时, 还可以用 sprintf() 格式化需测试的值, 在许多系统上, 它会 产生 NaN 或 Inf 的字符串。你就可以比较了。
}

程序在一台机器上执行完美, 但在另一台上却得到怪异的结果。更奇怪的是, 增加或去除调试的打印语句, 就改变了症状……

许多地方有可能出错。下面是一些通常的检查要点:
未初始化的局部变量, 参见问题 7.1。
整数上溢, 特别是在一些 16 比特的机器上, 一些中间计算结果可能上溢, 象 a * b / c, 参见问题 3.11。
未定义的求值顺序, 参见问题 3.1 到 3.5。
忽略了外部函数的说明, 特别是返回值不是 int 的函数, 或是参数  "缩小" 或可变的函数。参见问题 1.8, 11.4 和 15.1。
复引用空指针, 参见第 5 章。
malloc/free 的不适当使用: 假设 malloc 的内存都被清零、 已释放的内存还可用、再次释放已释放内存、malloc 的内部被破坏, 参见 问题 7.16 和 7.17。
指针类常规问题, 参见问题 16.7。
printf() 格式与参数不符, 特别是用 %d 输出 long int, 参见问题 12.7。
试图分配的内存大小超出一个 unsigned int 类型的范围, 特别是在内存有限的机器上, 参见问题 7.14和 19.27。
数组边界问题, 特别是暂时的小缓冲, 也许用于 sprinf() 来构造一个字符串, 参见问题 7.1 和 12.19。
错误的假设了 typedef 的映射类型, 特别是 size_t。
浮点问题, 参见问题 14.1 和 14.4。
任何你自己认为聪明的在特定机器上的机器代码生成小技巧。


常用工具列表。
工具                       程序名 (参见问题 18.18)
C 交叉引用生成器           cflow, cxref, calls, cscope, xscope, ixfw
C 源代码美化器/美化打印    cb, indent, GNU indent, vgrind
版本控制和管理工具         CVS, RCS, SCCS
C 源代码扰乱器 (遮蔽器)    obfus, shroud, opqcp
make 从属关系生成器        makedepend, cc -M 或 cpp -M
计算源代码度规工具         ccount, Metre, lcount, csize; McCable and Associates 也有一个商业包出售
C 源代码行数计数器          可以用 UNIX 的标准工具 wc 作个大概的计算, 比用 grep -c ";" 要好
C 说明帮助 (cdecl)          cdecl
原型发生器                  ansi2knr
malloc 问题抓捕工具        dbmalloc  JMalloc.c and JMalloc.h  MEMDEBUG 
选择性 的 C 预处理器        unifdef, rmifdef, and scpp
语言翻译工具               参见问题 11.30 和 20.23
C 校对机 (lint)            PC-Lint FlexeLint   Splint 或者 gcc -Wall -pedantic
C 编译器                   gcc


faq(怎样判断机器的字节顺序是高字节在前还是低字节在前?){
有个使用指针的方法：
    int x = 1;
    if(*(char *)&x == 1){
        printf("little-endian\n");
    }else{
        printf("big-endian\n");
    }
        
}

faq(typedef 和 struct 递归问题){
-- 有问题
typedef struct {
		char *item;
		NODEPTR next;
	} *NODEPTR;
-- 方案1
typedef struct node {
		char *item;
		struct node *next;
	} *NODEPTR;
-- 方案2
typedef struct node *NODEPTR;

	struct node {
		char *item;
		NODEPTR next;
	};
-- 方案3
struct node {
		char *item;
		struct node *next;
	};
typedef struct node *NODEPTR; 
    
}

faq(struct 交叉定义){
-- 有问题
typedef struct {
		int afield;
		BPTR bpointer;
	} *APTR;

	typedef struct {
		int bfield;
		APTR apointer;
	} *BPTR;

-- 方案1
struct a {
		int afield;
		struct b *bpointer;
	};

	struct b {
		int bfield;
		struct a *apointer;
	};
-- 方案2
typedef struct a *APTR;
	typedef struct b *BPTR;

	struct a {
		int afield;
		BPTR bpointer;
	};

	struct b {
		int bfield;
		APTR apointer;
	};
}

example:http://c-faq.com/struct/opaque.examp.html







