!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARR_SZIE	ht_macro_E.c	12;"	d	file:
BTMessage	hashtable.c	/^struct BTMessage{$/;"	s	file:
CC	test-sys-queue.h/Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS := $(warning-flags) $(optim-flags)$/;"	m
CFLAGS	queue-example/Makefile	/^CFLAGS := $(warning-flags) $(optim-flags)$/;"	m
CFLAGS	queue/Makefile	/^CFLAGS := $(warning-flags) $(optim-flags)$/;"	m
CHAR_NODE_FMT	circleq.c	14;"	d	file:
CHAR_NODE_FMT	list.c	14;"	d	file:
CHAR_NODE_FMT	queue/circleq.c	14;"	d	file:
CHAR_NODE_FMT	queue/list.c	14;"	d	file:
CHAR_NODE_FMT	queue/simpleq.c	14;"	d	file:
CHAR_NODE_FMT	queue/slist.c	14;"	d	file:
CHAR_NODE_FMT	queue/stailq.c	14;"	d	file:
CHAR_NODE_FMT	queue/tailq.c	14;"	d	file:
CHAR_NODE_FMT	simpleq.c	14;"	d	file:
CHAR_NODE_FMT	slist.c	14;"	d	file:
CHAR_NODE_FMT	stailq.c	14;"	d	file:
CHAR_NODE_FMT	tailq.c	14;"	d	file:
CIRCLEQ_EMPTY	queue-example/queue.h	559;"	d
CIRCLEQ_ENTRY	queue-example/queue.h	479;"	d
CIRCLEQ_FIRST	queue-example/queue.h	560;"	d
CIRCLEQ_FOREACH	queue-example/queue.h	546;"	d
CIRCLEQ_FOREACH_REVERSE	queue-example/queue.h	551;"	d
CIRCLEQ_HEAD	queue-example/queue.h	470;"	d
CIRCLEQ_HEAD_INITIALIZER	queue-example/queue.h	476;"	d
CIRCLEQ_INIT	queue-example/queue.h	488;"	d
CIRCLEQ_INSERT_AFTER	queue-example/queue.h	493;"	d
CIRCLEQ_INSERT_BEFORE	queue-example/queue.h	503;"	d
CIRCLEQ_INSERT_HEAD	queue-example/queue.h	513;"	d
CIRCLEQ_INSERT_TAIL	queue-example/queue.h	523;"	d
CIRCLEQ_LAST	queue-example/queue.h	561;"	d
CIRCLEQ_LOOP_NEXT	queue-example/queue.h	565;"	d
CIRCLEQ_LOOP_PREV	queue-example/queue.h	569;"	d
CIRCLEQ_NEXT	queue-example/queue.h	562;"	d
CIRCLEQ_PREV	queue-example/queue.h	563;"	d
CIRCLEQ_REMOVE	queue-example/queue.h	533;"	d
HS_SERVICE_PRIVATE	hashtable_tor.c	9;"	d	file:
HT_INIT	hashtable.c	/^HT_INIT(name, head)                  name##_HT_INIT(head)$/;"	f
HT_PROTOTYPE	hashtable_tor.c	/^HT_PROTOTYPE(hs_service_ht,      \/* Name of hashtable. *\/$/;"	f
HT_PROTOTYPE	ht_macro_E.c	/^HT_PROTOTYPE(event_io_map, event_map_entry, map_node, hashsocket, eqsocket)$/;"	f
INIT	astrotycoon-ddlist.c	31;"	d	file:
INIT	astrotycoon-slist.c	29;"	d	file:
INIT	astrotycoon-tqueue.c	10;"	d	file:
INIT	test-sys-queue.h/ddlist.c	31;"	d	file:
INIT	test-sys-queue.h/dlist.c	31;"	d	file:
INIT	test-sys-queue.h/slist.c	29;"	d	file:
INIT	test-sys-queue.h/tqueue.c	10;"	d	file:
INT	test_tree.c	/^struct INT{$/;"	s	file:
LIST_EMPTY	queue-example/queue.h	142;"	d
LIST_ENTRY	queue-example/queue.h	92;"	d
LIST_FIRST	queue-example/queue.h	143;"	d
LIST_FOREACH	queue-example/queue.h	134;"	d
LIST_HEAD	queue-example/queue.h	84;"	d
LIST_HEAD_INITIALIZER	queue-example/queue.h	89;"	d
LIST_INIT	queue-example/queue.h	101;"	d
LIST_INSERT_AFTER	queue-example/queue.h	105;"	d
LIST_INSERT_BEFORE	queue-example/queue.h	113;"	d
LIST_INSERT_HEAD	queue-example/queue.h	120;"	d
LIST_NEXT	queue-example/queue.h	144;"	d
LIST_REMOVE	queue-example/queue.h	127;"	d
RBINT	test_tree.c	/^struct RBINT{$/;"	s	file:
RB_AUGMENT	tree.h	349;"	d
RB_BLACK	tree.h	320;"	d
RB_COLOR	tree.h	333;"	d
RB_EMPTY	tree.h	335;"	d
RB_ENTRY	tree.h	322;"	d
RB_FIND	tree.h	684;"	d
RB_FOREACH	tree.h	689;"	d
RB_GENERATE	tree.h	406;"	d
RB_HEAD	tree.h	308;"	d
RB_INF	tree.h	680;"	d
RB_INIT	tree.h	316;"	d
RB_INITIALIZER	tree.h	313;"	d
RB_INSERT	tree.h	682;"	d
RB_LEFT	tree.h	330;"	d
RB_MAX	tree.h	687;"	d
RB_MIN	tree.h	686;"	d
RB_NEGINF	tree.h	679;"	d
RB_NEXT	tree.h	685;"	d
RB_PARENT	tree.h	332;"	d
RB_PROTOTYPE	tree.h	393;"	d
RB_RED	tree.h	321;"	d
RB_REMOVE	tree.h	683;"	d
RB_RIGHT	tree.h	331;"	d
RB_ROOT	tree.h	334;"	d
RB_ROTATE_LEFT	tree.h	352;"	d
RB_ROTATE_RIGHT	tree.h	372;"	d
RB_SET	tree.h	337;"	d
RB_SET_BLACKRED	tree.h	343;"	d
RM	test-sys-queue.h/Makefile	/^RM=rm -rf$/;"	m
SIMPLEQ_EMPTY	queue-example/queue.h	359;"	d
SIMPLEQ_ENTRY	queue-example/queue.h	302;"	d
SIMPLEQ_FIRST	queue-example/queue.h	360;"	d
SIMPLEQ_FOREACH	queue-example/queue.h	351;"	d
SIMPLEQ_HEAD	queue-example/queue.h	293;"	d
SIMPLEQ_HEAD_INITIALIZER	queue-example/queue.h	299;"	d
SIMPLEQ_INIT	queue-example/queue.h	310;"	d
SIMPLEQ_INSERT_AFTER	queue-example/queue.h	327;"	d
SIMPLEQ_INSERT_HEAD	queue-example/queue.h	315;"	d
SIMPLEQ_INSERT_TAIL	queue-example/queue.h	321;"	d
SIMPLEQ_NEXT	queue-example/queue.h	361;"	d
SIMPLEQ_REMOVE	queue-example/queue.h	338;"	d
SIMPLEQ_REMOVE_HEAD	queue-example/queue.h	333;"	d
SLIST_EMPTY	queue-example/queue.h	203;"	d
SLIST_ENTRY	queue-example/queue.h	158;"	d
SLIST_FIRST	queue-example/queue.h	204;"	d
SLIST_FOREACH	queue-example/queue.h	197;"	d
SLIST_HEAD	queue-example/queue.h	150;"	d
SLIST_HEAD_INITIALIZER	queue-example/queue.h	155;"	d
SLIST_INIT	queue-example/queue.h	166;"	d
SLIST_INSERT_AFTER	queue-example/queue.h	170;"	d
SLIST_INSERT_HEAD	queue-example/queue.h	175;"	d
SLIST_NEXT	queue-example/queue.h	205;"	d
SLIST_REMOVE	queue-example/queue.h	184;"	d
SLIST_REMOVE_HEAD	queue-example/queue.h	180;"	d
SPLAY_ASSEMBLE	tree.h	122;"	d
SPLAY_EMPTY	tree.h	95;"	d
SPLAY_ENTRY	tree.h	86;"	d
SPLAY_FIND	tree.h	295;"	d
SPLAY_FOREACH	tree.h	302;"	d
SPLAY_GENERATE	tree.h	173;"	d
SPLAY_HEAD	tree.h	74;"	d
SPLAY_INF	tree.h	291;"	d
SPLAY_INIT	tree.h	82;"	d
SPLAY_INITIALIZER	tree.h	79;"	d
SPLAY_INSERT	tree.h	293;"	d
SPLAY_LEFT	tree.h	92;"	d
SPLAY_LINKLEFT	tree.h	110;"	d
SPLAY_LINKRIGHT	tree.h	116;"	d
SPLAY_MAX	tree.h	299;"	d
SPLAY_MIN	tree.h	297;"	d
SPLAY_NEGINF	tree.h	290;"	d
SPLAY_NEXT	tree.h	296;"	d
SPLAY_PROTOTYPE	tree.h	131;"	d
SPLAY_REMOVE	tree.h	294;"	d
SPLAY_RIGHT	tree.h	93;"	d
SPLAY_ROOT	tree.h	94;"	d
SPLAY_ROTATE_LEFT	tree.h	104;"	d
SPLAY_ROTATE_RIGHT	tree.h	98;"	d
STAILQ_CONCAT	queue-example/queue.h	274;"	d
STAILQ_EMPTY	queue-example/queue.h	285;"	d
STAILQ_ENTRY	queue-example/queue.h	220;"	d
STAILQ_FIRST	queue-example/queue.h	286;"	d
STAILQ_FOREACH	queue-example/queue.h	269;"	d
STAILQ_HEAD	queue-example/queue.h	211;"	d
STAILQ_HEAD_INITIALIZER	queue-example/queue.h	217;"	d
STAILQ_INIT	queue-example/queue.h	228;"	d
STAILQ_INSERT_AFTER	queue-example/queue.h	245;"	d
STAILQ_INSERT_HEAD	queue-example/queue.h	233;"	d
STAILQ_INSERT_TAIL	queue-example/queue.h	239;"	d
STAILQ_NEXT	queue-example/queue.h	287;"	d
STAILQ_REMOVE	queue-example/queue.h	256;"	d
STAILQ_REMOVE_HEAD	queue-example/queue.h	251;"	d
TAILQ_CONCAT	queue-example/queue.h	445;"	d
TAILQ_EMPTY	queue-example/queue.h	457;"	d
TAILQ_ENTRY	queue-example/queue.h	382;"	d
TAILQ_FIRST	queue-example/queue.h	458;"	d
TAILQ_FOREACH	queue-example/queue.h	435;"	d
TAILQ_FOREACH_REVERSE	queue-example/queue.h	440;"	d
TAILQ_HEAD	queue-example/queue.h	372;"	d
TAILQ_HEAD_INITIALIZER	queue-example/queue.h	374;"	d
TAILQ_INIT	queue-example/queue.h	387;"	d
TAILQ_INSERT_AFTER	queue-example/queue.h	409;"	d
TAILQ_INSERT_BEFORE	queue-example/queue.h	419;"	d
TAILQ_INSERT_HEAD	queue-example/queue.h	392;"	d
TAILQ_INSERT_TAIL	queue-example/queue.h	402;"	d
TAILQ_LAST	queue-example/queue.h	461;"	d
TAILQ_NEXT	queue-example/queue.h	459;"	d
TAILQ_PREV	queue-example/queue.h	463;"	d
TAILQ_REMOVE	queue-example/queue.h	426;"	d
TNODE	tree_api.c	/^struct TNODE{$/;"	s	file:
_Data	astrotycoon-circleq.c	/^struct _Data {$/;"	s	file:
_Data	astrotycoon-ddlist.c	/^struct _Data {$/;"	s	file:
_Data	astrotycoon-slist.c	/^struct _Data {$/;"	s	file:
_Data	astrotycoon-sslist.c	/^struct _Data {$/;"	s	file:
_Data	astrotycoon-stqueue.c	/^struct _Data {$/;"	s	file:
_Data	astrotycoon-tailq.c	/^struct _Data {  $/;"	s	file:
_Data	astrotycoon-tqueue.c	/^struct _Data {$/;"	s	file:
_Data	test-sys-queue.h/circleq.c	/^struct _Data {$/;"	s	file:
_Data	test-sys-queue.h/ddlist.c	/^struct _Data {$/;"	s	file:
_Data	test-sys-queue.h/dlist.c	/^struct _Data {$/;"	s	file:
_Data	test-sys-queue.h/slist.c	/^struct _Data {$/;"	s	file:
_Data	test-sys-queue.h/sslist.c	/^struct _Data {$/;"	s	file:
_Data	test-sys-queue.h/stailq.c	/^struct _Data {$/;"	s	file:
_Data	test-sys-queue.h/stqueue.c	/^struct _Data {$/;"	s	file:
_Data	test-sys-queue.h/tailq.c	/^struct _Data {$/;"	s	file:
_Data	test-sys-queue.h/tqueue.c	/^struct _Data {$/;"	s	file:
_SYS_QUEUE_H_	queue-example/queue.h	33;"	d
_SYS_TREE_H_	tree.h	28;"	d
_TAILQ_ENTRY	queue-example/queue.h	377;"	d
_TAILQ_HEAD	queue-example/queue.h	367;"	d
address_tld	hashtable_tor.c	/^static const char *address_tld = "onion";$/;"	v	file:
animal	queue-example/list_example.c	/^} animal;$/;"	t	typeref:struct:animal_	file:
animal	queue-example/single_list_example.c	/^} animal;$/;"	t	typeref:struct:animal_	file:
animal	queue-example/single_tail_queue_example.c	/^} animal;$/;"	t	typeref:struct:animal_	file:
animal	queue-example/tail_queue_example.c	/^} animal;$/;"	t	typeref:struct:animal_	file:
animal	queue/list_example.c	/^} animal;$/;"	t	typeref:struct:animal_	file:
animal	queue/single_list_example.c	/^} animal;$/;"	t	typeref:struct:animal_	file:
animal	queue/single_tail_queue_example.c	/^} animal;$/;"	t	typeref:struct:animal_	file:
animal	queue/tail_queue_example.c	/^}animal;$/;"	t	typeref:struct:animal_	file:
animal_	queue-example/list_example.c	/^typedef struct animal_ {$/;"	s	file:
animal_	queue-example/single_list_example.c	/^typedef struct animal_ {$/;"	s	file:
animal_	queue-example/single_tail_queue_example.c	/^typedef struct animal_ {$/;"	s	file:
animal_	queue-example/tail_queue_example.c	/^typedef struct animal_ {$/;"	s	file:
animal_	queue/list_example.c	/^typedef struct animal_ {$/;"	s	file:
animal_	queue/single_list_example.c	/^typedef struct animal_ {$/;"	s	file:
animal_	queue/single_tail_queue_example.c	/^typedef struct animal_ {$/;"	s	file:
animal_	queue/tail_queue_example.c	/^typedef struct animal_ {$/;"	s	file:
animal_head	queue-example/list_example.c	/^typedef struct animal_head_ animal_head;$/;"	t	typeref:struct:animal_head_	file:
animal_head	queue-example/single_list_example.c	/^typedef struct animal_head_ animal_head;$/;"	t	typeref:struct:animal_head_	file:
animal_head	queue-example/single_tail_queue_example.c	/^typedef struct animal_head_ animal_head;$/;"	t	typeref:struct:animal_head_	file:
animal_head	queue-example/tail_queue_example.c	/^typedef struct animal_head_ animal_head;$/;"	t	typeref:struct:animal_head_	file:
animal_head	queue/list_example.c	/^typedef struct animal_head_ animal_head;$/;"	t	typeref:struct:animal_head_	file:
animal_head	queue/single_list_example.c	/^typedef struct animal_head_ animal_head;$/;"	t	typeref:struct:animal_head_	file:
animal_head	queue/single_tail_queue_example.c	/^typedef struct animal_head_ animal_head;$/;"	t	typeref:struct:animal_head_	file:
animal_head	queue/tail_queue_example.c	/^typedef struct animal_head_ animal_head;$/;"	t	typeref:struct:animal_head_	file:
bEmpty	tree_api.c	/^bool bEmpty = SPLAY_EMPTY(&g_Root);$/;"	v
bin	Makefile	/^bin := $(basename $(sources))$/;"	m
bin	queue-example/Makefile	/^bin := $(basename $(sources))$/;"	m
bin	queue/Makefile	/^bin := $(basename $(sources))$/;"	m
body	hashtable.c	/^我们将body对象保存在 hashtable 中,并以 x和y同时作为主键来快速访问 body 对象, 为了达到这个目的,我们需要完成下面的事情$/;"	v
car_st	queue_lists.c	/^struct car_st{					       $/;"	s	file:
car_st	queue_slists.c	/^struct car_st{					       $/;"	s	file:
car_st	queue_tailq.c	/^struct car_st{					       $/;"	s	file:
cc_size	queue_lists.c	/^  int   cc_size;$/;"	m	struct:car_st	file:
cc_size	queue_slists.c	/^  int   cc_size;$/;"	m	struct:car_st	file:
cc_size	queue_tailq.c	/^  int   cc_size;$/;"	m	struct:car_st	file:
char_node	circleq.c	/^struct char_node {$/;"	s	file:
char_node	list.c	/^struct char_node {$/;"	s	file:
char_node	queue/circleq.c	/^struct char_node {$/;"	s	file:
char_node	queue/list.c	/^struct char_node {$/;"	s	file:
char_node	queue/simpleq.c	/^struct char_node {$/;"	s	file:
char_node	queue/slist.c	/^struct char_node {$/;"	s	file:
char_node	queue/stailq.c	/^struct char_node {$/;"	s	file:
char_node	queue/tailq.c	/^struct char_node {$/;"	s	file:
char_node	simpleq.c	/^struct char_node {$/;"	s	file:
char_node	slist.c	/^struct char_node {$/;"	s	file:
char_node	stailq.c	/^struct char_node {$/;"	s	file:
char_node	tailq.c	/^struct char_node {$/;"	s	file:
close_intro_circuits	hashtable_tor.c	/^close_intro_circuits(hs_service_intropoints_t *intro_points)$/;"	f	file:
close_service_circuits	hashtable_tor.c	/^close_service_circuits(hs_service_t *service)$/;"	f	file:
close_service_intro_circuits	hashtable_tor.c	/^close_service_intro_circuits(hs_service_t *service)$/;"	f	file:
close_service_rp_circuits	hashtable_tor.c	/^close_service_rp_circuits(hs_service_t *service)$/;"	f	file:
cmp	test_tree.c	/^int inline cmp(struct INT *x, struct INT *y)$/;"	f
data	circleq.c	/^	char data;$/;"	m	struct:char_node	file:
data	list.c	/^	char data;$/;"	m	struct:char_node	file:
data	queue/circleq.c	/^    char data;$/;"	m	struct:char_node	file:
data	queue/list.c	/^    char data;$/;"	m	struct:char_node	file:
data	queue/simpleq.c	/^    char data;$/;"	m	struct:char_node	file:
data	queue/slist.c	/^    char data;$/;"	m	struct:char_node	file:
data	queue/stailq.c	/^    char data;$/;"	m	struct:char_node	file:
data	queue/tailq.c	/^    char data;$/;"	m	struct:char_node	file:
data	simpleq.c	/^	char data;$/;"	m	struct:char_node	file:
data	slist.c	/^	char data;$/;"	m	struct:char_node	file:
data	stailq.c	/^	char data;$/;"	m	struct:char_node	file:
data	tailq.c	/^	char data;$/;"	m	struct:char_node	file:
data	test_tree.c	/^	int data;$/;"	m	struct:INT	file:
data	test_tree.c	/^	int data;$/;"	m	struct:RBINT	file:
description	hashtable.c	/^   char* description;$/;"	m	struct:BTMessage	file:
dump_car	queue_lists.c	/^dump_car( struct car_st * car ){$/;"	f
dump_car	queue_slists.c	/^dump_car( struct car_st * car ){$/;"	f
dump_car	queue_tailq.c	/^dump_car( struct car_st * car ){$/;"	f
ent	ht_macro_E.c	/^     } ent;$/;"	m	struct:event_map_entry	typeref:union:event_map_entry::__anon1	file:
entry	list_snippet.c	/^struct entry {$/;"	s	file:
entry	simpleq_snippet.c	/^struct entry {$/;"	s	file:
entry	slist_snippet.c	/^struct entry {$/;"	s	file:
entry	tailq_macro_E.c	/^    }entry;$/;"	m	struct:queue_entry_t	typeref:struct:queue_entry_t::__anon2	file:
entry	tailq_snippet.c	/^struct entry {$/;"	s	file:
eqkey	hashtable.c	/^int eqkey(struct BTMessage *e1, struct BTMessage *e2){$/;"	f
eqsocket	ht_macro_E.c	/^eqsocket(struct event_map_entry *e1, struct event_map_entry *e2){$/;"	f	file:
event	tailq-test.c	/^struct event {$/;"	s	file:
event_io_mapN_PRIMES	hashtable.c	/^static unsigned event_io_mapN_PRIMES =    (unsigned)(sizeof(event_io_map _PRIMES)\/sizeof(event_io_map_PRIMES[0]));$/;"	v	file:
event_io_map_HT_REP_IS_BAD	hashtable.c	/^int  event_io_map_HT_REP_IS_BAD(const struct event_io_map *ht);$/;"	v
event_io_map_PRIMES	hashtable.c	/^static unsigned event_io_map_PRIMES[] = {                                   $/;"	v	file:
event_map_entry	ht_macro_E.c	/^struct event_map_entry {$/;"	s	file:
events	ht_macro_E.c	/^    struct event_list events;$/;"	m	struct:evmap_io	typeref:struct:evmap_io::event_list	file:
evmap_io	ht_macro_E.c	/^         struct evmap_io evmap_io;$/;"	m	union:event_map_entry::__anon1	typeref:struct:event_map_entry::__anon1::evmap_io	file:
evmap_io	ht_macro_E.c	/^struct evmap_io {$/;"	s	file:
fd	ht_macro_E.c	/^     evutil_socket_t fd;$/;"	m	struct:event_map_entry	file:
find	tree_api.c	/^struct TNODE find;$/;"	v	typeref:struct:TNODE
fname_hostname	hashtable_tor.c	/^static const char *fname_hostname = "hostname";$/;"	v	file:
fname_keyfile_prefix	hashtable_tor.c	/^static const char *fname_keyfile_prefix = "hs_ed25519";$/;"	v	file:
generate_establish_intro_cell	hashtable_tor.c	/^generate_establish_intro_cell(const uint8_t *circuit_key_material,$/;"	f
get_establish_intro_payload	hashtable_tor.c	/^get_establish_intro_payload(uint8_t *buf_out, size_t buf_out_len,$/;"	f
get_first_service	hashtable_tor.c	/^get_first_service(void)$/;"	f
get_hs_service_map	hashtable_tor.c	/^get_hs_service_map(void)$/;"	f
get_hs_service_map_size	hashtable_tor.c	/^get_hs_service_map_size(void)$/;"	f
get_hs_service_staging_list_size	hashtable_tor.c	/^get_hs_service_staging_list_size(void)$/;"	f
hashkey	hashtable.c	/^unsigned hashkey(struct BTMessage *e){$/;"	f
hashsocket	ht_macro_E.c	/^static inline unsigned hashsocket(struct event_map_entry *e){$/;"	f	file:
hashtable	hashtable.c	/^在libevent 中用宏定义了一个hashtable,你可以用它方便的定义一个类型安全的hashtable,我们尝试做下面一个hashtable,有下面两个类型.$/;"	v
hashtable	hashtable.c	/^我们将body对象保存在 hashtable 中,并以 x和y同时作为主键来快速访问 body 对象, 为了达到这个目的,我们需要完成下面的事情$/;"	v
head	list_snippet.c	/^LIST_INIT(&head);                       \/* Initialize list. *\/$/;"	v
head	slist_snippet.c	/^SLIST_INIT(&head);                      \/* Initialize simple list. *\/$/;"	v
head	tailq_snippet.c	/^TAILQ_INIT(&head);                      \/* Initialize queue. *\/$/;"	v
hs_service_free	hashtable_tor.c	/^hs_service_free(hs_service_t *service)$/;"	f
hs_service_free_all	hashtable_tor.c	/^hs_service_free_all(void)$/;"	f
hs_service_ht_eq	hashtable_tor.c	/^hs_service_ht_eq(const hs_service_t *first, const hs_service_t *second)$/;"	f	file:
hs_service_ht_hash	hashtable_tor.c	/^hs_service_ht_hash(const hs_service_t *service)$/;"	f	file:
hs_service_init	hashtable_tor.c	/^hs_service_init(void)$/;"	f
hs_service_load_all_keys	hashtable_tor.c	/^hs_service_load_all_keys(void)$/;"	f
hs_service_map	hashtable_tor.c	/^static struct hs_service_ht *hs_service_map;$/;"	v	typeref:struct:hs_service_ht	file:
hs_service_new	hashtable_tor.c	/^hs_service_new(const or_options_t *options)$/;"	f
hs_service_stage_services	hashtable_tor.c	/^hs_service_stage_services(const smartlist_t *service_list)$/;"	f
hs_service_staging_list	hashtable_tor.c	/^static smartlist_t *hs_service_staging_list;$/;"	v	file:
ht_free_service_	hashtable_tor.c	/^ht_free_service_(struct hs_service_t *service, void *data)$/;"	f	file:
i	rbtree_test.c	/^    int i;$/;"	m	struct:node	file:
iItem	tailq-test.c	/^    int  iItem;$/;"	m	struct:event	file:
intcmp	rbtree_test.c	/^intcmp(struct node *e1, struct node *e2)$/;"	f
key	tree_api.c	/^    int key;$/;"	m	struct:TNODE	file:
load_service_keys	hashtable_tor.c	/^load_service_keys(hs_service_t *service)$/;"	f	file:
m	hashtable.c	/^    BTMessage* m = HT_FIND(BTMessageMap,&map, new BTMessage(1,2) );$/;"	v
m2	hashtable.c	/^    BTMessage* m2 = HT_FIND(BTMessageMap,&map, new BTMessage(1,4) );$/;"	v
main	astrotycoon-circleq.c	/^int main(int argc, const char *argv[])$/;"	f
main	astrotycoon-ddlist.c	/^int main(int argc, const char *argv[])$/;"	f
main	astrotycoon-simpleq.c	/^int main(int argc, const char *argv[])$/;"	f
main	astrotycoon-slist.c	/^int main(int argc, const char *argv[])$/;"	f
main	astrotycoon-sslist.c	/^int main(int argc, const char *argv[])$/;"	f
main	astrotycoon-stqueue.c	/^int main(int argc, const char *argv[])$/;"	f
main	astrotycoon-tailq.c	/^int main(int argc, const char *argv[])  $/;"	f
main	astrotycoon-tqueue.c	/^int main(int argc, const char *argv[])$/;"	f
main	circleq.c	/^int main(void)$/;"	f
main	ht_macro_E.c	/^int main(int argc, const char *argv[])$/;"	f
main	list.c	/^int main(void)$/;"	f
main	queue-example/list_example.c	/^int main(void) {$/;"	f
main	queue-example/single_list_example.c	/^int main(void) {$/;"	f
main	queue-example/single_tail_queue_example.c	/^int main(void) {$/;"	f
main	queue-example/tail_queue_example.c	/^int main(void) {$/;"	f
main	queue/circleq.c	/^int main(void){$/;"	f
main	queue/list.c	/^int main(void){$/;"	f
main	queue/list_example.c	/^int main(void){$/;"	f
main	queue/simpleq.c	/^int main(void){$/;"	f
main	queue/single_list_example.c	/^int main(void){$/;"	f
main	queue/single_tail_queue_example.c	/^int main(void){$/;"	f
main	queue/slist.c	/^int main(void){$/;"	f
main	queue/stailq.c	/^int main(void){$/;"	f
main	queue/tail_queue_example.c	/^int main(void){$/;"	f
main	queue/tailq.c	/^int main(void){$/;"	f
main	queue_lists.c	/^main( int argc, char** argv ){$/;"	f
main	queue_slists.c	/^main( int argc, char** argv ){$/;"	f
main	queue_tailq.c	/^main( int argc, char** argv ){$/;"	f
main	rbtree_test.c	/^main(void)$/;"	f
main	shang-tailq.c	/^int main(int argc, char  *argv[])$/;"	f
main	simpleq.c	/^int main(void)$/;"	f
main	slist.c	/^int main(void)$/;"	f
main	stailq.c	/^int main(void)$/;"	f
main	tailq-test.c	/^int main(int argc, char* argv[])$/;"	f
main	tailq.c	/^int main(void)$/;"	f
main	tailq_macro.c	/^int main(int argc, char **argv)$/;"	f
main	tailq_macro_E.c	/^int main(int argc, char **argv)$/;"	f
main	test-sys-queue.h/circleq.c	/^int main(int argc, const char *argv[])$/;"	f
main	test-sys-queue.h/ddlist.c	/^int main(int argc, const char *argv[])$/;"	f
main	test-sys-queue.h/dlist.c	/^int main(int argc, const char *argv[])$/;"	f
main	test-sys-queue.h/simpleq.c	/^int main(int argc, const char *argv[])$/;"	f
main	test-sys-queue.h/slist.c	/^int main(int argc, const char *argv[])$/;"	f
main	test-sys-queue.h/sslist.c	/^int main(int argc, const char *argv[])$/;"	f
main	test-sys-queue.h/stailq.c	/^int main(int argc, const char *argv[])$/;"	f
main	test-sys-queue.h/stqueue.c	/^int main(int argc, const char *argv[])$/;"	f
main	test-sys-queue.h/tailq.c	/^int main(int argc, const char *argv[])$/;"	f
main	test-sys-queue.h/tqueue.c	/^int main(int argc, const char *argv[])$/;"	f
main	test_tree.c	/^int main()$/;"	f
message	hashtable.c	/^   char* message;$/;"	m	struct:BTMessage	file:
model	queue_lists.c	/^  char  model[ 20 ];$/;"	m	struct:car_st	file:
model	queue_slists.c	/^  char  model[ 20 ];$/;"	m	struct:car_st	file:
model	queue_tailq.c	/^  char  model[ 20 ];$/;"	m	struct:car_st	file:
move_descriptor_intro_points	hashtable_tor.c	/^move_descriptor_intro_points(hs_service_descriptor_t *src,$/;"	f	file:
move_ephemeral_services	hashtable_tor.c	/^move_ephemeral_services(hs_service_ht *src, hs_service_ht *dst)$/;"	f	file:
move_intro_points	hashtable_tor.c	/^move_intro_points(hs_service_t *src, hs_service_t *dst)$/;"	f	file:
my_hashsocket	ht_macro_E.c	/^unsigned my_hashsocket(int fd){$/;"	f
n1	list_snippet.c	/^} *n1, *n2, *np;$/;"	v	typeref:struct:entry
n1	simpleq_snippet.c	/^} *n1, *n2, *np;$/;"	v	typeref:struct:entry
n1	slist_snippet.c	/^} *n1, *n2, *np;$/;"	v	typeref:struct:entry
n1	tailq_snippet.c	/^} *n1, *n2, *np;$/;"	v	typeref:struct:entry
n2	list_snippet.c	/^} *n1, *n2, *np;$/;"	v	typeref:struct:entry
n2	simpleq_snippet.c	/^} *n1, *n2, *np;$/;"	v	typeref:struct:entry
n2	slist_snippet.c	/^} *n1, *n2, *np;$/;"	v	typeref:struct:entry
n2	tailq_snippet.c	/^} *n1, *n2, *np;$/;"	v	typeref:struct:entry
name	queue-example/list_example.c	/^    char name[32];$/;"	m	struct:animal_	file:
name	queue-example/single_list_example.c	/^    char name[32];$/;"	m	struct:animal_	file:
name	queue-example/single_tail_queue_example.c	/^    char name[32];$/;"	m	struct:animal_	file:
name	queue-example/tail_queue_example.c	/^    char name[32];$/;"	m	struct:animal_	file:
name	queue/list_example.c	/^    char name[32];$/;"	m	struct:animal_	file:
name	queue/single_list_example.c	/^    char name[32];$/;"	m	struct:animal_	file:
name	queue/single_tail_queue_example.c	/^    char name[32];$/;"	m	struct:animal_	file:
name	queue/tail_queue_example.c	/^    char name[32];$/;"	m	struct:animal_	file:
node	rbtree_test.c	/^struct node {$/;"	s	file:
node_cmp	tree_api.c	/^int node_cmp(struct TNODE* v1,struct TNODE* v2){$/;"	f
np	list_snippet.c	/^} *n1, *n2, *np;$/;"	v	typeref:struct:entry
np	simpleq_snippet.c	/^} *n1, *n2, *np;$/;"	v	typeref:struct:entry
np	slist_snippet.c	/^} *n1, *n2, *np;$/;"	v	typeref:struct:entry
np	tailq_snippet.c	/^} *n1, *n2, *np;$/;"	v	typeref:struct:entry
nread	ht_macro_E.c	/^    ev_uint16_t nread;$/;"	m	struct:evmap_io	file:
nwrite	ht_macro_E.c	/^    ev_uint16_t nwrite;$/;"	m	struct:evmap_io	file:
obj	tree_api.c	/^struct TNODE* obj = SPLAY_FIND(CTX_TREE, &g_Root, &find);$/;"	v	typeref:struct:TNODE
obj	tree_api.c	/^struct TNODE* obj = SPLAY_INSERT(CTX_TREE, &g_Root, myObj);$/;"	v	typeref:struct:TNODE
obj	tree_api.c	/^struct TNODE* obj = SPLAY_REMOVE(CTX_TREE, &g_Root, &find);$/;"	v	typeref:struct:TNODE
obj	tree_api.c	/^struct TNODE* obj = SPLAY_REMOVE(CTX_TREE, &g_Root, myObj);$/;"	v	typeref:struct:TNODE
optim-flags	Makefile	/^optim-flags := -O0 -g3$/;"	m
optim-flags	queue-example/Makefile	/^optim-flags := -O0 -g3$/;"	m
optim-flags	queue/Makefile	/^optim-flags := -O0 -g3$/;"	m
pint	astrotycoon-ddlist.c	/^	int *pint;$/;"	m	struct:_Data	file:
pint	astrotycoon-slist.c	/^	int *pint;$/;"	m	struct:_Data	file:
pint	astrotycoon-stqueue.c	/^	int *pint;$/;"	m	struct:_Data	file:
pint	astrotycoon-tqueue.c	/^	int	*pint;$/;"	m	struct:_Data	file:
pint	test-sys-queue.h/dlist.c	/^	int *pint;$/;"	m	struct:_Data	file:
pint	test-sys-queue.h/slist.c	/^	int *pint;$/;"	m	struct:_Data	file:
pint	test-sys-queue.h/stqueue.c	/^	int *pint;$/;"	m	struct:_Data	file:
pint	test-sys-queue.h/tqueue.c	/^	int	*pint;$/;"	m	struct:_Data	file:
print_tree	rbtree_test.c	/^print_tree(struct node *n)$/;"	f
queue_entry_t	tailq_macro.c	/^struct queue_entry_t$/;"	s	file:
queue_entry_t	tailq_macro_E.c	/^struct queue_entry_t$/;"	s	file:
queue_head_t	tailq_macro_E.c	/^struct queue_head_t$/;"	s	file:
rb_cmp	test_tree.c	/^int inline rb_cmp(struct RBINT *x, struct RBINT *y)$/;"	f
register_all_services	hashtable_tor.c	/^register_all_services(void)$/;"	f	file:
register_service	hashtable_tor.c	/^register_service(hs_service_ht *map, hs_service_t *service)$/;"	f
remove_fun	ht_macro_E.c	/^int remove_fun(struct event_map_entry*p1, void *p2){$/;"	f
remove_service	hashtable_tor.c	/^remove_service(hs_service_ht *map, hs_service_t *service)$/;"	f
service_clear_config	hashtable_tor.c	/^service_clear_config(hs_service_config_t *config)$/;"	f	file:
service_escaped_dir	hashtable_tor.c	/^service_escaped_dir(const hs_service_t *s)$/;"	f	file:
service_free_all	hashtable_tor.c	/^service_free_all(void)$/;"	f	file:
set_service_default_config	hashtable_tor.c	/^set_service_default_config(hs_service_config_t *c,$/;"	f	file:
set_trn_cell_extensions	hashtable_tor.c	/^set_trn_cell_extensions(trn_cell_establish_intro_t *cell)$/;"	f	file:
sources	Makefile	/^sources := $(wildcard *.c)$/;"	m
sources	queue-example/Makefile	/^sources := $(wildcard *.c)$/;"	m
sources	queue/Makefile	/^sources := $(wildcard *.c)$/;"	m
tailq_entry	shang-tailq.c	/^struct tailq_entry {$/;"	s	file:
test_rb_tree	test_tree.c	/^int test_rb_tree()$/;"	f
test_splay_tree	test_tree.c	/^int test_splay_tree()$/;"	f
tqe_next	tailq_macro_E.c	/^        struct queue_entry_t *tqe_next;$/;"	m	struct:queue_entry_t::__anon2	typeref:struct:queue_entry_t::__anon2::queue_entry_t	file:
tqe_prev	tailq_macro_E.c	/^        struct queue_entry_t **tqe_prev;$/;"	m	struct:queue_entry_t::__anon2	typeref:struct:queue_entry_t::__anon2::queue_entry_t	file:
tqh_first	tailq_macro_E.c	/^    struct queue_entry_t *tqh_first;$/;"	m	struct:queue_head_t	typeref:struct:queue_head_t::queue_entry_t	file:
tqh_last	tailq_macro_E.c	/^    struct queue_entry_t **tqh_last;$/;"	m	struct:queue_head_t	typeref:struct:queue_head_t::queue_entry_t	file:
value	astrotycoon-circleq.c	/^	int 					value;$/;"	m	struct:_Data	file:
value	astrotycoon-sslist.c	/^	int 				value;$/;"	m	struct:_Data	file:
value	astrotycoon-tailq.c	/^	int                 value;  $/;"	m	struct:_Data	file:
value	shang-tailq.c	/^	int value;$/;"	m	struct:tailq_entry	file:
value	tailq_macro.c	/^    int value;$/;"	m	struct:queue_entry_t	file:
value	tailq_macro_E.c	/^    int value;$/;"	m	struct:queue_entry_t	file:
value	test-sys-queue.h/circleq.c	/^	int 					value;$/;"	m	struct:_Data	file:
value	test-sys-queue.h/ddlist.c	/^	int 				value;$/;"	m	struct:_Data	file:
value	test-sys-queue.h/sslist.c	/^	int 				value;$/;"	m	struct:_Data	file:
value	test-sys-queue.h/stailq.c	/^	int 				value;$/;"	m	struct:_Data	file:
value	test-sys-queue.h/tailq.c	/^	int 				value;$/;"	m	struct:_Data	file:
warning-flags	Makefile	/^warning-flags := \\$/;"	m
warning-flags	queue-example/Makefile	/^warning-flags := \\$/;"	m
warning-flags	queue/Makefile	/^warning-flags := \\$/;"	m
write_address_to_file	hashtable_tor.c	/^write_address_to_file(const hs_service_t *service, const char *fname_)$/;"	f	file:
x	hashtable.c	/^   int x;$/;"	m	struct:BTMessage	file:
y	hashtable.c	/^   int y;$/;"	m	struct:BTMessage	file:
