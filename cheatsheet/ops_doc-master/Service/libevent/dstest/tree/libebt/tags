!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CFLAGS	Makefile	/^CFLAGS = -Wall -g -O0$/;"	m
CIRCLEQ_EMPTY	sys/queue.h	401;"	d
CIRCLEQ_END	sys/queue.h	398;"	d
CIRCLEQ_ENTRY	sys/queue.h	387;"	d
CIRCLEQ_FIRST	sys/queue.h	396;"	d
CIRCLEQ_FOREACH	sys/queue.h	404;"	d
CIRCLEQ_FOREACH_REVERSE	sys/queue.h	409;"	d
CIRCLEQ_HEAD	sys/queue.h	378;"	d
CIRCLEQ_HEAD_INITIALIZER	sys/queue.h	384;"	d
CIRCLEQ_INIT	sys/queue.h	417;"	d
CIRCLEQ_INSERT_AFTER	sys/queue.h	422;"	d
CIRCLEQ_INSERT_BEFORE	sys/queue.h	432;"	d
CIRCLEQ_INSERT_HEAD	sys/queue.h	442;"	d
CIRCLEQ_INSERT_TAIL	sys/queue.h	452;"	d
CIRCLEQ_LAST	sys/queue.h	397;"	d
CIRCLEQ_NEXT	sys/queue.h	399;"	d
CIRCLEQ_PREV	sys/queue.h	400;"	d
CIRCLEQ_REMOVE	sys/queue.h	462;"	d
CIRCLEQ_REPLACE	sys/queue.h	475;"	d
CLOCK_PROF	sys/_time.h	156;"	d
CLOCK_REALTIME	sys/_time.h	154;"	d
CLOCK_VIRTUAL	sys/_time.h	155;"	d
CQ_MINMEMORY_CAPACITY	ebt.c	182;"	d	file:
DECLTYPE	include/hashtable.h	37;"	d
DECLTYPE	include/hashtable.h	40;"	d
DECLTYPE	include/hashtable.h	43;"	d
DECLTYPE_ASSIGN	include/hashtable.h	47;"	d
DECLTYPE_ASSIGN	include/hashtable.h	53;"	d
DST_AUST	sys/_time.h	72;"	d
DST_CAN	sys/_time.h	76;"	d
DST_EET	sys/_time.h	75;"	d
DST_MET	sys/_time.h	74;"	d
DST_NONE	sys/_time.h	70;"	d
DST_USA	sys/_time.h	71;"	d
DST_WET	sys/_time.h	73;"	d
EBT_API	ebt.h	4;"	d
ELMT_FROM_HH	include/hashtable.h	92;"	d
EP_SIZE	ebt.c	727;"	d	file:
ERR_MAXLINE	ebt.c	25;"	d	file:
E_BACK_LOG	ebt.c	1485;"	d	file:
E_BUFFER_SIZE	ebt.c	1492;"	d	file:
E_CHILD	ebt.c	/^    E_CHILD = 0x10,             \/* 进程 *\/$/;"	e	enum:e_kide	file:
E_CHILD	ebt.h	/^    E_CHILD = 0x10,             \/* 进程 *\/$/;"	e	enum:e_kind
E_CLOSE	ebt.c	/^    E_CLOSE = 4,$/;"	e	enum:r_type	file:
E_CLOSE	ebt.h	/^    E_CLOSE = 4,$/;"	e	enum:r_type
E_CLOSED	ebt.c	/^    E_CLOSED = 0,$/;"	e	enum:s_type	file:
E_CLOSED	ebt.h	/^    E_CLOSED = 0,$/;"	e	enum:s_type
E_CLOSING	ebt.c	/^    E_CLOSING = 1,$/;"	e	enum:s_type	file:
E_CLOSING	ebt.h	/^    E_CLOSING = 1,$/;"	e	enum:s_type
E_CONNECT	ebt.c	/^    E_CONNECT = 1,$/;"	e	enum:r_type	file:
E_CONNECT	ebt.h	/^    E_CONNECT = 1,$/;"	e	enum:r_type
E_CONNECTED	ebt.c	/^    E_CONNECTED = 3,$/;"	e	enum:s_type	file:
E_CONNECTED	ebt.h	/^    E_CONNECTED = 3,$/;"	e	enum:s_type
E_CONNECTING	ebt.c	/^    E_CONNECTING = 2,$/;"	e	enum:s_type	file:
E_CONNECTING	ebt.h	/^    E_CONNECTING = 2,$/;"	e	enum:s_type
E_ERROR	ebt.c	/^    E_ERROR = 6$/;"	e	enum:r_type	file:
E_ERROR	ebt.h	/^    E_ERROR = 6$/;"	e	enum:r_type
E_FLAG	ebt.c	/^    E_FLAG = 0x20               \/* 用户自定义 *\/$/;"	e	enum:e_kide	file:
E_FLAG	ebt.h	/^    E_FLAG = 0x20               \/* 用户自定义 *\/$/;"	e	enum:e_kind
E_FREE	ebt.c	/^    E_FREE = 0x02               \/* 事件已经从eb_t实例被移除, 将其标记为E_FREE, 以便释放其存储空间 *\/$/;"	e	enum:e_opt	file:
E_FREE	ebt.h	/^    E_FREE = 0x02               \/* 事件已经从eb_t实例被移除, 将其标记为E_FREE, 释放其存储空间 *\/$/;"	e	enum:e_opt
E_MASTER_REACTOR	ebt.c	1490;"	d	file:
E_MAX_ETYPE	ebt.c	1484;"	d	file:
E_NUM_FACTORIES	ebt.c	1489;"	d	file:
E_NUM_REACTORS	ebt.c	1488;"	d	file:
E_ONCE	ebt.c	/^    E_ONCE = 0x01,              \/* 一次性事件, 当事件dipsatch到队列后,  激活后立该从eb_t移除, 并标记为ONCE *\/$/;"	e	enum:e_opt	file:
E_ONCE	ebt.h	/^    E_ONCE = 0x01,              \/* 一次性事件, 当事件dipsatch到队列后,  激活后立该从eb_t移除, 并标记为ONCE *\/$/;"	e	enum:e_opt
E_QUEUE	ebt.c	/^    E_QUEUE = 0x80              \/\/标记是否已经在dispatchq队列$/;"	e	enum:__anon2	file:
E_READ	ebt.c	/^    E_READ = 0x01,              \/* IO读 *\/$/;"	e	enum:e_kide	file:
E_READ	ebt.h	/^    E_READ = 0x01,              \/* IO读 *\/$/;"	e	enum:e_kind
E_RECEIVE	ebt.c	/^    E_RECEIVE = 2,$/;"	e	enum:r_type	file:
E_RECEIVE	ebt.h	/^    E_RECEIVE = 2,$/;"	e	enum:r_type
E_RECEIVED	ebt.c	/^    E_RECEIVED = 5,$/;"	e	enum:s_type	file:
E_RECEIVED	ebt.h	/^    E_RECEIVED = 5,$/;"	e	enum:s_type
E_RECEIVING	ebt.c	/^    E_RECEIVING = 4,$/;"	e	enum:s_type	file:
E_RECEIVING	ebt.h	/^    E_RECEIVING = 4,$/;"	e	enum:s_type
E_SHUTDOWN	ebt.c	/^    E_SHUTDOWN = 5,$/;"	e	enum:r_type	file:
E_SHUTDOWN	ebt.h	/^    E_SHUTDOWN = 5,$/;"	e	enum:r_type
E_SHUTDOWNED	ebt.c	/^    E_SHUTDOWNED = 8$/;"	e	enum:s_type	file:
E_SHUTDOWNED	ebt.h	/^    E_SHUTDOWNED = 8$/;"	e	enum:s_type
E_SIGNAL	ebt.c	/^    E_SIGNAL = 0x08,            \/* 信号 *\/$/;"	e	enum:e_kide	file:
E_SIGNAL	ebt.h	/^    E_SIGNAL = 0x08,            \/* 信号 *\/$/;"	e	enum:e_kind
E_START	ebt.c	/^    E_START = 0,$/;"	e	enum:r_type	file:
E_START	ebt.h	/^    E_START = 0,$/;"	e	enum:r_type
E_STARTED	ebt.c	/^    E_STARTED = 6,$/;"	e	enum:s_type	file:
E_STARTED	ebt.h	/^    E_STARTED = 6,$/;"	e	enum:s_type
E_STARTING	ebt.c	/^    E_STARTING = 7,$/;"	e	enum:s_type	file:
E_STARTING	ebt.h	/^    E_STARTING = 7,$/;"	e	enum:s_type
E_TCP_PACKAGE_LEN	ebt.c	1491;"	d	file:
E_TCP_PACKAGE_LEN	ebt.h	63;"	d
E_TIMEOUT	ebt.c	/^    E_TIMEOUT = 3,$/;"	e	enum:r_type	file:
E_TIMEOUT	ebt.h	/^    E_TIMEOUT = 3,$/;"	e	enum:r_type
E_TIMEOUT_SEC	ebt.c	1486;"	d	file:
E_TIMEOUT_USEC	ebt.c	1487;"	d	file:
E_TIMER	ebt.c	/^    E_TIMER = 0x04,             \/* 定时器 *\/$/;"	e	enum:e_kide	file:
E_TIMER	ebt.h	/^    E_TIMER = 0x04,             \/* 定时器 *\/$/;"	e	enum:e_kind
E_WRITE	ebt.c	/^    E_WRITE = 0x02,             \/* IO写 *\/$/;"	e	enum:e_kide	file:
E_WRITE	ebt.h	/^    E_WRITE = 0x02,             \/* IO写 *\/$/;"	e	enum:e_kind
EventData	ebt.c	/^struct EventData {$/;"	s	file:
EventData	ebt.h	/^struct EventData {$/;"	s
FD_CLOSEONEXEC	ebt.c	730;"	d	file:
FD_CLOSEONEXEC	ebt.c	735;"	d	file:
HASH_ADD_INT	include/hashtable.h	250;"	d
HASH_ADD_KEYPTR	include/hashtable.h	165;"	d
HASH_ADD_PTR	include/hashtable.h	254;"	d
HASH_ADD_STR	include/hashtable.h	246;"	d
HASH_ADD_TO_BKT	include/hashtable.h	595;"	d
HASH_BER	include/hashtable.h	341;"	d
HASH_BKT_CAPACITY_THRESH	include/hashtable.h	89;"	d
HASH_BLOOM_ADD	include/hashtable.h	127;"	d
HASH_BLOOM_ADD	include/hashtable.h	136;"	d
HASH_BLOOM_BITLEN	include/hashtable.h	108;"	d
HASH_BLOOM_BITSET	include/hashtable.h	124;"	d
HASH_BLOOM_BITTEST	include/hashtable.h	125;"	d
HASH_BLOOM_BYTELEN	include/hashtable.h	109;"	d
HASH_BLOOM_FREE	include/hashtable.h	119;"	d
HASH_BLOOM_FREE	include/hashtable.h	135;"	d
HASH_BLOOM_MAKE	include/hashtable.h	110;"	d
HASH_BLOOM_MAKE	include/hashtable.h	134;"	d
HASH_BLOOM_SIGNATURE	include/hashtable.h	872;"	d
HASH_BLOOM_TEST	include/hashtable.h	130;"	d
HASH_BLOOM_TEST	include/hashtable.h	137;"	d
HASH_CLEAR	include/hashtable.h	825;"	d
HASH_CNT	include/hashtable.h	848;"	d
HASH_COUNT	include/hashtable.h	847;"	d
HASH_DEL	include/hashtable.h	256;"	d
HASH_DELETE	include/hashtable.h	207;"	d
HASH_DEL_IN_BKT	include/hashtable.h	609;"	d
HASH_EMIT_KEY	include/hashtable.h	323;"	d
HASH_EMIT_KEY	include/hashtable.h	330;"	d
HASH_EXPAND_BUCKETS	include/hashtable.h	650;"	d
HASH_FCN	include/hashtable.h	335;"	d
HASH_FCN	include/hashtable.h	337;"	d
HASH_FIND	include/hashtable.h	94;"	d
HASH_FIND_INT	include/hashtable.h	248;"	d
HASH_FIND_IN_BKT	include/hashtable.h	581;"	d
HASH_FIND_PTR	include/hashtable.h	252;"	d
HASH_FIND_STR	include/hashtable.h	244;"	d
HASH_FNV	include/hashtable.h	363;"	d
HASH_FSCK	include/hashtable.h	264;"	d
HASH_FSCK	include/hashtable.h	316;"	d
HASH_INITIAL_NUM_BUCKETS	include/hashtable.h	87;"	d
HASH_INITIAL_NUM_BUCKETS_LOG2	include/hashtable.h	88;"	d
HASH_ITER	include/hashtable.h	837;"	d
HASH_ITER	include/hashtable.h	841;"	d
HASH_JEN	include/hashtable.h	402;"	d
HASH_JEN_MIX	include/hashtable.h	389;"	d
HASH_KEYCMP	include/hashtable.h	578;"	d
HASH_MAKE_TABLE	include/hashtable.h	140;"	d
HASH_MUR	include/hashtable.h	540;"	d
HASH_OAT	include/hashtable.h	373;"	d
HASH_OOPS	include/hashtable.h	263;"	d
HASH_SAX	include/hashtable.h	353;"	d
HASH_SELECT	include/hashtable.h	787;"	d
HASH_SFH	include/hashtable.h	454;"	d
HASH_SIGNATURE	include/hashtable.h	871;"	d
HASH_SORT	include/hashtable.h	702;"	d
HASH_SRT	include/hashtable.h	703;"	d
HASH_TO_BKT	include/hashtable.h	190;"	d
ITIMER_PROF	sys/_time.h	136;"	d
ITIMER_REAL	sys/_time.h	134;"	d
ITIMER_VIRTUAL	sys/_time.h	135;"	d
LIST_EMPTY	sys/queue.h	159;"	d
LIST_END	sys/queue.h	158;"	d
LIST_ENTRY	sys/queue.h	148;"	d
LIST_FIRST	sys/queue.h	157;"	d
LIST_FOREACH	sys/queue.h	162;"	d
LIST_HEAD	sys/queue.h	140;"	d
LIST_HEAD_INITIALIZER	sys/queue.h	145;"	d
LIST_INIT	sys/queue.h	170;"	d
LIST_INSERT_AFTER	sys/queue.h	174;"	d
LIST_INSERT_BEFORE	sys/queue.h	182;"	d
LIST_INSERT_HEAD	sys/queue.h	189;"	d
LIST_NEXT	sys/queue.h	160;"	d
LIST_REMOVE	sys/queue.h	196;"	d
LIST_REPLACE	sys/queue.h	203;"	d
MUR_FMIX	include/hashtable.h	531;"	d
MUR_GETBLOCK	include/hashtable.h	509;"	d
MUR_GETBLOCK	include/hashtable.h	525;"	d
MUR_ONE_THREE	include/hashtable.h	519;"	d
MUR_ONE_THREE	include/hashtable.h	523;"	d
MUR_PLUS0_ALIGNED	include/hashtable.h	511;"	d
MUR_PLUS1_ALIGNED	include/hashtable.h	512;"	d
MUR_PLUS2_ALIGNED	include/hashtable.h	513;"	d
MUR_PLUS3_ALIGNED	include/hashtable.h	514;"	d
MUR_ROTL32	include/hashtable.h	530;"	d
MUR_THREE_ONE	include/hashtable.h	517;"	d
MUR_THREE_ONE	include/hashtable.h	521;"	d
MUR_TWO_TWO	include/hashtable.h	518;"	d
MUR_TWO_TWO	include/hashtable.h	522;"	d
NO_DECLTYPE	include/hashtable.h	39;"	d
QF_LOCK	ebt.c	/^    QF_LOCK = 1u << 1,$/;"	e	enum:q_flag	file:
QF_NOTIFY	ebt.c	/^    QF_NOTIFY = 1u << 2,$/;"	e	enum:q_flag	file:
QF_SHM	ebt.c	/^    QF_SHM = 1u << 3,$/;"	e	enum:q_flag	file:
RB_AUGMENT	sys/tree.h	332;"	d
RB_BLACK	sys/tree.h	303;"	d
RB_COLOR	sys/tree.h	316;"	d
RB_EMPTY	sys/tree.h	318;"	d
RB_ENTRY	sys/tree.h	305;"	d
RB_FIND	sys/tree.h	667;"	d
RB_FOREACH	sys/tree.h	672;"	d
RB_GENERATE	sys/tree.h	389;"	d
RB_HEAD	sys/tree.h	291;"	d
RB_INF	sys/tree.h	663;"	d
RB_INIT	sys/tree.h	299;"	d
RB_INITIALIZER	sys/tree.h	296;"	d
RB_INSERT	sys/tree.h	665;"	d
RB_LEFT	sys/tree.h	313;"	d
RB_MAX	sys/tree.h	670;"	d
RB_MIN	sys/tree.h	669;"	d
RB_NEGINF	sys/tree.h	662;"	d
RB_NEXT	sys/tree.h	668;"	d
RB_PARENT	sys/tree.h	315;"	d
RB_PROTOTYPE	sys/tree.h	376;"	d
RB_RED	sys/tree.h	304;"	d
RB_REMOVE	sys/tree.h	666;"	d
RB_RIGHT	sys/tree.h	314;"	d
RB_ROOT	sys/tree.h	317;"	d
RB_ROTATE_LEFT	sys/tree.h	335;"	d
RB_ROTATE_RIGHT	sys/tree.h	355;"	d
RB_SET	sys/tree.h	320;"	d
RB_SET_BLACKRED	sys/tree.h	326;"	d
SIMPLEQ_EMPTY	sys/queue.h	233;"	d
SIMPLEQ_END	sys/queue.h	232;"	d
SIMPLEQ_ENTRY	sys/queue.h	223;"	d
SIMPLEQ_FIRST	sys/queue.h	231;"	d
SIMPLEQ_FOREACH	sys/queue.h	236;"	d
SIMPLEQ_HEAD	sys/queue.h	214;"	d
SIMPLEQ_HEAD_INITIALIZER	sys/queue.h	220;"	d
SIMPLEQ_INIT	sys/queue.h	244;"	d
SIMPLEQ_INSERT_AFTER	sys/queue.h	261;"	d
SIMPLEQ_INSERT_HEAD	sys/queue.h	249;"	d
SIMPLEQ_INSERT_TAIL	sys/queue.h	255;"	d
SIMPLEQ_NEXT	sys/queue.h	234;"	d
SIMPLEQ_REMOVE_HEAD	sys/queue.h	267;"	d
SLIST_EMPTY	sys/queue.h	108;"	d
SLIST_END	sys/queue.h	107;"	d
SLIST_ENTRY	sys/queue.h	97;"	d
SLIST_FIRST	sys/queue.h	106;"	d
SLIST_FOREACH	sys/queue.h	111;"	d
SLIST_HEAD	sys/queue.h	88;"	d
SLIST_HEAD_INITIALIZER	sys/queue.h	93;"	d
SLIST_INIT	sys/queue.h	119;"	d
SLIST_INSERT_AFTER	sys/queue.h	123;"	d
SLIST_INSERT_HEAD	sys/queue.h	128;"	d
SLIST_NEXT	sys/queue.h	109;"	d
SLIST_REMOVE_HEAD	sys/queue.h	133;"	d
SPLAY_ASSEMBLE	sys/tree.h	105;"	d
SPLAY_EMPTY	sys/tree.h	78;"	d
SPLAY_ENTRY	sys/tree.h	69;"	d
SPLAY_FIND	sys/tree.h	278;"	d
SPLAY_FOREACH	sys/tree.h	285;"	d
SPLAY_GENERATE	sys/tree.h	156;"	d
SPLAY_HEAD	sys/tree.h	57;"	d
SPLAY_INF	sys/tree.h	274;"	d
SPLAY_INIT	sys/tree.h	65;"	d
SPLAY_INITIALIZER	sys/tree.h	62;"	d
SPLAY_INSERT	sys/tree.h	276;"	d
SPLAY_LEFT	sys/tree.h	75;"	d
SPLAY_LINKLEFT	sys/tree.h	93;"	d
SPLAY_LINKRIGHT	sys/tree.h	99;"	d
SPLAY_MAX	sys/tree.h	282;"	d
SPLAY_MIN	sys/tree.h	280;"	d
SPLAY_NEGINF	sys/tree.h	273;"	d
SPLAY_NEXT	sys/tree.h	279;"	d
SPLAY_PROTOTYPE	sys/tree.h	114;"	d
SPLAY_REMOVE	sys/tree.h	277;"	d
SPLAY_RIGHT	sys/tree.h	76;"	d
SPLAY_ROOT	sys/tree.h	77;"	d
SPLAY_ROTATE_LEFT	sys/tree.h	87;"	d
SPLAY_ROTATE_RIGHT	sys/tree.h	81;"	d
TAILQ_EMPTY	sys/queue.h	301;"	d
TAILQ_END	sys/queue.h	294;"	d
TAILQ_ENTRY	sys/queue.h	284;"	d
TAILQ_FIRST	sys/queue.h	293;"	d
TAILQ_FOREACH	sys/queue.h	304;"	d
TAILQ_FOREACH_REVERSE	sys/queue.h	309;"	d
TAILQ_HEAD	sys/queue.h	275;"	d
TAILQ_HEAD_INITIALIZER	sys/queue.h	281;"	d
TAILQ_INIT	sys/queue.h	317;"	d
TAILQ_INSERT_AFTER	sys/queue.h	339;"	d
TAILQ_INSERT_BEFORE	sys/queue.h	349;"	d
TAILQ_INSERT_HEAD	sys/queue.h	322;"	d
TAILQ_INSERT_TAIL	sys/queue.h	332;"	d
TAILQ_LAST	sys/queue.h	296;"	d
TAILQ_NEXT	sys/queue.h	295;"	d
TAILQ_PREV	sys/queue.h	299;"	d
TAILQ_REMOVE	sys/queue.h	356;"	d
TAILQ_REPLACE	sys/queue.h	365;"	d
TIMER_ABSTIME	sys/_time.h	159;"	d
TIMER_RELTIME	sys/_time.h	158;"	d
TIMESPEC_TO_TIMEVAL	sys/_time.h	61;"	d
TIMEVAL_TO_TIMESPEC	sys/_time.h	57;"	d
T_IDEL	ebt.c	/^    T_IDEL,$/;"	e	enum:thread_stats	file:
T_RUNNIG	ebt.c	/^    T_RUNNIG,$/;"	e	enum:thread_stats	file:
T_WAITING	ebt.c	/^    T_WAITING,$/;"	e	enum:thread_stats	file:
UTHASH_ADD	include/hashtable.h	163;"	d
UTHASH_H	include/hashtable.h	25;"	d
UTHASH_VERSION	include/hashtable.h	67;"	d
UT_hash_bucket	include/hashtable.h	/^typedef struct UT_hash_bucket {$/;"	s
UT_hash_bucket	include/hashtable.h	/^} UT_hash_bucket;$/;"	t	typeref:struct:UT_hash_bucket
UT_hash_handle	include/hashtable.h	/^typedef struct UT_hash_handle {$/;"	s
UT_hash_handle	include/hashtable.h	/^} UT_hash_handle;$/;"	t	typeref:struct:UT_hash_handle
UT_hash_table	include/hashtable.h	/^typedef struct UT_hash_table {$/;"	s
UT_hash_table	include/hashtable.h	/^} UT_hash_table;$/;"	t	typeref:struct:UT_hash_table
Vec	ebt.c	122;"	d	file:
WP	include/hashtable.h	515;"	d
_QUOTE	ebt.c	77;"	d	file:
_SYS_QUEUE_H_	sys/queue.h	36;"	d
_SYS_TIME_H_	sys/_time.h	36;"	d
_SYS_TREE_H_	sys/tree.h	28;"	d
__EBT_H__	ebt.h	2;"	d
__QUOTE	ebt.c	76;"	d	file:
_resize	ebt.c	/^static int _resize (struct ebt_epoll *epo, int max) {$/;"	f	file:
_u32_t	ebt.c	/^typedef volatile uint32_t _u32_t;$/;"	t	file:
a	test/cqueue_test.c	/^    int a;$/;"	m	struct:item_bz	file:
a	test/cqueue_test2.c	/^    int a;$/;"	m	struct:item_bz	file:
arg	ebt.c	/^    void *arg;                  \/* 事件参数 *\/$/;"	m	struct:ev	file:
atom_add	ebt.c	401;"	d	file:
atom_sub	ebt.c	402;"	d	file:
attach	ebt.c	/^    int (*attach) (struct eb_t *, struct ev *);$/;"	m	struct:eb_o	file:
attr	ebt.c	/^    pthread_mutexattr_t attr;$/;"	m	struct:cqueue	file:
backlog	ebt.c	/^    uint16_t backlog;$/;"	m	struct:settings	file:
base	ebt.c	/^    struct eb_t *base;$/;"	m	struct:reactor	typeref:struct:reactor::eb_t	file:
bloom_bv	include/hashtable.h	/^   uint8_t *bloom_bv;$/;"	m	struct:UT_hash_table
bloom_nbits	include/hashtable.h	/^   char bloom_nbits;$/;"	m	struct:UT_hash_table
bloom_sig	include/hashtable.h	/^   uint32_t bloom_sig; \/* used only to test bloom exists in external analysis *\/$/;"	m	struct:UT_hash_table
broken	ebt.c	/^    int broken;                 \/* 中断调用 *\/$/;"	m	struct:eb_t	file:
buckets	include/hashtable.h	/^   UT_hash_bucket *buckets;$/;"	m	struct:UT_hash_table
buf	ebt.c	/^     Vec (struct buf_Trunk) buf;$/;"	m	struct:child_reactor	file:
buf	ebt.c	/^    char buf[E_TCP_PACKAGE_LEN];    \/\/缓存从fd读取的数据$/;"	m	struct:EventData	file:
buf	ebt.h	/^    char buf[E_TCP_PACKAGE_LEN];$/;"	m	struct:EventData
buf	test/cqueue_test.c	/^    char buf[128];$/;"	m	struct:item_bz	file:
buf	test/cqueue_test2.c	/^    char buf[128];$/;"	m	struct:item_bz	file:
buf	test/ev_timer_test.c	/^    char buf[256];$/;"	m	struct:ev_param	file:
buf_Trunk	ebt.c	/^struct buf_Trunk {$/;"	s	file:
capacity	ebt.c	/^    int capacity;               \/* the queue capacity *\/$/;"	m	struct:cqueue	file:
cb	ebt.c	/^    e_cb_t *cb;                 \/* 事件回调函数 *\/$/;"	m	struct:ev	file:
child	ebt.c	/^    pid_t child;$/;"	m	struct:ev_child	file:
child_reactor	ebt.c	/^struct child_reactor {$/;"	s	file:
clockinfo	sys/_time.h	/^struct clockinfo {$/;"	s
compare	ebt.c	/^static int compare (struct ev_timer *a, struct ev_timer *b) {$/;"	f	file:
cond	ebt.c	/^    pthread_cond_t cond;$/;"	m	struct:thread_pool	file:
construct	ebt.c	/^    int (*construct) (struct eb_t *);$/;"	m	struct:eb_o	file:
count	include/hashtable.h	/^   unsigned count;$/;"	m	struct:UT_hash_bucket
cq	ebt.c	/^    struct cqueue *cq;$/;"	m	struct:thread_entity	typeref:struct:thread_entity::cqueue	file:
cq	ebt.c	/^    struct cqueue *cq;$/;"	m	struct:thread_pool	typeref:struct:thread_pool::cqueue	file:
cq_item	ebt.c	/^struct cq_item {$/;"	s	file:
cqueue	ebt.c	/^struct cqueue {$/;"	s	file:
cqueue_empty	ebt.c	183;"	d	file:
cqueue_free	ebt.c	/^void cqueue_free (struct cqueue *cq) {$/;"	f
cqueue_full	ebt.c	184;"	d	file:
cqueue_new	ebt.c	/^struct cqueue *cqueue_new (int capacity, int max_elemsize, enum q_flag flags) {$/;"	f
cqueue_notify	ebt.c	/^int cqueue_notify (struct cqueue *cq) {$/;"	f
cqueue_pop	ebt.c	/^int cqueue_pop (struct cqueue *cq, void *item, int item_size) {$/;"	f
cqueue_push	ebt.c	/^int cqueue_push (struct cqueue *cq, void *item, int item_size) {$/;"	f
cqueue_shift	ebt.c	/^int cqueue_shift (struct cqueue *cq, void *item, int item_size) {$/;"	f
cqueue_unshift	ebt.c	/^int cqueue_unshift (struct cqueue *cq, void *item, int item_size) {$/;"	f
cqueue_wait	ebt.c	/^int cqueue_wait (struct cqueue *cq) {$/;"	f
create_fifo	ebt.c	/^int create_fifo (const char *file) {$/;"	f
create_fifo	test/ev_test.c	/^int create_fifo(const char *file)$/;"	f
daemonize	ebt.c	/^    uint8_t daemonize;$/;"	m	struct:settings	file:
data	ebt.c	/^    char *data;$/;"	m	struct:buf_Trunk	file:
data	ebt.c	/^    char data[0];$/;"	m	struct:cq_item	file:
data	ebt.c	/^    void *data;$/;"	m	struct:thread_param	file:
data	ebt.c	/^    } data;$/;"	m	struct:thread_entity	typeref:union:thread_entity::__anon1	file:
destruct	ebt.c	/^    int (*destruct) (struct eb_t *);$/;"	m	struct:eb_o	file:
detach	ebt.c	/^    int (*detach) (struct eb_t *, struct ev *);$/;"	m	struct:eb_o	file:
dispatch_queue	ebt.c	/^static void dispatch_queue (struct eb_t *ebt) {$/;"	f	file:
e_cb_t	ebt.c	/^typedef void e_cb_t (short events, void *arg);$/;"	t	file:
e_cb_t	ebt.h	/^typedef void e_cb_t (short, void *);$/;"	t
e_handle_t	ebt.c	/^typedef int (*e_handle_t) (struct EventData *);$/;"	t	file:
e_handle_t	ebt.h	/^typedef int (*e_handle_t) (struct EventData *);$/;"	t
e_kide	ebt.c	/^enum e_kide {$/;"	g	file:
e_kind	ebt.h	/^enum e_kind {$/;"	g
e_opt	ebt.c	/^enum e_opt {$/;"	g	file:
e_opt	ebt.h	/^enum e_opt {$/;"	g
eb_o	ebt.c	/^struct eb_o {$/;"	s	file:
eb_t	ebt.c	/^struct eb_t {$/;"	s	file:
ebo	ebt.c	/^    const struct eb_o *ebo;     \/* 操作eb_t实例的对象 *\/$/;"	m	struct:eb_t	typeref:struct:eb_t::eb_o	file:
ebo_epoll	ebt.c	/^const struct eb_o ebo_epoll = {$/;"	v	typeref:struct:eb_o
ebt	ebt.c	/^    struct eb_t *ebt;           \/* 指向eb_t结构体的实例 *\/$/;"	m	struct:ev	typeref:struct:ev::eb_t	file:
ebt	ebt.c	/^    struct eb_t ebt;$/;"	m	struct:ebt_epoll	typeref:struct:ebt_epoll::eb_t	file:
ebt_break	ebt.c	/^void ebt_break (struct eb_t *ebt) {$/;"	f
ebt_epoll	ebt.c	/^struct ebt_epoll {$/;"	s	file:
ebt_free	ebt.c	/^void ebt_free (struct eb_t *ebt) {$/;"	f
ebt_loop	ebt.c	/^int ebt_loop (struct eb_t *ebt) {$/;"	f
ebt_new	ebt.c	/^struct eb_t *ebt_new (enum e_kide kides) {$/;"	f
ebt_srv	ebt.c	/^struct ebt_srv {$/;"	s	file:
ebt_srv_accept	ebt.c	/^static void ebt_srv_accept (short sfd, struct ebt_srv *srv) {$/;"	f	file:
ebt_srv_close	ebt.c	/^static void ebt_srv_close (struct ebt_srv *srv, struct EventData *edata) {$/;"	f	file:
ebt_srv_create	ebt.c	/^int ebt_srv_create (struct ebt_srv *srv) {$/;"	f
ebt_srv_event_close	ebt.c	/^static void ebt_srv_event_close (short num, struct ebt_srv *srv) {$/;"	f	file:
ebt_srv_event_nofitify	ebt.c	/^static void ebt_srv_event_nofitify (short num, struct ebt_srv *srv) {$/;"	f	file:
ebt_srv_factories_init	ebt.c	/^static int ebt_srv_factories_init (struct ebt_srv *srv) {$/;"	f	file:
ebt_srv_factory_event_process	ebt.c	/^static void ebt_srv_factory_event_process (short num, struct ebt_srv *srv) {$/;"	f	file:
ebt_srv_factory_routine	ebt.c	/^static void *ebt_srv_factory_routine (void *arg) {$/;"	f	file:
ebt_srv_factory_start	ebt.c	/^static int ebt_srv_factory_start (struct ebt_srv *srv) {$/;"	f	file:
ebt_srv_free	ebt.c	/^void ebt_srv_free (struct ebt_srv *srv) {$/;"	f
ebt_srv_get_factory	ebt.c	1579;"	d	file:
ebt_srv_get_param	ebt.c	1577;"	d	file:
ebt_srv_get_reactor	ebt.c	1578;"	d	file:
ebt_srv_get_thread	ebt.c	1576;"	d	file:
ebt_srv_listen	ebt.c	/^int ebt_srv_listen (struct ebt_srv *srv, short port) {$/;"	f
ebt_srv_on	ebt.c	/^int ebt_srv_on (struct ebt_srv *srv, enum r_type type, e_handle_t cb) {$/;"	f
ebt_srv_poll_event_process	ebt.c	/^static void ebt_srv_poll_event_process (short num, struct reactor *reactor) {$/;"	f	file:
ebt_srv_poll_routine	ebt.c	/^static void *ebt_srv_poll_routine (void *arg) {$/;"	f	file:
ebt_srv_poll_start	ebt.c	/^static int ebt_srv_poll_start (struct ebt_srv *srv) {$/;"	f	file:
ebt_srv_reactors_init	ebt.c	/^static int ebt_srv_reactors_init (struct ebt_srv *srv) {$/;"	f	file:
ebt_srv_settings_init	ebt.c	/^static void ebt_srv_settings_init (struct settings *settings) {$/;"	f	file:
ebt_srv_start	ebt.c	/^int ebt_srv_start (struct ebt_srv *srv) {$/;"	f
ebtsz	ebt.c	/^    size_t ebtsz;               \/* 从eb_t派生的结构体的大小 *\/$/;"	m	struct:eb_o	file:
epevents	ebt.c	/^    struct epoll_event *epevents;$/;"	m	struct:ebt_epoll	typeref:struct:ebt_epoll::epoll_event	file:
epfd	ebt.c	/^    int epfd;$/;"	m	struct:ebt_epoll	file:
epoll_attach	ebt.c	/^static int epoll_attach (struct eb_t *ebt, struct ev *e) {$/;"	f	file:
epoll_detach	ebt.c	/^static int epoll_detach (struct eb_t *ebt, struct ev *e) {$/;"	f	file:
epoll_free	ebt.c	/^static int epoll_free (struct eb_t *ebt) {$/;"	f	file:
epoll_init	ebt.c	/^static int epoll_init (struct eb_t *ebt) {$/;"	f	file:
epoll_loop	ebt.c	/^static int epoll_loop (struct eb_t *ebt, const struct timeval *tv) {$/;"	f	file:
epsz	ebt.c	/^    int epsz;$/;"	m	struct:ebt_epoll	file:
err_debug	ebt.c	97;"	d	file:
err_debug	ebt.c	99;"	d	file:
err_doit	ebt.c	/^static void err_doit (int errnoflag, const char *fmt, va_list ap) {$/;"	f	file:
err_exit	ebt.c	101;"	d	file:
err_msg	ebt.c	79;"	d	file:
err_msg_	ebt.c	/^static void err_msg_ (const char *fmt, ...) {$/;"	f	file:
err_print	ebt.c	92;"	d	file:
err_sys_	ebt.c	/^static void err_sys_ (const char *fmt, ...) {$/;"	f	file:
ev	ebt.c	/^struct ev {$/;"	s	file:
ev_attach	ebt.c	/^int ev_attach (struct ev *e, struct eb_t *ebt) {$/;"	f
ev_child	ebt.c	/^struct ev *ev_child (pid_t pid, e_cb_t * cb, void *arg) {$/;"	f
ev_child	ebt.c	/^struct ev_child {$/;"	s	file:
ev_detach	ebt.c	/^int ev_detach (struct ev *e, struct eb_t *ebt) {$/;"	f
ev_flag	ebt.c	/^struct ev *ev_flag (int flag, e_cb_t * cb, void *arg) {$/;"	f
ev_flag	ebt.c	/^struct ev_flag {$/;"	s	file:
ev_free	ebt.c	/^void ev_free (struct ev *e) {$/;"	f
ev_init	ebt.c	/^static void ev_init (struct ev *e, enum e_kide kide, e_cb_t * cb, void *arg) {$/;"	f	file:
ev_io	ebt.c	/^struct ev_io {$/;"	s	file:
ev_opt	ebt.c	/^void ev_opt (struct ev *e, enum e_opt opt) {$/;"	f
ev_param	test/ev_timer_test.c	/^struct ev_param $/;"	s	file:
ev_read	ebt.c	/^struct ev *ev_read (int fd, e_cb_t * cb, void *arg) {$/;"	f
ev_signal	ebt.c	/^struct ev *ev_signal (int sig, e_cb_t * cb, void *arg) {$/;"	f
ev_signal	ebt.c	/^struct ev_signal {$/;"	s	file:
ev_timer	ebt.c	/^struct ev *ev_timer (const struct timeval *tv, e_cb_t * cb, void *arg) {$/;"	f
ev_timer	ebt.c	/^struct ev_timer {$/;"	s	file:
ev_write	ebt.c	/^struct ev *ev_write (int fd, e_cb_t * cb, void *arg) {$/;"	f
event	ebt.c	/^    struct ev event;$/;"	m	struct:ev_child	typeref:struct:ev_child::ev	file:
event	ebt.c	/^    struct ev event;$/;"	m	struct:ev_flag	typeref:struct:ev_flag::ev	file:
event	ebt.c	/^    struct ev event;$/;"	m	struct:ev_io	typeref:struct:ev_io::ev	file:
event	ebt.c	/^    struct ev event;$/;"	m	struct:ev_signal	typeref:struct:ev_signal::ev	file:
event	ebt.c	/^    struct ev event;$/;"	m	struct:ev_timer	typeref:struct:ev_timer::ev	file:
eventq_in	ebt.c	/^static int eventq_in (struct ev *e) {$/;"	f	file:
expand_mult	include/hashtable.h	/^   unsigned expand_mult;$/;"	m	struct:UT_hash_bucket
factory	ebt.c	/^    struct factory *factory;$/;"	m	struct:reactor	typeref:struct:reactor::factory	file:
factory	ebt.c	/^struct factory {$/;"	s	file:
factory_id	ebt.c	/^    int factory_id;$/;"	m	struct:factory	file:
factory_pool	ebt.c	/^    struct thread_pool factory_pool;    \/\/任务调度线程池$/;"	m	struct:ebt_srv	typeref:struct:ebt_srv::thread_pool	file:
fd	ebt.c	/^    int fd;                     \/\/文件描述符$/;"	m	struct:EventData	file:
fd	ebt.c	/^    int fd;$/;"	m	struct:buf_Trunk	file:
fd	ebt.c	/^    int fd;$/;"	m	struct:ev_io	file:
fd	ebt.h	/^    int fd;$/;"	m	struct:EventData
fifo_read	ebt.c	/^void fifo_read (short fd, void *arg) {$/;"	f
fifo_read	test/ev_test.c	/^void fifo_read(short fd, void *arg)$/;"	f
flag	ebt.c	/^    int flag;$/;"	m	struct:ev_flag	file:
flag_cb	ebt.c	/^void flag_cb (short flag, void *arg) {$/;"	f
flag_cb	test/ev_flag_test.c	/^void flag_cb(short flag, void *arg)$/;"	f
flags	ebt.c	/^    int flags;                  \/* queue flags supported *\/$/;"	m	struct:cqueue	file:
free	ebt.c	/^    int (*free) (struct eb_t *);$/;"	m	struct:eb_o	file:
from_reactor_id	ebt.c	/^    uint16_t from_reactor_id;   \/\/所属反应堆$/;"	m	struct:EventData	file:
from_reactor_id	ebt.h	/^    uint16_t from_reactor_id;$/;"	m	struct:EventData
get16bits	include/hashtable.h	444;"	d
get16bits	include/hashtable.h	447;"	d
get16bits	include/hashtable.h	451;"	d
handles	ebt.c	/^    e_handle_t handles[E_MAX_ETYPE];    \/\/注册到服务对象的回调 $/;"	m	struct:ebt_srv	file:
hashv	include/hashtable.h	/^   unsigned hashv;                   \/* result of hash-fcn(key)        *\/$/;"	m	struct:UT_hash_handle
head	ebt.c	/^    int head;                   \/* queue head *\/$/;"	m	struct:cqueue	file:
head_tag	ebt.c	/^    char head_tag;              \/* tag whether elem already in head *\/$/;"	m	struct:cqueue	file:
hh_head	include/hashtable.h	/^   struct UT_hash_handle *hh_head;$/;"	m	struct:UT_hash_bucket	typeref:struct:UT_hash_bucket::UT_hash_handle
hh_next	include/hashtable.h	/^   struct UT_hash_handle *hh_next;   \/* next hh in bucket order        *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle
hh_prev	include/hashtable.h	/^   struct UT_hash_handle *hh_prev;   \/* previous hh in bucket order    *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle
hho	include/hashtable.h	/^   ptrdiff_t hho; \/* hash handle offset (byte pos of hash handle in element *\/$/;"	m	struct:UT_hash_table
hz	sys/_time.h	/^	int	hz;		\/* clock frequency *\/$/;"	m	struct:clockinfo
id	ebt.c	/^    int id;$/;"	m	struct:thread_entity	file:
id	ebt.c	/^    int id;$/;"	m	struct:thread_param	file:
ideal_chain_maxlen	include/hashtable.h	/^   unsigned ideal_chain_maxlen;$/;"	m	struct:UT_hash_table
ineff_expands	include/hashtable.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table
init	ebt.c	/^    int (*init) (struct eb_t *);$/;"	m	struct:eb_o	file:
it_interval	sys/_time.h	/^	struct	timeval it_interval;	\/* timer interval *\/$/;"	m	struct:itimerval	typeref:struct:itimerval::timeval
it_value	sys/_time.h	/^	struct	timeval it_value;	\/* current value *\/$/;"	m	struct:itimerval	typeref:struct:itimerval::timeval
item_bz	test/cqueue_test.c	/^struct item_bz$/;"	s	file:
item_bz	test/cqueue_test2.c	/^struct item_bz$/;"	s	file:
itimerval	sys/_time.h	/^struct	itimerval {$/;"	s
key	include/hashtable.h	/^   void *key;                        \/* ptr to enclosing struct's key  *\/$/;"	m	struct:UT_hash_handle
keylen	include/hashtable.h	/^   unsigned keylen;                  \/* enclosing struct's key len     *\/$/;"	m	struct:UT_hash_handle
kide	ebt.c	/^    enum e_kide kide;           \/* 事件类型 *\/$/;"	m	struct:ev	typeref:enum:ev::e_kide	file:
kides	ebt.c	/^    enum e_kide kides;          \/* 所允许的支持事件类型 *\/$/;"	m	struct:eb_t	typeref:enum:eb_t::e_kide	file:
kides	ebt.c	/^    enum e_kide kides;$/;"	m	struct:eb_o	typeref:enum:eb_o::e_kide	file:
len	ebt.c	/^    socklen_t len;$/;"	m	struct:sa	file:
len	ebt.c	/^    uint16_t len;               \/\/实际从fd读取到的长度$/;"	m	struct:EventData	file:
len	ebt.c	/^    uint16_t len;$/;"	m	struct:buf_Trunk	file:
len	ebt.h	/^    uint16_t len;$/;"	m	struct:EventData
length	ebt.c	/^    int length;$/;"	m	struct:cq_item	file:
lock	ebt.c	/^    pthread_mutex_t lock;$/;"	m	struct:cqueue	file:
log2_num_buckets	include/hashtable.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table
loop	ebt.c	/^    int (*loop) (struct eb_t *, const struct timeval *);$/;"	m	struct:eb_o	file:
main	ebt.c	/^int main (int argc, char *argv[]) {$/;"	f
main	test/cqueue_test.c	/^int main(void)$/;"	f
main	test/cqueue_test2.c	/^int main(void)$/;"	f
main	test/ev_flag_test.c	/^int main(void)$/;"	f
main	test/ev_test.c	/^int main(void)$/;"	f
main	test/ev_timer_test.c	/^int main(void)$/;"	f
master_reactor	ebt.c	/^struct master_reactor {$/;"	s	file:
max_conn	ebt.c	/^    int max_conn;$/;"	m	struct:settings	file:
max_elemsize	ebt.c	/^    int max_elemsize;           \/* max element size *\/$/;"	m	struct:cqueue	file:
max_request	ebt.c	/^    int max_request;$/;"	m	struct:factory	file:
max_request	ebt.c	/^    int max_request;$/;"	m	struct:settings	file:
maxtimers	ebt.c	/^    unsigned int maxtimers;     \/* 最大定时器数 *\/$/;"	m	struct:eb_t	file:
mem	ebt.c	/^    void *mem;                  \/* memory block *\/$/;"	m	struct:cqueue	file:
mreactor	ebt.c	/^    struct master_reactor mreactor; \/\/主反应堆$/;"	m	struct:ebt_srv	typeref:struct:ebt_srv::master_reactor	file:
mutex	ebt.c	/^    pthread_mutex_t mutex;$/;"	m	struct:thread_pool	file:
nRead	ebt.c	/^static int nRead (int fd, char *buf, int len) {$/;"	f	file:
nWrite	ebt.c	/^static int nWrite (int fd, char *buf, int len) {$/;"	f	file:
name	ebt.c	/^    const char *name;$/;"	m	struct:eb_o	file:
next	include/hashtable.h	/^   void *next;                       \/* next element in app order      *\/$/;"	m	struct:UT_hash_handle
next	test/cqueue_test.c	/^    struct item_bz *next;$/;"	m	struct:item_bz	typeref:struct:item_bz::item_bz	file:
next	test/cqueue_test2.c	/^    struct item_bz *next;$/;"	m	struct:item_bz	typeref:struct:item_bz::item_bz	file:
nfds	ebt.c	/^    int nfds;$/;"	m	struct:ebt_epoll	file:
noexpand	include/hashtable.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table
nonideal_items	include/hashtable.h	/^   unsigned nonideal_items;$/;"	m	struct:UT_hash_table
notify_recv_fd	ebt.c	/^    int notify_recv_fd;$/;"	m	struct:thread_entity	file:
notify_send_fd	ebt.c	/^    int notify_send_fd;$/;"	m	struct:thread_entity	file:
num	ebt.c	/^    int num;                    \/* current total elements *\/$/;"	m	struct:cqueue	file:
num	ebt.c	/^    unsigned int num;           \/* 注册到eb_t实例的事件总数 *\/$/;"	m	struct:eb_t	file:
num_buckets	include/hashtable.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table
num_factories	ebt.c	/^    uint8_t num_factories;$/;"	m	struct:settings	file:
num_items	include/hashtable.h	/^   unsigned num_items;$/;"	m	struct:UT_hash_table
num_reactors	ebt.c	/^    uint8_t num_reactors;$/;"	m	struct:settings	file:
num_tasks	ebt.c	/^    _u32_t num_tasks;$/;"	m	struct:thread_pool	file:
num_threads	ebt.c	/^    int num_threads;$/;"	m	struct:thread_pool	file:
numtimers	ebt.c	/^    unsigned int numtimers;     \/* 当前定时器的总数 *\/$/;"	m	struct:eb_t	file:
on_close	ebt.c	/^int on_close (struct EventData *data) {$/;"	f
on_connect	ebt.c	/^int on_connect (struct EventData *data) {$/;"	f
on_receive	ebt.c	/^int on_receive (struct EventData *data) {$/;"	f
on_shutdown	ebt.c	/^int on_shutdown (struct EventData *data) {$/;"	f
opt	ebt.c	/^    enum e_opt opt;             \/* 事件的标记 *\/$/;"	m	struct:ev	typeref:enum:ev::e_opt	file:
params	ebt.c	/^    struct thread_param *params;$/;"	m	struct:thread_pool	typeref:struct:thread_pool::thread_param	file:
pipe	ebt.c	/^    int pipe[2];                \/\/通信管道$/;"	m	struct:ebt_srv	file:
pipes	ebt.c	/^    int pipes[2];$/;"	m	struct:cqueue	file:
pool	ebt.c	/^    struct thread_pool *pool;$/;"	m	struct:thread_entity	typeref:struct:thread_entity::thread_pool	file:
prev	include/hashtable.h	/^   void *prev;                       \/* prev element in app order      *\/$/;"	m	struct:UT_hash_handle
printCqueue	test/cqueue_test.c	/^void printCqueue(struct cqueue *cq)$/;"	f
printCqueue	test/cqueue_test2.c	/^void printCqueue(struct cqueue *cq)$/;"	f
printEbt	ebt.c	/^void printEbt (struct eb_t *ebt) {$/;"	f
printEbtsrv	ebt.c	/^void printEbtsrv (struct ebt_srv *srv) {$/;"	f
profhz	sys/_time.h	/^	int	profhz;		\/* profiling clock frequency *\/$/;"	m	struct:clockinfo
ptr	ebt.c	/^        void *ptr;$/;"	m	union:thread_entity::__anon1	file:
ptr	ebt.c	/^    void *ptr;$/;"	m	struct:factory	file:
ptr	ebt.c	/^    void *ptr;$/;"	m	struct:reactor	file:
q_flag	ebt.c	/^enum q_flag {$/;"	g	file:
r_type	ebt.c	/^enum r_type {$/;"	g	file:
r_type	ebt.h	/^enum r_type {$/;"	g
reactor	ebt.c	/^    struct reactor reactor;$/;"	m	struct:child_reactor	typeref:struct:child_reactor::reactor	file:
reactor	ebt.c	/^    struct reactor reactor;$/;"	m	struct:master_reactor	typeref:struct:master_reactor::reactor	file:
reactor	ebt.c	/^struct reactor {$/;"	s	file:
reactor_id	ebt.c	/^    int reactor_id;$/;"	m	struct:reactor	file:
reactor_pool	ebt.c	/^    struct thread_pool reactor_pool;    \/\/子反应堆线程池$/;"	m	struct:ebt_srv	typeref:struct:ebt_srv::thread_pool	file:
readev	ebt.c	/^    struct ev_io **readev;$/;"	m	struct:ebt_epoll	typeref:struct:ebt_epoll::ev_io	file:
remain	ebt.c	/^    struct timeval tv, remain;$/;"	m	struct:ev_timer	typeref:struct:ev_timer::	file:
s_type	ebt.c	/^enum s_type {$/;"	g	file:
s_type	ebt.h	/^enum s_type {$/;"	g
sa	ebt.c	/^        struct sockaddr sa;$/;"	m	union:sa::__anon3	typeref:struct:sa::__anon3::sockaddr	file:
sa	ebt.c	/^    struct sa sa;               \/\/服务器句柄$/;"	m	struct:ebt_srv	typeref:struct:ebt_srv::sa	file:
sa	ebt.c	/^struct sa {$/;"	s	file:
set_nonblock	ebt.c	/^static void set_nonblock (int fd, int nonblock) {$/;"	f	file:
settings	ebt.c	/^    struct settings settings;   \/\/应用服务配置$/;"	m	struct:ebt_srv	typeref:struct:ebt_srv::settings	file:
settings	ebt.c	/^struct settings {$/;"	s	file:
sfd	ebt.c	/^    int sfd;                    \/\/服务器套接字$/;"	m	struct:ebt_srv	file:
shutdown	ebt.c	/^    int shutdown;$/;"	m	struct:thread_pool	file:
signal	ebt.c	/^    int signal;$/;"	m	struct:ev_signal	file:
signature	include/hashtable.h	/^   uint32_t signature; \/* used only to find hash tables in external analysis *\/$/;"	m	struct:UT_hash_table
sin	ebt.c	/^        struct sockaddr_in sin;$/;"	m	union:sa::__anon3	typeref:struct:sa::__anon3::sockaddr_in	file:
sin6	ebt.c	/^    struct sockaddr_in6 sin6;$/;"	m	struct:sa	typeref:struct:sa::sockaddr_in6	file:
sock_cli_bufsize	ebt.c	/^    int sock_cli_bufsize;       \/\/client的socket缓存设置$/;"	m	struct:settings	file:
sock_srv_bufsize	ebt.c	/^    int sock_srv_bufsize;       \/\/server的socket缓存设置$/;"	m	struct:settings	file:
stathz	sys/_time.h	/^	int	stathz;		\/* statistics clock frequency *\/$/;"	m	struct:clockinfo
stats	ebt.c	/^    enum thread_stats stats;$/;"	m	struct:thread_entity	typeref:enum:thread_entity::thread_stats	file:
status	ebt.c	/^    int status;                 \/\/服务器状态$/;"	m	struct:ebt_srv	file:
status	ebt.c	/^    int status;$/;"	m	struct:factory	file:
status	ebt.c	/^    int status;$/;"	m	struct:reactor	file:
tail	ebt.c	/^    int tail;                   \/* queue tail *\/$/;"	m	struct:cqueue	file:
tail	include/hashtable.h	/^   struct UT_hash_handle *tail; \/* tail hh in app order, for fast append    *\/$/;"	m	struct:UT_hash_table	typeref:struct:UT_hash_table::UT_hash_handle
tail_tag	ebt.c	/^    char tail_tag;              \/* tag whether elem already in tail *\/$/;"	m	struct:cqueue	file:
task	ebt.c	/^    int (*task) (struct EventData *);$/;"	m	struct:factory	file:
tbl	include/hashtable.h	/^   struct UT_hash_table *tbl;$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_table
tcb	test/ev_timer_test.c	/^void tcb(short num, void *arg)$/;"	f
thread_cleanup	ebt.c	/^static void thread_cleanup (struct thread_entity *me) {$/;"	f	file:
thread_entity	ebt.c	/^struct thread_entity {$/;"	s	file:
thread_id	ebt.c	/^    pthread_t thread_id;$/;"	m	struct:master_reactor	file:
thread_id	ebt.c	/^    pthread_t thread_id;$/;"	m	struct:thread_entity	file:
thread_param	ebt.c	/^struct thread_param {$/;"	s	file:
thread_pool	ebt.c	/^struct thread_pool {$/;"	s	file:
thread_pool_dispatchq	ebt.c	/^int thread_pool_dispatchq (struct thread_pool *pool, void *task, int task_len) {$/;"	f
thread_pool_free	ebt.c	/^int thread_pool_free (struct thread_pool *pool) {$/;"	f
thread_pool_init	ebt.c	/^int thread_pool_init (struct thread_pool *pool, int num_threads) {$/;"	f
thread_pool_run	ebt.c	/^void thread_pool_run (struct thread_pool *pool, void *(*func) (void *)) {$/;"	f
thread_route	ebt.c	/^static void *thread_route (void *arg) {$/;"	f	file:
thread_setup	ebt.c	/^static void thread_setup (struct thread_entity *me) {$/;"	f	file:
thread_stats	ebt.c	/^enum thread_stats {$/;"	g	file:
threads	ebt.c	/^    struct thread_entity *threads;$/;"	m	struct:thread_pool	typeref:struct:thread_pool::thread_entity	file:
tick	sys/_time.h	/^	int	tick;		\/* micro-seconds per hz tick *\/$/;"	m	struct:clockinfo
tickadj	sys/_time.h	/^	int	tickadj;	\/* clock skew rate for adjtime() *\/$/;"	m	struct:clockinfo
timeout_sec	ebt.c	/^    int timeout_sec;$/;"	m	struct:settings	file:
timeout_usec	ebt.c	/^    int timeout_usec;$/;"	m	struct:settings	file:
timer_attach	ebt.c	/^static int timer_attach (struct eb_t *ebt, struct ev_timer *evt) {$/;"	f	file:
timer_detach	ebt.c	/^static int timer_detach (struct eb_t *ebt, struct ev_timer *evt) {$/;"	f	file:
timer_insert	ebt.c	/^static int timer_insert (struct eb_t *ebt, struct ev_timer *evt) {$/;"	f	file:
timer_remove	ebt.c	/^static int timer_remove (struct eb_t *ebt, struct ev_timer *evt) {$/;"	f	file:
timer_reset	ebt.c	/^static int timer_reset (struct ev_timer *evt) {$/;"	f	file:
timeradd	sys/_time.h	85;"	d
timerclear	sys/_time.h	79;"	d
timercmp	sys/_time.h	81;"	d
timerdebt	ebt.c	/^    struct timeval timerdebt;   \/* 用于定时器相减 *\/$/;"	m	struct:eb_t	typeref:struct:eb_t::timeval	file:
timerisset	sys/_time.h	80;"	d
timersub	sys/_time.h	94;"	d
timespec	sys/_time.h	/^struct timespec {$/;"	s
timespecadd	sys/_time.h	111;"	d
timespecclear	sys/_time.h	105;"	d
timespeccmp	sys/_time.h	107;"	d
timespecisset	sys/_time.h	106;"	d
timespecsub	sys/_time.h	120;"	d
timeval	sys/_time.h	/^struct timeval {$/;"	s
timezone	sys/_time.h	/^struct timezone {$/;"	s
tv	ebt.c	/^    struct timeval tv, remain;$/;"	m	struct:ev_timer	typeref:struct:ev_timer::timeval	file:
tv	test/ev_timer_test.c	/^    struct timeval tv;$/;"	m	struct:ev_param	typeref:struct:ev_param::timeval	file:
tv_nsec	sys/_time.h	/^	long	tv_nsec;	\/* and nanoseconds *\/$/;"	m	struct:timespec
tv_sec	sys/_time.h	/^	long	tv_sec;		\/* seconds *\/$/;"	m	struct:timeval
tv_sec	sys/_time.h	/^	time_t	tv_sec;		\/* seconds *\/$/;"	m	struct:timespec
tv_usec	sys/_time.h	/^	long	tv_usec;	\/* and microseconds *\/$/;"	m	struct:timeval
type	ebt.c	/^    int type;                   \/\/事件类型(srv)$/;"	m	struct:EventData	file:
type	ebt.h	/^    int type;$/;"	m	struct:EventData
tz_dsttime	sys/_time.h	/^	int	tz_dsttime;	\/* type of dst correction *\/$/;"	m	struct:timezone
tz_minuteswest	sys/_time.h	/^	int	tz_minuteswest;	\/* minutes west of Greenwich *\/$/;"	m	struct:timezone
u	ebt.c	/^    } u;$/;"	m	struct:sa	typeref:union:sa::__anon3	file:
u32	ebt.c	/^        uint32_t u32;$/;"	m	union:thread_entity::__anon1	file:
u64	ebt.c	/^        uint64_t u64;$/;"	m	union:thread_entity::__anon1	file:
udata	ebt.c	/^    char *udata;                \/\/带外$/;"	m	struct:EventData	file:
uint32_t	include/hashtable.h	/^typedef unsigned int uint32_t;$/;"	t
uint8_t	include/hashtable.h	/^typedef unsigned char uint8_t;$/;"	t
uthash_expand_fyi	include/hashtable.h	83;"	d
uthash_fatal	include/hashtable.h	70;"	d
uthash_free	include/hashtable.h	76;"	d
uthash_malloc	include/hashtable.h	73;"	d
uthash_noexpand_fyi	include/hashtable.h	80;"	d
vec_clear	ebt.c	134;"	d	file:
vec_deinit	ebt.c	131;"	d	file:
vec_expand	ebt.c	/^static void vec_expand (char **data, int *length, int *capacity, int memsz) {$/;"	f	file:
vec_get	ebt.c	145;"	d	file:
vec_init	ebt.c	128;"	d	file:
vec_pop	ebt.c	141;"	d	file:
vec_push	ebt.c	137;"	d	file:
vec_splice	ebt.c	/^static void vec_splice (char **data, int *length, int *capacity, int memsz, int start, int count) {$/;"	f	file:
vec_splice	ebt.c	149;"	d	file:
vec_unpack	ebt.c	125;"	d	file:
wait_for_events	ebt.c	/^static int wait_for_events (struct eb_t *ebt, const struct timeval *start, struct timeval *end) {$/;"	f	file:
writev	ebt.c	/^    struct ev_io **writev;$/;"	m	struct:ebt_epoll	typeref:struct:ebt_epoll::ev_io	file:
