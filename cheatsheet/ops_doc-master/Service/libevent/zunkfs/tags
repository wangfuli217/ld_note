!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BLOCK_SIZE	fuse.c	33;"	d	file:
CACHED_CHUNK_MAGIC	file.c	27;"	d	file:
CACHE_MAX	chunk-db-zdb.c	71;"	d	file:
CFLAGS	Makefile	/^CFLAGS=-g -Wall $(FUSE_CFLAGS) -DZUNKFS_OS=$(OS) -I$(LIBEVENT_PREFIX)\/include \\$/;"	m
CHUNKDB_NC	chunk-db.h	41;"	d
CHUNKDB_RO	chunk-db.h	38;"	d
CHUNKDB_RW	chunk-db.h	39;"	d
CHUNKDB_WT	chunk-db.h	40;"	d
CHUNK_BLOCKS	fuse.c	37;"	d	file:
CHUNK_DIGEST_LEN	zunkfs.h	13;"	d
CHUNK_DIGEST_STRLEN	zunkfs.h	14;"	d
CHUNK_SIZE	zunkfs.h	5;"	d
COMPILER_ASSERT	utils.h	51;"	d
CORE_OBJS	Makefile	/^CORE_OBJS=chunk-tree.o \\$/;"	m
DBTYPES	Makefile	/^DBTYPES=chunk-db-local.o \\$/;"	m
DDENT_CRYPTO_MASK	dir.h	36;"	d
DDENT_DEFAULT_FLAGS	dir.h	38;"	d
DDENT_NAME_MAX	dir.h	15;"	d
DDENT_USE_BLOWFISH	dir.h	33;"	d
DDENT_USE_XOR	dir.h	32;"	d
DDENT_VALID_FLAGS	dir.h	35;"	d
DECLARE_MUTEX	mutex.h	21;"	d
DIGESTS_PER_CHUNK	zunkfs.h	15;"	d
DIRENTS_PER_CHUNK	dir.h	42;"	d
DIR_AS_FILE	dir.h	12;"	d
ERROR	utils.h	34;"	d
ERR_PTR	utils.h	/^static inline void *ERR_PTR (int err) {$/;"	f
ERR_PTR	utils.h	85;"	d
FILE_CHUNK_CACHE_SIZE	file.c	22;"	d	file:
FILE_CHUNK_CACHE_SIZE	file.c	24;"	d	file:
FINAL_OBJS	Makefile	/^FINAL_OBJS=zunkfs \\$/;"	m
FIND	chunk-db-unit-test.c	/^enum optype { INVALID, STORE, FIND };$/;"	e	enum:optype	file:
FIND_CHUNK	chunk-db-zdb.c	172;"	d	file:
FIND_CHUNK	zunkdb.c	65;"	d	file:
FIND_CHUNK_LEN	chunk-db-zdb.c	173;"	d	file:
FIND_CHUNK_LEN	zunkdb.c	66;"	d	file:
FORWARD_CHUNK	chunk-db-zdb.c	180;"	d	file:
FORWARD_CHUNK	zunkdb.c	73;"	d	file:
FORWARD_CHUNK_LEN	chunk-db-zdb.c	181;"	d	file:
FORWARD_CHUNK_LEN	zunkdb.c	74;"	d	file:
FUSE_CFLAGS	Makefile	/^FUSE_CFLAGS=$(shell pkg-config fuse --cflags)$/;"	m
FUSE_LIBS	Makefile	/^FUSE_LIBS=$(shell pkg-config fuse --libs) $/;"	m
FUSE_USE_VERSION	fuse.c	2;"	d	file:
INIT_LIST_HEAD	list.h	37;"	d
INIT_LIST_ITEM	list.h	41;"	d
INIT_MUTEX	mutex.h	16;"	d
INIT_MUTEX	mutex.h	18;"	d
INT_CHUNK_SIZE	chunk-db.c	36;"	d	file:
INVALID	chunk-db-unit-test.c	/^enum optype { INVALID, STORE, FIND };$/;"	e	enum:optype	file:
INVALID_CHUNK_NR	chunk-db-file.c	24;"	d	file:
IS_ERR	utils.h	/^static inline int IS_ERR (const void *ptr) {$/;"	f
LDFLAGS	Makefile	/^LDFLAGS=-lssl -lsqlite3 $(FUSE_LIBS) -L$(LIBEVENT_PREFIX)\/lib -levent$/;"	m
LIBEVENT_PREFIX	Makefile	/^LIBEVENT_PREFIX=.$/;"	m
LIST_HEAD	list.h	36;"	d
LIST_HEAD_INIT	list.h	35;"	d
MAP_NOCACHE	utils.h	125;"	d
MAP_POPULATE	utils.h	129;"	d
MAX_CACHE_SIZE	chunk-db-mem.c	13;"	d	file:
MAX_ERRNO	utils.h	65;"	d
MAX_INDEX	chunk-db-file.c	22;"	d	file:
MIN_FILE_CHUNK_CACHE_SIZE	file.c	19;"	d	file:
NODE_VEC_MAX	zunkdb.c	78;"	d	file:
NR_NODES	ctree-unit-test.c	16;"	d	file:
OPT_ADDR	zunkdb.c	/^    OPT_ADDR = 'a',$/;"	e	enum:__anon1	file:
OPT_CHUNK_DB	fuse.c	/^    OPT_CHUNK_DB$/;"	e	enum:__anon2	file:
OPT_CHUNK_DB	zunkdb.c	/^    OPT_CHUNK_DB = 'c',$/;"	e	enum:__anon1	file:
OPT_CHUNK_DB	zunkfs-add-ddent.c	/^    OPT_CHUNK_DB = 'd',$/;"	e	enum:__anon11	file:
OPT_CHUNK_DB	zunkfs-list-ddents.c	/^    OPT_CHUNK_DB = 'd',$/;"	e	enum:__anon12	file:
OPT_DAEMONIZE	zunkdb.c	/^    OPT_DAEMONIZE = 'd',$/;"	e	enum:__anon1	file:
OPT_DB	chunk-db-unit-test.c	/^    OPT_DB = 'd',$/;"	e	enum:__anon9	file:
OPT_FIND	chunk-db-unit-test.c	/^    OPT_FIND = 'f',$/;"	e	enum:__anon9	file:
OPT_FORWARD_TIMEOUT	zunkdb.c	/^    OPT_FORWARD_TIMEOUT = 't',$/;"	e	enum:__anon1	file:
OPT_FULL	zunkfs-list-ddents.c	/^    OPT_FULL = 'f',$/;"	e	enum:__anon12	file:
OPT_HELP	fuse.c	/^    OPT_HELP,$/;"	e	enum:__anon2	file:
OPT_HELP	zunkdb.c	/^    OPT_HELP = 'h',$/;"	e	enum:__anon1	file:
OPT_HELP	zunkfs-add-ddent.c	/^    OPT_HELP = 'h',$/;"	e	enum:__anon11	file:
OPT_HELP	zunkfs-list-ddents.c	/^    OPT_HELP = 'h'$/;"	e	enum:__anon12	file:
OPT_LOG	chunk-db-unit-test.c	/^    OPT_LOG = 'l',$/;"	e	enum:__anon9	file:
OPT_LOG	fuse.c	/^    OPT_LOG,$/;"	e	enum:__anon2	file:
OPT_LOG	zunkdb.c	/^    OPT_LOG = 'l',$/;"	e	enum:__anon1	file:
OPT_LOG	zunkfs-add-ddent.c	/^    OPT_LOG = 'l',$/;"	e	enum:__anon11	file:
OPT_LOG	zunkfs-list-ddents.c	/^    OPT_LOG = 'l',$/;"	e	enum:__anon12	file:
OPT_MAX_FORWARD	zunkdb.c	/^    OPT_MAX_FORWARD = 'x',$/;"	e	enum:__anon1	file:
OPT_PEER	zunkdb.c	/^    OPT_PEER = 'p',$/;"	e	enum:__anon1	file:
OPT_PROMOTE	zunkdb.c	/^    OPT_PROMOTE = 'o',$/;"	e	enum:__anon1	file:
OPT_REQUIRED_ARG	chunk-db-unit-test.c	/^    OPT_REQUIRED_ARG = ':',$/;"	e	enum:__anon9	file:
OPT_REQUIRED_ARG	zunkdb.c	/^    OPT_REQUIRED_ARG = ':',$/;"	e	enum:__anon1	file:
OPT_REQUIRED_ARG	zunkfs-add-ddent.c	/^    OPT_REQUIRED_ARG = ':',$/;"	e	enum:__anon11	file:
OPT_REQUIRED_ARG	zunkfs-list-ddents.c	/^    OPT_REQUIRED_ARG = ':',$/;"	e	enum:__anon12	file:
OPT_SLOW_UPLINK	zunkdb.c	/^    OPT_SLOW_UPLINK = 's',$/;"	e	enum:__anon1	file:
OPT_STORE	chunk-db-unit-test.c	/^    OPT_STORE = 's',$/;"	e	enum:__anon9	file:
OS	Makefile	/^OS=$(shell \/usr\/bin\/env uname)$/;"	m
POSIX_FADV_RANDOM	utils.h	143;"	d
POSIX_MADV_WILLNEED	utils.h	139;"	d
PTR_ERR	utils.h	/^static inline int PTR_ERR (const void *ptr) {$/;"	f
PTR_ERR	utils.h	86;"	d
PUSH_CHUNK	zunkdb.c	75;"	d	file:
PUSH_CHUNK_LEN	zunkdb.c	76;"	d	file:
REGISTER_CHUNKDB	chunk-db.h	48;"	d
REQUEST_DONE	chunk-db-zdb.c	176;"	d	file:
REQUEST_DONE	zunkdb.c	69;"	d	file:
REQUEST_DONE_LEN	chunk-db-zdb.c	177;"	d	file:
REQUEST_DONE_LEN	zunkdb.c	70;"	d	file:
SHA_DIGEST_BITS	digest.h	8;"	d
SHA_DIGEST_INTS	digest.h	12;"	d
SHA_DIGEST_STRLEN	digest.h	16;"	d
SPLIT_AT	chunk-db-file.c	23;"	d	file:
STORE	chunk-db-unit-test.c	/^enum optype { INVALID, STORE, FIND };$/;"	e	enum:optype	file:
STORE_CHUNK	chunk-db-zdb.c	174;"	d	file:
STORE_CHUNK	zunkdb.c	67;"	d	file:
STORE_CHUNK_LEN	chunk-db-zdb.c	175;"	d	file:
STORE_CHUNK_LEN	zunkdb.c	68;"	d	file:
STORE_NODE	chunk-db-zdb.c	178;"	d	file:
STORE_NODE	zunkdb.c	71;"	d	file:
STORE_NODE_LEN	chunk-db-zdb.c	179;"	d	file:
STORE_NODE_LEN	zunkdb.c	72;"	d	file:
STR_OR_ERROR	utils.h	101;"	d
TRACE	utils.h	35;"	d
UNIT_TEST_OBJS	Makefile	/^UNIT_TEST_OBJS=$(CORE_OBJS) \\$/;"	m
USAGE	chunk-db-unit-test.c	40;"	d	file:
USAGE	zunkdb.c	806;"	d	file:
USAGE	zunkfs-add-ddent.c	74;"	d	file:
USAGE	zunkfs-list-ddents.c	44;"	d	file:
VALUE_SIZE	base64-test.c	13;"	d	file:
WARNING	utils.h	33;"	d
ZUNKFS_ERROR	utils.h	29;"	d
ZUNKFS_TRACE	utils.h	31;"	d
ZUNKFS_WARNING	utils.h	30;"	d
_GNU_SOURCE	chunk-db-cmd.c	2;"	d	file:
_GNU_SOURCE	chunk-db-file.c	2;"	d	file:
_GNU_SOURCE	chunk-db-local.c	2;"	d	file:
_GNU_SOURCE	chunk-db-map.c	2;"	d	file:
_GNU_SOURCE	chunk-db-sqlite.c	2;"	d	file:
_GNU_SOURCE	chunk-db-zdb.c	5;"	d	file:
_GNU_SOURCE	chunk-db.c	2;"	d	file:
_GNU_SOURCE	chunk-tree.c	2;"	d	file:
_GNU_SOURCE	ctree-unit-test.c	2;"	d	file:
_GNU_SOURCE	dir-unit-test.c	2;"	d	file:
_GNU_SOURCE	dir.c	2;"	d	file:
_GNU_SOURCE	file-unit-test.c	2;"	d	file:
_GNU_SOURCE	file.c	2;"	d	file:
_GNU_SOURCE	fuse.c	3;"	d	file:
_GNU_SOURCE	mutex.h	4;"	d
_GNU_SOURCE	unit-test-utils.c	2;"	d	file:
_GNU_SOURCE	utils.c	2;"	d	file:
_GNU_SOURCE	zunkdb.c	2;"	d	file:
_GNU_SOURCE	zunkfs-add-ddent.c	2;"	d	file:
__BASE64_H__	base64.h	3;"	d
__CHUNK_TREE_H__	chunk-tree.h	2;"	d
__DIGEST_H__	digest.h	3;"	d
__ERR_PTR	utils.h	/^static inline void *__ERR_PTR (int err, const char *funct, int line) {$/;"	f
__LIST_H__	list.h	7;"	d
__PTR_ERR	utils.h	/^static inline int __PTR_ERR (const void *ptr, const char *funct, int line) {$/;"	f
__ZUNKFS_BYTEORDER_H__	byteorder.h	3;"	d
__ZUNKFS_CHUNKDB_H__	chunk-db.h	2;"	d
__ZUNKFS_DIR_H__	dir.h	2;"	d
__ZUNKFS_FILE_H__	file.h	2;"	d
__ZUNKFS_H__	zunkfs.h	2;"	d
__ZUNKFS_MUTEX_H__	mutex.h	2;"	d
__ZUNKFS_UTIL_H__	utils.h	2;"	d
__add_dentry	dir.c	/^struct dentry *__add_dentry (struct dentry *parent, const char *name, mode_t mode, uint8_t flags) {$/;"	f
__cache_file_chunk	file.c	/^static void __cache_file_chunk (struct open_file *ofile, struct chunk_node *cnode) {$/;"	f	file:
__chunk_nr	chunk-tree.c	/^static inline unsigned __chunk_nr (const struct chunk_node *cnode) {$/;"	f	file:
__data_digest	zunkdb.c	/^static inline unsigned char *__data_digest (const void *buf, size_t len, unsigned char *digest) {$/;"	f	file:
__del_dentry	dir.c	/^static void __del_dentry (struct dentry *dentry, struct dentry *parent) {$/;"	f	file:
__dentry_chunk_count	dir.c	/^static inline unsigned __dentry_chunk_count (const struct dentry *dentry) {$/;"	f	file:
__digest_string	digest.c	/^const char *__digest_string (const unsigned char *digest, char *strbuf) {$/;"	f
__errptr	utils.c	/^void *const __errptr;$/;"	v
__issue_request	chunk-db-zdb.c	/^static int __issue_request (struct request *request) {$/;"	f	file:
__list_add	list.h	/^static inline void __list_add (struct list_head *new, struct list_head *prev, struct list_head *next) {$/;"	f
__list_splice	list.h	/^static inline void __list_splice (struct list_head *list, struct list_head *head) {$/;"	f
__map_chunk	chunk-db-file.c	/^static inline unsigned char *__map_chunk (struct db *db, uint32_t nr, int extra_flags) {$/;"	f	file:
__nearest_nodes	zunkdb.c	/^static int __nearest_nodes (const unsigned char *key, struct node **node_vec, int *dist_vec, int max, struct node *exclude) {$/;"	f	file:
__node_digest	zunkdb.c	/^static inline unsigned char *__node_digest (const struct node *node, unsigned char *digest) {$/;"	f	file:
__push_chunk	zunkdb.c	/^static void __push_chunk (struct push_request *r, struct node *exclude) {$/;"	f	file:
__put_chunk_node	chunk-tree.c	/^static void __put_chunk_node (struct chunk_node *cnode, int leaf) {$/;"	f	file:
__put_dentry	dir.c	/^void __put_dentry (struct dentry *dentry) {$/;"	f
__rename_dentry	dir.c	/^static int __rename_dentry (struct dentry *dentry, const char *new_name, struct dentry *new_parent) {$/;"	f	file:
__send_request_to	chunk-db-zdb.c	/^static void __send_request_to (struct request *request, struct node *node) {$/;"	f	file:
__sha1_string	base64-test.c	/^static const char *__sha1_string (const void *buf, size_t len, char *string) {$/;"	f	file:
__sranddev	utils.c	/^static int __sranddev (const char *dev) {$/;"	f	file:
__string_digest	digest.c	/^unsigned char *__string_digest (const char *str, unsigned char *digest) {$/;"	f
__string_sockaddr_in	utils.c	/^struct sockaddr_in *__string_sockaddr_in (const char *str, struct sockaddr_in *sa) {$/;"	f
__zprintf	utils.c	/^void __zprintf (char level, const char *function, int line, const char *fmt, ...) {$/;"	f
_private	chunk-tree.h	/^    void *_private;$/;"	m	struct:chunk_node
accept_client	zunkdb.c	/^static void accept_client (int fd, short event, void *arg) {$/;"	f	file:
add_chunkdb	chunk-db.c	/^char *add_chunkdb (const char *spec) {$/;"	f
add_dentry	dir.h	/^static inline struct dentry *add_dentry (struct dentry *parent, const char *name, mode_t mode) {$/;"	f
addr	chunk-db-zdb.c	/^    struct sockaddr_in addr;$/;"	m	struct:node	typeref:struct:node::sockaddr_in	file:
addr	zunkdb.c	/^    struct sockaddr_in addr;$/;"	m	struct:node	typeref:struct:node::sockaddr_in	file:
addr_queue	chunk-db-zdb.c	/^    struct addr_queue addr_queue;$/;"	m	struct:request	typeref:struct:request::addr_queue	file:
addr_queue	chunk-db-zdb.c	/^struct addr_queue {$/;"	s	file:
addr_queue_destroy	chunk-db-zdb.c	/^static inline void addr_queue_destroy (struct addr_queue *q) {$/;"	f	file:
addr_queue_empty	chunk-db-zdb.c	/^static inline int addr_queue_empty (const struct addr_queue *q) {$/;"	f	file:
addr_queue_init	chunk-db-zdb.c	/^static inline void addr_queue_init (struct addr_queue *q) {$/;"	f	file:
addrs	chunk-db-zdb.c	/^    struct sockaddr_in *addrs;$/;"	m	struct:addr_queue	typeref:struct:addr_queue::sockaddr_in	file:
assert_file_locked	file.c	37;"	d	file:
base	chunk-db-zdb.c	/^    struct event_base *base;$/;"	m	struct:request	typeref:struct:request::event_base	file:
base64_chars	base64.c	/^static const char base64_chars[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/";$/;"	v	file:
base64_decode	base64.c	/^size_t base64_decode (const char *str, unsigned char *buf, size_t size) {$/;"	f
base64_encode_evbuf	base64.c	/^int base64_encode_evbuf (struct evbuffer *evbuf, const unsigned char *s, size_t length) {$/;"	f
base64_length	base64.h	/^static inline size_t base64_length (size_t size) {$/;"	f
base64_map	base64.c	/^static unsigned char base64_map (const char **strp) {$/;"	f	file:
base64_size	base64.h	/^static inline size_t base64_size (size_t len) {$/;"	f
be16_t	byteorder.h	/^} be16_t;$/;"	t	typeref:struct:__anon4
be16toh	byteorder.h	/^static inline uint16_t be16toh (be16_t x) {$/;"	f
be16toh	byteorder.h	61;"	d
be32_t	byteorder.h	/^} be32_t;$/;"	t	typeref:struct:__anon6
be32toh	byteorder.h	/^static inline uint32_t be32toh (be32_t x) {$/;"	f
be32toh	byteorder.h	62;"	d
be64_t	byteorder.h	/^} be64_t;$/;"	t	typeref:struct:__anon8
be64toh	byteorder.h	/^static inline uint64_t be64toh (be64_t x) {$/;"	f
be64toh	byteorder.h	63;"	d
bev	chunk-db-zdb.c	/^    struct bufferevent *bev;$/;"	m	struct:node	typeref:struct:node::bufferevent	file:
bev	zunkdb.c	/^    struct bufferevent *bev;$/;"	m	struct:node	typeref:struct:node::bufferevent	file:
bf_chunk	dir.c	/^static void bf_chunk (unsigned char *dst, const unsigned char *src, const unsigned char *secret, int enc) {$/;"	f	file:
bswap16	byteorder.h	/^static inline uint16_t bswap16 (uint16_t x) {$/;"	f
bswap32	byteorder.h	/^static inline uint32_t bswap32 (uint32_t x) {$/;"	f
bswap64	byteorder.h	/^static inline uint64_t bswap64 (uint64_t x) {$/;"	f
buf	fuse.c	/^    void *buf;$/;"	m	struct:filldir_data	file:
cachable	file.c	/^static inline int cachable (const struct open_file *ofile) {$/;"	f	file:
cache	chunk-db-mem.c	/^struct cache {$/;"	s	file:
cache_bucket	chunk-db-mem.c	/^static inline struct list_head *cache_bucket (struct cache *cache, const unsigned char *digest) {$/;"	f	file:
cache_count	chunk-db-zdb.c	/^static unsigned cache_count = 0;$/;"	v	file:
cache_file_chunk	file.c	/^static inline void cache_file_chunk (struct open_file *ofile, struct chunk_node *cnode) {$/;"	f	file:
cache_node	chunk-db-zdb.c	/^static void cache_node (struct node *node, struct request *request) {$/;"	f	file:
ccache	file.c	/^    struct chunk_node *ccache[FILE_CHUNK_CACHE_SIZE];$/;"	m	struct:open_file	typeref:struct:open_file::chunk_node	file:
ccache_index	file.c	/^    unsigned ccache_index;$/;"	m	struct:open_file	file:
children_of	chunk-tree.c	16;"	d	file:
children_of	dir.c	22;"	d	file:
chunk	chunk-db-mem.c	/^struct chunk {$/;"	s	file:
chunk	chunk-db-zdb.c	/^    unsigned char *chunk;$/;"	m	struct:request	file:
chunk_cnode	dir.c	31;"	d	file:
chunk_data	chunk-tree.h	/^    unsigned char chunk_data[CHUNK_SIZE];$/;"	m	struct:chunk_node
chunk_db	chunk-db.h	/^struct chunk_db {$/;"	s
chunk_db_type	chunk-db.h	/^struct chunk_db_type {$/;"	s
chunk_dentry	dir.c	33;"	d	file:
chunk_digest	chunk-tree.h	/^    unsigned char *chunk_digest;$/;"	m	struct:chunk_node
chunk_digest	zunkdb.c	/^    unsigned char chunk_digest[CHUNK_DIGEST_LEN];$/;"	m	struct:forward_request	file:
chunk_lru	chunk-db-mem.c	/^    struct list_head chunk_lru;$/;"	m	struct:cache	typeref:struct:cache::list_head	file:
chunk_map	chunk-db-map.c	/^struct chunk_map {$/;"	s	file:
chunk_node	chunk-tree.h	/^struct chunk_node {$/;"	s
chunk_nr	chunk-db-file.c	/^    be32_t chunk_nr;$/;"	m	struct:index	file:
chunk_nr	chunk-db-map.c	/^    int chunk_nr;$/;"	m	struct:chunk_map	file:
chunk_nr	chunk-tree.c	/^unsigned chunk_nr (const struct chunk_node *cnode) {$/;"	f
chunk_table	chunk-db-mem.c	/^    struct list_head *chunk_table;$/;"	m	struct:cache	typeref:struct:cache::list_head	file:
chunk_tree	chunk-tree.h	/^struct chunk_tree {$/;"	s
chunk_tree	dir.h	/^    struct chunk_tree chunk_tree;$/;"	m	struct:dentry	typeref:struct:dentry::chunk_tree
chunk_tree_operations	chunk-tree.h	/^struct chunk_tree_operations {$/;"	s
clear_cached	file.c	/^static inline void clear_cached (struct chunk_node *cnode) {$/;"	f	file:
close_file	file.c	/^int close_file (struct open_file *ofile) {$/;"	f
cmd_chunkdb_ctor	chunk-db-cmd.c	/^static char *cmd_chunkdb_ctor (const char *spec, struct chunk_db *cdb) {$/;"	f	file:
cmd_chunkdb_type	chunk-db-cmd.c	/^static struct chunk_db_type cmd_chunkdb_type = {$/;"	v	typeref:struct:chunk_db_type	file:
cmd_read_chunk	chunk-db-cmd.c	/^static bool cmd_read_chunk (unsigned char *chunk, const unsigned char *digest, void *db_info) {$/;"	f	file:
cmd_write_chunk	chunk-db-cmd.c	/^static bool cmd_write_chunk (const unsigned char *chunk, const unsigned char *digest, void *db_info) {$/;"	f	file:
cmp_digest	chunk-db.c	/^static inline int cmp_digest (const unsigned char *a, const unsigned char *b) {$/;"	f	file:
cnode_array	unit-test-utils.c	19;"	d	file:
connect_event	chunk-db-zdb.c	/^    struct event connect_event;$/;"	m	struct:node	typeref:struct:node::event	file:
connect_event	zunkdb.c	/^    struct event connect_event;$/;"	m	struct:node	typeref:struct:node::event	file:
connect_node	zunkdb.c	/^static int connect_node (struct node *node) {$/;"	f	file:
connect_timeout	chunk-db-zdb.c	/^    struct timeval connect_timeout;$/;"	m	struct:node	typeref:struct:node::timeval	file:
connect_timeout	chunk-db-zdb.c	/^    struct timeval connect_timeout;$/;"	m	struct:request	typeref:struct:request::timeval	file:
connect_timeout	chunk-db-zdb.c	/^    struct timeval connect_timeout;$/;"	m	struct:zdb_info	typeref:struct:zdb_info::timeval	file:
connectcb	chunk-db-zdb.c	/^static void connectcb (int fd, short event, void *arg) {$/;"	f	file:
connectcb	zunkdb.c	/^static void connectcb (int fd, short event, void *arg) {$/;"	f	file:
connecting_nodes	chunk-db-zdb.c	/^    struct list_head connecting_nodes;$/;"	m	struct:request	typeref:struct:request::list_head	file:
container_of	utils.h	106;"	d
count	chunk-db-mem.c	/^    unsigned long count;$/;"	m	struct:cache	file:
create_dentry	dir.c	/^struct dentry *create_dentry (const char *path, mode_t mode) {$/;"	f
create_file	file.c	/^struct open_file *create_file (const char *path, mode_t mode) {$/;"	f
create_node	chunk-db-zdb.c	/^static struct node *create_node (const struct sockaddr_in *addr) {$/;"	f	file:
ctime	dir.h	/^    le32_t ctime;               \/\/  4 56$/;"	m	struct:disk_dentry
ctor	chunk-db.h	/^    char *(*ctor) (const char *spec, struct chunk_db * chunk_db);$/;"	m	struct:chunk_db_type
ctree	chunk-tree.h	/^    struct chunk_tree *ctree;$/;"	m	struct:chunk_node	typeref:struct:chunk_node::chunk_tree
ctree_ops	ctree-unit-test.c	/^struct chunk_tree_operations ctree_ops = {$/;"	v	typeref:struct:chunk_tree_operations
d_path	dir-unit-test.c	/^char *d_path (const char *prefix, const struct dentry *dentry) {$/;"	f
daemonize	zunkdb.c	/^static unsigned daemonize = 0;$/;"	v	file:
data	chunk-db-mem.c	/^    unsigned char data[CHUNK_SIZE];$/;"	m	struct:chunk	file:
data_digest	zunkdb.c	102;"	d	file:
db	chunk-db-file.c	/^struct db {$/;"	s	file:
db	chunk-db-sqlite.c	/^    sqlite3 *db;$/;"	m	struct:db_info	file:
db_entry	chunk-db.h	/^    struct list_head db_entry;$/;"	m	struct:chunk_db	typeref:struct:chunk_db::list_head
db_info	chunk-db-map.c	/^struct db_info {$/;"	s	file:
db_info	chunk-db-sqlite.c	/^struct db_info {$/;"	s	file:
db_info	chunk-db.h	/^    void *db_info;$/;"	m	struct:chunk_db
db_name	chunk-db-map.c	/^    const char *db_name;$/;"	m	struct:db_info	file:
ddent	dir.h	/^    struct disk_dentry *ddent;$/;"	m	struct:dentry	typeref:struct:dentry::disk_dentry
ddent_cnode	dir.h	/^    struct chunk_node *ddent_cnode;$/;"	m	struct:dentry	typeref:struct:dentry::chunk_node
ddent_mutex	dir.h	/^    struct mutex *ddent_mutex;$/;"	m	struct:dentry	typeref:struct:dentry::mutex
del_dentry	dir.c	/^int del_dentry (struct dentry *dentry) {$/;"	f
dentry	dir.h	/^struct dentry {$/;"	s
dentry	file.c	/^    struct dentry *dentry;$/;"	m	struct:open_file	typeref:struct:open_file::dentry	file:
dentry_array	unit-test-utils.c	21;"	d	file:
dentry_chmod	dir.c	/^void dentry_chmod (struct dentry *dentry, mode_t mode) {$/;"	f
dentry_chunk_count	dir.c	/^unsigned dentry_chunk_count (const struct dentry *dentry) {$/;"	f
dentry_ctree_ops	dir.c	/^static struct chunk_tree_operations dentry_ctree_ops = {$/;"	v	typeref:struct:chunk_tree_operations	file:
dentry_index	dir.c	/^static inline unsigned dentry_index (const struct dentry *dentry) {$/;"	f	file:
dentry_ptr	dir.c	24;"	d	file:
dequeue_addr	chunk-db-zdb.c	/^static int dequeue_addr (struct addr_queue *q, struct sockaddr_in *addr) {$/;"	f	file:
dequeue_node	chunk-db-zdb.c	/^static struct node *dequeue_node (struct request *request) {$/;"	f	file:
digest	chunk-db-mem.c	/^    unsigned char digest[CHUNK_DIGEST_LEN];$/;"	m	struct:chunk	file:
digest	chunk-db-zdb.c	/^    const unsigned char *digest;$/;"	m	struct:request	file:
digest	dir.h	/^    uint8_t digest[CHUNK_DIGEST_LEN];   \/\/ 20 20$/;"	m	struct:disk_dentry
digest	zunkdb.c	/^    unsigned char digest[CHUNK_DIGEST_LEN];$/;"	m	struct:push_request	file:
digest_chunk	chunk-db.c	/^static inline unsigned char *digest_chunk (const unsigned char *chunk, unsigned char *digest) {$/;"	f	file:
digest_distance	digest.c	/^int digest_distance (const unsigned char *a, const unsigned char *b) {$/;"	f
digest_string	digest.h	23;"	d
dirty	dir.h	/^    unsigned dirty:1;$/;"	m	struct:dentry
dirty_entry	chunk-tree.h	/^    struct list_head dirty_entry;$/;"	m	struct:chunk_node	typeref:struct:chunk_node::list_head
dirty_list	chunk-tree.h	/^    struct list_head dirty_list;$/;"	m	struct:chunk_tree	typeref:struct:chunk_tree::list_head
disk_dentry	dir.h	/^struct disk_dentry {$/;"	s
dns_resolve	zunkdb.c	/^static int dns_resolve (char *addr_str) {$/;"	f	file:
dns_resolvecb	zunkdb.c	/^static void dns_resolvecb (int result, char type, int count, int ttl, void *addresses, void *arg) {$/;"	f	file:
do_daemonize	zunkdb.c	/^static int do_daemonize (void) {$/;"	f	file:
do_find	chunk-db-unit-test.c	/^static void do_find (const unsigned char *digest) {$/;"	f	file:
do_store	chunk-db-unit-test.c	/^static int do_store (int fd) {$/;"	f	file:
dump_child	unit-test-utils.c	/^static int dump_child (struct dentry *child, void *data) {$/;"	f	file:
dump_cnode	unit-test-utils.c	/^void dump_cnode (struct chunk_node *cnode, const char *indent, int height, void (*dump_leaf) (void **, const char *)) {$/;"	f
dump_ctree	unit-test-utils.c	/^void dump_ctree (struct chunk_tree *ctree, const char *indent, void (*dump_leaf) (void **child, const char *indent)) {$/;"	f
dump_dentries	unit-test-utils.c	/^void dump_dentries (void **list, const char *indent) {$/;"	f
dump_dentry	unit-test-utils.c	/^void dump_dentry (struct dentry *dentry, const char *indent) {$/;"	f
dump_dentry_2	unit-test-utils.c	/^void dump_dentry_2 (struct dentry *dentry, const char *indent) {$/;"	f
dup_disk_dentry	dir.c	/^int dup_disk_dentry (struct dentry *parent, const struct disk_dentry *src) {$/;"	f
dup_log_fd	utils.c	/^int dup_log_fd (int to) {$/;"	f
errorcb	chunk-db-zdb.c	/^static void errorcb (struct bufferevent *bev, short what, void *arg) {$/;"	f	file:
errorcb	zunkdb.c	/^static void errorcb (struct bufferevent *bev, short what, void *arg) {$/;"	f	file:
evbuf	chunk-db-zdb.c	/^    struct evbuffer *evbuf;$/;"	m	struct:request	typeref:struct:request::evbuffer	file:
evbuf	zunkdb.c	/^    struct evbuffer *evbuf;$/;"	m	struct:forward_request	typeref:struct:forward_request::evbuffer	file:
fd	chunk-db-file.c	/^    int fd;$/;"	m	struct:db	file:
fd	chunk-db-zdb.c	/^    int fd;$/;"	m	struct:node	file:
fd	zunkdb.c	/^    int fd;$/;"	m	struct:node	file:
file_chunkdb_ctor	chunk-db-file.c	/^static char *file_chunkdb_ctor (const char *spec, struct chunk_db *chunk_db) {$/;"	f	file:
file_chunkdb_type	chunk-db-file.c	/^REGISTER_CHUNKDB (file_chunkdb_type);$/;"	v
file_chunkdb_type	chunk-db-file.c	/^static struct chunk_db_type file_chunkdb_type = {$/;"	v	typeref:struct:chunk_db_type	file:
file_dentry	file.c	/^struct dentry *file_dentry (struct open_file *ofile) {$/;"	f
file_read_chunk	chunk-db-file.c	/^static bool file_read_chunk (unsigned char *chunk, const unsigned char *digest, void *db_info) {$/;"	f	file:
file_write_chunk	chunk-db-file.c	/^static bool file_write_chunk (const unsigned char *chunk, const unsigned char *digest, void *db_info) {$/;"	f	file:
filldir_data	fuse.c	/^struct filldir_data {$/;"	s	file:
find_dentry	dir.c	/^struct dentry *find_dentry (const char *path, int *dir_as_file) {$/;"	f
find_dentry_parent	dir.c	/^struct dentry *find_dentry_parent (const char *path, struct dentry **pparent, const char **name) {$/;"	f
find_node	chunk-db-zdb.c	/^static struct node *find_node (const struct sockaddr_in *addr) {$/;"	f	file:
find_node	zunkdb.c	/^static struct node *find_node (const struct sockaddr_in *addr) {$/;"	f	file:
find_value	zunkdb.c	/^static int find_value (const unsigned char *key, struct evbuffer *output) {$/;"	f	file:
finish_request	zunkdb.c	/^static void finish_request (const unsigned char *digest, const struct node *node) {$/;"	f	file:
flags	dir.h	/^    uint8_t flags;              \/\/  1 43$/;"	m	struct:disk_dentry
fls	utils.c	/^int __attribute__ ((weak)) fls (int i) {$/;"	f
flush_chunk_node	chunk-tree.c	/^static int flush_chunk_node (struct chunk_node *cnode) {$/;"	f	file:
flush_chunk_tree	chunk-tree.c	/^int flush_chunk_tree (struct chunk_tree *ctree) {$/;"	f
flush_dentry	dir.c	/^static void flush_dentry (struct dentry *dentry) {$/;"	f	file:
flush_file	file.c	/^int flush_file (struct open_file *ofile) {$/;"	f
flush_root	dir.c	/^void flush_root (void) {$/;"	f
forward_chunk	zunkdb.c	/^static void forward_chunk (const char *value, const unsigned char *digest, unsigned max_d, struct node *exclude) {$/;"	f	file:
forward_request	zunkdb.c	/^struct forward_request {$/;"	s	file:
forward_timeout	zunkdb.c	/^static struct timeval forward_timeout = { 60, 0 };$/;"	v	typeref:struct:timeval	file:
free_chunk_tree	chunk-tree.c	/^void free_chunk_tree (struct chunk_tree *ctree) {$/;"	f
free_dentry	dir.c	/^static void free_dentry (struct dentry *dentry) {$/;"	f	file:
free_node	zunkdb.c	/^static void free_node (struct node *node) {$/;"	f	file:
free_private	chunk-tree.h	/^    void (*free_private) (void *);$/;"	m	struct:chunk_tree_operations
full_output	zunkfs-list-ddents.c	/^static unsigned full_output = 0;$/;"	v	file:
func	fuse.c	/^    fuse_fill_dir_t func;$/;"	m	struct:filldir_data	file:
get_dentry_chunk	dir.c	/^struct chunk_node *get_dentry_chunk (struct dentry *dentry, unsigned chunk_nr) {$/;"	f
get_nth_chunk	chunk-tree.c	/^struct chunk_node *get_nth_chunk (struct chunk_tree *ctree, unsigned chunk_nr) {$/;"	f
get_nth_dentry	dir.c	/^static struct dentry *get_nth_dentry (struct dentry *parent, unsigned nr) {$/;"	f	file:
grow_chunk_tree	chunk-tree.c	/^static int grow_chunk_tree (struct chunk_tree *ctree) {$/;"	f	file:
hash	chunk-db-file.c	/^    be32_t hash;$/;"	m	struct:index	file:
hash_entry	chunk-db-mem.c	/^    struct list_head hash_entry;$/;"	m	struct:chunk	typeref:struct:chunk::list_head	file:
hash_insert	chunk-db-file.c	/^static int hash_insert (struct db *db, uint32_t hash, uint32_t chunk_nr) {$/;"	f	file:
hash_mask	chunk-db-mem.c	/^    unsigned long hash_mask;$/;"	m	struct:cache	file:
have_mutex	mutex.h	/^static inline int have_mutex (const struct mutex *m) {$/;"	f
head	chunk-db-zdb.c	/^    int head, len;$/;"	m	struct:addr_queue	file:
height	chunk-tree.h	/^    unsigned height;$/;"	m	struct:chunk_tree
help	chunk-db.h	/^    const char *help;$/;"	m	struct:chunk_db_type
help_chunkdb	chunk-db.c	/^void help_chunkdb (void) {$/;"	f
hex_digit	digest.c	/^static const char hex_digit[] = "0123456789abcdef";$/;"	v	file:
hex_digits	base64-test.c	/^static const char hex_digits[] = "0123456789abcdef";$/;"	v	file:
htobe16	byteorder.h	/^static inline be16_t htobe16 (uint16_t x) {$/;"	f
htobe16	byteorder.h	55;"	d
htobe32	byteorder.h	/^static inline be32_t htobe32 (uint32_t x) {$/;"	f
htobe32	byteorder.h	56;"	d
htobe64	byteorder.h	/^static inline be64_t htobe64 (uint64_t x) {$/;"	f
htobe64	byteorder.h	57;"	d
htole16	byteorder.h	/^static inline le16_t htole16 (uint16_t x) {$/;"	f
htole16	byteorder.h	52;"	d
htole32	byteorder.h	/^static inline le32_t htole32 (uint32_t x) {$/;"	f
htole32	byteorder.h	53;"	d
htole64	byteorder.h	/^static inline le64_t htole64 (uint64_t x) {$/;"	f
htole64	byteorder.h	54;"	d
indent_start	ctree-unit-test.c	19;"	d	file:
indent_start	dir-unit-test.c	24;"	d	file:
indent_start	file-unit-test.c	30;"	d	file:
index	chunk-db-file.c	/^struct index {$/;"	s	file:
info_size	chunk-db.h	/^    unsigned info_size;$/;"	m	struct:chunk_db_type
init_chunk_tree	chunk-tree.c	/^int init_chunk_tree (struct chunk_tree *ctree, unsigned nr_leafs, unsigned char *root_digest, struct chunk_tree_operations *ops) {$/;"	f
init_chunkdb_cmd	chunk-db-cmd.c	/^static void __attribute__ ((constructor)) init_chunkdb_cmd (void) {$/;"	f	file:
init_disk_dentry	dir.c	/^int init_disk_dentry (struct disk_dentry *ddent) {$/;"	f
init_mutex	mutex.c	/^void init_mutex (struct mutex *m) {$/;"	f
is_cached	file.c	/^static inline int is_cached (struct chunk_node *cnode) {$/;"	f	file:
is_cnode_dirty	chunk-tree.h	/^static inline int is_cnode_dirty (const struct chunk_node *cnode) {$/;"	f
issue_request	chunk-db-zdb.c	/^static int issue_request (struct evbuffer *evbuf, struct zdb_info *db_info, const unsigned char *digest, unsigned char *chunk) {$/;"	f	file:
kill_node	chunk-db-zdb.c	/^static void kill_node (struct node *node) {$/;"	f	file:
le16_t	byteorder.h	/^} le16_t;$/;"	t	typeref:struct:__anon3
le16toh	byteorder.h	/^static inline uint16_t le16toh (le16_t x) {$/;"	f
le16toh	byteorder.h	58;"	d
le32_t	byteorder.h	/^} le32_t;$/;"	t	typeref:struct:__anon5
le32toh	byteorder.h	/^static inline uint32_t le32toh (le32_t x) {$/;"	f
le32toh	byteorder.h	59;"	d
le64_t	byteorder.h	/^} le64_t;$/;"	t	typeref:struct:__anon7
le64toh	byteorder.h	/^static inline uint64_t le64toh (le64_t x) {$/;"	f
le64toh	byteorder.h	60;"	d
len	chunk-db-zdb.c	/^    int head, len;$/;"	m	struct:addr_queue	file:
list_add	list.h	/^static inline void list_add (struct list_head *new, struct list_head *head) {$/;"	f
list_add_tail	list.h	/^static inline void list_add_tail (struct list_head *new, struct list_head *head) {$/;"	f
list_del	list.h	/^static inline void list_del (struct list_head *item) {$/;"	f
list_del_init	list.h	/^static inline void list_del_init (struct list_head *item) {$/;"	f
list_empty	list.h	/^static inline int list_empty (const struct list_head *item) {$/;"	f
list_entry	list.h	15;"	d
list_for_each	list.h	18;"	d
list_for_each_entry	list.h	24;"	d
list_for_each_entry_safe	list.h	29;"	d
list_for_each_prev	list.h	21;"	d
list_head	list.h	/^struct list_head {$/;"	s
list_head_init	list.h	/^static inline void list_head_init (struct list_head *item) {$/;"	f
list_move	list.h	/^static inline void list_move (struct list_head *item, struct list_head *head) {$/;"	f
list_move_tail	list.h	/^static inline void list_move_tail (struct list_head *item, struct list_head *head) {$/;"	f
list_next_entry	list.h	122;"	d
list_pop	list.h	/^static inline struct list_head *list_pop (struct list_head *head) {$/;"	f
list_pop_entry	list.h	119;"	d
list_prev_entry	list.h	125;"	d
list_splice	list.h	/^static inline void list_splice (struct list_head *list, struct list_head *head) {$/;"	f
list_splice_init	list.h	/^static inline void list_splice_init (struct list_head *list, struct list_head *head) {$/;"	f
load_root	chunk-db-file.c	/^static int load_root (struct db *db) {$/;"	f	file:
local_chunkdb_ctor	chunk-db-local.c	/^static char *local_chunkdb_ctor (const char *spec, struct chunk_db *cdb) {$/;"	f	file:
local_chunkdb_type	chunk-db-local.c	/^REGISTER_CHUNKDB (local_chunkdb_type);$/;"	v
local_chunkdb_type	chunk-db-local.c	/^static struct chunk_db_type local_chunkdb_type = {$/;"	v	typeref:struct:chunk_db_type	file:
local_read_chunk	chunk-db-local.c	/^static bool local_read_chunk (unsigned char *chunk, const unsigned char *digest, void *db_info) {$/;"	f	file:
local_write_chunk	chunk-db-local.c	/^static bool local_write_chunk (const unsigned char *chunk, const unsigned char *digest, void *db_info) {$/;"	f	file:
lock	mutex.c	/^void lock (struct mutex *m) {$/;"	f
lock_db	chunk-db-map.c	45;"	d	file:
lock_db	chunk-db-sqlite.c	26;"	d	file:
lock_file	file.c	35;"	d	file:
lock_order	dir.c	/^static struct dentry *lock_order (struct dentry *a, struct dentry *b) {$/;"	f	file:
locked_add_dentry	dir-unit-test.c	/^static struct dentry *locked_add_dentry (struct dentry *parent, const char *name, mode_t mode) {$/;"	f	file:
locked_dec	mutex.h	40;"	d
locked_inc	mutex.h	33;"	d
long_opts	chunk-db-unit-test.c	/^static const struct option long_opts[] = {$/;"	v	typeref:struct:option	file:
long_opts	zunkdb.c	/^static const struct option long_opts[] = {$/;"	v	typeref:struct:option	file:
long_opts	zunkfs-add-ddent.c	/^static const struct option long_opts[] = {$/;"	v	typeref:struct:option	file:
long_opts	zunkfs-list-ddents.c	/^static const struct option long_opts[] = {$/;"	v	typeref:struct:option	file:
lookup	dir.c	/^static struct dentry *lookup (struct dentry *parent, const char *name, int len) {$/;"	f	file:
lookup_chunk	chunk-db-file.c	/^unsigned char *lookup_chunk (struct db *db, const unsigned char *digest) {$/;"	f
lru_entry	chunk-db-mem.c	/^    struct list_head lru_entry;$/;"	m	struct:chunk	typeref:struct:chunk::list_head	file:
main	base64-test.c	/^int main (int argc, char **argv) {$/;"	f
main	chunk-db-unit-test.c	/^int main (int argc, char **argv) {$/;"	f
main	ctree-unit-test.c	/^int main (int argc, char **argv) {$/;"	f
main	dir-unit-test.c	/^int main (int argc, char **argv) {$/;"	f
main	file-unit-test.c	/^int main (int argc, char **argv) {$/;"	f
main	fuse.c	/^int main (int argc, char **argv) {$/;"	f
main	zunkdb.c	/^int main (int argc, char **argv) {$/;"	f
main	zunkfs-add-ddent.c	/^int main (int argc, char **argv) {$/;"	f
main	zunkfs-list-ddents.c	/^int main (int argc, char **argv) {$/;"	f
make_last_dentry	dir.c	/^static int make_last_dentry (struct dentry *dentry, struct dentry *parent) {$/;"	f	file:
map_chunk	chunk-db-file.c	/^static inline void *map_chunk (struct db *db, uint32_t nr) {$/;"	f	file:
map_chunkdb_ctor	chunk-db-map.c	/^static char *map_chunkdb_ctor (const char *spec, struct chunk_db *chunk_db) {$/;"	f	file:
map_chunkdb_type	chunk-db-map.c	/^REGISTER_CHUNKDB (map_chunkdb_type);$/;"	v
map_chunkdb_type	chunk-db-map.c	/^static struct chunk_db_type map_chunkdb_type = {$/;"	v	typeref:struct:chunk_db_type	file:
map_query	chunk-db-map.c	/^static const char *map_query = "SELECT path,chunk_nr FROM chunk_map WHERE hash='%s';";$/;"	v	file:
map_read_chunk	chunk-db-map.c	/^static bool map_read_chunk (unsigned char *chunk, const unsigned char *digest, void *db_info) {$/;"	f	file:
mark_cnode_dirty	chunk-tree.h	/^static inline void mark_cnode_dirty (struct chunk_node *cnode) {$/;"	f
max	chunk-db-mem.c	/^    unsigned long max;$/;"	m	struct:cache	file:
max_d	zunkdb.c	/^    int max_d;$/;"	m	struct:push_request	file:
max_forwards	zunkdb.c	/^static unsigned max_forwards = 1000;$/;"	v	file:
may_promote	zunkdb.c	/^static unsigned may_promote = 0;$/;"	v	file:
mem_chunkdb_ctor	chunk-db-mem.c	/^static char *mem_chunkdb_ctor (const char *spec, struct chunk_db *chunk_db) {$/;"	f	file:
mem_chunkdb_type	chunk-db-mem.c	/^REGISTER_CHUNKDB (mem_chunkdb_type);$/;"	v
mem_chunkdb_type	chunk-db-mem.c	/^static struct chunk_db_type mem_chunkdb_type = {$/;"	v	typeref:struct:chunk_db_type	file:
mem_read_chunk	chunk-db-mem.c	/^static bool mem_read_chunk (unsigned char *chunk, const unsigned char *digest, void *db_info) {$/;"	f	file:
mem_write_chunk	chunk-db-mem.c	/^static bool mem_write_chunk (const unsigned char *chunk, const unsigned char *digest, void *db_info) {$/;"	f	file:
min_dist	zunkdb.c	/^    int min_dist;$/;"	m	struct:forward_request	file:
mode	chunk-db.h	/^    int mode;$/;"	m	struct:chunk_db
mode	dir.h	/^    le16_t mode;                \/\/  2 42$/;"	m	struct:disk_dentry
mode	dir.h	/^    mode_t mode;$/;"	m	struct:dentry
mtime	dir.h	/^    le32_t mtime;               \/\/  4 60$/;"	m	struct:disk_dentry
mtime	dir.h	/^    struct timeval mtime;$/;"	m	struct:dentry	typeref:struct:dentry::timeval
mtime_csec	dir.h	/^    uint8_t mtime_csec;         \/\/  1 44$/;"	m	struct:disk_dentry
mutex	chunk-db-map.c	/^    struct mutex mutex;$/;"	m	struct:db_info	typeref:struct:db_info::mutex	file:
mutex	chunk-db-mem.c	/^    struct mutex mutex;$/;"	m	struct:cache	typeref:struct:cache::mutex	file:
mutex	chunk-db-sqlite.c	/^    struct mutex mutex;$/;"	m	struct:db_info	typeref:struct:db_info::mutex	file:
mutex	dir.h	/^    struct mutex mutex;$/;"	m	struct:dentry	typeref:struct:dentry::mutex
mutex	mutex.h	/^    pthread_mutex_t mutex;$/;"	m	struct:mutex
mutex	mutex.h	/^struct mutex {$/;"	s
my_addr	zunkdb.c	/^static struct sockaddr_in my_addr;$/;"	v	typeref:struct:sockaddr_in	file:
namcmp	dir.h	49;"	d
namcpy	dir.h	48;"	d
name	dir.h	/^    uint8_t name[DDENT_NAME_MAX];   \/\/ .. 256$/;"	m	struct:disk_dentry
nearest_nodes	zunkdb.c	/^static void nearest_nodes (const unsigned char *key, struct evbuffer *output, int max, struct node *exclude) {$/;"	f	file:
new_chunk_node	chunk-tree.c	/^static struct chunk_node *new_chunk_node (struct chunk_tree *ctree, unsigned char *chunk_digest, int leaf) {$/;"	f	file:
new_dentry	dir.c	/^static struct dentry *new_dentry (struct dentry *parent, struct disk_dentry *ddent, struct chunk_node *ddent_cnode, struct mutex *ddent_mutex) {$/;"	f	file:
next	list.h	/^    struct list_head *prev, *next;$/;"	m	struct:list_head	typeref:struct:list_head::
next_nr	chunk-db-file.c	/^    uint32_t next_nr;$/;"	m	struct:db	file:
node	chunk-db-zdb.c	/^struct node {$/;"	s	file:
node	zunkdb.c	/^    struct node *node;$/;"	m	struct:push_request	typeref:struct:push_request::node	file:
node	zunkdb.c	/^struct node {$/;"	s	file:
node_addr	zunkdb.c	57;"	d	file:
node_addr_string	zunkdb.c	58;"	d	file:
node_connecting	chunk-db-zdb.c	/^enum node_state { node_connecting, node_ready, node_dead };$/;"	e	enum:node_state	file:
node_dead	chunk-db-zdb.c	/^enum node_state { node_connecting, node_ready, node_dead };$/;"	e	enum:node_state	file:
node_digest	zunkdb.c	118;"	d	file:
node_distance	zunkdb.c	/^static inline int node_distance (const struct node *node, const unsigned char *key) {$/;"	f	file:
node_entry	chunk-db-zdb.c	/^    struct list_head node_entry;$/;"	m	struct:node	typeref:struct:node::list_head	file:
node_entry	zunkdb.c	/^    struct list_head node_entry;$/;"	m	struct:node	typeref:struct:node::list_head	file:
node_is_addr	chunk-db-zdb.c	/^static inline int node_is_addr (const struct node *node, const struct sockaddr_in *addr) {$/;"	f	file:
node_is_addr	zunkdb.c	61;"	d	file:
node_port	zunkdb.c	59;"	d	file:
node_ready	chunk-db-zdb.c	/^enum node_state { node_connecting, node_ready, node_dead };$/;"	e	enum:node_state	file:
node_state	chunk-db-zdb.c	/^enum node_state { node_connecting, node_ready, node_dead };$/;"	g	file:
nr_chunkdbs	zunkdb.c	/^static unsigned nr_chunkdbs = 0;$/;"	v	file:
nr_dbs	chunk-db-unit-test.c	/^static unsigned nr_dbs = 0;$/;"	v	file:
nr_leafs	chunk-tree.h	/^    unsigned nr_leafs;$/;"	m	struct:chunk_tree
open_file	file.c	/^struct open_file *open_file (const char *path) {$/;"	f
open_file	file.c	/^struct open_file {$/;"	s	file:
open_file_dentry	file.c	/^static struct open_file *open_file_dentry (struct dentry *dentry) {$/;"	f	file:
ops	chunk-tree.h	/^    struct chunk_tree_operations *ops;$/;"	m	struct:chunk_tree	typeref:struct:chunk_tree::chunk_tree_operations
opt_proc	fuse.c	/^static int opt_proc (void *data, const char *arg, int key, struct fuse_args *args) {$/;"	f	file:
optype	chunk-db-unit-test.c	/^enum optype { INVALID, STORE, FIND };$/;"	g	file:
optype	chunk-db-unit-test.c	/^static enum optype optype = INVALID;$/;"	v	typeref:enum:optype	file:
owner	mutex.h	/^    pthread_t owner;$/;"	m	struct:mutex
panic	utils.h	37;"	d
parent	chunk-tree.h	/^    struct chunk_node *parent;$/;"	m	struct:chunk_node	typeref:struct:chunk_node::chunk_node
parent	dir.h	/^    struct dentry *parent;$/;"	m	struct:dentry	typeref:struct:dentry::dentry
parse_spec	chunk-db-zdb.c	/^static char *parse_spec (const char *spec, struct zdb_info *zdb_info) {$/;"	f	file:
path	chunk-db-map.c	/^    char path[PATH_MAX];$/;"	m	struct:chunk_map	file:
pending_forwards	zunkdb.c	/^static unsigned pending_forwards = 0;$/;"	v	file:
posix_fadvise	utils.c	/^int __attribute__ ((weak)) posix_fadvise (int fd, off_t offset, off_t len, int advice) {$/;"	f
posix_madvise	utils.c	/^int __attribute__ ((weak)) posix_madvise (void *ptr, size_t len, int advice) {$/;"	f
prev	list.h	/^    struct list_head *prev, *next;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
proc_msg	chunk-db-zdb.c	/^static int proc_msg (const char *buf, size_t len, struct node *node) {$/;"	f	file:
proc_msg	zunkdb.c	/^static void proc_msg (const char *buf, size_t len, struct node *node) {$/;"	f	file:
proc_opt	chunk-db-unit-test.c	/^static int proc_opt (int opt, char *arg) {$/;"	f	file:
proc_opt	zunkdb.c	/^static int proc_opt (int opt, char *arg) {$/;"	f	file:
proc_opt	zunkfs-add-ddent.c	/^static void proc_opt (int opt, char *arg) {$/;"	f	file:
proc_opt	zunkfs-list-ddents.c	/^static void proc_opt (int opt, char *arg) {$/;"	f	file:
prog	chunk-db-unit-test.c	/^static const char *prog;$/;"	v	file:
prog	fuse.c	/^static const char *prog = NULL;$/;"	v	file:
prog	zunkdb.c	/^static char *prog;$/;"	v	file:
prog	zunkfs-add-ddent.c	/^static const char *prog;$/;"	v	file:
prog	zunkfs-list-ddents.c	/^static const char *prog;$/;"	v	file:
promote_node	zunkdb.c	/^static int promote_node (struct node *node, uint16_t port) {$/;"	f	file:
push_chunk	zunkdb.c	/^static void push_chunk (const char *value, const unsigned char *digest, int max_d, struct node *exclude) {$/;"	f	file:
push_request	zunkdb.c	/^struct push_request {$/;"	s	file:
put_chunk_node	chunk-tree.c	/^void put_chunk_node (struct chunk_node *cnode) {$/;"	f
put_dentry	dir.c	/^void put_dentry (struct dentry *dentry) {$/;"	f
query_map	chunk-db-map.c	/^    int (*query_map) (struct db_info *, const char *query, struct chunk_map * map);$/;"	m	struct:db_info	file:
query_map_sqlite3	chunk-db-map.c	/^static int query_map_sqlite3 (struct db_info *db, const char *query, struct chunk_map *map) {$/;"	f	file:
queue_addr	chunk-db-zdb.c	/^static int queue_addr (struct addr_queue *q, const struct sockaddr_in *addr) {$/;"	f	file:
rand_chunk	ctree-unit-test.c	/^static unsigned char rand_chunk[CHUNK_SIZE];$/;"	v	file:
rand_digest	ctree-unit-test.c	/^static unsigned char rand_digest[CHUNK_DIGEST_LEN];$/;"	v	file:
random_chunk_digest	chunk-db.c	/^int random_chunk_digest (unsigned char *digest) {$/;"	f
read_chunk	chunk-db.c	/^bool read_chunk (unsigned char *chunk, const unsigned char *digest) {$/;"	f
read_chunk	chunk-db.h	/^     bool (*read_chunk) (unsigned char *chunk, const unsigned char *digest, void *db_info);$/;"	m	struct:chunk_db_type
read_chunk	chunk-tree.h	/^    int (*read_chunk) (unsigned char *chunk, const unsigned char *digest);$/;"	m	struct:chunk_tree_operations
read_chunk_from_file	chunk-db-map.c	/^static int read_chunk_from_file (const char *path, unsigned nr, unsigned char *chunk) {$/;"	f	file:
read_chunk_sqlite	chunk-db-sqlite.c	/^static bool read_chunk_sqlite (unsigned char *chunk, const unsigned char *digest, void *db_info_ptr) {$/;"	f	file:
read_dentry	zunkfs-list-ddents.c	/^static int read_dentry (int fd, struct disk_dentry *de) {$/;"	f	file:
read_dentry_chunk	dir.c	/^static int read_dentry_chunk (unsigned char *chunk, const unsigned char *digest) {$/;"	f	file:
read_file	file.c	/^int read_file (struct open_file *ofile, char *buf, size_t bufsz, off_t offset) {$/;"	f
readcb	chunk-db-zdb.c	/^static void readcb (struct bufferevent *bev, void *arg) {$/;"	f	file:
readcb	zunkdb.c	/^static void readcb (struct bufferevent *bev, void *arg) {$/;"	f	file:
ref_count	chunk-tree.h	/^    unsigned ref_count;$/;"	m	struct:chunk_node
ref_count	dir.h	/^    unsigned ref_count;$/;"	m	struct:dentry
ref_count	zunkdb.c	/^    unsigned ref_count;$/;"	m	struct:forward_request	file:
register_chunkdb	chunk-db.c	/^void register_chunkdb (struct chunk_db_type *type) {$/;"	f
release_cached_chunks	file.c	/^static void release_cached_chunks (struct open_file *ofile) {$/;"	f	file:
rename_dentry	dir.c	/^int rename_dentry (struct dentry *dentry, const char *new_name, struct dentry *new_parent) {$/;"	f
request	chunk-db-zdb.c	/^    struct request *request;$/;"	m	struct:node	typeref:struct:node::request	file:
request	chunk-db-zdb.c	/^struct request {$/;"	s	file:
request_complete	chunk-db-zdb.c	/^    request_complete$/;"	e	enum:request_state	file:
request_done	zunkdb.c	/^static inline void request_done (const char *key_str, struct evbuffer *output) {$/;"	f	file:
request_entry	zunkdb.c	/^    struct list_head request_entry;$/;"	m	struct:forward_request	typeref:struct:forward_request::list_head	file:
request_entry	zunkdb.c	/^    struct list_head request_entry;$/;"	m	struct:push_request	typeref:struct:push_request::list_head	file:
request_pending	chunk-db-zdb.c	/^enum request_state { request_pending, request_waiting, request_timedout,$/;"	e	enum:request_state	file:
request_state	chunk-db-zdb.c	/^enum request_state { request_pending, request_waiting, request_timedout,$/;"	g	file:
request_timedout	chunk-db-zdb.c	/^enum request_state { request_pending, request_waiting, request_timedout,$/;"	e	enum:request_state	file:
request_timeout	chunk-db-zdb.c	/^    struct timeval request_timeout;$/;"	m	struct:zdb_info	typeref:struct:zdb_info::timeval	file:
request_timeoutcb	zunkdb.c	/^static void request_timeoutcb (int fd, short event, void *arg) {$/;"	f	file:
request_waiting	chunk-db-zdb.c	/^enum request_state { request_pending, request_waiting, request_timedout,$/;"	e	enum:request_state	file:
ro	chunk-db-file.c	/^    unsigned ro:1;$/;"	m	struct:db	file:
root	chunk-db-file.c	/^    struct index *root;$/;"	m	struct:db	typeref:struct:db::index	file:
root	chunk-tree.h	/^    struct chunk_node *root;$/;"	m	struct:chunk_tree	typeref:struct:chunk_tree::chunk_node
root_dentry	dir.c	/^static struct dentry *root_dentry = NULL;$/;"	v	typeref:struct:dentry	file:
rw_file	file.c	/^static int rw_file (struct open_file *ofile, char *buf, size_t bufsz, off_t offset, int read) {$/;"	f	file:
same_addr	chunk-db-zdb.c	/^static inline int same_addr (const struct sockaddr_in *a, const struct sockaddr_in *b) {$/;"	f	file:
scan_dir	dir.c	/^int scan_dir (struct dentry *dentry, int (*func) (struct dentry *, void *), void *scan_data) {$/;"	f
secret_chunk	dir.h	/^    unsigned char *secret_chunk;$/;"	m	struct:dentry
secret_digest	dir.h	/^    uint8_t secret_digest[CHUNK_DIGEST_LEN];    \/\/ 20 40$/;"	m	struct:disk_dentry
seed_random_number_generator	chunk-db.c	/^static void __attribute__ ((constructor)) seed_random_number_generator (void) {$/;"	f	file:
send_request_to	chunk-db-zdb.c	/^static void send_request_to (struct request *request, struct node *node) {$/;"	f	file:
set_cached	file.c	/^static inline void set_cached (struct chunk_node *cnode) {$/;"	f	file:
set_logging	utils.c	/^int set_logging (const char *params) {$/;"	f
set_root	dir.c	/^int set_root (struct disk_dentry *ddent, struct mutex *ddent_mutex) {$/;"	f
set_root_file	fuse.c	/^static void set_root_file (const char *fs_descr) {$/;"	f	file:
setup_node	zunkdb.c	/^static int setup_node (struct node *node) {$/;"	f	file:
sha1_string	base64-test.c	33;"	d	file:
short_opts	chunk-db-unit-test.c	/^static const char short_opts[] = {$/;"	v	file:
short_opts	zunkdb.c	/^static const char short_opts[] = {$/;"	v	file:
short_opts	zunkfs-add-ddent.c	/^static const char short_opts[] = {$/;"	v	file:
short_opts	zunkfs-list-ddents.c	/^static const char short_opts[] = {$/;"	v	file:
sigpipecb	zunkdb.c	/^static void sigpipecb (int fd, short event, void *arg) {$/;"	f	file:
size	dir.h	/^    le64_t size;                \/\/  8 52$/;"	m	struct:disk_dentry
size	dir.h	/^    uint64_t size;$/;"	m	struct:dentry
sizeof_disk_dentry_is_256	dir.h	/^COMPILER_ASSERT (sizeof (struct disk_dentry) == 256, sizeof_disk_dentry_is_256);$/;"	v
slow_uplink	zunkdb.c	/^static unsigned slow_uplink = 0;$/;"	v	file:
spaces	ctree-unit-test.c	/^static const char spaces[] = "                                                                                                                                                               ";$/;"	v	file:
spaces	dir-unit-test.c	/^static const char spaces[] = "                                                                                                                                                               ";$/;"	v	file:
spaces	file-unit-test.c	/^static const char spaces[] = "                                                                                                                                                               ";$/;"	v	file:
spec_prefix	chunk-db.h	/^    const char *spec_prefix;$/;"	m	struct:chunk_db_type
sprintf_new	utils.c	/^char *sprintf_new (const char *fmt, ...) {$/;"	f
sqlite3_db	chunk-db-map.c	/^        sqlite3 *sqlite3_db;$/;"	m	union:db_info::__anon10	file:
sqlite3_query_callback	chunk-db-map.c	/^static int sqlite3_query_callback (void *user_data, int argc, char **argv, char **column_names) {$/;"	f	file:
sqlite_chunkdb_ctor	chunk-db-sqlite.c	/^static char *sqlite_chunkdb_ctor (const char *spec, struct chunk_db *chunk_db) {$/;"	f	file:
sqlite_chunkdb_type	chunk-db-sqlite.c	/^REGISTER_CHUNKDB (sqlite_chunkdb_type);$/;"	v
sqlite_chunkdb_type	chunk-db-sqlite.c	/^static struct chunk_db_type sqlite_chunkdb_type = {$/;"	v	typeref:struct:chunk_db_type	file:
sranddev	utils.c	/^void __attribute__ ((weak)) sranddev (void) {$/;"	f
start_node	chunk-db-zdb.c	/^    struct sockaddr_in start_node;$/;"	m	struct:zdb_info	typeref:struct:zdb_info::sockaddr_in	file:
state	chunk-db-zdb.c	/^    enum node_state state;$/;"	m	struct:node	typeref:enum:node::node_state	file:
state	chunk-db-zdb.c	/^    enum request_state state;$/;"	m	struct:request	typeref:enum:request::request_state	file:
store_method	chunk-db-zdb.c	/^    const char *store_method;$/;"	m	struct:zdb_info	file:
store_node	chunk-db-zdb.c	/^static void store_node (struct request *request, char *addr_str) {$/;"	f	file:
store_node	zunkdb.c	/^static int store_node (const struct sockaddr_in *addr) {$/;"	f	file:
store_value	zunkdb.c	/^static int store_value (const char *value, unsigned char *digest) {$/;"	f	file:
str2digest	zunkfs-add-ddent.c	/^static inline int str2digest (const char *str, unsigned char *digest) {$/;"	f	file:
string_digest	digest.h	28;"	d
string_sockaddr_in	utils.h	118;"	d
strnlen	utils.c	/^size_t __attribute__ ((weak)) strnlen (const char *str, size_t max) {$/;"	f
suffix	chunk-db-zdb.c	/^static const char *suffix (const char *str, const char *prefix) {$/;"	f	file:
swap_dentries	dir.c	/^static void swap_dentries (struct dentry *a, struct dentry *b) {$/;"	f	file:
test1	dir-unit-test.c	/^static void test1 (void) {$/;"	f	file:
test2	dir-unit-test.c	/^static void test2 (void) {$/;"	f	file:
test3	dir-unit-test.c	/^static void test3 (void) {$/;"	f	file:
test4	dir-unit-test.c	/^static void test4 (void) {$/;"	f	file:
test_import	file-unit-test.c	/^void test_import (char *path) {$/;"	f
test_read_chunk	ctree-unit-test.c	/^static int test_read_chunk (unsigned char *chunk, const unsigned char *digest) {$/;"	f	file:
test_write_chunk	ctree-unit-test.c	/^static int test_write_chunk (const unsigned char *chunk, unsigned char *digest) {$/;"	f	file:
timeout	chunk-db-zdb.c	/^    struct timeval timeout;$/;"	m	struct:request	typeref:struct:request::timeval	file:
timeout	zunkdb.c	/^    struct timeval timeout;$/;"	m	struct:forward_request	typeref:struct:forward_request::timeval	file:
timeout_event	chunk-db-zdb.c	/^    struct event timeout_event;$/;"	m	struct:request	typeref:struct:request::event	file:
timeout_event	zunkdb.c	/^    struct event timeout_event;$/;"	m	struct:forward_request	typeref:struct:forward_request::event	file:
timeoutcb	chunk-db-zdb.c	/^static void timeoutcb (int fd, short event, void *arg) {$/;"	f	file:
trim_nodes	zunkdb.c	/^static int trim_nodes (void) {$/;"	f	file:
try_connect	chunk-db-zdb.c	/^static inline int try_connect (struct node *node) {$/;"	f	file:
trylock	mutex.c	/^int trylock (struct mutex *m) {$/;"	f
type	chunk-db.h	/^    struct chunk_db_type *type;$/;"	m	struct:chunk_db	typeref:struct:chunk_db::chunk_db_type
type_entry	chunk-db.h	/^    struct list_head type_entry;$/;"	m	struct:chunk_db_type	typeref:struct:chunk_db_type::list_head
unlock	mutex.c	/^void unlock (struct mutex *m) {$/;"	f
unlock_db	chunk-db-map.c	46;"	d	file:
unlock_db	chunk-db-sqlite.c	27;"	d	file:
unlock_file	file.c	36;"	d	file:
unmap_chunk	chunk-db-file.c	/^static inline void unmap_chunk (void *chunk) {$/;"	f	file:
usage	chunk-db-unit-test.c	/^static void usage (int exit_code) {$/;"	f	file:
usage	fuse.c	/^static void usage (void) {$/;"	f	file:
usage	zunkdb.c	/^static void usage (int exit_code) {$/;"	f	file:
usage	zunkfs-add-ddent.c	/^static void usage (int exit_code) {$/;"	f	file:
usage	zunkfs-list-ddents.c	/^static void usage (int exit_code) {$/;"	f	file:
util_init	utils.c	/^static void __attribute__ ((constructor)) util_init (void) {$/;"	f	file:
v	byteorder.h	/^    uint16_t v;$/;"	m	struct:__anon3
v	byteorder.h	/^    uint16_t v;$/;"	m	struct:__anon4
v	byteorder.h	/^    uint32_t v;$/;"	m	struct:__anon5
v	byteorder.h	/^    uint32_t v;$/;"	m	struct:__anon6
v	byteorder.h	/^    uint64_t v;$/;"	m	struct:__anon7
v	byteorder.h	/^    uint64_t v;$/;"	m	struct:__anon8
value	zunkdb.c	/^    char value[0];$/;"	m	struct:push_request	file:
verify_chunk	zunkfs.h	/^static inline int verify_chunk (const unsigned char *chunk, const unsigned char *digest) {$/;"	f
verify_digest	digest.c	/^int verify_digest (const unsigned char *digest, const unsigned char *data, size_t data_size) {$/;"	f
warn_once	utils.h	43;"	d
write_chunk	chunk-db.c	/^bool write_chunk (const unsigned char *chunk, unsigned char *digest) {$/;"	f
write_chunk	chunk-db.h	/^     bool (*write_chunk) (const unsigned char *chunk, const unsigned char *digest, void *db_info);$/;"	m	struct:chunk_db_type
write_chunk	chunk-tree.h	/^    int (*write_chunk) (const unsigned char *chunk, unsigned char *digest);$/;"	m	struct:chunk_tree_operations
write_chunk_sqlite	chunk-db-sqlite.c	/^static bool write_chunk_sqlite (const unsigned char *chunk, const unsigned char *digest, void *db_info_ptr) {$/;"	f	file:
write_dentry	zunkfs-add-ddent.c	/^static int write_dentry (int fd, struct disk_dentry *de) {$/;"	f	file:
write_dentry_chunk	dir.c	/^static int write_dentry_chunk (const unsigned char *chunk, unsigned char *digest) {$/;"	f	file:
write_dir	file.c	/^static int write_dir (struct open_file *ofile, const char *buf, size_t len, off_t offset) {$/;"	f	file:
write_file	file.c	/^int write_file (struct open_file *ofile, const char *buf, size_t len, off_t off) {$/;"	f
xfer_chunk	chunk-db-cmd.c	/^static bool xfer_chunk (unsigned char *chunk, const unsigned char *digest, xfer_fn op, int orig_fd, void *db_info) {$/;"	f	file:
xfer_fn	chunk-db-cmd.c	/^typedef ssize_t (*xfer_fn) (int fd, void *buf, size_t len);$/;"	t	file:
xor_chunk	dir.c	/^static void xor_chunk (unsigned char *dst, const unsigned char *src, const unsigned char *secret) {$/;"	f	file:
zdb_chunkdb_ctor	chunk-db-zdb.c	/^static char *zdb_chunkdb_ctor (const char *spec, struct chunk_db *chunk_db) {$/;"	f	file:
zdb_chunkdb_type	chunk-db-zdb.c	/^REGISTER_CHUNKDB (zdb_chunkdb_type);$/;"	v
zdb_chunkdb_type	chunk-db-zdb.c	/^static struct chunk_db_type zdb_chunkdb_type = {$/;"	v	typeref:struct:chunk_db_type	file:
zdb_info	chunk-db-zdb.c	/^struct zdb_info {$/;"	s	file:
zdb_read_chunk	chunk-db-zdb.c	/^static bool zdb_read_chunk (unsigned char *chunk, const unsigned char *digest, void *db_info) {$/;"	f	file:
zdb_write_chunk	chunk-db-zdb.c	/^static bool zdb_write_chunk (const unsigned char *chunk, const unsigned char *digest, void *db_info) {$/;"	f	file:
zprintf	utils.h	18;"	d
zunkfs_calc_size	fuse.c	/^static int zunkfs_calc_size (struct dentry *dentry, void *data) {$/;"	f	file:
zunkfs_chmod	fuse.c	/^static int zunkfs_chmod (const char *path, mode_t mode) {$/;"	f	file:
zunkfs_create	fuse.c	/^static int zunkfs_create (const char *path, mode_t mode, struct fuse_file_info *fuse_file) {$/;"	f	file:
zunkfs_filldir	fuse.c	/^static int zunkfs_filldir (struct dentry *dentry, void *data) {$/;"	f	file:
zunkfs_flush	fuse.c	/^static int zunkfs_flush (const char *path, struct fuse_file_info *fuse_file) {$/;"	f	file:
zunkfs_getattr	fuse.c	/^static int zunkfs_getattr (const char *path, struct stat *stbuf) {$/;"	f	file:
zunkfs_log_fp	utils.c	/^FILE *zunkfs_log_fp = NULL;$/;"	v
zunkfs_log_level	utils.c	/^char zunkfs_log_level = 0;$/;"	v
zunkfs_mkdir	fuse.c	/^static int zunkfs_mkdir (const char *path, mode_t mode) {$/;"	f	file:
zunkfs_open	fuse.c	/^static int zunkfs_open (const char *path, struct fuse_file_info *fuse_file) {$/;"	f	file:
zunkfs_operations	fuse.c	/^static struct fuse_operations zunkfs_operations = {$/;"	v	typeref:struct:fuse_operations	file:
zunkfs_opts	fuse.c	/^static struct fuse_opt zunkfs_opts[] = {$/;"	v	typeref:struct:fuse_opt	file:
zunkfs_read	fuse.c	/^static int zunkfs_read (const char *path, char *buf, size_t bufsz, off_t offset, struct fuse_file_info *fuse_file) {$/;"	f	file:
zunkfs_readdir	fuse.c	/^static int zunkfs_readdir (const char *path, void *filldir_buf, fuse_fill_dir_t filldir, off_t offset, struct fuse_file_info *fuse_file) {$/;"	f	file:
zunkfs_release	fuse.c	/^static int zunkfs_release (const char *path, struct fuse_file_info *fuse_file) {$/;"	f	file:
zunkfs_rename	fuse.c	/^static int zunkfs_rename (const char *src, const char *dst) {$/;"	f	file:
zunkfs_rmdir	fuse.c	/^static int zunkfs_rmdir (const char *path) {$/;"	f	file:
zunkfs_statfs	fuse.c	/^static int zunkfs_statfs (const char *path, struct statvfs *stbuf) {$/;"	f	file:
zunkfs_unlink	fuse.c	/^static int zunkfs_unlink (const char *path) {$/;"	f	file:
zunkfs_utimens	fuse.c	/^static int zunkfs_utimens (const char *path, const struct timespec tv[2]) {$/;"	f	file:
zunkfs_write	fuse.c	/^static int zunkfs_write (const char *path, const char *buf, size_t bufsz, off_t offset, struct fuse_file_info *fuse_file) {$/;"	f	file:
