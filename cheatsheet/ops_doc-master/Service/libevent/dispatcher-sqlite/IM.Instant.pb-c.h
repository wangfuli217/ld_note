/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: IM.Instant.proto */

#ifndef PROTOBUF_C_IM_2eInstant_2eproto__INCLUDED
#define PROTOBUF_C_IM_2eInstant_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS
#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif
typedef struct _AuthenticationReq AuthenticationReq;
typedef struct _AuthenticationRsp AuthenticationRsp;
typedef struct _LogoutReq LogoutReq;
typedef struct _LogoutRsp LogoutRsp;
typedef struct _MemberRecd MemberRecd;
typedef struct _NotifyFriendsRsp NotifyFriendsRsp;
typedef struct _FriendListRsp FriendListRsp;
typedef struct _RegisterReq RegisterReq;
typedef struct _RegisterRsp RegisterRsp;
typedef struct _AddFriendReq AddFriendReq;
typedef struct _FriendStatusRsp FriendStatusRsp;
typedef struct _AcceptanceFriendReq AcceptanceFriendReq;
typedef struct _DeleteFriendReq DeleteFriendReq;
typedef struct _DeleteFriendRsp DeleteFriendRsp;
typedef struct _MsgReqRsp MsgReqRsp;
typedef struct _UnregisterReq UnregisterReq;
typedef struct _UnregisterRsp UnregisterRsp;

/* --- enums --- */

/* --- messages --- */

struct _AuthenticationReq {
    ProtobufCMessage base;
    char *user_name;
    char *password;
};
#define AUTHENTICATION_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&authentication_req__descriptor) \
    , NULL, NULL }

struct _AuthenticationRsp {
    ProtobufCMessage base;
    /*
     *0:success 1:fail
     */
    int32_t auth;
};
#define AUTHENTICATION_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&authentication_rsp__descriptor) \
    , 0 }

struct _LogoutReq {
    ProtobufCMessage base;
    char *user_name;
};
#define LOGOUT_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&logout_req__descriptor) \
    , NULL }

struct _LogoutRsp {
    ProtobufCMessage base;
    /*
     * result = 0, if the update query succeeds.
     * result =-1, if the update query fails.
     */
    int32_t result;
};
#define LOGOUT_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&logout_rsp__descriptor) \
    , 0 }

struct _MemberRecd {
    ProtobufCMessage base;
    char *friend_name;
    /*
     * status = 1, On-Line
     * status = 0, Off-Line
     */
    int32_t status;
};
#define MEMBER_RECD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&member_recd__descriptor) \
    , NULL, 0 }

/*
 * After a user logs in or logs out, a message is 
 * sent to all the contacts in his/her friends list
 */
struct _NotifyFriendsRsp {
    ProtobufCMessage base;
    MemberRecd *user;
};
#define NOTIFY_FRIENDS_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&notify_friends_rsp__descriptor) \
    , NULL }

struct _FriendListRsp {
    ProtobufCMessage base;
    size_t n_friend_list;
    MemberRecd **friend_list;
};
#define FRIEND_LIST_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_list_rsp__descriptor) \
    , 0,NULL }

struct _RegisterReq {
    ProtobufCMessage base;
    char *user_name;
    char *password;
    char *s_add1;
    char *s_add2;
    char *s_phone1;
    char *s_phone2;
    char *s_email1;
    char *s_email2;
    char *s_pin;
    char *s_city;
    char *s_professtion;
};
#define REGISTER_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&register_req__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }

struct _RegisterRsp {
    ProtobufCMessage base;
    /*
     * result = 1, if the given login name already exists.
     * result = 0, if the user's registration succeeds.
     * result =-1, if the update query fails.
     */
    int32_t result;
};
#define REGISTER_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&register_rsp__descriptor) \
    , 0 }

struct _AddFriendReq {
    ProtobufCMessage base;
    char *user_name;
    char *friend_name;
};
#define ADD_FRIEND_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_friend_req__descriptor) \
    , NULL, NULL }

struct _FriendStatusRsp {
    ProtobufCMessage base;
    char *user_name;
    char *friend_name;
    /*
     * status = 0, if a friend is successfully added to the friend table.
     * status = 1, if the friend's name doesn't exists in the member table.
     * status = 2, if the friend already exists in the friend table of the user.
     * status = 3, if the friend's member ID is same as the user's member ID, that is,
     *  the user is trying to add himself as his friend!
     * status =-1, if the friend cannot be added.
     */
    int32_t status;
};
#define FRIEND_STATUS_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_status_rsp__descriptor) \
    , NULL, NULL, 0 }

struct _AcceptanceFriendReq {
    ProtobufCMessage base;
    char *user_name;
    char *friend_name;
    /*
     *1:accepted 0:declined
     */
    int32_t status;
};
#define ACCEPTANCE_FRIEND_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&acceptance_friend_req__descriptor) \
    , NULL, NULL, 0 }

struct _DeleteFriendReq {
    ProtobufCMessage base;
    char *user_name;
    char *friend_name;
};
#define DELETE_FRIEND_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_friend_req__descriptor) \
    , NULL, NULL }

struct _DeleteFriendRsp {
    ProtobufCMessage base;
    char *user_name;
    char *friend_name;
    /*
     * status = 0, if the friend is successfully deleted from the friend table.
     * status = 1, if the delete query fails.
     * status = 2, if friend's login-name does not exists in member table.
     * status =-1, if the friend cannot be deleted.
     */
    int32_t status;
};
#define DELETE_FRIEND_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_friend_rsp__descriptor) \
    , NULL, NULL, 0 }

struct _MsgReqRsp {
    ProtobufCMessage base;
    char *target;
    char *source;
    char *text;
};
#define MSG_REQ_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_req_rsp__descriptor) \
    , NULL, NULL, NULL }

struct _UnregisterReq {
    ProtobufCMessage base;
    char *user_name;
};
#define UNREGISTER_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&unregister_req__descriptor) \
    , NULL }

struct _UnregisterRsp {
    ProtobufCMessage base;
    /*
     * unreg = 0, if deletion of user record succeeds.
     * unreg =-1, if unregistration fails.
     */
    int32_t unreg;
};
#define UNREGISTER_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&unregister_rsp__descriptor) \
    , 0 }

/* AuthenticationReq methods */
void authentication_req__init (AuthenticationReq * message);
size_t authentication_req__get_packed_size (const AuthenticationReq * message);
size_t authentication_req__pack (const AuthenticationReq * message, uint8_t * out);
size_t authentication_req__pack_to_buffer (const AuthenticationReq * message, ProtobufCBuffer * buffer);
AuthenticationReq *authentication_req__unpack (ProtobufCAllocator * allocator, size_t len, const uint8_t * data);
void authentication_req__free_unpacked (AuthenticationReq * message, ProtobufCAllocator * allocator);
/* AuthenticationRsp methods */
void authentication_rsp__init (AuthenticationRsp * message);
size_t authentication_rsp__get_packed_size (const AuthenticationRsp * message);
size_t authentication_rsp__pack (const AuthenticationRsp * message, uint8_t * out);
size_t authentication_rsp__pack_to_buffer (const AuthenticationRsp * message, ProtobufCBuffer * buffer);
AuthenticationRsp *authentication_rsp__unpack (ProtobufCAllocator * allocator, size_t len, const uint8_t * data);
void authentication_rsp__free_unpacked (AuthenticationRsp * message, ProtobufCAllocator * allocator);
/* LogoutReq methods */
void logout_req__init (LogoutReq * message);
size_t logout_req__get_packed_size (const LogoutReq * message);
size_t logout_req__pack (const LogoutReq * message, uint8_t * out);
size_t logout_req__pack_to_buffer (const LogoutReq * message, ProtobufCBuffer * buffer);
LogoutReq *logout_req__unpack (ProtobufCAllocator * allocator, size_t len, const uint8_t * data);
void logout_req__free_unpacked (LogoutReq * message, ProtobufCAllocator * allocator);
/* LogoutRsp methods */
void logout_rsp__init (LogoutRsp * message);
size_t logout_rsp__get_packed_size (const LogoutRsp * message);
size_t logout_rsp__pack (const LogoutRsp * message, uint8_t * out);
size_t logout_rsp__pack_to_buffer (const LogoutRsp * message, ProtobufCBuffer * buffer);
LogoutRsp *logout_rsp__unpack (ProtobufCAllocator * allocator, size_t len, const uint8_t * data);
void logout_rsp__free_unpacked (LogoutRsp * message, ProtobufCAllocator * allocator);
/* MemberRecd methods */
void member_recd__init (MemberRecd * message);
size_t member_recd__get_packed_size (const MemberRecd * message);
size_t member_recd__pack (const MemberRecd * message, uint8_t * out);
size_t member_recd__pack_to_buffer (const MemberRecd * message, ProtobufCBuffer * buffer);
MemberRecd *member_recd__unpack (ProtobufCAllocator * allocator, size_t len, const uint8_t * data);
void member_recd__free_unpacked (MemberRecd * message, ProtobufCAllocator * allocator);
/* NotifyFriendsRsp methods */
void notify_friends_rsp__init (NotifyFriendsRsp * message);
size_t notify_friends_rsp__get_packed_size (const NotifyFriendsRsp * message);
size_t notify_friends_rsp__pack (const NotifyFriendsRsp * message, uint8_t * out);
size_t notify_friends_rsp__pack_to_buffer (const NotifyFriendsRsp * message, ProtobufCBuffer * buffer);
NotifyFriendsRsp *notify_friends_rsp__unpack (ProtobufCAllocator * allocator, size_t len, const uint8_t * data);
void notify_friends_rsp__free_unpacked (NotifyFriendsRsp * message, ProtobufCAllocator * allocator);
/* FriendListRsp methods */
void friend_list_rsp__init (FriendListRsp * message);
size_t friend_list_rsp__get_packed_size (const FriendListRsp * message);
size_t friend_list_rsp__pack (const FriendListRsp * message, uint8_t * out);
size_t friend_list_rsp__pack_to_buffer (const FriendListRsp * message, ProtobufCBuffer * buffer);
FriendListRsp *friend_list_rsp__unpack (ProtobufCAllocator * allocator, size_t len, const uint8_t * data);
void friend_list_rsp__free_unpacked (FriendListRsp * message, ProtobufCAllocator * allocator);
/* RegisterReq methods */
void register_req__init (RegisterReq * message);
size_t register_req__get_packed_size (const RegisterReq * message);
size_t register_req__pack (const RegisterReq * message, uint8_t * out);
size_t register_req__pack_to_buffer (const RegisterReq * message, ProtobufCBuffer * buffer);
RegisterReq *register_req__unpack (ProtobufCAllocator * allocator, size_t len, const uint8_t * data);
void register_req__free_unpacked (RegisterReq * message, ProtobufCAllocator * allocator);
/* RegisterRsp methods */
void register_rsp__init (RegisterRsp * message);
size_t register_rsp__get_packed_size (const RegisterRsp * message);
size_t register_rsp__pack (const RegisterRsp * message, uint8_t * out);
size_t register_rsp__pack_to_buffer (const RegisterRsp * message, ProtobufCBuffer * buffer);
RegisterRsp *register_rsp__unpack (ProtobufCAllocator * allocator, size_t len, const uint8_t * data);
void register_rsp__free_unpacked (RegisterRsp * message, ProtobufCAllocator * allocator);
/* AddFriendReq methods */
void add_friend_req__init (AddFriendReq * message);
size_t add_friend_req__get_packed_size (const AddFriendReq * message);
size_t add_friend_req__pack (const AddFriendReq * message, uint8_t * out);
size_t add_friend_req__pack_to_buffer (const AddFriendReq * message, ProtobufCBuffer * buffer);
AddFriendReq *add_friend_req__unpack (ProtobufCAllocator * allocator, size_t len, const uint8_t * data);
void add_friend_req__free_unpacked (AddFriendReq * message, ProtobufCAllocator * allocator);
/* FriendStatusRsp methods */
void friend_status_rsp__init (FriendStatusRsp * message);
size_t friend_status_rsp__get_packed_size (const FriendStatusRsp * message);
size_t friend_status_rsp__pack (const FriendStatusRsp * message, uint8_t * out);
size_t friend_status_rsp__pack_to_buffer (const FriendStatusRsp * message, ProtobufCBuffer * buffer);
FriendStatusRsp *friend_status_rsp__unpack (ProtobufCAllocator * allocator, size_t len, const uint8_t * data);
void friend_status_rsp__free_unpacked (FriendStatusRsp * message, ProtobufCAllocator * allocator);
/* AcceptanceFriendReq methods */
void acceptance_friend_req__init (AcceptanceFriendReq * message);
size_t acceptance_friend_req__get_packed_size (const AcceptanceFriendReq * message);
size_t acceptance_friend_req__pack (const AcceptanceFriendReq * message, uint8_t * out);
size_t acceptance_friend_req__pack_to_buffer (const AcceptanceFriendReq * message, ProtobufCBuffer * buffer);
AcceptanceFriendReq *acceptance_friend_req__unpack (ProtobufCAllocator * allocator, size_t len, const uint8_t * data);
void acceptance_friend_req__free_unpacked (AcceptanceFriendReq * message, ProtobufCAllocator * allocator);
/* DeleteFriendReq methods */
void delete_friend_req__init (DeleteFriendReq * message);
size_t delete_friend_req__get_packed_size (const DeleteFriendReq * message);
size_t delete_friend_req__pack (const DeleteFriendReq * message, uint8_t * out);
size_t delete_friend_req__pack_to_buffer (const DeleteFriendReq * message, ProtobufCBuffer * buffer);
DeleteFriendReq *delete_friend_req__unpack (ProtobufCAllocator * allocator, size_t len, const uint8_t * data);
void delete_friend_req__free_unpacked (DeleteFriendReq * message, ProtobufCAllocator * allocator);
/* DeleteFriendRsp methods */
void delete_friend_rsp__init (DeleteFriendRsp * message);
size_t delete_friend_rsp__get_packed_size (const DeleteFriendRsp * message);
size_t delete_friend_rsp__pack (const DeleteFriendRsp * message, uint8_t * out);
size_t delete_friend_rsp__pack_to_buffer (const DeleteFriendRsp * message, ProtobufCBuffer * buffer);
DeleteFriendRsp *delete_friend_rsp__unpack (ProtobufCAllocator * allocator, size_t len, const uint8_t * data);
void delete_friend_rsp__free_unpacked (DeleteFriendRsp * message, ProtobufCAllocator * allocator);
/* MsgReqRsp methods */
void msg_req_rsp__init (MsgReqRsp * message);
size_t msg_req_rsp__get_packed_size (const MsgReqRsp * message);
size_t msg_req_rsp__pack (const MsgReqRsp * message, uint8_t * out);
size_t msg_req_rsp__pack_to_buffer (const MsgReqRsp * message, ProtobufCBuffer * buffer);
MsgReqRsp *msg_req_rsp__unpack (ProtobufCAllocator * allocator, size_t len, const uint8_t * data);
void msg_req_rsp__free_unpacked (MsgReqRsp * message, ProtobufCAllocator * allocator);
/* UnregisterReq methods */
void unregister_req__init (UnregisterReq * message);
size_t unregister_req__get_packed_size (const UnregisterReq * message);
size_t unregister_req__pack (const UnregisterReq * message, uint8_t * out);
size_t unregister_req__pack_to_buffer (const UnregisterReq * message, ProtobufCBuffer * buffer);
UnregisterReq *unregister_req__unpack (ProtobufCAllocator * allocator, size_t len, const uint8_t * data);
void unregister_req__free_unpacked (UnregisterReq * message, ProtobufCAllocator * allocator);
/* UnregisterRsp methods */
void unregister_rsp__init (UnregisterRsp * message);
size_t unregister_rsp__get_packed_size (const UnregisterRsp * message);
size_t unregister_rsp__pack (const UnregisterRsp * message, uint8_t * out);
size_t unregister_rsp__pack_to_buffer (const UnregisterRsp * message, ProtobufCBuffer * buffer);
UnregisterRsp *unregister_rsp__unpack (ProtobufCAllocator * allocator, size_t len, const uint8_t * data);
void unregister_rsp__free_unpacked (UnregisterRsp * message, ProtobufCAllocator * allocator);
/* --- per-message closures --- */

typedef void (*AuthenticationReq_Closure)
 (const AuthenticationReq * message, void *closure_data);
typedef void (*AuthenticationRsp_Closure)
 (const AuthenticationRsp * message, void *closure_data);
typedef void (*LogoutReq_Closure)
 (const LogoutReq * message, void *closure_data);
typedef void (*LogoutRsp_Closure)
 (const LogoutRsp * message, void *closure_data);
typedef void (*MemberRecd_Closure)
 (const MemberRecd * message, void *closure_data);
typedef void (*NotifyFriendsRsp_Closure)
 (const NotifyFriendsRsp * message, void *closure_data);
typedef void (*FriendListRsp_Closure)
 (const FriendListRsp * message, void *closure_data);
typedef void (*RegisterReq_Closure)
 (const RegisterReq * message, void *closure_data);
typedef void (*RegisterRsp_Closure)
 (const RegisterRsp * message, void *closure_data);
typedef void (*AddFriendReq_Closure)
 (const AddFriendReq * message, void *closure_data);
typedef void (*FriendStatusRsp_Closure)
 (const FriendStatusRsp * message, void *closure_data);
typedef void (*AcceptanceFriendReq_Closure)
 (const AcceptanceFriendReq * message, void *closure_data);
typedef void (*DeleteFriendReq_Closure)
 (const DeleteFriendReq * message, void *closure_data);
typedef void (*DeleteFriendRsp_Closure)
 (const DeleteFriendRsp * message, void *closure_data);
typedef void (*MsgReqRsp_Closure)
 (const MsgReqRsp * message, void *closure_data);
typedef void (*UnregisterReq_Closure)
 (const UnregisterReq * message, void *closure_data);
typedef void (*UnregisterRsp_Closure)
 (const UnregisterRsp * message, void *closure_data);

/* --- services --- */

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor authentication_req__descriptor;
extern const ProtobufCMessageDescriptor authentication_rsp__descriptor;
extern const ProtobufCMessageDescriptor logout_req__descriptor;
extern const ProtobufCMessageDescriptor logout_rsp__descriptor;
extern const ProtobufCMessageDescriptor member_recd__descriptor;
extern const ProtobufCMessageDescriptor notify_friends_rsp__descriptor;
extern const ProtobufCMessageDescriptor friend_list_rsp__descriptor;
extern const ProtobufCMessageDescriptor register_req__descriptor;
extern const ProtobufCMessageDescriptor register_rsp__descriptor;
extern const ProtobufCMessageDescriptor add_friend_req__descriptor;
extern const ProtobufCMessageDescriptor friend_status_rsp__descriptor;
extern const ProtobufCMessageDescriptor acceptance_friend_req__descriptor;
extern const ProtobufCMessageDescriptor delete_friend_req__descriptor;
extern const ProtobufCMessageDescriptor delete_friend_rsp__descriptor;
extern const ProtobufCMessageDescriptor msg_req_rsp__descriptor;
extern const ProtobufCMessageDescriptor unregister_req__descriptor;
extern const ProtobufCMessageDescriptor unregister_rsp__descriptor;

PROTOBUF_C__END_DECLS
#endif                          /* PROTOBUF_C_IM_2eInstant_2eproto__INCLUDED */
