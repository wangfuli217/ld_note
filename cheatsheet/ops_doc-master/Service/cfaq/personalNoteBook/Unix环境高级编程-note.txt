
《UNIX环境高级编程》第3版，网络编程 必读圣经。

1.死锁产生的场景：1）同一个类里面的加锁函数A调用加锁函数B，导致重复加锁--死锁，这是线程自身导致的； 2）多个锁相互等待，线程A，线程B相互等待对方释放锁，可以通过控制加锁的顺序一致性来避免死锁，如果这种一致性无法控制，那就用trylock(),获取失败就释放已经占有的锁，起个定时器再尝试。
2.多线程锁设计：如果锁粒度太粗，并发性不够，代码简单；锁粒度太细，代码复杂，并发性好，不过锁本身也会带来开销。 应该寻求平衡。
3.pthread_mutex_timedlock( mutex*,timespec*); //阻塞超过一定时间，返回，不会永久阻塞，传入的是绝对时间；
4.条件变量：一种多线程同步机制，与互斥量一起使用（条件本身由互斥量保护），支持跨进程（设置属性），举例：消息队列+条件变量 == 生产消费模型；
                  如果有多个线程在wait, 可以唤醒1个或所有，取决于使用的是signal还是broadcast函数；
                  记住：当wait()函数返回的时候，仍然要重新判断条件，因为有可能多个线程同时被唤醒。

5.自旋锁： 用于非抢占式内核中，事实上有些互斥量的实现在试图获取lock的时候会自旋一段时间才进入休眠，这使得自旋锁只在少数特定的情况下才使用。

6.不要让加锁的函数进入休眠状态，因为这样会浪费CPU资源。 记得让线程在进入休眠之前释放锁。有什么办法可以测量如下情况导致的CPU浪费：有锁的线程休眠了，能执行的线程却在等待锁，结果CPU空闲了；

7.屏障barrier: 用于协调多线程并行工作，跑的快的那些线程必须等待跑的最慢的那一个线程，然后大家继续往下跑。    pthread_join 就是一种屏障；
8.单机上由于Socket通信的性能可以媲美消息队列，所以现在的系统基本上不再使用消息队列了（linux提供的系统调用）。进程内的线程之间可以使用消息队列通信，但这个消息队列不是通过linux的系统调用创建的，而是一个msgQueue数据结构，以条件变量的方式来同步。

9.存储映射IO(mmap)： 把文件 磁盘地址映射到进程虚拟地址，可以不用read/write. 而是直接读写内存来操作文件，进程的地址空间除了堆，栈，还有个内存映射区(给mmap使用);
    如果要追加文件内容，在mmap时必须预先算好文件长度，否则写入内存的东西不会最终体现在文件中。如果是MAP_SHARED(支持跨进程共享), 内存修改后不会立即写回到文件中，内核会决定何时回写，如果要立即回写可以调用msync()。
    解除映射：直接调用 munmap() 或者进程终止，但是解除映射并不会把内容立即回写到文件，munmap对于MAP_SHARED，内核后面会负责回写，对于MAP_PRIVATE会丢弃修改。另外，关闭文件描述符并不会解除映射。
    所有的内存映射函数要求地址必须与页边界对齐，sysconf ()获取页长度。
    相关的信号：SIGSEGV(访问当前进程没权限的内存，比如写一块只读内存),   SIGBUS(访问失效的内存，比如访问文件截断后的内存)
    性能比较：mmap映射到虚拟地址后，首次操作这块地址时会触发缺页中断分配物理内存，而write是从用户缓存拷贝到内核缓存，不会导致缺页中断，但需要多1次拷贝，两者的实际性能需要测试才知道。

10.异步IO：非阻塞，如果IO就绪，内核发信号通知，在信号处理程序中响应IO，缺点：信号数量有线，限制了描述符数量。
    异步IO软件比较复杂，更好的方法是：多线程 + IO Multiplex : 一个线程专门做IO线程，其它线程做work线程，IO线程收到数据后传递给其它线程处理。

11.IO多路复用(select, pselect, poll, epoll)： 单线程也可以同时监控多个fd. 兼顾了效率和设计复杂度。如果fd=NULL还可以用来做高精度定时器。
     文件描述符fd自身的阻塞属性 不影响这3个函数的行为，这3个函数只看IO状态，举例：如果fd没有数据可读，即使fd本身设置为非阻塞，select也会一直阻塞直到超时。

12.对每个进程，都独立的维护fid=0/1/2的文件描述符，启动终端时init进程会把这3个fid关联到终端，也可以通过ioctrl把它们重定向到文件；
13.线程属性：如果设置线程栈空间的guardsize,当栈溢出后操作系统会发信号通知线程。

14.IO库函数区分字符文件与二进制文件，但是内核系统调用并不区分；
    以O_APPEND方式打开文件保证了写操作原子性，可以保证多进程并发写不会出错。
    当一个进程正常终止时，IO流会被刷新，所有打开的IO流都会被关闭，那如果出现fatal呢？log会丢失。
    fputs/fgets: 每次一行，以换行符终止， fputc/fgetc: 每次1个字符; 这两个函数用于字符文件；printf/scanf:格式化IO；
    fread/fwrite: 用于二进制文件，读写struct/对象;
    read/write: 用于网络socket IO,读写字节流，fputs/fread属于本地文件标准IO，内部也是调用read/write;

15.在shell上执行的后台进程组可以有多组，前台只能有一组，每个shell有一个共同的控制进程（会话进程），如果session断开则所有进程都会终止；
16.execv(): 这个函数加载新的可执行程序来执行，并传递参数给程序的main()函数。

函数：
1.clock_gettime ();
2.pthread_cond_wait  
 2.pthread_cond_timedwait (); 
3.pthread_cond_signal (): 至少能唤醒1个等待的线程；唤醒其实就是发信号。
4.pthread_cond_broadcast ():唤醒所有等待的线程，这不会导致竞争吗？
5.pthread_barrier_init (barrier, attr,count) ,  count: 在允许所有线程继续运行之前，至少到达屏障的线程数目。
pthread_barrier_wait (barrier): 当前线程已经完成了，等待其他线程赶上来。 如果count=3，那前2个跑的快的线程就必须等待，第3个线程运行到wait的时候就会唤醒那2个线程，这时3个线程都可以继续运行。
 6.void *mmap( void *addr, size_t len, int prot, int flag, int fd, off_t off); 在映射前必须先打开文件；MAP_SHARED/MAP_PRIVATE;
   int mprotect( void *addr, size_t len, int prot); 修改内存权限, addr 必须是系统页长的整数倍。
   int msync( void *addr, size_t len, int flags); 对于MAP_SHARED, 会把数据立即从共享内存映射区同步到磁盘文件（以页为单位，哪怕只修改1个字节），类似于fsync，但对于MAP_PRIVATE映射,这个函数不会立即同步，由内核决定？ flags=MS_ASYNC(同步磁盘不会阻塞线程) MS_SYNC(阻塞线程直到写完成);
7.aio_read(),aio_write(); 需要用户提供缓冲区。
 8.setvbuf(FILE*):  设置IO流的缓冲区类型：全缓冲，行缓冲，不带缓冲；setvbuf(), 终端设备一般是行缓冲；
FILE* = fopen(filename); fflush(FILE*);fseek,fsetpos, rewind, fclose();
FILE* = fdopen(fd);对于socket文件，只能先通过open/socket/socketpair/accept得到fd,然后再通过fdopen转为FILE*;不能直接通过fopen打开socket;
int fid = fileno(FILE* stream); 返回流对应的fd文件描述符。每个流都对应了一个文件，标准流stdin/stdout/stderr默认关联终端但可以重定向到文件；







 
 
 
