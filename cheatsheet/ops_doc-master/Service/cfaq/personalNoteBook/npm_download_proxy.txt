Nodejs (include npm) 安装: https://nodejs.org/en/   , nodejs安装包里面包含了npm, npm是一个包管理工具, 
安装完后在cmd查看版本 node -v (v8.11.3),  npm  -v  (5.6.0)
windows下的.npmrc文件位置： C:\Users\lianzeng\.npmrc

npm脚本package.json的详细介绍：  http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html  

npm下载package设置代理和镜像：
npm config set proxy http://10.xx.1.10:8080  公司里面要设置代理
npm config set https-proxy http://10.xx.1.10:8080  注意这里是https-proxy, 不是 https_proxy
npm config get proxy  查看代理设置结果
npm config set registry https://registry.npm.taobao.org   设置npm镜像为taobao
npm config get registry  // 查看镜像
npm install  开始下载  package.json 文件指定的依赖包（类似maven的pom.xml文件）,执行成功后，显示"added 31 packages, removed 75 packages and updated 194 packages in 412.169s"
npm run build ; 编译项目，会产生很多.js文件，这些.js就是要在浏览器运行的，执行成功后，显示"compiled successfully"
npm run start 在本地启动http server，但是失败了,没有任何反应，反而 执行 roadhog dev（在package.json所在目录下） 可以成功启动local server(http://localhost:8000/),启动过程中会显示staring server...

生产环境： 浏览器访问首页时，服务端的Nginx会把json/html静态页面返回并把Tomcat server ip 告诉browser,  后续的所有 http request会发给 tomcat server;
开发环境： 本地的 roadhog 是一个server mock,  会代替nginx 返回首页静态页面; 

解释：npm run xxx 执行的动作实际上是package.json文件里面scripts这个字段中定义的动作, npm run 显示所有可以执行的命令

npm run start === roadhog dev 
npm run test === roadhog test
npm config rm proxy  取消代理
npm config rm https-proxy 取消代理
npm i roadhog -g 安装roadhog，安装完后用roadhog -v查看版本，要在本地启动服务必须安装roadhog;




D:\IoT\Code\coldchain-zhangxianwei-58bbd9d4\coldchain\client>npm -v
5.6.0

D:\IoT\Code\coldchain-zhangxianwei-58bbd9d4\coldchain\client>node -v
v8.11.3

D:\IoT\Code\coldchain-zhangxianwei-58bbd9d4\coldchain\client>npm config get proxy  
http://10.xx.x.10:8080/

D:\IoT\Code\coldchain-zhangxianwei-58bbd9d4\coldchain\client>npm config get registry
https://registry.npm.taobao.org/

D:\IoT\Code\coldchain-zhangxianwei-58bbd9d4\coldchain\client>npm install

> websocket@1.0.26 install D:\IoT\Code\coldchain-zhangxianwei-58bbd9d4\coldchain
\client\node_modules\websocket
> (node-gyp rebuild 2> builderror.log) || (exit 0)


D:\IoT\Code\coldchain-zhangxianwei-58bbd9d4\coldchain\client\node_modules\websoc
ket>if not defined npm_config_node_gyp (node "D:\Program Files\nodejs\node_modul
es\npm\node_modules\npm-lifecycle\node-gyp-bin\\..\..\node_modules\node-gyp\bin\
node-gyp.js" rebuild )  else (node "D:\Program Files\nodejs\node_modules\npm\nod
e_modules\node-gyp\bin\node-gyp.js" rebuild )

> puppeteer@1.4.0 install D:\IoT\Code\coldchain-zhangxianwei-58bbd9d4\coldchain\
client\node_modules\puppeteer
> node install.js

Downloading Chromium r555668 - 123.3 Mb [====================] 100% 0.0s
Chromium downloaded to D:\IoT\Code\coldchain-zhangxianwei-58bbd9d4\coldchain\cli
ent\node_modules\puppeteer\.local-chromium\win64-555668


added 31 packages, removed 75 packages and updated 194 packages in 412.169s   命令npm install执行成功

D:\IoT\Code\coldchain-zhangxianwei-58bbd9d4\coldchain\client>npm run build

> ant-design-pro@2.0.0-beta.1 build D:\IoT\Code\coldchain-zhangxianwei-58bbd9d4\
coldchain\client
> cross-env ESLINT=none roadhog build

Build completed in 142.374s

Compiled successfully.   命令npm run build执行成功

File sizes after gzip:

  762.78 KB  dist\0.b7b47b86.async.js
  724.28 KB  dist\2.e43646b8.async.js
  721.58 KB  dist\1.e1d6c604.async.js
  158.46 KB  dist\index.92a54c81.js
  117.7 KB   dist\4.f21e8558.async.js
  100.08 KB  dist\3.f9a3d8ba.async.js
  97.08 KB   dist\5.bb4935f7.async.js
  45.13 KB   dist\index.b6e0121b.css
  31.39 KB   dist\6.def981b0.async.js
  2.26 KB    dist\7.2fe06a4c.async.js
  63 B       dist\8.6454bc6c.async.js
