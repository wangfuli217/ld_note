java IDE: IntelliJ IDEA（community is free）, Eclipse Oxygen(最新版本，1台PC可以同时安装多个版本Eclipse); 这些IDE本身是用java写的，所以安装这些IDE之前要先安装JDK/JRE; Eclipse比Intelli在解决pom.xml依赖上更智能，会自动下载依赖包；
用家里网络安装eclipse 插件速度特别快，记住：千万不要设置代理；
http://study.163.com/course/courseMain.htm?courseId=1559013  网易课堂JAVA开发全套精编课程，非常好；
https://docs.oracle.com/javase/8/ 官方资料，可惜没有搜索的API文档；
http://afanihao.cn/java/   JAVAFX 入门和高级视频教程， GUI 桌面开发，javaFX入门：http://study.163.com/course/introduction/1004985008.htm ， 高级： http://study.163.com/course/introduction/1005241020.htm  
http://download.oracle.com/technetwork/java/javase/6/docs/zh/api/index.html   java6 API 中文文档
https://www.jetbrains.com/help/idea/migrating-from-eclipse-to-intellij-idea.html  比较了Eclipse和IntellijIDEA的差异
http://www.gamefromscratch.com/post/2011/11/15/Telling-Eclipse-to-use-the-JDK-instead-of-JRE.aspx 设置Eclipse使用JDK，而不是JRE，因为JDK包含编译器；
https://www.youtube.com/watch?v=OaizlZjXzZ0  Installing JavaFX in Eclipse Oxygen, 如果要开发GUI桌面程序，需要在eclipse中安装javaFx(install new software-----e(fx)clipse IDE);
https://gluonhq.com/products/scene-builder/  Java GUI 桌面软件开发， SceneBuilder+JavaFX+FXML+CSS;   Scene Builder work with JavaFX,is free and open source, 需要单独下载安装SceneBuilder,然后用它来可视化编辑.fxml文件，在SceneBuilder中可以图形化拖拽方式开发界面并关联回调函数(回调函数需要在代码中实现)，然后结果会自动保存到.fxml中；
JAVA GUI开发也可以用SWT/JFace, 尽量用JFace, 搞不定的时候用SWT，他们都是RCP的基础<Eclipse RCP应用系统开发方法与实战>

Eclipse Versions: Juno (4.2), Kepler (4.3),Luna (4.4), Mars (4.5) , Neon (4.6), Oxygen (4.7), Photon (4.8)
M2Eclipse(m2e)插件用来帮助eclipse管理maven project,在market安装；

JAVA语言：《HeadFirst Java》适合小白，《JAVA核心技术：卷1基础知识》书中有较多地方比较了C++和JAVA，传统的《Spring实战》，微服务的《SpringBoot实战》，《EffectiveJava》2017版，《JAVA并发编程实战》，《JAVA性能权威指南》《精通Spring4.X》


JRE： Java Runtime Environment,java运行时环境，包含了java虚拟机，java基础类库,如果你需要运行java程序(.jar)，只需安装JRE就可以了。
JDK：Java Development Kit,   JDK包含了JRE，同时还包含了编译器javac，调试和分析工具：jconsole，jvisualvm,javac,jdb,jmap,jstack等工具软件,如果你需要编写java程序，需要安装JDK，不同的平台有不同的JDK;
JIT运行时编译器: 运行时把字节码编译为机器码，在JVM中，对于热点代码会编译为二进制，其它的是解释执行；
JUnit: eclipse自带了JUnit, 新建立JUnit test case时，会自动导入JUnit library并添加到buildpath;
自动完成快捷键设置: Window Menu > Preferences > General > Keys----Content assist: Binding (shift+Space) to set hot key (shift + Space) for autocomplete 
Java中的常见设计模式： Factory, Proxy, Delegate, Singleton, Strategy, Prototype, Template;
工具： Maven 项目管理， Jenkins持续集成， Sonar代码质量管理，Git版本管理
JAVA性能监控和调试工具： JMC(java mission control),  JFR(java flight recorder)

JUnit框架是采用Composite设计模式（文件夹模式）：TestCase-->TestSuite--->大的TestSuite;
Java语言比C++的明显优势是：1)可以把一些功能放在XML文件中，把逻辑从代码转移到数据，简化产品代码；2)有GC机制，可以随时新建对象，不用释放内存；


	1. 学习编程语言最好的平台是W3CSchool的APP,体验最好的APP，从中学会了java/javascript/html/css/python/sql;
	2. java源文件名和代码中的类名必须一致（不然编译出错），后缀是.java, 编译后是.class文件（字节码）， 把多个class文件打包压缩就得到.jar 文件(lib); 运行.jar程序:    java -jar xxx.jar ; 
	3. linux下安装jdk, jdk1.8也叫java8, linux有2种方式安装jdk: openjdk 和 oracle jdk: sudo apt-get install openjdk-8-jdk  https://www.digitalocean.com/community/tutorials/how-to-install-java-with-apt-get-on-ubuntu-16-04
	4. 在Maven里面，artifacts是最终的可执行在JVM中运行的程序；
	5. 文件MANIFEST.INF: 包含信息 Class-path(class文件搜索路径 ), Main-Class(入口类，有了这个就可以通过java -jar x.jar运行)，JAR压缩包中一定会包含这个文件，这个文件可以通过API来解析；
	6. .class文件是字节流，必须加载到JVM中才能成为类，才能创建对象; 每个操作码都是1个字节，所以叫字节码；
	7. JAVA 基本类型： 无符号的是char, boolean,  有符号的是 Byte, short, int, long ,  浮点: float , double,  
	8. java 里的对象其实是个引用/指针，可以赋值为null;所有类的根都是Object; Object a = b; 其实a,b是指向同样的内存;
	9. 拷贝：默认是浅拷贝的(比如赋值)，如果要实现彻底的深拷贝，需要所有父类和成员属性类及相关类都实现深拷贝(implement Cloneable)，这个几乎很难实现
	10. 入口 main:  public static void main(String[] args)  且main()必须放在一个类里面， java里的任何代码都是在class里面的；
	11. 程序代码都是放在class里面的, Class一般 是public, 
	12. 基本数据类型: string , boolean, char, byte, short, int,long,  float, double
	13. 字符串: string, stringBuffer(线程安全), stringBuilder(非线程安全)；
	14. 流程控制：  if , else if, else;  for,   while,  do-while; switch-case, try--catch--finally;
	15. 继承: 一个派生类只能extends一个基类，但是可以 implements 多个 interface 类,  支持多态；关键字: extends + implements
	16. List 派生了三个类: Vector(线程安全),  ArrayList（非线程安全动态数组）内存连续,  LinkList (类似于C++的list)内存不连续；
	17. 固定数组: int[] arr = new int[10]; 数组属性arr.length ==10， 二维数组: int[][] num={{1,2},{3,4}}
	18. 循环: for(int a : arr)
	19. Integer 对象： 可用于容器，int 不行；
	20. 容器: 支持模板参数， Hashmap, HashSet, ArrayList, LinkList, LinkedHashSet,  方法: size()
	21. 容器算法类Collections: eg,sort()
	22. 迭代器: 每个容器 都有iterator() 方法， 遍历: while(it.hasNext()){item =  it.next(); } 其中next() 会先返回下一个元素，并自动更新指针;
	23. 类Class: 构造函数的名字和类名一致, 不存在析构函数,  常见fangf: getXXX, setXXX,  Java中使用new来创建对象；
	24. 匿名类（派生类）: 在new对象时建立并override基类方法， 临时效用，Computer cc = new Computer(){@Override public void fun(){}} 这点比C++方便很多，在测试Case中尤其有用；
	25. 对象比较： 直接用== 比较对象地址，如果要比较对象语义，要@Override hashcode() , equals();
	26. 函数参数：如果参数是对象，数组，字符串，都是传引用；
	27. static : 与对象实例无关的，修饰成员变量，成员方法，Math类都是static 方法；
	28. 常量: public static final int m = 1;  java中用final 代替const关键字
	29. 枚举: enum 
	30. 支持重载，类似C++
	31. 抽象与接口:  abstract class 抽象类不能定义实例;  interface 接口类只有函数声明，没有属性; 在Java中，所有的函数都是虚函数，都支持多态，java里面的abstract method=pure virtual,不能有实现;
	32. 文件名必须和类名一致
	33. import , 类似C++的include ;  import java.utils.*;
	34. Override： 覆盖基类函数
	35. 文件操作： 读文件 File f = new File(path); Scanner r = new Scanner(f); while(r.hasNext()){r.next()} ; r.close();  写文件：f = new Formatter(path); f.format("%s", str); f.close(); 
		1. f.exsits() 判断文件是否存在

	36. 垃圾回收： 尽管new 对象，不用在乎内存泄露；
	37. 多线程创建： 推荐class TFunc implements Runnable {@Override void run() ;}方法,  然后 t = new Thread(new TFunc()); t.start(); 支持优先级设置 setPriority
		1. 记住： thread.sleep() 必须放在try/catch；2.另一种方式创建线程：class mythread extends Thread{run()}, 

	38. 异常: try{} catch(Exception e) finally{}， 不论是否有异常，finally一定会执行，用于释放资源，如果函数体出现throw语句，则在函数声明处也要加上throw; 
		1.  如果不想捕获，则直接在函数后面加上 throws Exception;

	39. 注释: //   ,   /* */
	40. 交互输入： input = new Scanner(System.in); str = input.nextLine(); 
	41. 打印: System.out.print(str) 不换行； 换行打印用 System.out.println()，默认打印对象的地址，如果打印对象的内容，则需要实现 toString();
	42. java中每个成员方法和变量前面都要加权限public/protect/private;
	43. Java反射：在运行时根据字符串（classname, methodname）来创建对象并调用函数, 是SSH的核心，Java语言可以获取每个类的所有方法，然后通过反射来调用:method.invoke(obj, args);在RPC框架中广泛应用；
	44. 反射：java.lang.reflect, 最重要的是Class对象，这是JVM生成的对象，相关的类有：Method, Field, Constructor, Array, invoke, newInstance(), 在JDKAPI文档中查找class可以获得相关信息;
		1. 获取class对象的方式: obj.getClass(),  ArrayList.class; Class.forName("java.lang.String"); Long.Type; class.getSuperclass(); 
		2. 通过反射创建对象(无参构造函数): Class.newInstance();  Class.getConstructor(new Class[]{}).newInstance(new Object[]{});
		3. Class.getConstructor(Class<?>... parameterTypes).newInstance(Object...initargs);  举例:  myclass.getConstructor(new Class[]{String.class, int.class}).newInstance(new Object[]{"abc", 12});
		4. classType.getMethods();getMethod(String, Class<?>...parameterTypes) 获取公共方法; method.invoke(Object, Object...args); 获取私有方法： getDeclaredMethod();并且setAccessible(true),不建议这样使用因为破坏封装；
		5. classType.getFields() 返回public成员变量;  field.set(Object obj, Object value); field.get(Object);  getDeclaredFields() 返回public+private成员变量；
		6. 只要用到反射，先获得class对象，如果要获得父类的private方法必须通过getSuperClass;
		7. Class<?>类和Constructor类都有newInstance方法，前者适用于无参构造，后者适用于带参构造;

	45. Java动态代理: 在运行时生成一个新的代理类，分为JDK代理和CGLib, JDK代理类和目标类是兄弟关系，CGLib类是目标类的子类，动态代理是为了扩展目标类的行为，比如在调用方法前后打印LOG;
	46. JAVA注解： 可以自定义注解，@Target支持类，方法，参数添加注解，@Tetention表示在哪个阶段，源码，Class文件或者运行时；注解内部实现是利用了Java反射技术，SSH框架中有大量的注解；注解相比XML的好处是可以和代码一起维护，但是缺点是不像XML那么集中，各有特色；SSH常用注解: @Controller, @RequestMapping, @Transactional;
	47. 注解Annotation：@interface 定义一个注解，所有的自定义注解都默认实现了Interface Annotation; 可应用于包，方法，成员变量，局部变量，参数，加上注解是为了指定的APT工具或者框架来解析的，JVM是看不到这些注解信息的；标准的注解：@Override, @Deprecated,@SupressWarnings; 
	48. 元注解： 自定义注解时需要使用元注解来修饰，@Rentation(SOURCE/CLASS/RUNTIME)表示注解的有效阶段,  @Target({METHOD/TYPE/CONSTRUCTOR})表示注解的使用范围,是作用于函数还是类还是构造，@Inherit: 表示注解是否被子类继承
	49. 一个Annotation真正要起作用，必须结合反射机制，无反射无注解，最常用的方法是isAnnotationPresent, getAnnotations; 
	50. Java的网络库: Netty
	51. JAVA里面的final , immutable 比较:  比如对于final List la = new ArrayList(); 可以往list里面添加元素，但是不能对la赋值，不能让la指向别的内存，final就好比 const ptr ，而immutable则不能往list里面添加元素，好比const char*;指向1个常量； 
	52. IDEA生成.jar : File--ProjectStructure---Artifacts----add--jar(from modulers), then build-->build artifacts.   https://blog.csdn.net/eastgrand/article/details/11945309
	53. Java9开始支持Moduler，包括JDK也支持Moduler, 在.jar文件中有moduler-info信息，告诉了对外的接口，依赖的库；使用require来引用，.modulerpath存放路径;
	54. ASM: 字节码生成工具，CGLib底层就是用的ASM机制，字节码其实就是汇编指令，可以被JVM解释执行，可以用ASM生成字节码；
	55. 类加载机制：就是根据字节码生成java对象；
	56. AOP(aspect-oriented programming)：面向切面编程，切面就是横跨所有业务的公共部分，比如日志，安全，事物，性能度量；PointCut:就是一个被拦截的业务点，可以在前后插入新功能；Java有2种实现AOP的方式，Java动态代理和Cglib;相同点：都需要产生一个新类来实现代理功能，区别：JDK产生的代理类和原类是兄弟关系（所以要求原类有接口类），CGLib产生的则是子类关系；Spring框架中使用了这2种技术， refer to: 《码农翻身》-Spring本质系列AOP
	57. Java Bean: 根据xml文件里的beanDefinition(包含beanid,classname, propertyValues)的信息来动态生成对象(singleton , prototype)，注意是动态生成对象，不是动态生成类；核心就是利用了反射；
	58. 死锁检测: jstack 查看线程栈，定位相互之间的依赖关系,   jconsole可以图形化的工具定位
	59. java并发库： Executor框架(线程池)，BlockedQueue(ArrayBlockingQueue, PriorityBlockingQueue, SynchorousQueue), ConcurrentHashMap, CopyOnWriteArrayList, CountDownLatch, CyclicBarrier, Sempahore;
	60. 注解autowired: 用来修饰成员对象，这样可以自动创建实例并注入；
	61. 




自定义注解：
@Retention(SOURCE/CLASS/RUNTIME) 使用元注解来修饰注解
@Target(ElementType.METHOD) 这行意味着：用户只能用@Test修饰函数；
public @interface Test{  解释： 用@interface定义注解， interface定义接口
boolean ignore() default false;  一个类型为boolean的变量ignore; 赋值时用ignore=v; 获取时用ignore();即是变量又是函数；
}

反射：
Class<?> employClass = Class.forName("Employee");//根据字符串获取Class info;
Constructor<?> employConstrut = employClass.getConstructor(new Class[] {String.class, int.class});  //Employee(String name, int age);
Employee employ = (Employee)employConstrut.newInstance(new Object[] {"Hinton", 30});//如果构造函数带参数，必须通过constructor来构造，如果不带参数，则可以通过class直接构造
Method method = employClass.getMethod("setAge", new Class[] {int.class});//public void setAge(int age);
method.invoke(employ, 18);
System.out.println(employ);
Method method2 = employClass.getDeclaredMethod("work", new Class[] {});//private void work();
method2.setAccessible(true); //私有方法必须先修改为public才能invoke;
method2.invoke(employ, new Object[] {});
Field field = employClass.getDeclaredField("age");//private int age;
field.setAccessible(true);
field.set(employ, 60);
System.out.println(field.get(employ));

Object array= Array.newInstance(int.class, 2);//int[2]
int[] arr = (int[])array;  转换为标准类型数组
for(int v:arr)
Object array2 = Array.newInstance(int.class, new int[] {3,3});//int[3][3]
int[][] arr2 = (int[][])array2;

AoP: 动作注入
<bean id="tx" class = "Transaction" />
<aspect ref="tx">
 <pointcut  id="place-order" expression="excution(xxx)" />
<before pointcut-ref="place-order" method=begin />
<after pointcut-ref="place-order" method=commit />
</aspect>
</bean id>

JAVA规范:
1.如果用到了设计模式，则类名需要加上设计模式；


JUnit测试（如果是MarvenProject, 只需要在pom.xml中引入junit依赖就可以使用junit了）：
1)exception test: try--catch{return;}Assert.fail();
2)Assert.assertEqual(expected, actual); Assert.assertTrue(condition); Assert.assertNotNull(object); Assert.assertArrayEquals(expected, actuals);
3)setUp()/tearDown()会在每个case前后执行（case就是用@Test修饰的函数），@before/after分别修饰setUp/tearDown();
4)@BeforeClass/@AfterClass 对单个测试类，只执行1次
5)Mock : record(set return value), then replay;
6)匿名类：在派生类中覆盖基类函数，打桩返回结果，摆脱外部依赖；



测试举例:
public class CaculatorTest{
@Test
public void testAdd(){
Calculator ca1=new Calculator();
int result=ca1.add(1,2);
Assert.assertEquals(3, result);
}

}

