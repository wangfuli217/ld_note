《C专家编程》-对数组和指针讲解的很透彻


1.变量拷贝与内存共享：
int i = 8; float f = i; //这是拷贝，把i 的值取出来，赋给f，f = 8; 两者的数学值相等，   但f在内存中的二进制值和 i 的二进制值不同，i 是0x8，而 f 是0x41000000;
int i = 8; float f = *((*float)&i); // 这是内存共享(union)， f != 8; f = 1.12104e-44 ;  两者的二进制内容相同都是0x8，但是得到的数学值不同. 运算结果取决于数学值；
int i = 8; float f; memcpy(&f, &i, sizeof(float)); //f = 1.12104e-44 内存拷贝的效果类似于内存共享。
总结：1)数据类型不同，同样的内存值，数值不同，运算结果不同；2)地址共享不会改变内存值；3）Type  t = 8; t 的内存值不一定是0x8;

0.任意指针的大小占sizeof(long)个字节, 指针类型本质是long类型，在64bit cpu, sizeof(long)=64, sizeof(int)=32; 在32it cpu, sizeof(long)=32, sizeof(int)=32; 
   C++11定义了long long 类型，在32bit cpu ：sizeof(long long) = 64;
   64bit arm :   float:4; double:8;  int:4; short:2; long long:8   long:8; 和32bit arm比较，只有 long 大小变了，其它的不变，long long 也不变；

0.<C++ Primer>2.1节
   字节(char)：可寻址的最小内存块，一般是8bit;
   字：   内存读写的基本单元（如果写单个字节会截断），一般是32bit 或 64bit, 取决于CPU和数据总线；
   类型： 决定了该如何解释内存中的bit内容；
   float:  在32bit/64bit cpu中一般都是32bit，带符号，单精度, ( sign << 31 ) | ( exp << 23 ) | ( fract & 0x007fffff ), 32bit = 1bit sign + 8bit exp + 23bit M;
   double: 在32bit/64bit cpu中是64bit, 带符号，双精度；64bit = 1bit sign + 11bit exp + 52bit M;
   short: 2字节；
   int : 32 bit 带符号，[INT_MIN, INT_MAX]  <climits><cfloat>, 在32bit/64bit cpu中一般都是32bit
   字符型: char, signed char[-128, 127], unsigned char,  其中 char 到底是等价于signed char 还是 unsigned char 取决于编译器；
  规则： 在算术表达式中不要使用char 和 bool; 浮点运算用double, 因为double的运算代价和float一样的。signed/unsigned只针对整型，float没有这个说法；

0.float 浮点数的二进制表示：f = s * M * 2^e; 其中M是有效数字1 <=M < 2;M=1.xxxxx,M的精度是2^(-23)，23位10进制小数（0.00000011920928955078125）
在计算机内部保存时，只保存后面的.xxxxx部分，
32bit = 1bit sign + 8bit exp( 指数,2为底) + 23bit(有效数字M). 其中,指数部分的真实值 = 指数内存值 - 127; 

float不存在补码这一说，补码只适合于负整型存储;
整型的内存值和真实值一样，而float的内存值和真实值不同，因为float有格式。

浮点数的二进制表示与10进制的转换细节很复杂，可参考wiki.

要查看1个float数的内存值很简单： printf("0x%x ",  *(unsigned int*)&f);
float的范围为-2^128 ~ +2^127，也即-3.40E+38 ~ +1.70E+38,  比 long long 整型的范围还大。所以整型赋值给float不会溢出（但会丢失精度），反之会溢出。
[-16777216, 16777216]这个范围的整数可以精确的用float表示，超过范围会丢失精度。
eg: (12.375)10 = (12)10 + (0.375)10 = (1100)2 + (0.011)2 = (1100.011)2=(1.100011)2 * 2^3 //10进制小数转二进制小数
eg: 88.8  =>   0x42b1999a,  0.0 => 0x00000000;  负浮点数存储和正浮点数只差1个符号位，其它位完全一致，
eg: -88.8 =>   0xc2b1999a   -0.0 =>0x80000000;   
eg: float f = 0.123456788888888f; 初始值
printf("%f", f); //=0.123457 这仅仅是显示的问题，float 能表示的10进制真实小数位数是23位，但不意味精度可以达到23位，实际精度是8位。
printf("%.20f", f);//0.12345679104328155518 和初始化值不同，因为初始化值是实数，实数转为float会丢失精度(最大丢失精度是10^-8);
cout.precision(20);cout << f; //0.12345679104328155518

float f  = 0.123456786000000f; //f ==0.12345678359270095825
float f2 = 0.123456780000000f; //f2==0.12345678359270095825 注意f2和f的初始化不一样，但结果一样，因为丢失了精度，精度在8~9位小数。


byte = 8 bits; word(字长)的长度与数据总线的宽度有关，如果系统的数据总线是32位，那1word=4byte; arm cortex-A15就是字长32bit;
一般而言，类型float/double 有7/16个有效位(小数点后面的位数)； enum 是int 类型；
C++标准规定了内置类型的最小尺寸，具体多少bit取决于编译器和CPU字长；

0.  数据类型: bitVariable--->(signed)char/bool8-->short16-->unsigned/long/int/float/enum32-->double/long long64 ---->long double12;

0.软件工具： cscope(/usr/bin/cscope) 检查头文件的包含关系； lint/valgrind/clang/sanitizer/klockwork/complexity/duplicity/profile(perf)
  md5sum:用于比较文件是否一致
  ps -ef: 查看进程
  trace: 打印程序的系统调用，跟踪程序执行；
  file: 查看文件的大致信息
  time: 显示程序执行耗时

1.格式：
  %d 有符号10进制
  %u 无符号10进制
  0x%x 无符号16进制,打印为0xffffffff;
  0x%hx, 打印short int, 0xffff;
  %f 浮点数
  %p 打印指针
   %s 字符串
   %c 单字符

1.C语言要求局部变量只能定义在函数的开头；而C++可以随处定义；
  C语言中使用未声明（也未定义）的外部函数会导致编译告警和链接错误，C++中在编译阶段就报错；
  C语言中如果要使用外部变量，编译器只需要知道类型和名字；

1.函数命名：警惕编写与标准库函数同名的函数，这样会取代库函数的行为，而且所有调用该库函数的系统调用也会使用你自己的函数，风险不可控，一个好的习惯是使用自定义的namespace；
  准则：不要让程序的任何符号成为全局的（建议加上namespace/static），除非故意把他们作为程序的接口；
2.switch语句支持的case数量最小是257个，最大取决于编译器；
3.typedef type myType;
  #define myType type   

3.c规定：数组初始化值的个数可少于数组元素个数.这时前面的按序初始化相应值, 后面的初始化为0(全局或静态数组)或为不确定值(局部数组)，
局部数组一定要确保所有元素都要显示初始化！建议任何情况都对数组所有成员做显示初始化。
如果C++的数据成员是static array, 要在cpp文件中对数组每个元素显示初始化。
int myArray[10] = { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 }; //should use for-loop here ! Attention: can't use memset() since memset() fill same value for each byte;
int myArray[10] = { 1, 2 }; // initialize to 1,2,0,0,0...Elements with missing values will be initialized to 0
int myArray[10] = { 0 }; // first element is 0, others also 0
int myArray[10] = {}; // In C++, an empty{} will initialize every element to 0. But this is not allowed with C
static int myArray[10]; // static storage will initialize to 0 if no initializer is specified
u32 class::array[4] = {1,1,1,1}; //c++ for static array member


4.小端模式:数据的低字节保存在起始地址;
  大端模式:数据的高字节保存在起始地址;
  大小端字节序转换：以字节为单位转换,通常是逐个字段(u64,u32,u16)进行转换，u8不需要转换；
  eg: 0x1234ABCD, 数据的低字节-->高字节顺序是：CD --AB--34--12, 这个数据的字节顺序与大小端无关，而且数据对象在内存中肯定是从低地址到高地址依次存取的，区别是低地址该放低字节还是高字节。
 对于struct来说，member之间的地址顺序肯定是低地址-->高地址，第1个member肯定是低地址，这个与大小端无关。每个member内的字节顺序才和大小端有关系。
 假如占用的内存地址是0x00000000---0x00000004,对于小端，0x00000000存放0xCD, 对于大端，0x00000000存放0x12;

4.大小端转换：只有整型数据才存在大小端转换。
  把一个u32变量赋值给一个u8指针就必须考虑： 1）是否需要考虑字节序（大小端转换），取决于协议，比如socket通信要求用大端；
   2）内存地址align:某些芯片，如果指针指向的内存地址不是4字节对齐，这时强行用u32对它赋值（eg: *((u32*)rarPtr) = rarWord），DSP会出问题，必须调用平台特定接口, ARM/X86正常赋值；
     在linux host上的case是测试不出来的，因为linux支持任意地址的变量赋值；
  u8* rarPtr = (u8*)(resp.raRespData);
  u32 rarWord     = (u32)((taCmd & 0x7ff) << 20 | (ulGrant & 0xfffff)) ; 
  _mem4(rarPtr)   = reverseByteOrder(rarWord); 根据协议，taCmd是在低地址，ulGrant在高地址，所以这里需要做大小端转换；

4.可移植代码： 严格遵循标准，不依赖特定编译器行为，只使用确定的特性，不使用未定义的特性（在某些情况下，C标准并没有规定编译器应该怎么做）；
5.switch(x){never_run_code; case**} 在switch{}里面的code，必须都在case/default分支中，其它地方的代码永远不会执行到； 好的编程风格应该是把这部分代码放在switch外；
  注意【const int var = 1; switch(){case var: }  】 这样会编译报错；
  注意：在case (expression): 中千万不要在expression里面用||,因为最终是把整个expression的运算结果作为case来匹配的，应该老老实实的用多个case表达，每个case只表达一种情况；

6.C++的函数里面，变量声明/定义可以随时出现，而C的函数里面变量定义必须在语句之前集中出现？
7.struct 定义:
  struct Name(Optional)
  {
    int A :         6; //注意符号位占1bit
    unsigned int B: 2; //定义bit的类型可以是signed/unsigned/enum
    int         :   1; //填充位可以不需要名字
    int         :   0; //用来区分字边界，不占用内存,也不需要名字
    stuct Name* link;  //指向自己类型的指针
  }var1(Optional); 这里的var1是个变量(最好换行)，不是类型，因为没有加typedef,那只能这样: struct Name st;
  typedef struct Name1{}Name; 这里的Name是个类型，不是变量，因为typedef的作用,这时候就可以用Name去定义变量:Name st <===> struct Name1 st;
  typedef struct Name{}Name; 如果是这样定义的，那么: Name st <====> struct Name st; 都是合理的；
  如果structA里面嵌套定义structB,那A的内存包含了B，不论B是否显示定义了实例，eg:struct A{ struct{ int; };};  ==> sizeof(A)=4;


9.函数调用的参数会优先放在寄存器里面，其次才放到栈（映射到cache/ddr）；
10.Union一般是作为struct里面的一部分，而且如果union是嵌套在struct里面定义的，一般不需要取名字，这样访问更方便；union的成员的起始地址相同；
   union的作用: 1)类型转换; 2)数据多态，避免了显示的转换;
   eg: 复数的表达，&i == &c == &imag, 对于小端cpu, 起始地址&imag 存低字节，所以imag对应lower16bit(i), real=high16bit(i);
typedef union 
{
    SComplex  c; //struct SComplex{i16 imag; i16 real;}; 
    i32       i;
} UComplex;

union数组初始化：因为Ucomplex的第1个是个struct, 所以按照struct形式来对元素初始化；
UComplex arr[2] = 
{
 { (i16)0x1234,(i16)0x02b8 },  {28378,-16384}
}
11.enum: 表达一种映射关系,不同元素的值可以相等，eg：enum {Typea = 1, Typeb = 1};

12.C语言声明的解析(Page64): 从变量名字开始，先看后缀，再看前缀；   后缀()表示函数，后缀[]表示数组，前缀是*表示指针，把(变量)看做整体;
   eg: int* ptr ; //这个定义有2个含义： 1)ptr指向单个int变量； 2)ptr指向一个int数组的首元素；到底是哪种含义取决于上下文，要小心。
   eg:char* const* (*ptr)() //ptr是一个指向函数的指针，该函数返回一个指针（这个指针指向的内存是只读的，内存里面有一个char*）,返回的其实是个2级指针；
   eg:char* (*ptr[10])(int**c)//ptr是一个数组，每个元素是个函数指针，函数返回值为char*,入参为int**,每个函数原型一致（除非把数组元素做成union）,使用: (*ptr[i])(); or ptr[i]();
   eg: int (*ptr)[100]; //ptr 是一个指向100元素数组的指针, ptr++ 指向第2行100个，ptr[1][0] 就是第2行的首元素。ptr是变量名，类型是int(*)[100]
   eg: int (*ptr)[3][4] = (int(*)[3][4])&arr[0]; T arr[5];  //二维数组指针初始化, T是int[3][4];
   eg: typedef int A34 [3][4]; A34* ptr = &b[0]; int b[2][3][4];// b == &b[0][0][0];
   eg: int* ptr = new int[10]; //返回的是首元素地址，不是数组；
   eg: int (*ptr)[10] = new int[2][10]; //new数组返回的地址类型是“最高维的元素类型”,这里返回的地址类型是int[10];  ptr[i]等价于*(ptr+i), 其类型就是(*ptr), 也就是 int[10], 所以ptr[1]是个int[10]的数组，应该这样用：int a = ptr[1][9]; 不能这样：int a = ptr[19], 因为ptr[19]是个数组，而且这里越界了。 释放内存： delete[] ptr; 
    eg: int arr[2][3][4]; int (*ptr)[3][4] = &arr[0]== arr;  int (&brr)[3][4] = ptr[i];//i={0,1} 记住：ptr[i] 的类型就是(*ptr); 学会用typedef来简化数组；
    eg: typedef int Arr[3][4];  Arr* ptr1 = ptr;  int (&arr)[3][4] = ptr1[i];
    eg: int (*ptr)[2][3][4]; ===> ptr pointer to  int arr[N][2][3][4]; 给定一个数组指针，只能推断出除了最高维之外的维度，最高维 N 需要找到赋值的地方来确定；
    eg: int arr[3]; arr == &arr[0] == &arr; 在数值上3者相同，但类型不同，&arr[0]的类型是int*, &arr的类型是int (*)[3]; 
    eg: int arr[2][3];  arr == &arr[0],  int(*p1)[3] = &arr[0]; int(*p2)[2][3] = &arr;
    eg: int arr[2][3]; int*p = &arr[0][0]; p[0~5] 二维数组转换为1维使用需要借助第3者，不能直接arr[0~5];
总结：尽量用typedef来简化，尽量不要直接使用数组名给指针赋值，绝对不要类型强转，区分 arr 和 &arr 的类型，尽量用&arr[0]代替arr;C++中尽量用引用传递数组参数；
         记住：数组名永远等于&arr[0],不论数组维度多少。

typedef int ARR[2][3];  ARR* ptr = get(); (*ptr)[1][2] 是int, 而 ptr[1][2] == (*(ptr+1))[2] == ARR[2] :(type: int[3]) 所以要谨慎返回数组指针，很容易误用，最好返回引用：
ARR& ptr = get(); ptr[1][2] 是int; 返回引用类型更简单和安全。

13.typedef:  1)可以让变量定义更清晰， 2)便于以后修改和移植，更灵活；
14.#define STRCMP(a,R,b) (strcmp(a,b) R 0)  => if(STRCMP(sting1,==, string2)) 更自然的方式来比较字符串，在C++里面可以重载operator==;
15.extern: 是声明，非定义，（只有定义才分配内存），eg: extern int array[]; extern int array[4][5][6];注意:extern int* array 不能用来声明数组；声明和定义必须要一致；
16.malloc():分配未初始化的内存; calloc():分配清零后的内存;  realloc():改变已分配内存大小； alloca():分配的内存在栈上，离开函数时会自动被释放；
   malloca():分配的内存实际比申请的要大，会圆整为2^n;
   void* calloc (size_t num, size_t size);
   内存分配和释放的代码要同时写，不然极易导致内存泄露，而且free(p)中的p必须是malloc()的返回值，如果是其它值则不能正确释放内存，因为OS在p指向的内存附近记录了原来分配的size,  调用malloc()时，实际OS分配的内存比需求的要大：realSize=Header+UserSize;Header对用户不可见;
 
连续2次调用malloc得到的内存并不是连续的，考虑到地址对齐 和 内存管理开销，中间会有空隙；

malloc是库函数，内部调用了sbrk(),这才是操作系统提供的接口，sbrk()还负责物理地址到虚拟地址的转换；比如malloc()需要100bytes, sbrk()实际会分配1K，然后这1K由malloc管理，从中再分出100bytes给用户,之后的malloc就不再调用sbrk直到1K分完，malloc的主要功能在内存管理；
malloc适合分配小内存，大内存分配建议用系统函数mmap();

17.内存泄露：内存被分配后，不释放，会导致可用内存越来越少，系统变慢，一些频繁的内存泄露反而容易被发现；
18.signal:一个异常事件通知或者软中断，缺省情况下，进程收到系统发出的signal(eg:segment fault, bus error)后会将信息存储并终止；
   bus error:总线错误几乎都是由于地址未对齐的读或写导致的；
   segment fault:引用一个未初始化指针，或者空指针，数组内存越界; 释放同一块内存2次，释放一个未曾使用malloc分配的内存，栈溢出，堆耗尽；用watch比较好定位；

19.释放整个链表: for(p=start; p; p=next) {next = p->next; free(p);}   
20.printf("%d",short/char/int)打印32bit以内的; printf("%ld",long long)打印64bit; printf("%p",address)打印地址
    printf("xxx%s""xxxx""xxx%d", str, i); 双引号可以连续使用，在换行时中间不能有逗号；
   sprintf(outputSplitResult, "0x%04x", SplitResult);把数值以16进制输出
21.函数定义和声明的参数类型必须一样，参数名字可以不同，但最好一样；函数声明时可以只有参数类型，没有参数名字；
22.C里面的函数如果只在当前文件被调用，那允许只有定义，没有原型（当然定义要在被调用之前），但是C++要求所有函数必须有原型声明；
   所以好的编程风格是：在.h文件声明函数原型，在.c文件包含.h文件并实现函数，这样编译器如果发现两者不一致，就会报错；
23.C标准库提供的函数都是和系统平台无关的，如果是特定平台的函数，那应该由编译器提供，编译器本身是跟平台相关的；   
24.字符输入:终端输入默认是以行为单位，以回车作为行结束符，也就是说程序每次拿到的是一行字符串，如果程序要在不敲enter时每次获取１个字符，Unix下用getchar()，不过在程序退出前要显示退出这种模式；
25.errno: 每次在系统调用之后，检查一下全局变量errno是一个好的风格；
26.FSM:有限状态机：每个状态下根据输入事件执行不同的动作并负责切换到下一个状态； C里面一般用函数指针数组 funcPtr StateMachine[state_num][event_num]，在C++里面一般用state状态模式；
27.Debugging hooks: 只在调试的时候被手动调用（一般是打印函数）用于查看内存，并不在产品代码中被调用；   
28.Hash 散列表：表查找优化的经典技术， 通过散列函数把key值和存储索引关联，使得搜索1次命中；散列位置冲突解决：1)把节点扩充为链表，2）节点附近找第1个空的位置；
29.void*: 当你不确定类型的时候就用void*,类似于C++的模板参数；
30.强制类型转换: eg: void qsort(void*,size_t,size_t,int (*compare)(const void*, const void*) );
                  int intcompare(const int*i, const int*j);//实参与qsort形参类型不同，需要强制转换
                  调用qsort: qsort(array,10,sizeof(int),
                                  (int (*)(const void*, const void*))intcompare);//只需要把形参里的名字去掉就可以完成类型转换，当然用typedef效果更好；

31.数组和指针(page200):1)函数的返回值只能是指针，不能是数组；2)函数的形参本质上是指针，所以不能用sizeof()得到实参大小;
   func(int* p) === func(int p[]) === func(int p[Num]) 在C里面效果一样，Num并不能起到约束作用，只是利于阅读；
   在C++里面，func(int (&p)[Num]) 通过数组引用的方式可以约束形参的数组大小必须是Num,否则编译失败；

32.数组初始化:
   0)尽量不要显示指定数组大小，因为可以根据初始化元素的个数自动推断大小eg: int arr[] = {1,2,3};
   1)只能在数组定义的时候做整体初始化，最高维的长度可以省略，（其它时候不能这样初始化） eg:int arr[][2] = {{0,1},{2,3}};
      静态定义数组时需要用常量来表示数组大小，eg: const u32 sz = 5; const u32  size = sz*sz;  int arr[size];  编译器可以计算出大小。
      动态创建数组则可以用变量： eg: int size = i; int * p = new int[size];
   2)如果数组长度比提供的初始化值个数多，剩余的元素会自动置(0/0.0/NULL);
   3)初始化指针数组：
     eg: char* str[]={"ab","abc"} 可以的;
          int* p[]={{1,2},{3,4,5}} 不行,因为不会自动分配内存;
         int a1[]={1,2};int a2[]={3,4,5}; int* p[]={a1,a2};可以；

33.当提到C语言中的数组时，就把它看做是一个向量(vector)，也就是某种对象的一维数组，数组的元素可以是另一个数组；
   用数组给指针赋值的时候，要求低维大小相同，
   int arr[2][3][5]; int (*p)[3][5] = arr; int(*p1)[5] = arr[i]; int* p2 = arr[i][j]; int p3 = arr[i][j][k];                                 

34.bit移位溢出:bit左右移位有严格顺序，不能颠倒也不能合并，因为会溢出， eg: var is 14bit,((var>>15)<<10) != (var>>5), 因为(var>>15) is 0 !
     bit左移：  1<<n 表示 1后面有n个0; eg: 0xF = (0x1<<4) - 1;
     bit右移：  会把低位的给移除，要特别小心；
     bit左移和右移是不能互相转换的！


35.C++里面也不能对数组类型直接赋值，eg: typedef u32 TPrbFlags[(100 + 31) / 32]; TPrbFlags r1,r2;r1=r2会编译错误，应该loop{r1[i]=r2[i]};
   ok:sizeof(r1)=16bytes,memset(r1,0,sizeof(r1));TPrbFlags r3[2],memset(r3,0,sizeof(r3));

36.内存地址差值：把内存中任意2个地址赋值给p1,p2,那么(p1-p2)的结果取决于p1,p2的type,当type=char时结果才是字节数；
37.连续操作指针与[]差别： u8* Ptr; for(i=0;i<num;i++){*Ptr++ = a;}和{Ptr[i]=a;}的区别是前者改变了Ptr，而后者没有改变Ptr；
   在连续操作指针内存时，要注意是否需要改变指针本身；
   #define _mem4(ptr)  (*((uint32 *) (ptr)))
   u8* rarPtr; u32 rarWord;
   _mem4(rarPtr) = rarWord;
38.函数入参顺序：只作为输入的参数，即输入又输出的参数，只输出的参数
   函数名一般用动词，因为函数表示执行过程，类名/变量名/Struct用名词；
   函数参数尽量少用true/false,应该改成Enum来明确表达语义，如果一定要用bool那么在传递实参的时候可以定义个有语义的临时变量=true/false,传递这个临时变量而非直接传递true/false；
   传递数组： void func(char array[]); 这种方式不能约束数组大小，C++里面可以传引用来约束数组大小: void func(char (&array)[LEN] );

40.core dump: linux下默认关闭，即使程序crash,也不会产生core dump文件
  开启core dump 功能： 在linux shell中输入(ulimit -c unlimited) or (ulimit -c maxCoreDumpFileSize_KB)   
　　生成的core文件保存在可执行文件所在的目录，文件名为core.XXX

  使用gdb调试core dump文件步骤(已验证)：
  1).gcc -g src.c 编译时增加(-g)选项,产生gdb调试信息
  2).ulimit -c unlimited   使能core dump文件生成， ulimit -c 查询是否使能，结果为0表示关闭，否则打开
  3).运行程序，产生core dump file
  4).gdb exename coredumpfile 进行调试，可使用命令(where; info frame;)进一步查看调用栈

41.编译期打印结构体大小(C++示例,打印结构体foo大小):
  step1)template<int> class Wow; //Just declare a template class without implementation !
  step2)Wow<sizeof(foo)> wow;//define object,will cause compile error:aggregate `Wow<12> wow' has incomplete type.

42.在unix系统中，从键盘输入文件结束符(EOF)是用ctrl+D; 

43.格式化输入：
  scanf("%d", &i);  传入地址
  scanf ("%s",charPtr);
   C99增加了snprintf(),比sprintf更安全，因为可以指定大小，防止缓冲区溢出；
   std::getline(std::cin, lineString)可以用来读取不定长的行；
44.数组删除元素： 如果删除最后一个元素，那不需要拷贝，直接num-1; 其它元素需要用最后一个去覆盖； 
    数组拷贝：C和C++都不支持直接拷贝数组，（要循环或memcpy）, 不过可以放在struct里面，然后直接复制struct{int a[10]}a,b;  a = b ;

45.C标准库函数提供的文件操作:　fopen,fclose,fwrite/fread(binary file),  fputs/fgets/fputc/fgetc(ascill file); fseek/rewind(position), fscanf/fprintf(format), fflush(to disk); 对应的系统调用有: open/close/read/write/lseek; 库函数封装了系统调用而且实现了用户态缓冲区（目的是减少IO系统调用），系统调用实现了内核缓冲区；对于字符设备（比如console），内核不会缓冲，对于块设备（比如磁盘）会缓冲；IO库函数可以设置缓冲区类型为：全缓冲，行缓冲，不带缓冲，setvbuf(), 终端设备一般是行缓冲；
 标准IO库函数并不直接操作fd，而是使用流FILE*，FILE这个struct里面包含了fid&buffer_ptr; 
 stdin/stdout/stderr的类型是FILE*, <stdio.h>,  对应的fid是STDIN_FILENO=0,STDOUT_FILENO=1,STDERR_FILENO=2, <unistd.h>

46.bit变量：赋值的时候注意是否越界；可以用struct定义8个1bit的变量来代替1个u8的变量
47.用宏定义常量字符串，如果多处用到 ：
   #define FID_DLPRESCHEDULER "dl.pre.scheduler"

 

44.compile time assert 宏： 编译器assert: 利用了"数组在编译期间必须有效定义或声明"；
     #define COMPILE_TIME_ASSERT(condition)   extern int dummy[(condition) ? 1 : -1] 这里的extern是为了避免实际占用内存
     注释：sizeof()是编译期运算符，即使传入null指针，也可以正确计算成员大小，sizeof(((struct*)0)->memberA); C++11支持sizeof(structA::member)这种用法；
   


45.函数指针：函数名 代表了一段代码的 起始地址，functionName = &functionName;

   void (*ptr)(void)=0; //define a function-pointer-variable, intialize to null; ptr是变量名字，变量类型是: void(*)(void); 类似 int a =0;
   void (*ptr )(void); //define a function-pointer-variable, uninitialized; 
    void fun (void) { }; ptr = fun; //define an empty function, set value for ptr;
    void fun(void);//declare a function prototype without implementation;
    ptr = fun;  ptr = &fun;  //set value for function-pointer; C语言取函数地址可以用&也可以不用&, C++的static成员函数和C函数一样的用法；
    ptr();  //call function or (*ptr)();
    void fun(int (*)(int) ); //fun的参数是一个函数，必须满足int(*)(int)类型，参数没有取名字；
    void fun(int (*pfun)(int) ); //和上面一样，只不过参数有名字；
   typedef void (*PTR)(void); //define a type PTR, PTR是类型名字;  Note: it's also suitble for class static func in C++
   typedef void (classA::*PTR)(void);  //define a type  in c++, PTR是类型名字;

C++里面的成员函数指针,赋值时必须在函数名前面加上取址符&：
     void (Class::* ptr) (void) = NULL;  //ptr is a variable name, initial to null, type is: void(Class::*)(void)
     ptr = &Class::memfunc; //ok C++取nonStatic成员函数地址必须要地址符&，而C函数可要可不要；
     ptr = Class::memfunc; //error !! 
     (this->*ptr)(args); //use ->* 调用函数指针
     (obj.*ptr)(args);//use .* 调用函数

46.头文件里面的#define宏被多个cpp文件包含，不会导致重定义，因为在cpp文件展开后，宏的有效期是到该文件结束，其它文件看不见；

47.main():
int main(int argc, char* argv[]);   or  int main(int argc, char** argv);

48.Struct结构体对齐: 1）要求struct里的每个字段自然对齐（在字段之间打padding），2）整个结构体大小对齐sizeof(struct)=4N or 8N , 32bit(4N), 64bit(8N),  LTE产品DSP上只要求第2种方式对齐，host linux 要求1)2)都对齐;  3)因为有自然对齐，所以禁止C风格式指针类型强制转换,eg u32 *ptr = char* ptr; 转换后编译器会对ptr调整，这样ptr的实际地址就改变了，结果也是不对的。C++的派生类是可以转换为基类的；
总之：结构体对齐方式取决于编译器和CPU硬件，与平台有关，所以 sizeof(struct) 具体数值取决于平台，可能会在不同字段之间padding或者要求整个struct大小必须是4字节倍数；
指针转换：大类型转小类型ok,  小转大有问题；
u8* ptr = u32*   //ok
u32* ptr = u8*  //危险, 因为地址对齐会导致转换后的指针发生偏移！所以在产品里面，DSP用专门的指令_mem4(u8Ptr) = u32;而不是 *((*u32)u8Ptr) = u32;

结构体初始化：如果是static,  or global则会默认初始化为0，如果是local，则最好是显示memset, 尽管有时候struct = {} or struct = {0} 有效；
refer to: https://stackoverflow.com/questions/10828294/c-and-c-partial-initialization-of-automatic-structure

49.assert(); //include <cassert> in c++

50.字符串操作,C++里面对C字符串操作的函数包含在<cstring>,这个头文件也包含了 memset(),memcpy()
  a)strlen("ABC") = 3; sizeof("ABC")=4; strlen("\0") = 0; sizeof("\0")=2; sizeof('\0')=1, Note:strlen() count until \0 字面字符串常量隐式包含了\0
  b)strstr("ABCDE", "BCD"); Returns a pointer to the first occurrence of str2 in str1, or a null pointer if str2 is not part of str1; 是否包含子串
  c)strcmp("AB", "AB") = 0; strncmp()
  d)strcat(),strncat()
   e)strcpy(), strncpy()

  cout << sizeof("") << endl;   //1  双引号里面隐藏了一个字符\0
   cout << sizeof("\0") << endl; //2
   cout << sizeof('\0') << endl; //1 单引号里面只有1个字符
   cout << sizeof(' ') << endl;  //1 单引号里面输入了一个空格，如果没有字符会编译失败
   cout << strlen("\0") << endl; //0 函数strlen 以\0结束
   cout << strlen("") << endl;   //0
   string str = ""; cout << str.size() ;  // 0
   string str = "0" cout << str.size() ;  // 1  
 
51.C++里面的string函数与数字转换：refer to : http://www.cplusplus.com/reference/string/stoul/   
    C++代码如果用C语言的string函数则包含<cstring>,如果是C++的则包含<string>，后者提供的接口更强大；
   C语言里面字符串的一个缺点是必须以'\0'结束，否则异常；

u32 = std::stoul(str),     stoi(str),     stod(), stof(),//c++11 字符串转数值
 to_string (int val);//c++11
 to_string (long val);
 to_string (long long val);
to_string (unsigned val);
 to_string (unsigned long val);
 to_string (unsigned long long val);
 to_string (float val);
 to_string (double val);

C++ string 函数：
std::string ("A character sequence");
string (char* s); //Copies the null-terminated character sequence (C-string) to string obj;产生一个副本；
const char* c_str() const;  //string -->const char* with '\0' (C-string)  
char& operator[] (size_t pos); //如果要遍历的话最好还是用for(auto& c : string)
istream& getline (istream& is, string& str); //Get line from stream into string 这个不是成员函数
ostream& operator<< (ostream& os, const string& str); //Insert string into stream, stringstream;
istream& operator>> (istream& is, string& str); //Extract string from stream
string.compare(string);
if(string::npos != string.find("good")) //find ok
string += "\n"; //ok
string += '\n' ; //error
char* p = string[0]; //if(!string.empty())
C风格的字符串一定要以null('\0')结束
int toupper ( int c );  isalpha (); tolower(); 大小写转换；

string的构造函数：
string();
string (const string& str);//copy (2)
string (const string& str, size_t pos, size_t len = npos);//substring (3)
string (const char* s);//from c-string (4)
string (const char* s, size_t n);//from buffer (5)
string (size_t n, char c);//fill (6)
template <class InputIterator>
  string  (InputIterator first, InputIterator last);//range (7)

string (initializer_list<char> il);//initializer list (8)
string (string&& str) noexcept;//move (9)



52.用宏求数组元素个数： #define elementsof(array)   (sizeof(array)/sizeof(array[0]))
int a[5];   elementsof(a) = 5;
int b[3][4]; elementsof(b) = 3;要特别小心

53.预定义宏： #include <stdio.h> or <cstdio>
__FILE__  当前文件的绝对路径, printf("%s", __FILE__) ，如果要提取文件名:  basename(__FILE__);
__LINE__  当前行号，unsigned int 类型,printf("%d", __LINE__)
__func__ 当前函数名, printf("%s", __func__)
__TIME__  编译时间，字符串

54.负数的除法与取模(%只能用于整数)：refer to <C++ primer>page126
-3%16 = -3;  16%-3 = 1;  求模（m%n）：结果符号与m一致
-3/16 = 0; 16/-3 = -5; 16/3=5; 除法：向零取整
x对2^n的数求模:  x %(2^n) ==   x & ((1<<n) -1 );  eg: n%1024 = = (n & 0x3FF)

55.编译器打印错误，停止编译
#error "Unkown mode!";

56.地址转换很危险，极易出错，且问题很难察觉：
u8 * p1 = & c;
u32* p2 = (u32*) p1;
u32 i = *p2; 这时得到的数可能不是真正从p1开始的4个字节，而是从4字节地址对齐处开始的，这样就与代码初衷不一致了。

57.位运算：基本操作 = +1 -1，移位<< >>，取反~，位与&, 位或|, 异或^，  复杂的操作都是由这些操作组合得到；
摘自<程序员面试金典> 
x ^ 0 = x; 
x ^ 1 = ~x ; 
x ^ x = 0 ; 
x ^ (~x) = 1..1;
return ( (x & (1 << i))  != 0 )   //get bit[i]
x | = (1 << i)   含义 bit(i) = 1
x & = ~(1 << i)  含义 bit(i) = 0
clear(i) | (v << i )  含义 bit(i) =  v 
x &= ((1 << i) - 1) 含义  bit(msb...i) = 0
x & = (~( (1 << (i + 1 )) - 1) ) 含义  bit(i .. 0) = 0


57.位运算： 摘自<高效算法的奥秘>
x &= (x -1) // 最低位 1 to 0（1bit）:  011 1000 -->011 0000,  这个是非常常用的技巧；
return  (x & (x-1)) == 0    //true是2的幂
x |= (x+1) // 低位的 0 to 1（1bit）:  011001 --> 011011
x &= (x+1) //尾部的连续1变成0:  1010 111 -->1010 000
x|=(x-1) //尾部的连续0变1 : 1010 1000 -->1010 1111
(((x|(x-1)) +1) & x) //中间连续的1清零:  0101 1100 --> 0100 0000，这个操作是由基本操作组合得到
(~x) & (x-1) //把尾部的连续0变1，其余清零:   0101 1000 -->0000 0111
x &= (-x) //保留最低位的1，其余清零: 0101 1000 --> 0000 1000  

 1<<p ; //1后面含p个0
 (1 << 3) - 1; //  ==> 0...0111; 这个与cpu无关；
(~0)>>29;        // ==>  0...0111; 这个适用32bit cpu;
(~0)<<29; // ==> 1110...0  移位生成高位连续1
 (~0)<<3 ; // ==>1....1000;

57.goto 可以在函数内部跳转，setjmp 和 longjmp 可以跨函数跳转。
repeat:
  xxxx
  goto repeat2;

58.可变参数用来打印log：
eg:     HTENV_ERROR( "IfAaSysCom receiver %x" , msg->header.target );
     #define HTENV_ERROR(...)   htEnvPrint( __VA_ARGS__);
void htEnvPrint(const char* formattedString,   ...)
{
  va_list ap;
  va_start(ap, formattedString );
  vsprintf(dest, formattedString , ap);//char dest[100];
  va_end(ap);
  sprintf(dest, "\n");
  std::ofstream << dest;
  std::ofstream.flush();
}

59.指针运算：一定要注意指针类型，偏移的实际字节数取决于指针类型；
 
60）多维数组初始化 
int arr[2][3][2][2] = 
{
{
{{0,0},  {0,0} },
{{0,0},  {0,0} },
{{0,0},  {0,0} },
},
{
{{0,0},  {0,0} },
{{0,0},  {0,0} },
{{0,0},  {0,0} },
}
}

61)int 取值范围, MIN_INT = ((int)0x80000000); MAX_INT = ((int)0x7FFFFFFF);
signed short(16bit): -32768 (0x8000) to +32767 (0x7fff) ; //如果0x8000是signed short, 最高位1表示负数，实际数学值等于“除符号位外其余位取反后加1”, 结果就是-32768,这是最小的负数;
unsigned char c = -1; ==> c = 0xFF = 255; 也就是说, -1赋给无符号数，得到的是最大值；

62）u32距离直接用减法（兼容翻转情况）：  （a - b） 的结果是a往回走到b的距离，不等于ab距离。
       u32 tickStart = 0xFFFFFFF0; //u32 = unsigned int;
       u32 tickEnd = tickStart + 20; //=0x4
       u32 cost = tickEnd - tickStart;//=20; 
       u32 cost2 = (tickEnd > tickStart) ? (tickEnd-tickStart) :((0xFFFFFFFF - tickStart) + tickEnd + 1);//=20,比上面的公式要复杂。 如果不是u32自然翻转，比如1024翻转则只能使用这种方法。

<C专家编程>附录B:
C标准库中的函数，类型以及宏分别在下面的标准头文件中定义：
<assert.h> <float.h> <math.h> <stdarg.h> <stdlib.h><ctype.h> <limits.h>
<setjmp.h> <stddef.h> <string.h><stdio.h> <time.h><errno.h> <locale.h> <signal.h>

//////////////////////////////////////
typedef unsigned char  u8; 注意 sizeof(bool)=8bit, bool是C++中 才有的类型；
typedef unsigned short u16;
typedef unsigned int   u32;   //for 32bit cpu,  sizeof(long)=4bytes, for 64bit cpu, sizeof(long) = 8bytes, sizeof(int) = 4bytes for both 32/64bit
typedef signed char    i8;
typedef signed short   i16;
typedef signed int     i32;     
typedef float          r32;     
typedef double         r64;   
typedef long double    r128;
typedef unsigned long long u64;
typedef signed long long i64;

/////////////////////////其它资源：


[CPlusPlus](http://www.cplusplus.com)  :  在线C/C++库函数手册

[在线GNU C 手册](https://www.gnu.org/software/gnu-c-manual)  

[在线汇编](https://godbolt.org/)  可以把C代码转换为 汇编代码(但不能链接输出bin)，选择不同版本的GCC，支持的硬件有:ARM, MIPS, X86

《嵌入式Linux系统实用开发》何永琪，后面章节总结了C&C++的语法区别，微信读书有电子版；



《Linux多线程服务端编程》陈硕，对C++编译链接的细节总结的比较好

《The C Programming Language》 附录B提供了“C标准库”函数（最常用的），附录A提供了"C参考手册"；
