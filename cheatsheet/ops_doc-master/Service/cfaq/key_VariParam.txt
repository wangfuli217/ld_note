GCC 编译器在汇编过程中，调用 C 语言函数时，传递参数有两种方法：
1. 通过寄存器(默认)
2. 通过堆栈(使用 asmlinkage 宏)
可变参数列表必须保存在栈中
#define asmlinkage __attribute__((regparm(0)))
asmlinkage int printk(const char *fmt, ...)
1. 告诉 GCC 编译器该函数使用0个寄存器参数，即不需要通过任何寄存器来传递参数，参数只是通过堆栈来传递
2. 可变参数列表必须保存在栈中, 因为遍历各个可变参数时要按地址访问
    

在GNU C中，宏可以接受可变数目的参数，就象函数一样，例如:
#define pr_debug(fmt,arg...) \ 
printk(KERN_DEBUG fmt, ##arg)
用可变参数宏(variadic macros)传递可变参数表

你可能很熟悉在函数中使用可变参数表，如:
void printf(const char* format, ...);
直到最近，可变参数表还是只能应用在真正的函数中，不能使用在宏中。

C99编译器标准终于改变了这种局面，它允许你可以定义可变参数宏(variadic macros)，这
样你就可以使用拥有可以变化的参数表的宏。可变参数宏就像下面这个样子:
#define debug(...) printf(__VA_ARGS__)
缺省号代表一个可以变化的参数表。使用保留名 __VA_ARGS__ 把参数传递给宏。当宏的调
用展开时，实际的参数就传递给 printf()了。例如:

Debug("Y = %d\n", y);
而处理器会把宏的调用替换成:

printf("Y = %d\n", y);
因为debug()是一个可变参数宏，你能在每一次调用中传递不同数目的参数:

debug("test");&nbsp; // 一个参数
可变参数宏不被ANSI/ISO C++ 所正式支持。因此，你应当检查你的编译器，看它是否支持
这项技术。

用GCC和C99的可变参数宏， 更方便地打印调试信息

gcc的预处理提供的可变参数宏定义真是好用:


#ifdef DEBUG
#define dbgprint(format,args...) \ 
fprintf(stderr, format, ##args)
#else
#define dbgprint(format,args...)
#endif
如此定义之后，代码中就可以用dbgprint了，例如dbgprint(“%s”, __FILE__);

下面是C99的方法:
#define dgbmsg(fmt,...)     printf(fmt,__VA_ARGS__)
新的C99规范支持了可变参数的宏
具体使用如下:

以下内容为程序代码:

#include <stdarg.h>
#include <stdio.h>

#define LOGSTRINGS(fm, ...) printf(fm,__VA_ARGS__) 

int main()
{

    LOGSTRINGS("hello, %d ", 10);
    return 0;
}
但现在似乎只有gcc才支持。

可变参数的宏里的’##’操作说明带有可变参数的宏(Macros with a Variable Number of Ar
guments)
在1999年版本的ISO C 标准中，宏可以象函数一样，定义时可以带有可变参数。宏的语法和
函数的语法类似。下面有个例子

#define debug(format, ...) fprintf (stderr, format, __VA_ARGS__)
这里，’…’指可变参数。这类宏在被调用时，它(这里指’…’)被表示成零个或多个符号，包括
里面的逗号，一直到到右括弧结束为止。当被调用时，在宏体(macro body)中，那些符号序
列集合将代替里面的__VA_ARGS__标识符。更多的信息可以参考CPP手册。
GCC始终支持复杂的宏，它使用一种不同的语法从而可以使你可以给可变参数一个名字，如
同其它参数一样。例如下面的例子:


#define debug(format, args...) fprintf (stderr, format, args)
这和上面举的那个ISO C定义的宏例子是完全一样的，但是这么写可读性更强并且更容易进
行描述。

GNU CPP还有两种更复杂的宏扩展，支持上面两种格式的定义格式。
在标准C里，你不能省略可变参数，但是你却可以给它传递一个空的参数。例如，下面的宏
调用在ISO C里是非法的，因为字符串后面没有逗号:
debug (“A message”)
GNU CPP在这种情况下可以让你完全的忽略可变参数。在上面的例子中，编译器仍然会有问
题(complain)，因为宏展开后，里面的字符串后面会有个多余的逗号。

为了解决这个问题，CPP使用一个特殊的’##’操作。书写格式为:


#define debug(format, ...) fprintf (stderr, format, ## __VA_ARGS__)
这里，如果可变参数被忽略或为空，’##’操作将使预处理器(preprocessor)去除掉它前面的
那个逗号。如果你在宏调用时，确实提供了一些可变参数，GNU CPP也会工作正常，它会把
这些可变参数放到逗号的后面。象其它的pasted macro参数一样，这些参数不是宏的扩展。

##还可以起到替换作用
如:

#define FUN(IName)  IName##_ptr
这里将会把IName变成实际数据.

怎样写参数个数可变的宏
一种流行的技巧是用一个单独的用括弧括起来的的 “参数” 定义和调用宏, 参数在 宏扩展
的时候成为类似 printf() 那样的函数的整个参数列表。
#define DEBUG(args) (printf("DEBUG: "), printf args) 
if (n != 0) DEBUG(("n is %d\n", n));
明显的缺陷是调用者必须记住使用一对额外的括弧。

gcc 有一个扩展可以让函数式的宏接受可变个数的参数。 但这不是标准。另一种 可能的解
决方案是根据参数个数使用多个宏 (DEBUG1, DEBUG2, 等等), 或者用逗号玩个这样的花招:

#define DEBUG(args) (printf("DEBUG: "), printf(args)) 
#define _ ,
DEBUG("i = %d" _ i);
C99 引入了对参数个数可变的函数式宏的正式支持。在宏 “原型” 的末尾加上符号 … (就像
在参数可变的函数定义中), 宏定义中的伪宏 __VA_ARGS__ 就会在调用是 替换成可变参数
。

最后, 你总是可以使用真实的函数, 接受明确定义的可变参数

如果你需要替换宏, 使用一个 函数和一个非函数式宏, 如 #define printf myprintf




--------------------------------------------------------------------------------
------------------------------------------------------------------
printf(“hello,world!”);其参数个数为1个。
printf(“a=%d,b=%ｓ,c=%c”,a,b,c);其参数个数为4个。
如何编写可变参数函数呢？我们首先来看看printf函数原型是如何定义的。
在linux下，输入man 3 printf，可以看到prinf函数原型如下：

SYNOPSIS
#include <stdio.h>
int printf(const char *format, ...);
后面的三个点...表示printf参数个数是不定的．
如何实现可变参数函数？
2. 编写可变函数准备
为了编写可变参数函数，我们通常需要用到<stdarg.h>头文件下定义的以下函数：

void va_start(va_list ap, last);
type va_arg(va_list ap, type);
void va_end(va_list ap);
void va_copy(va_list dest, va_list src);
其中：
va_list是用于存放参数列表的数据结构。

va_start函数根据初始化last来初始化参数列表。

va_arg函数用于从参数列表中取出一个参数，参数类型由type指定。

va_copy函数用于复制参数列表。

va_end函数执行清理参数列表的工作。

上述函数通常用宏来实现，例如标准ANSI形式下，这些宏的定义是：

typedef char * va_list; //字符串指针
#define _INTSIZEOF(n) ( (sizeof(n) + sizeof(int) - 1) & ~(sizeof(int) - 1) )
#define va_start(ap,v) ( ap = (va_list)&v + _INTSIZEOF(v) )
#define va_arg(ap,t) ( *(t *)((ap += _INTSIZEOF(t)) - _INTSIZEOF(t)) )
#define va_end(ap) ( ap = (va_list)0 )
 使用宏_INTSIZEOF是为了按照整数字节对齐指针，因为c调用协议下面，参数入栈都是整数
字节（指针或者值）。

GNU给出的一个实例：

#include <stdio.h>
#include <stdarg.h>
void
foo(char *fmt, ...)
{
  va_list ap;
  int d;
  char c, *s;
　va_start(ap, fmt);
　while (*fmt)
     switch (*fmt++) {
     case 's': /* string */
     s = va_arg(ap, char *);
         printf("string %s\n", s);
         break;
     case 'd': /* int */
         d = va_arg(ap, int);
         printf("int %d\n", d);
         break;
     case 'c': /* char */
/* need a cast here since va_arg only takes fully promoted types */
        c = (char) va_arg(ap, int);
        printf("char %c\n", c);
        break;
   }
   va_end(ap);
}
说明：
va_start(ap, fmt);用于根据fmt初始化可变参数列表。
va_arg(ap, char *);用于从参数列表中取出一个参数，其中的char *用于指定所取的参数
的类型为字符串。每次调用va_arg后，参数列表ａｐ都会被更改，以使得下次调用时能得到
下一个参数。
va_end(ap);用于对参数列表进行一些清理工作。调用完va_end后，ap便不再有效。
以上程序给了我们一个实现printf函数的是思路，即：通过调用va_start函数，来得到参数
列表，然后我们一个个取出参数来进行输出即可。


3.实例

例如：对于printf(“a=%d,b=%ｓ,c=%c”,a,b,c)语句;fmt的值为a=%d,b=%ｓ,c=%c，调用va_s
tart函数将参数a,b,c存入了ap中。注意到：fmt中的%为特殊字符，紧跟%后的参数指明了参
数类型．
因此我们的简易printf函数如下：

#include <stdio.h>
#include <stdarg.h>
void
myprintf(char *fmt, ...)
{
  va_list ap;
  int d;
  double f;
  char c;
  char *s;
  char flag;
  va_start(ap,fmt);
  while (*fmt){
  　flag=*fmt++;
  　if(flag!='%'){
 putchar(flag);
 continue;
　　}
　　flag=*fmt++;//记得后移一位
    switch (flag)
　　{
　　　case 's':
 s=va_arg(ap,char*);
 printf("%s",s);
 break;
　　　case 'd': /* int */        
 d = va_arg(ap, int);        
 printf("%d", d);        
 break;    
　　　case 'f': /* double*/        
 d = va_arg(ap,double);        
 printf("%d", d);        
 break;
　　　case 'c': /* char*/  
 c = (char)va_arg(ap,int);       
 printf("%c", c);       
 break;
　　　default:
 putchar(flag);
 break;
　　}  
  }
  va_end(ap);
}
int main(){
　　char str[10]="linuxcode";
　　int i=1024;
　　double f=3.1415926;
　　char c='V';
　　myprintf("string is:%s,int is:%d,double is:%f,char is :%c",str,i,f,c);
}
 从上面我们可以知道可变参数函数的编写，必须要传入一个参数fmt，用来告诉我们的函数
怎样去确定参数的个数。我们的可变参数函数是通过自己解析这个参数来确定函数参数个数
的。
比如，我们编写一个求和函数，其函数实现如下：

int sum(int cnt,...){
    int sum=0;
int i;
    va_list ap;
    va_start(ap,cnt);
for(i=0;i<cnt;++i)
 sum+=va_arg(ap,int);
    va_end(ap);
return sum;
}
 原文博客：http://www.jb51.net/article/43192.htm

va_list使用vprintf()实例：

#include <stdio.h>
#include <stdarg.h>
 
void my_print(const char* format, ...)
{
    int n;
    va_list arg_list;
    va_start(arg_list, format);
    n = vprintf(format, arg_list);
    va_end(arg_list);
}
 
int main(int argc, char *argv[])
{
    int ai = 0;
     
    my_print("%d\n", ai);
     
     
    return 0;
}