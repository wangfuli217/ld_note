C Project Template
-------------------
Every C project has a lazy start by creating lots of command line parsers, Makefiles, 
help and usage messages. C project template aims to take you to the solution point! 
The point you write the code that solves your problem.

Get Started
------------------
Clone the project
------------------->
git clone git@github.com:pantuza/c-project-template.git

Change the project.conf file
------------------->
This file contains all necessary variable to configure your project. Just open it 
with your favorite text editor and change variables.

cd c-project-template
vim project.conf

Start your new C project
------------------->
make start

How to customize my new project
------------------
This page will guide you to how to customize your new project generated by C project template. 
The following customizations are necessary for your project:
    Command line options
    Default messages (help, usage, version)
    Writing your program
    Writing tests
    Adding extra libraries


How to check the new project
------------------
To verify that, you should compile, run and test the project without any modifications by doing the following steps:

Dependencies
------------------>
Check if all dependencies are ok:
    Cmocka is installed
    Valgrind is installed

Compiling the project
------------------>
$> make
You will see compilation log output and them the following message:
    Binary file placed at bin/binary

Running binary file
------------------>
$> ./bin/binary

You should see the command line options printed as a debugging message.
Testing project

$> make tests
------------------>
You will see compilation output and the tests running results.



How to customize my new project
-------------------
    This page will guide you to how to customize your new project generated by 
C project template. The following customizations are necessary for your project:
    Command line options
    Default messages (help, usage, version)
    Writing your program
    Writing tests
    Adding extra libraries

Makefile target rules
-------------------
The following target rules are available in the project.
    all - Compiles and link the program generating the binary file (default rule)
    tests - Compiles tests using cmocka and run the test binary
    start - Creates a new project usign C project template based on project.conf file
    clean - Clean the project by removing generated files
    valgrind - Run valgrind tool to find memory leaks and buffer overflows
    help - Prints a help message with target rules

What is included
-------------------
    Generic Makefile
    Command line options parsing (args.c, args.h)
    Colors for pretty printing (colors.h)
    Default messages like help, usage, version (messages.c, messages.h)
    Project structure directories (src, bin, lib, log, test)
    Test runner and structure (test/main.c)
    Valgrind execution to track memory leaks
