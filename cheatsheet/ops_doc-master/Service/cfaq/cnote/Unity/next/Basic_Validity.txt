TEST_ASSERT_TRUE(condition)
TEST_ASSERT_FALSE(condition)

assert(通用->自定制->代码定制){
1. 通用的断言方式
TEST_ASSERT(condition)
  int a = 1; 
  TEST_ASSERT( a == 1 ); //this one will pass 
  TEST_ASSERT( a == 2 ); //this one will fail
    TestMyModule.c:15:test_One:FAIL
2. 自定制化断言方式
  TEST_ASSERT_MESSAGE( a == 2 , "a isn't 2, end of the world!");
    TestMyModule.c:15:test_one:FAIL:a isn't 2, end of the world!
3. 代码定制化断言方式
  Numerical Assertions: Integers
    TEST_ASSERT_EQUAL_INT(2, a);
    TEST_ASSERT_EQUAL_HEX8(5, a);
    TEST_ASSERT_EQUAL_UINT16(0x8000, a);
      TestMyModule.c:15:test_One:FAIL:Expected 2 was 1 
      TestMyModule.c:23:test_Two:FAIL:Expected 0x05 was 0x01 
      TestMyModule.c:31:test_Three:FAIL:Expected 32768 was 1
    TEST_ASSERT_EQUAL_INT_MESSAGE( 5, val, "Not five? Not alive!" );   -- 提示扩展
  Numerical Assertions: Bitwise
  Numerical Assertions: Floats
    TEST_ASSERT_EQUAL_FLOAT( 3.45, pi );
  String Assertions
    TEST_ASSERT_EQUAL_STRING( "Attention, Dr. Surly", greeting );
  Pointer Assertions
  Memory Assertions
  Arrays
    TEST_ASSERT_EQUAL_INT_ARRAY( expArray, actualArray, numElements );
    TEST_ASSERT_EQUAL_INT_ARRAY_MESSAGE( e, a, 20, "Oh snap!" ); -- 提示扩展
  _MESSAGE
}
  
unit(){
test_FunctionUnderTest_should_ReturnFive //以test开头
spec_FunctionUnderTest_should_ReturnFive //以spec开头
void test_FunctionUnderTest_should_ReturnFive(void) {
    TEST_ASSERT_EQUAL_INT( 5, FunctionUnderTest() );
    TEST_ASSERT_EQUAL_INT( 5, FunctionUnderTest() ); //twice even!
}

}
  
TEST_ASSERT_UNLESS(condition)
TEST_FAIL() 
TEST_FAIL_MESSAGE(message)


