面向对象编程已死，OOP 永存！
https://github.com/aras-p

http://aras-p.info/texts/files/2018Academy%20-%20ECS-DoD.pdf
https://github.com/aras-p/dod-playground

拥有OO思想的编程语言称为"OOP"，使用OO思想的设计和架构技术称为"OOD"。

    我认为，使用OOP的语言特性却不遵循OOD设计规则的代码，不是OO代码。大多数反对OO的
文章所攻击的代码都不是真正的OO代码。
    OOP代码的名声很差，其中部分原因就是大多数OOP代码没有遵循OOD原则，所以其实不是
真正的OO代码。

OOP四大支柱 --> OOP的四大工具
  抽象
  封装
  多态
  继承
SOLID(https://en.wikipedia.org/wiki/SOLID)思想体系来快速评价设计的质量。
    单一职责原则(Single Responsibility Principle)。每个类应该只有一个目的。
如果类A有两个目的，那么分别创建类B和类C来处理每个目的，再从B和C中提炼出A。
    开放/封闭原则(Open / Closed Principle)。软件随时都在变化(即维护很重要)。
把可能会变化的部分放到实现(即具体的类)中，给不太可能会变化的东西建立接口(比如抽象基类)。
    里氏替换原则(Liskov Substitution Principle)。每个接口的实现都应该100%遵循接口的要求，
即任何能在接口上运行的算法都应该能在具体的实现上运行。
    接口隔离原则(Interface Segregation Principle )。接口应当尽量小，保证每一部分代码都
“只需了解”最小量的代码，也就是说避免不必要的依赖。
    依赖倒置原则(Dependency Inversion Principle)。两个具体的实现直接通信并且互相依赖的模式，
可以通过将两者之间的通信接口正规化成第三个类，将这个类作为两者之间的接口的方式解耦合。
这第三个类可以是个抽象积累，定义两者之间需要的调用，甚至可以只是个定义两者间传递数据的简单数据结构。
    组合重用原则(Composite Reuse Principle)。默认情况下应当使用组合，只有在必须时才使用继承。

三字母的简称来代表这些原则：SRP、OCP、LSP、ISP、DIP、CRP。




