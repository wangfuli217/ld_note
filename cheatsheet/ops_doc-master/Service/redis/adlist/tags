!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALEN	adlist.c	174;"	d	file:
AL_START_HEAD	adlist.h	10;"	d
AL_START_TAIL	adlist.h	11;"	d
__ADLIST_H_	adlist.h	2;"	d
__TESTHELP_H	testhelp.h	40;"	d
__failed_tests	testhelp.h	/^int __failed_tests = 0;$/;"	v
__test_num	testhelp.h	/^int __test_num = 0;$/;"	v
createTestListFromArray	adlist.c	/^List *createTestListFromArray(char *a[], int len)$/;"	f
direction	adlist.h	/^	int direction;$/;"	m	struct:listIter
dup	adlist.h	/^	void *(*dup)(void *ptr);$/;"	m	struct:list
dupString	adlist.c	/^void *dupString(void *s1)$/;"	f
free	adlist.h	/^	void (*free)(void *ptr);$/;"	m	struct:list
freeString	adlist.c	/^void freeString(void *ptr)$/;"	f
head	adlist.h	/^	listNode *head;$/;"	m	struct:list
len	adlist.h	/^	unsigned long len;$/;"	m	struct:list
list	adlist.h	/^typedef struct list{$/;"	s
list	adlist.h	/^} list;$/;"	t	typeref:struct:list
listAddNodeHead	adlist.c	/^list *listAddNodeHead(list *list, void *value){$/;"	f
listAddNodeTail	adlist.c	/^list *listAddNodeTail(list *list, void *value){$/;"	f
listCreate	adlist.c	/^list *listCreate(void){$/;"	f
listDelNode	adlist.c	/^void listDelNode(list *list, listNode *node){$/;"	f
listDup	adlist.c	/^list *listDup(list *orig){$/;"	f
listFirst	adlist.h	27;"	d
listGenIterator	adlist.c	/^listIter *listGenIterator(list *list, int direction){$/;"	f
listGetDup	adlist.h	37;"	d
listGetFree	adlist.h	38;"	d
listGetMatch	adlist.h	39;"	d
listInsertNode	adlist.c	/^list *listInsertNode(list *list, listNode *old_node, void *value, int after){$/;"	f
listIter	adlist.h	/^typedef struct listIter{$/;"	s
listIter	adlist.h	/^} listIter;$/;"	t	typeref:struct:listIter
listLast	adlist.h	28;"	d
listLength	adlist.h	26;"	d
listNext	adlist.c	/^listNode *listNext(listIter *iter){$/;"	f
listNextNode	adlist.h	30;"	d
listNode	adlist.h	/^typedef struct listNode{$/;"	s
listNode	adlist.h	/^} listNode;$/;"	t	typeref:struct:listNode
listNodeValue	adlist.h	31;"	d
listPrevNode	adlist.h	29;"	d
listRelease	adlist.c	/^void listRelease(list *list){$/;"	f
listReleaseIterator	adlist.c	/^void listReleaseIterator(listIter *iter){$/;"	f
listSearchKey	adlist.c	/^listNode *listSearchKey(list *list, void *key){$/;"	f
listSetDupMethod	adlist.h	33;"	d
listSetFreeMethod	adlist.h	34;"	d
listSetMatchMethod	adlist.h	35;"	d
main	adlist.c	/^int main()$/;"	f
main	adlist.c	/^int main(void){$/;"	f
match	adlist.h	/^	int (*match)(void *ptr, void *key);$/;"	m	struct:list
matchString	adlist.c	/^int matchString(void *s1, void *s2)$/;"	f
newString	adlist.c	/^char *newString(char *s)$/;"	f
next	adlist.h	/^	listNode *next;$/;"	m	struct:listIter
next	adlist.h	/^	struct listNode *next;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
prev	adlist.h	/^	struct listNode *prev;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
tail	adlist.h	/^	listNode *tail;$/;"	m	struct:list
testDup	adlist.c	/^void *testDup(void *ptr){$/;"	f
testFree	adlist.c	/^void testFree(void *ptr){$/;"	f
test_cond	testhelp.h	44;"	d
test_report	testhelp.h	48;"	d
value	adlist.h	/^	void *value;$/;"	m	struct:listNode
