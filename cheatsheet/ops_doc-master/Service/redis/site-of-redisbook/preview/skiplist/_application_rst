跳跃表的应用
------------------

和前面介绍的用途广泛的链表、字典等数据结构不同，
跳跃表在 Redis 中的作用非常单一 —— 
它是有序集合键的其中一种底层实现。

举个例子，
如果键 ``final-exam`` 是一个使用跳跃表来作为底层实现的有序集合，
那么执行以下命令：

::

    redis 127.0.0.1:6379> ZADD final-exam 60.0 "peter"
    (integer) 1

Redis 将会把一个新节点添加到跳跃表中，
新节点的分值为 ``60.0`` ，
而成员对象则是一个字符串对象，
对象中保存了字符串 ``"peter"`` 。

另外，
当客户端对 ``final-exam`` 键进行顺序性操作，
比如执行 :ref:`ZRANK` 、 :ref:`ZRANGE` 和 :ref:`ZRANGEBYSCORE` 等命令时，
程序将在键所对应的跳跃表中进行遍历，
并执行相关的操作。

当执行 :ref:`ZRANGE` 时，
程序从跳跃表的表头节点开始，
沿着各个节点第一层的前进指针移动，
按分值从小到大的有序方式打印跳跃表中的各个元素：

::

    redis 127.0.0.1:6379> ZRANGE final-exam 0 -1 WITHSCORES
    1) "peter"
    2) "60"
    3) "han-meimei"
    4) "78"
    5) "li-lei"
    6) "78"
    7) "john"
    8) "95"

让执行 :ref:`ZREVRANGE` 时，
程序从跳跃表的表尾节点开始，
沿着各个节点的后退指针从表尾向表头进行遍历，
按分值从大到小的有序方式打印跳跃表中的各个元素：

::

    redis 127.0.0.1:6379> ZREVRANGE final-exam 0 -1 WITHSCORES
    1) "john"
    2) "95"
    3) "li-lei"
    4) "78"
    5) "han-meimei"
    6) "78"
    7) "peter"
    8) "60"

当执行命令 :ref:`ZRANK` 时，
程序从表头向表尾查找目标节点，
并计算它在跳跃表中的排位：

::

    redis 127.0.0.1:6379> ZRANK final-exam "li-lei"
    (integer) 2

有序集合的其他范围型操作的实现方式也和上面列举的几个例子类似。
