!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALEN	dupfree.c	6;"	d	file:
AL_START_HEAD	adlist.h	127;"	d
AL_START_TAIL	adlist.h	128;"	d
HAVE_MALLOC_SIZE	zmalloc.h	43;"	d
HAVE_MALLOC_SIZE	zmalloc.h	53;"	d
HAVE_MALLOC_SIZE	zmalloc.h	61;"	d
PREFIX_SIZE	zmalloc.c	48;"	d	file:
PREFIX_SIZE	zmalloc.c	51;"	d	file:
PREFIX_SIZE	zmalloc.c	53;"	d	file:
ZMALLOC_LIB	zmalloc.h	40;"	d
ZMALLOC_LIB	zmalloc.h	50;"	d
ZMALLOC_LIB	zmalloc.h	66;"	d
__ADLIST_H__	adlist.h	32;"	d
__ZMALLOC_H	zmalloc.h	33;"	d
__str	zmalloc.h	37;"	d
__xstr	zmalloc.h	36;"	d
calloc	zmalloc.c	60;"	d	file:
calloc	zmalloc.c	65;"	d	file:
createTestListFromArray	dupfree.c	/^list *createTestListFromArray(char *a[], int len)$/;"	f
create_object	object.c	/^object* create_object(void)$/;"	f
direction	adlist.h	/^    int direction;$/;"	m	struct:listIter
dup	adlist.h	/^    void *(*dup)(void *ptr);$/;"	m	struct:list
dupString	dupfree.c	/^void *dupString(void *s1)$/;"	f
free	adlist.h	/^    void (*free)(void *ptr);$/;"	m	struct:list
free	zmalloc.c	62;"	d	file:
free	zmalloc.c	67;"	d	file:
freeString	dupfree.c	/^void freeString(void *ptr)$/;"	f
free_object	object.c	/^void free_object(object* obj)$/;"	f
head	adlist.h	/^    listNode *head;$/;"	m	struct:list
len	adlist.h	/^    unsigned long len;$/;"	m	struct:list
list	adlist.h	/^typedef struct list {$/;"	s
list	adlist.h	/^} list;$/;"	t	typeref:struct:list
listAddNodeHead	adlist.c	/^list *listAddNodeHead(list *list, void *value)$/;"	f
listAddNodeTail	adlist.c	/^list *listAddNodeTail(list *list, void *value)$/;"	f
listCreate	adlist.c	/^list *listCreate(void)$/;"	f
listDelNode	adlist.c	/^void listDelNode(list *list, listNode *node)$/;"	f
listDup	adlist.c	/^list *listDup(list *orig)$/;"	f
listFirst	adlist.h	91;"	d
listGetDupMethod	adlist.h	105;"	d
listGetFree	adlist.h	106;"	d
listGetIterator	adlist.c	/^listIter *listGetIterator(list *list, int direction)$/;"	f
listGetMatchMethod	adlist.h	107;"	d
listIndex	adlist.c	/^listNode *listIndex(list *list, long index) {$/;"	f
listInsertNode	adlist.c	/^list *listInsertNode(list *list, listNode *old_node, void *value, int after) {$/;"	f
listIter	adlist.h	/^typedef struct listIter {$/;"	s
listIter	adlist.h	/^} listIter;$/;"	t	typeref:struct:listIter
listLast	adlist.h	93;"	d
listLength	adlist.h	89;"	d
listNext	adlist.c	/^listNode *listNext(listIter *iter)$/;"	f
listNextNode	adlist.h	97;"	d
listNode	adlist.h	/^typedef struct listNode {$/;"	s
listNode	adlist.h	/^} listNode;$/;"	t	typeref:struct:listNode
listNodeValue	adlist.h	99;"	d
listPrevNode	adlist.h	95;"	d
listRelease	adlist.c	/^void listRelease(list *list)$/;"	f
listReleaseIterator	adlist.c	/^void listReleaseIterator(listIter *iter) {$/;"	f
listRewind	adlist.c	/^void listRewind(list *list, listIter *li) {$/;"	f
listRewindTail	adlist.c	/^void listRewindTail(list *list, listIter *li) {$/;"	f
listRotate	adlist.c	/^void listRotate(list *list) {$/;"	f
listSearchKey	adlist.c	/^listNode *listSearchKey(list *list, void *key)$/;"	f
listSetDupMethod	adlist.h	101;"	d
listSetFreeMethod	adlist.h	102;"	d
listSetMatchMethod	adlist.h	103;"	d
main	dupfree.c	/^int main(void)$/;"	f
main	main.c	/^void main(void)$/;"	f
malloc	zmalloc.c	59;"	d	file:
malloc	zmalloc.c	64;"	d	file:
match	adlist.h	/^    int (*match)(void *ptr, void *key);$/;"	m	struct:list
matchString	dupfree.c	/^int matchString(void *s1, void *s2)$/;"	f
newString	dupfree.c	/^char *newString(char *s)$/;"	f
next	adlist.h	/^    listNode *next;$/;"	m	struct:listIter
next	adlist.h	/^    struct listNode *next;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
object	object.h	/^typedef struct { } object;$/;"	t	typeref:struct:__anon1
prev	adlist.h	/^    struct listNode *prev;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
realloc	zmalloc.c	61;"	d	file:
realloc	zmalloc.c	66;"	d	file:
tail	adlist.h	/^    listNode *tail;$/;"	m	struct:list
test_add_node_and_advance_by_pointer	main.c	/^void test_add_node_and_advance_by_pointer(void)$/;"	f
test_empty_list	main.c	/^void test_empty_list(void)$/;"	f
test_iterator	main.c	/^void test_iterator(void)$/;"	f
update_zmalloc_stat_add	zmalloc.c	71;"	d	file:
update_zmalloc_stat_add	zmalloc.c	74;"	d	file:
update_zmalloc_stat_alloc	zmalloc.c	88;"	d	file:
update_zmalloc_stat_free	zmalloc.c	98;"	d	file:
update_zmalloc_stat_sub	zmalloc.c	72;"	d	file:
update_zmalloc_stat_sub	zmalloc.c	80;"	d	file:
used_memory	zmalloc.c	/^static size_t used_memory = 0;$/;"	v	file:
used_memory_mutex	zmalloc.c	/^pthread_mutex_t used_memory_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
value	adlist.h	/^    void *value;$/;"	m	struct:listNode
zcalloc	zmalloc.c	/^void *zcalloc(size_t size) {$/;"	f
zfree	zmalloc.c	/^void zfree(void *ptr) {$/;"	f
zlibc_free	zmalloc.c	/^void zlibc_free(void *ptr) {$/;"	f
zmalloc	zmalloc.c	/^void *zmalloc(size_t size) {$/;"	f
zmalloc_default_oom	zmalloc.c	/^static void zmalloc_default_oom(size_t size) {$/;"	f	file:
zmalloc_enable_thread_safeness	zmalloc.c	/^void zmalloc_enable_thread_safeness(void) {$/;"	f
zmalloc_get_fragmentation_ratio	zmalloc.c	/^float zmalloc_get_fragmentation_ratio(void) {$/;"	f
zmalloc_get_private_dirty	zmalloc.c	/^size_t zmalloc_get_private_dirty(void) {$/;"	f
zmalloc_get_rss	zmalloc.c	/^size_t zmalloc_get_rss(void) {$/;"	f
zmalloc_oom_handler	zmalloc.c	/^static void (*zmalloc_oom_handler)(size_t) = zmalloc_default_oom;$/;"	v	file:
zmalloc_set_oom_handler	zmalloc.c	/^void zmalloc_set_oom_handler(void (*oom_handler)(size_t)) {$/;"	f
zmalloc_size	zmalloc.c	/^size_t zmalloc_size(void *ptr) {$/;"	f
zmalloc_size	zmalloc.h	44;"	d
zmalloc_size	zmalloc.h	54;"	d
zmalloc_size	zmalloc.h	62;"	d
zmalloc_thread_safe	zmalloc.c	/^static int zmalloc_thread_safe = 0;$/;"	v	file:
zmalloc_used_memory	zmalloc.c	/^size_t zmalloc_used_memory(void) {$/;"	f
zrealloc	zmalloc.c	/^void *zrealloc(void *ptr, size_t size) {$/;"	f
zstrdup	zmalloc.c	/^char *zstrdup(const char *s) {$/;"	f
