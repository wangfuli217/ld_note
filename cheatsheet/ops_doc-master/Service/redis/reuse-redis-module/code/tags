!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AL_START_HEAD	adlist/adlist.h	127;"	d
AL_START_TAIL	adlist/adlist.h	128;"	d
DICT_ERR	dict/dict.h	45;"	d
DICT_HT_INITIAL_SIZE	dict/dict.h	154;"	d
DICT_NOTUSED	dict/dict.h	48;"	d
DICT_OK	dict/dict.h	44;"	d
HAVE_MALLOC_SIZE	adlist/zmalloc.h	43;"	d
HAVE_MALLOC_SIZE	adlist/zmalloc.h	53;"	d
HAVE_MALLOC_SIZE	adlist/zmalloc.h	61;"	d
HAVE_MALLOC_SIZE	dict/zmalloc.h	42;"	d
HAVE_MALLOC_SIZE	dict/zmalloc.h	52;"	d
HAVE_MALLOC_SIZE	dict/zmalloc.h	60;"	d
HAVE_MALLOC_SIZE	intset/zmalloc.h	42;"	d
HAVE_MALLOC_SIZE	intset/zmalloc.h	52;"	d
HAVE_MALLOC_SIZE	intset/zmalloc.h	60;"	d
HAVE_MALLOC_SIZE	sds/zmalloc.h	42;"	d
HAVE_MALLOC_SIZE	sds/zmalloc.h	52;"	d
HAVE_MALLOC_SIZE	sds/zmalloc.h	60;"	d
HAVE_MALLOC_SIZE	ziplist/zmalloc.h	42;"	d
HAVE_MALLOC_SIZE	ziplist/zmalloc.h	52;"	d
HAVE_MALLOC_SIZE	ziplist/zmalloc.h	60;"	d
INT24_MAX	ziplist/ziplist.c	195;"	d	file:
INT24_MIN	ziplist/ziplist.c	196;"	d	file:
INTSET_ENC_INT16	intset/intset.c	40;"	d	file:
INTSET_ENC_INT16	intset/main.c	13;"	d	file:
INTSET_ENC_INT32	intset/intset.c	41;"	d	file:
INTSET_ENC_INT32	intset/main.c	14;"	d	file:
INTSET_ENC_INT64	intset/intset.c	42;"	d	file:
INTSET_ENC_INT64	intset/main.c	15;"	d	file:
KeyObject	dict/int_dict_type.h	/^} KeyObject;$/;"	t	typeref:struct:__anon3
PREFIX_SIZE	adlist/zmalloc.c	48;"	d	file:
PREFIX_SIZE	adlist/zmalloc.c	51;"	d	file:
PREFIX_SIZE	adlist/zmalloc.c	53;"	d	file:
PREFIX_SIZE	dict/zmalloc.c	48;"	d	file:
PREFIX_SIZE	dict/zmalloc.c	51;"	d	file:
PREFIX_SIZE	dict/zmalloc.c	53;"	d	file:
PREFIX_SIZE	intset/zmalloc.c	48;"	d	file:
PREFIX_SIZE	intset/zmalloc.c	51;"	d	file:
PREFIX_SIZE	intset/zmalloc.c	53;"	d	file:
PREFIX_SIZE	sds/zmalloc.c	48;"	d	file:
PREFIX_SIZE	sds/zmalloc.c	51;"	d	file:
PREFIX_SIZE	sds/zmalloc.c	53;"	d	file:
PREFIX_SIZE	ziplist/zmalloc.c	48;"	d	file:
PREFIX_SIZE	ziplist/zmalloc.c	51;"	d	file:
PREFIX_SIZE	ziplist/zmalloc.c	53;"	d	file:
SDS_MAX_PREALLOC	sds/sds.h	34;"	d
ValueObject	dict/int_dict_type.h	/^} ValueObject;$/;"	t	typeref:struct:__anon4
ZIPLIST_BYTES	ziplist/ziplist.c	207;"	d	file:
ZIPLIST_ENTRY_END	ziplist/ziplist.c	219;"	d	file:
ZIPLIST_ENTRY_HEAD	ziplist/ziplist.c	215;"	d	file:
ZIPLIST_ENTRY_TAIL	ziplist/ziplist.c	217;"	d	file:
ZIPLIST_HEAD	ziplist/ziplist.h	31;"	d
ZIPLIST_HEADER_SIZE	ziplist/ziplist.c	213;"	d	file:
ZIPLIST_INCR_LENGTH	ziplist/ziplist.c	230;"	d	file:
ZIPLIST_LENGTH	ziplist/ziplist.c	211;"	d	file:
ZIPLIST_TAIL	ziplist/ziplist.h	32;"	d
ZIPLIST_TAIL_OFFSET	ziplist/ziplist.c	209;"	d	file:
ZIP_BIGLEN	ziplist/ziplist.c	176;"	d	file:
ZIP_DECODE_LENGTH	ziplist/ziplist.c	338;"	d	file:
ZIP_DECODE_PREVLEN	ziplist/ziplist.c	436;"	d	file:
ZIP_DECODE_PREVLENSIZE	ziplist/ziplist.c	418;"	d	file:
ZIP_END	ziplist/ziplist.c	175;"	d	file:
ZIP_ENTRY_ENCODING	ziplist/ziplist.c	255;"	d	file:
ZIP_INT_16B	ziplist/ziplist.c	184;"	d	file:
ZIP_INT_24B	ziplist/ziplist.c	187;"	d	file:
ZIP_INT_32B	ziplist/ziplist.c	185;"	d	file:
ZIP_INT_64B	ziplist/ziplist.c	186;"	d	file:
ZIP_INT_8B	ziplist/ziplist.c	188;"	d	file:
ZIP_INT_IMM_MASK	ziplist/ziplist.c	190;"	d	file:
ZIP_INT_IMM_MAX	ziplist/ziplist.c	192;"	d	file:
ZIP_INT_IMM_MIN	ziplist/ziplist.c	191;"	d	file:
ZIP_INT_IMM_VAL	ziplist/ziplist.c	193;"	d	file:
ZIP_INT_MASK	ziplist/ziplist.c	180;"	d	file:
ZIP_IS_STR	ziplist/ziplist.c	199;"	d	file:
ZIP_STR_06B	ziplist/ziplist.c	181;"	d	file:
ZIP_STR_14B	ziplist/ziplist.c	182;"	d	file:
ZIP_STR_32B	ziplist/ziplist.c	183;"	d	file:
ZIP_STR_MASK	ziplist/ziplist.c	179;"	d	file:
ZMALLOC_LIB	adlist/zmalloc.h	40;"	d
ZMALLOC_LIB	adlist/zmalloc.h	50;"	d
ZMALLOC_LIB	adlist/zmalloc.h	66;"	d
ZMALLOC_LIB	dict/zmalloc.h	39;"	d
ZMALLOC_LIB	dict/zmalloc.h	49;"	d
ZMALLOC_LIB	dict/zmalloc.h	65;"	d
ZMALLOC_LIB	intset/zmalloc.h	39;"	d
ZMALLOC_LIB	intset/zmalloc.h	49;"	d
ZMALLOC_LIB	intset/zmalloc.h	65;"	d
ZMALLOC_LIB	sds/zmalloc.h	39;"	d
ZMALLOC_LIB	sds/zmalloc.h	49;"	d
ZMALLOC_LIB	sds/zmalloc.h	65;"	d
ZMALLOC_LIB	ziplist/zmalloc.h	39;"	d
ZMALLOC_LIB	ziplist/zmalloc.h	49;"	d
ZMALLOC_LIB	ziplist/zmalloc.h	65;"	d
_BSD_SOURCE	dict/fmacros.h	33;"	d
_BSD_SOURCE	ziplist/fmacros.h	33;"	d
_FILE_OFFSET_BITS	dict/fmacros.h	46;"	d
_FILE_OFFSET_BITS	ziplist/fmacros.h	46;"	d
_GNU_SOURCE	dict/fmacros.h	36;"	d
_GNU_SOURCE	ziplist/fmacros.h	36;"	d
_LARGEFILE_SOURCE	dict/fmacros.h	45;"	d
_LARGEFILE_SOURCE	ziplist/fmacros.h	45;"	d
_REDIS_FMACRO_H	dict/fmacros.h	31;"	d
_REDIS_FMACRO_H	ziplist/fmacros.h	31;"	d
_XOPEN_SOURCE	dict/fmacros.h	40;"	d
_XOPEN_SOURCE	dict/fmacros.h	42;"	d
_XOPEN_SOURCE	ziplist/fmacros.h	40;"	d
_XOPEN_SOURCE	ziplist/fmacros.h	42;"	d
__ADLIST_H__	adlist/adlist.h	32;"	d
__DICT_H	dict/dict.h	39;"	d
__ENDIANCONV_H	intset/endianconv.h	34;"	d
__ENDIANCONV_H	ziplist/endianconv.h	34;"	d
__INTSET_H	intset/intset.h	32;"	d
__REDIS_UTIL_H	ziplist/util.h	31;"	d
__SDS_H	sds/sds.h	32;"	d
__ZMALLOC_H	adlist/zmalloc.h	33;"	d
__ZMALLOC_H	dict/zmalloc.h	32;"	d
__ZMALLOC_H	intset/zmalloc.h	32;"	d
__ZMALLOC_H	sds/zmalloc.h	32;"	d
__ZMALLOC_H	ziplist/zmalloc.h	32;"	d
__str	adlist/zmalloc.h	37;"	d
__str	dict/zmalloc.h	36;"	d
__str	intset/zmalloc.h	36;"	d
__str	sds/zmalloc.h	36;"	d
__str	ziplist/zmalloc.h	36;"	d
__xstr	adlist/zmalloc.h	36;"	d
__xstr	dict/zmalloc.h	35;"	d
__xstr	intset/zmalloc.h	35;"	d
__xstr	sds/zmalloc.h	35;"	d
__xstr	ziplist/zmalloc.h	35;"	d
__ziplistCascadeUpdate	ziplist/ziplist.c	/^static unsigned char *__ziplistCascadeUpdate(unsigned char *zl, unsigned char *p) {$/;"	f	file:
__ziplistDelete	ziplist/ziplist.c	/^static unsigned char *__ziplistDelete(unsigned char *zl, unsigned char *p, unsigned int num) {$/;"	f	file:
__ziplistInsert	ziplist/ziplist.c	/^static unsigned char *__ziplistInsert(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned int slen) {$/;"	f	file:
_assert	intset/intset.c	/^void _assert(char *estr, char *file, int line) {$/;"	f
_dictClear	dict/dict.c	/^int _dictClear(dict *d, dictht *ht)$/;"	f
_dictExpandIfNeeded	dict/dict.c	/^static int _dictExpandIfNeeded(dict *d)$/;"	f	file:
_dictInit	dict/dict.c	/^int _dictInit(dict *d, dictType *type,$/;"	f
_dictKeyIndex	dict/dict.c	/^static int _dictKeyIndex(dict *d, const void *key)$/;"	f	file:
_dictNextPower	dict/dict.c	/^static unsigned long _dictNextPower(unsigned long size)$/;"	f	file:
_dictRehashStep	dict/dict.c	/^static void _dictRehashStep(dict *d) {$/;"	f	file:
_dictReset	dict/dict.c	/^static void _dictReset(dictht *ht)$/;"	f	file:
_intsetGet	intset/intset.c	/^static int64_t _intsetGet(intset *is, int pos) {$/;"	f	file:
_intsetGetEncoded	intset/intset.c	/^static int64_t _intsetGetEncoded(intset *is, int pos, uint8_t enc) {$/;"	f	file:
_intsetSet	intset/intset.c	/^static void _intsetSet(intset *is, int pos, int64_t value) {$/;"	f	file:
_intsetValueEncoding	intset/intset.c	/^static uint8_t _intsetValueEncoding(int64_t v) {$/;"	f	file:
assert	intset/intset.c	444;"	d	file:
buf	sds/sds.h	/^    char buf[];$/;"	m	struct:sdshdr
calloc	adlist/zmalloc.c	60;"	d	file:
calloc	adlist/zmalloc.c	65;"	d	file:
calloc	dict/zmalloc.c	60;"	d	file:
calloc	dict/zmalloc.c	65;"	d	file:
calloc	intset/zmalloc.c	60;"	d	file:
calloc	intset/zmalloc.c	65;"	d	file:
calloc	sds/zmalloc.c	60;"	d	file:
calloc	sds/zmalloc.c	65;"	d	file:
calloc	ziplist/zmalloc.c	60;"	d	file:
calloc	ziplist/zmalloc.c	65;"	d	file:
checkConsistency	intset/intset.c	/^void checkConsistency(intset *is) {$/;"	f
contents	intset/intset.h	/^    int8_t contents[];  $/;"	m	struct:intset
createIntList	ziplist/ziplist.c	/^unsigned char *createIntList() {$/;"	f
createList	ziplist/ziplist.c	/^unsigned char *createList() {$/;"	f
createSet	intset/intset.c	/^intset *createSet(int bits, int size) {$/;"	f
create_key	dict/int_dict_type.c	/^KeyObject* create_key(void)$/;"	f
create_object	adlist/object.c	/^object* create_object(void)$/;"	f
create_sds_and_check_its_property	sds/main.c	/^void create_sds_and_check_its_property(void)$/;"	f
create_value	dict/int_dict_type.c	/^ValueObject* create_value(void)$/;"	f
d	dict/dict.h	/^    dict *d;                $/;"	m	struct:dictIterator
d2string	ziplist/util.c	/^int d2string(char *buf, size_t len, double value) {$/;"	f
debug	ziplist/ziplist.c	1427;"	d	file:
dict	dict/dict.h	/^typedef struct dict {$/;"	s
dict	dict/dict.h	/^} dict;$/;"	t	typeref:struct:dict
dictAdd	dict/dict.c	/^int dictAdd(dict *d, void *key, void *val)$/;"	f
dictAddRaw	dict/dict.c	/^dictEntry *dictAddRaw(dict *d, void *key)$/;"	f
dictCompareKeys	dict/dict.h	185;"	d
dictCreate	dict/dict.c	/^dict *dictCreate(dictType *type,$/;"	f
dictDelete	dict/dict.c	/^int dictDelete(dict *ht, const void *key) {$/;"	f
dictDeleteNoFree	dict/dict.c	/^int dictDeleteNoFree(dict *ht, const void *key) {$/;"	f
dictDisableResize	dict/dict.c	/^void dictDisableResize(void) {$/;"	f
dictEmpty	dict/dict.c	/^void dictEmpty(dict *d) {$/;"	f
dictEnableResize	dict/dict.c	/^void dictEnableResize(void) {$/;"	f
dictEntry	dict/dict.h	/^typedef struct dictEntry {$/;"	s
dictEntry	dict/dict.h	/^} dictEntry;$/;"	t	typeref:struct:dictEntry
dictExpand	dict/dict.c	/^int dictExpand(dict *d, unsigned long size)$/;"	f
dictFetchValue	dict/dict.c	/^void *dictFetchValue(dict *d, const void *key) {$/;"	f
dictFind	dict/dict.c	/^dictEntry *dictFind(dict *d, const void *key)$/;"	f
dictFreeKey	dict/dict.h	174;"	d
dictFreeVal	dict/dict.h	157;"	d
dictGenCaseHashFunction	dict/dict.c	/^unsigned int dictGenCaseHashFunction(const unsigned char *buf, int len) {$/;"	f
dictGenHashFunction	dict/dict.c	/^unsigned int dictGenHashFunction(const void *key, int len) {$/;"	f
dictGenericDelete	dict/dict.c	/^static int dictGenericDelete(dict *d, const void *key, int nofree)$/;"	f	file:
dictGetHashFunctionSeed	dict/dict.c	/^uint32_t dictGetHashFunctionSeed(void) {$/;"	f
dictGetIterator	dict/dict.c	/^dictIterator *dictGetIterator(dict *d)$/;"	f
dictGetKey	dict/dict.h	191;"	d
dictGetRandomKey	dict/dict.c	/^dictEntry *dictGetRandomKey(dict *d)$/;"	f
dictGetSafeIterator	dict/dict.c	/^dictIterator *dictGetSafeIterator(dict *d) {$/;"	f
dictGetSignedIntegerVal	dict/dict.h	193;"	d
dictGetUnsignedIntegerVal	dict/dict.h	194;"	d
dictGetVal	dict/dict.h	192;"	d
dictHashKey	dict/dict.h	190;"	d
dictIdentityHashFunction	dict/dict.c	/^unsigned int dictIdentityHashFunction(unsigned int key)$/;"	f
dictIntHashFunction	dict/dict.c	/^unsigned int dictIntHashFunction(unsigned int key)$/;"	f
dictIsRehashing	dict/dict.h	197;"	d
dictIterator	dict/dict.h	/^typedef struct dictIterator {$/;"	s
dictIterator	dict/dict.h	/^} dictIterator;$/;"	t	typeref:struct:dictIterator
dictNext	dict/dict.c	/^dictEntry *dictNext(dictIterator *iter)$/;"	f
dictRehash	dict/dict.c	/^int dictRehash(dict *d, int n) {$/;"	f
dictRehashMilliseconds	dict/dict.c	/^int dictRehashMilliseconds(dict *d, int ms) {$/;"	f
dictRelease	dict/dict.c	/^void dictRelease(dict *d)$/;"	f
dictReleaseIterator	dict/dict.c	/^void dictReleaseIterator(dictIterator *iter)$/;"	f
dictReplace	dict/dict.c	/^int dictReplace(dict *d, void *key, void *val)$/;"	f
dictReplaceRaw	dict/dict.c	/^dictEntry *dictReplaceRaw(dict *d, void *key) {$/;"	f
dictResize	dict/dict.c	/^int dictResize(dict *d)$/;"	f
dictSetHashFunctionSeed	dict/dict.c	/^void dictSetHashFunctionSeed(uint32_t seed) {$/;"	f
dictSetKey	dict/dict.h	178;"	d
dictSetSignedIntegerVal	dict/dict.h	168;"	d
dictSetUnsignedIntegerVal	dict/dict.h	171;"	d
dictSetVal	dict/dict.h	161;"	d
dictSize	dict/dict.h	196;"	d
dictSlots	dict/dict.h	195;"	d
dictType	dict/dict.h	/^typedef struct dictType {$/;"	s
dictType	dict/dict.h	/^} dictType;$/;"	t	typeref:struct:dictType
dict_can_resize	dict/dict.c	/^static int dict_can_resize = 1;$/;"	v	file:
dict_force_resize_ratio	dict/dict.c	/^static unsigned int dict_force_resize_ratio = 5;$/;"	v	file:
dict_hash_function_seed	dict/dict.c	/^static uint32_t dict_hash_function_seed = 5381;$/;"	v	file:
dictht	dict/dict.h	/^typedef struct dictht {$/;"	s
dictht	dict/dict.h	/^} dictht;$/;"	t	typeref:struct:dictht
direction	adlist/adlist.h	/^    int direction;$/;"	m	struct:listIter
dup	adlist/adlist.h	/^    void *(*dup)(void *ptr);$/;"	m	struct:list
encoding	intset/intset.h	/^    uint32_t encoding;$/;"	m	struct:intset
encoding	ziplist/ziplist.c	/^    unsigned char encoding;         \/\/ 编码方式$/;"	m	struct:zlentry	file:
entry	dict/dict.h	/^    dictEntry *entry,       \/\/ 当前哈希节点$/;"	m	struct:dictIterator
error	intset/intset.c	/^void error(char *err) {$/;"	f
free	adlist/adlist.h	/^    void (*free)(void *ptr);$/;"	m	struct:list
free	adlist/zmalloc.c	62;"	d	file:
free	adlist/zmalloc.c	67;"	d	file:
free	dict/zmalloc.c	62;"	d	file:
free	dict/zmalloc.c	67;"	d	file:
free	intset/zmalloc.c	62;"	d	file:
free	intset/zmalloc.c	67;"	d	file:
free	sds/sds.h	/^    int free;$/;"	m	struct:sdshdr
free	sds/zmalloc.c	62;"	d	file:
free	sds/zmalloc.c	67;"	d	file:
free	ziplist/zmalloc.c	62;"	d	file:
free	ziplist/zmalloc.c	67;"	d	file:
free_object	adlist/object.c	/^void free_object(object* obj)$/;"	f
getRandomHexChars	ziplist/util.c	/^void getRandomHexChars(char *p, unsigned int len) {$/;"	f
hashFunction	dict/dict.h	/^    unsigned int (*hashFunction)(const void *key);$/;"	m	struct:dictType
head	adlist/adlist.h	/^    listNode *head;$/;"	m	struct:list
headersize	ziplist/ziplist.c	/^    unsigned int headersize;        \/\/ header 长度$/;"	m	struct:zlentry	file:
hex_digit_to_int	sds/sds.c	/^int hex_digit_to_int(char c) {$/;"	f
ht	dict/dict.h	/^    dictht ht[2];       $/;"	m	struct:dict
index	dict/dict.h	/^        index,              \/\/ 正在迭代的哈希表数组的索引$/;"	m	struct:dictIterator
intDictType	dict/int_dict_type.c	/^dictType intDictType = {$/;"	v
intrev16	intset/endianconv.c	/^uint16_t intrev16(uint16_t v) {$/;"	f
intrev16	ziplist/endianconv.c	/^uint16_t intrev16(uint16_t v) {$/;"	f
intrev16ifbe	intset/endianconv.h	51;"	d
intrev16ifbe	intset/endianconv.h	58;"	d
intrev16ifbe	ziplist/endianconv.h	51;"	d
intrev16ifbe	ziplist/endianconv.h	58;"	d
intrev32	intset/endianconv.c	/^uint32_t intrev32(uint32_t v) {$/;"	f
intrev32	ziplist/endianconv.c	/^uint32_t intrev32(uint32_t v) {$/;"	f
intrev32ifbe	intset/endianconv.h	52;"	d
intrev32ifbe	intset/endianconv.h	59;"	d
intrev32ifbe	ziplist/endianconv.h	52;"	d
intrev32ifbe	ziplist/endianconv.h	59;"	d
intrev64	intset/endianconv.c	/^uint64_t intrev64(uint64_t v) {$/;"	f
intrev64	ziplist/endianconv.c	/^uint64_t intrev64(uint64_t v) {$/;"	f
intrev64ifbe	intset/endianconv.h	53;"	d
intrev64ifbe	intset/endianconv.h	60;"	d
intrev64ifbe	ziplist/endianconv.h	53;"	d
intrev64ifbe	ziplist/endianconv.h	60;"	d
intset	intset/intset.h	/^typedef struct intset {$/;"	s
intset	intset/intset.h	/^} intset;$/;"	t	typeref:struct:intset
intsetAdd	intset/intset.c	/^intset *intsetAdd(intset *is, int64_t value, uint8_t *success) {$/;"	f
intsetBlobLen	intset/intset.c	/^size_t intsetBlobLen(intset *is) {$/;"	f
intsetFind	intset/intset.c	/^uint8_t intsetFind(intset *is, int64_t value) {$/;"	f
intsetGet	intset/intset.c	/^uint8_t intsetGet(intset *is, uint32_t pos, int64_t *value) {$/;"	f
intsetLen	intset/intset.c	/^uint32_t intsetLen(intset *is) {$/;"	f
intsetMoveTail	intset/intset.c	/^static void intsetMoveTail(intset *is, uint32_t from, uint32_t to) {$/;"	f	file:
intsetNew	intset/intset.c	/^intset *intsetNew(void) {$/;"	f
intsetRandom	intset/intset.c	/^int64_t intsetRandom(intset *is) {$/;"	f
intsetRemove	intset/intset.c	/^intset *intsetRemove(intset *is, int64_t value, int *success) {$/;"	f
intsetRepr	intset/intset.c	/^void intsetRepr(intset *is) {$/;"	f
intsetResize	intset/intset.c	/^static intset *intsetResize(intset *is, uint32_t len) {$/;"	f	file:
intsetSearch	intset/intset.c	/^static uint8_t intsetSearch(intset *is, int64_t value, uint32_t *pos) {$/;"	f	file:
intsetUpgradeAndAdd	intset/intset.c	/^static intset *intsetUpgradeAndAdd(intset *is, int64_t value) {$/;"	f	file:
is_hex_digit	sds/sds.c	/^int is_hex_digit(char c) {$/;"	f
iterators	dict/dict.h	/^    int iterators;      $/;"	m	struct:dict
key	dict/dict.h	/^    void *key;$/;"	m	struct:dictEntry
keyCompare	dict/dict.h	/^    int (*keyCompare)(void *privdata, const void *key1, const void *key2);$/;"	m	struct:dictType
keyCompareFunction	dict/int_dict_type.c	/^int keyCompareFunction(void *privdata, const void *x, const void *y)$/;"	f
keyDestructor	dict/dict.h	/^    void (*keyDestructor)(void *privdata, void *key);$/;"	m	struct:dictType
keyDestructor	dict/int_dict_type.c	/^void keyDestructor(void *privdata, void *key)$/;"	f
keyDup	dict/dict.h	/^    void *(*keyDup)(void *privdata, const void *key);$/;"	m	struct:dictType
keyHashFunction	dict/int_dict_type.c	/^unsigned int keyHashFunction(const void *key)$/;"	f
len	adlist/adlist.h	/^    unsigned long len;$/;"	m	struct:list
len	sds/sds.h	/^    int len;$/;"	m	struct:sdshdr
len	ziplist/ziplist.c	/^                 len;               \/\/ 节点的长度$/;"	m	struct:zlentry	file:
length	intset/intset.h	/^    uint32_t length;    $/;"	m	struct:intset
lensize	ziplist/ziplist.c	/^    unsigned int lensize,           \/\/ 保存节点的长度所需的长度$/;"	m	struct:zlentry	file:
list	adlist/adlist.h	/^typedef struct list {$/;"	s
list	adlist/adlist.h	/^} list;$/;"	t	typeref:struct:list
listAddNodeHead	adlist/adlist.c	/^list *listAddNodeHead(list *list, void *value)$/;"	f
listAddNodeTail	adlist/adlist.c	/^list *listAddNodeTail(list *list, void *value)$/;"	f
listCreate	adlist/adlist.c	/^list *listCreate(void)$/;"	f
listDelNode	adlist/adlist.c	/^void listDelNode(list *list, listNode *node)$/;"	f
listDup	adlist/adlist.c	/^list *listDup(list *orig)$/;"	f
listFirst	adlist/adlist.h	91;"	d
listGetDupMethod	adlist/adlist.h	105;"	d
listGetFree	adlist/adlist.h	106;"	d
listGetIterator	adlist/adlist.c	/^listIter *listGetIterator(list *list, int direction)$/;"	f
listGetMatchMethod	adlist/adlist.h	107;"	d
listIndex	adlist/adlist.c	/^listNode *listIndex(list *list, long index) {$/;"	f
listInsertNode	adlist/adlist.c	/^list *listInsertNode(list *list, listNode *old_node, void *value, int after) {$/;"	f
listIter	adlist/adlist.h	/^typedef struct listIter {$/;"	s
listIter	adlist/adlist.h	/^} listIter;$/;"	t	typeref:struct:listIter
listLast	adlist/adlist.h	93;"	d
listLength	adlist/adlist.h	89;"	d
listNext	adlist/adlist.c	/^listNode *listNext(listIter *iter)$/;"	f
listNextNode	adlist/adlist.h	97;"	d
listNode	adlist/adlist.h	/^typedef struct listNode {$/;"	s
listNode	adlist/adlist.h	/^} listNode;$/;"	t	typeref:struct:listNode
listNodeValue	adlist/adlist.h	99;"	d
listPrevNode	adlist/adlist.h	95;"	d
listRelease	adlist/adlist.c	/^void listRelease(list *list)$/;"	f
listReleaseIterator	adlist/adlist.c	/^void listReleaseIterator(listIter *iter) {$/;"	f
listRewind	adlist/adlist.c	/^void listRewind(list *list, listIter *li) {$/;"	f
listRewindTail	adlist/adlist.c	/^void listRewindTail(list *list, listIter *li) {$/;"	f
listRotate	adlist/adlist.c	/^void listRotate(list *list) {$/;"	f
listSearchKey	adlist/adlist.c	/^listNode *listSearchKey(list *list, void *key)$/;"	f
listSetDupMethod	adlist/adlist.h	101;"	d
listSetFreeMethod	adlist/adlist.h	102;"	d
listSetMatchMethod	adlist/adlist.h	103;"	d
ll2string	ziplist/util.c	/^int ll2string(char *s, size_t len, long long value) {$/;"	f
main	adlist/main.c	/^void main(void)$/;"	f
main	dict/main.c	/^void main(void)$/;"	f
main	intset/endianconv.c	/^int main(void) {$/;"	f
main	intset/intset.c	/^int main(int argc, char **argv) {$/;"	f
main	intset/main.c	/^void main(void)$/;"	f
main	sds/main.c	/^int main(void)$/;"	f
main	sds/sds.c	/^int main(void) {$/;"	f
main	ziplist/endianconv.c	/^int main(void) {$/;"	f
main	ziplist/main.c	/^void main(void)$/;"	f
main	ziplist/util.c	/^int main(int argc, char **argv) {$/;"	f
main	ziplist/ziplist.c	/^int main(int argc, char **argv) {$/;"	f
malloc	adlist/zmalloc.c	59;"	d	file:
malloc	adlist/zmalloc.c	64;"	d	file:
malloc	dict/zmalloc.c	59;"	d	file:
malloc	dict/zmalloc.c	64;"	d	file:
malloc	intset/zmalloc.c	59;"	d	file:
malloc	intset/zmalloc.c	64;"	d	file:
malloc	sds/zmalloc.c	59;"	d	file:
malloc	sds/zmalloc.c	64;"	d	file:
malloc	ziplist/zmalloc.c	59;"	d	file:
malloc	ziplist/zmalloc.c	64;"	d	file:
match	adlist/adlist.h	/^    int (*match)(void *ptr, void *key);$/;"	m	struct:list
memrev16	intset/endianconv.c	/^void memrev16(void *p) {$/;"	f
memrev16	ziplist/endianconv.c	/^void memrev16(void *p) {$/;"	f
memrev16ifbe	intset/endianconv.h	48;"	d
memrev16ifbe	intset/endianconv.h	55;"	d
memrev16ifbe	ziplist/endianconv.h	48;"	d
memrev16ifbe	ziplist/endianconv.h	55;"	d
memrev32	intset/endianconv.c	/^void memrev32(void *p) {$/;"	f
memrev32	ziplist/endianconv.c	/^void memrev32(void *p) {$/;"	f
memrev32ifbe	intset/endianconv.h	49;"	d
memrev32ifbe	intset/endianconv.h	56;"	d
memrev32ifbe	ziplist/endianconv.h	49;"	d
memrev32ifbe	ziplist/endianconv.h	56;"	d
memrev64	intset/endianconv.c	/^void memrev64(void *p) {$/;"	f
memrev64	ziplist/endianconv.c	/^void memrev64(void *p) {$/;"	f
memrev64ifbe	intset/endianconv.h	50;"	d
memrev64ifbe	intset/endianconv.h	57;"	d
memrev64ifbe	ziplist/endianconv.h	50;"	d
memrev64ifbe	ziplist/endianconv.h	57;"	d
memtoll	ziplist/util.c	/^long long memtoll(const char *p, int *err) {$/;"	f
next	adlist/adlist.h	/^    listNode *next;$/;"	m	struct:listIter
next	adlist/adlist.h	/^    struct listNode *next;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
next	dict/dict.h	/^    struct dictEntry *next; $/;"	m	struct:dictEntry	typeref:struct:dictEntry::dictEntry
nextEntry	dict/dict.h	/^              *nextEntry;   \/\/ 当前哈希节点的后继节点$/;"	m	struct:dictIterator
object	adlist/object.h	/^typedef struct { } object;$/;"	t	typeref:struct:__anon1
ok	intset/intset.c	/^void ok(void) {$/;"	f
p	ziplist/ziplist.c	/^    unsigned char *p;               \/\/ 内容$/;"	m	struct:zlentry	file:
pop	ziplist/ziplist.c	/^void pop(unsigned char *zl, int where) {$/;"	f
prev	adlist/adlist.h	/^    struct listNode *prev;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
prevrawlen	ziplist/ziplist.c	/^                 prevrawlen;        \/\/ 前一节点的长度$/;"	m	struct:zlentry	file:
prevrawlensize	ziplist/ziplist.c	/^    unsigned int prevrawlensize,    \/\/ 保存前一节点的长度所需的长度 $/;"	m	struct:zlentry	file:
privdata	dict/dict.h	/^    void *privdata;$/;"	m	struct:dict
randstring	ziplist/ziplist.c	/^int randstring(char *target, unsigned int min, unsigned int max) {$/;"	f
realloc	adlist/zmalloc.c	61;"	d	file:
realloc	adlist/zmalloc.c	66;"	d	file:
realloc	dict/zmalloc.c	61;"	d	file:
realloc	dict/zmalloc.c	66;"	d	file:
realloc	intset/zmalloc.c	61;"	d	file:
realloc	intset/zmalloc.c	66;"	d	file:
realloc	sds/zmalloc.c	61;"	d	file:
realloc	sds/zmalloc.c	66;"	d	file:
realloc	ziplist/zmalloc.c	61;"	d	file:
realloc	ziplist/zmalloc.c	66;"	d	file:
rehashidx	dict/dict.h	/^    int rehashidx;$/;"	m	struct:dict
release_key	dict/int_dict_type.c	/^void release_key(KeyObject* key)$/;"	f
release_value	dict/int_dict_type.c	/^void release_value(ValueObject* value)$/;"	f
s64	dict/dict.h	/^        int64_t s64;$/;"	m	union:dictEntry::__anon2
safe	dict/dict.h	/^        safe;               \/\/ 是否安全？$/;"	m	struct:dictIterator
sds	sds/sds.h	/^typedef char *sds;$/;"	t
sdsAllocSize	sds/sds.c	/^size_t sdsAllocSize(sds s) {$/;"	f
sdsIncrLen	sds/sds.c	/^void sdsIncrLen(sds s, int incr) {$/;"	f
sdsMakeRoomFor	sds/sds.c	/^sds sdsMakeRoomFor($/;"	f
sdsRemoveFreeSpace	sds/sds.c	/^sds sdsRemoveFreeSpace(sds s) {$/;"	f
sdsavail	sds/sds.h	/^static inline size_t sdsavail(const sds s) {$/;"	f
sdscat	sds/sds.c	/^sds sdscat(sds s, const char *t) {$/;"	f
sdscatlen	sds/sds.c	/^sds sdscatlen(sds s, const void *t, size_t len) {$/;"	f
sdscatprintf	sds/sds.c	/^sds sdscatprintf(sds s, const char *fmt, ...) {$/;"	f
sdscatrepr	sds/sds.c	/^sds sdscatrepr(sds s, const char *p, size_t len) {$/;"	f
sdscatsds	sds/sds.c	/^sds sdscatsds(sds s, const sds t) {$/;"	f
sdscatvprintf	sds/sds.c	/^sds sdscatvprintf(sds s, const char *fmt, va_list ap) {$/;"	f
sdsclear	sds/sds.c	/^void sdsclear(sds s) {$/;"	f
sdscmp	sds/sds.c	/^int sdscmp(const sds s1, const sds s2) {$/;"	f
sdscpy	sds/sds.c	/^sds sdscpy(sds s, const char *t) {$/;"	f
sdscpylen	sds/sds.c	/^sds sdscpylen(sds s, const char *t, size_t len) {$/;"	f
sdsdup	sds/sds.c	/^sds sdsdup(const sds s) {$/;"	f
sdsempty	sds/sds.c	/^sds sdsempty(void) {$/;"	f
sdsfree	sds/sds.c	/^void sdsfree(sds s) {$/;"	f
sdsfreesplitres	sds/sds.c	/^void sdsfreesplitres(sds *tokens, int count) {$/;"	f
sdsfromlonglong	sds/sds.c	/^sds sdsfromlonglong(long long value) {$/;"	f
sdsgrowzero	sds/sds.c	/^sds sdsgrowzero(sds s, size_t len) {$/;"	f
sdshdr	sds/sds.h	/^struct sdshdr {$/;"	s
sdslen	sds/sds.h	/^static inline size_t sdslen(const sds s) {$/;"	f
sdsmapchars	sds/sds.c	/^sds sdsmapchars(sds s, const char *from, const char *to, size_t setlen) {$/;"	f
sdsnew	sds/sds.c	/^sds sdsnew(const char *init) {$/;"	f
sdsnewlen	sds/sds.c	/^sds sdsnewlen(const void *init, size_t initlen) {$/;"	f
sdsrange	sds/sds.c	/^sds sdsrange(sds s, int start, int end) {$/;"	f
sdssplitargs	sds/sds.c	/^sds *sdssplitargs(const char *line, int *argc) {$/;"	f
sdssplitargs_free	sds/sds.c	/^void sdssplitargs_free(sds *argv, int argc) {$/;"	f
sdssplitlen	sds/sds.c	/^sds *sdssplitlen(const char *s, int len, const char *sep, int seplen, int *count) {$/;"	f
sdstolower	sds/sds.c	/^void sdstolower(sds s) {$/;"	f
sdstoupper	sds/sds.c	/^void sdstoupper(sds s) {$/;"	f
sdstrim	sds/sds.c	/^sds sdstrim(sds s, const char *cset) {$/;"	f
sdsupdatelen	sds/sds.c	/^void sdsupdatelen(sds s) {$/;"	f
size	dict/dict.h	/^    unsigned long size;     $/;"	m	struct:dictht
sizemask	dict/dict.h	/^    unsigned long sizemask; $/;"	m	struct:dictht
stress	ziplist/ziplist.c	/^void stress(int pos, int num, int maxsize, int dnum) {$/;"	f
string2l	ziplist/util.c	/^int string2l(const char *s, size_t slen, long *lval) {$/;"	f
string2ll	ziplist/util.c	/^int string2ll(const char *s, size_t slen, long long *value) {$/;"	f
stringmatch	ziplist/util.c	/^int stringmatch(const char *pattern, const char *string, int nocase) {$/;"	f
stringmatchlen	ziplist/util.c	/^int stringmatchlen(const char *pattern, int patternLen,$/;"	f
table	dict/dict.h	/^    dictEntry **table;      $/;"	m	struct:dictht
table	dict/dict.h	/^    int table,              \/\/ 正在迭代的哈希表的号码（0 或者 1）$/;"	m	struct:dictIterator
tail	adlist/adlist.h	/^    listNode *tail;$/;"	m	struct:list
test_add_and_delete_key_value_pair	dict/main.c	/^void test_add_and_delete_key_value_pair(void)$/;"	f
test_add_delete_and_find_node_wtih_ziplist	ziplist/main.c	/^void test_add_delete_and_find_node_wtih_ziplist(void)$/;"	f
test_add_node_and_advance_by_pointer	adlist/main.c	/^void test_add_node_and_advance_by_pointer(void)$/;"	f
test_add_remove_and_find_element_in_intset	intset/main.c	/^void test_add_remove_and_find_element_in_intset(void)$/;"	f
test_create_and_destroy_intset	intset/main.c	/^void test_create_and_destroy_intset(void)$/;"	f
test_create_and_destroy_ziplist	ziplist/main.c	/^void test_create_and_destroy_ziplist(void)$/;"	f
test_empty_dict	dict/main.c	/^void test_empty_dict(void)$/;"	f
test_empty_list	adlist/main.c	/^void test_empty_list(void)$/;"	f
test_intset_upgrade	intset/main.c	/^void test_intset_upgrade(void)$/;"	f
test_iterator	adlist/main.c	/^void test_iterator(void)$/;"	f
test_sdscat	sds/main.c	/^void test_sdscat(void)$/;"	f
test_sdsdup	sds/main.c	/^void test_sdsdup(void)$/;"	f
test_string2l	ziplist/util.c	/^void test_string2l(void) {$/;"	f
test_string2ll	ziplist/util.c	/^void test_string2ll(void) {$/;"	f
timeInMilliseconds	dict/dict.c	/^long long timeInMilliseconds(void) {$/;"	f
type	dict/dict.h	/^    dictType *type;$/;"	m	struct:dict
u64	dict/dict.h	/^        uint64_t u64;$/;"	m	union:dictEntry::__anon2
update_zmalloc_stat_add	adlist/zmalloc.c	71;"	d	file:
update_zmalloc_stat_add	adlist/zmalloc.c	74;"	d	file:
update_zmalloc_stat_add	dict/zmalloc.c	71;"	d	file:
update_zmalloc_stat_add	dict/zmalloc.c	74;"	d	file:
update_zmalloc_stat_add	intset/zmalloc.c	71;"	d	file:
update_zmalloc_stat_add	intset/zmalloc.c	74;"	d	file:
update_zmalloc_stat_add	sds/zmalloc.c	71;"	d	file:
update_zmalloc_stat_add	sds/zmalloc.c	74;"	d	file:
update_zmalloc_stat_add	ziplist/zmalloc.c	71;"	d	file:
update_zmalloc_stat_add	ziplist/zmalloc.c	74;"	d	file:
update_zmalloc_stat_alloc	adlist/zmalloc.c	88;"	d	file:
update_zmalloc_stat_alloc	dict/zmalloc.c	88;"	d	file:
update_zmalloc_stat_alloc	intset/zmalloc.c	88;"	d	file:
update_zmalloc_stat_alloc	sds/zmalloc.c	88;"	d	file:
update_zmalloc_stat_alloc	ziplist/zmalloc.c	88;"	d	file:
update_zmalloc_stat_free	adlist/zmalloc.c	98;"	d	file:
update_zmalloc_stat_free	dict/zmalloc.c	98;"	d	file:
update_zmalloc_stat_free	intset/zmalloc.c	98;"	d	file:
update_zmalloc_stat_free	sds/zmalloc.c	98;"	d	file:
update_zmalloc_stat_free	ziplist/zmalloc.c	98;"	d	file:
update_zmalloc_stat_sub	adlist/zmalloc.c	72;"	d	file:
update_zmalloc_stat_sub	adlist/zmalloc.c	80;"	d	file:
update_zmalloc_stat_sub	dict/zmalloc.c	72;"	d	file:
update_zmalloc_stat_sub	dict/zmalloc.c	80;"	d	file:
update_zmalloc_stat_sub	intset/zmalloc.c	72;"	d	file:
update_zmalloc_stat_sub	intset/zmalloc.c	80;"	d	file:
update_zmalloc_stat_sub	sds/zmalloc.c	72;"	d	file:
update_zmalloc_stat_sub	sds/zmalloc.c	80;"	d	file:
update_zmalloc_stat_sub	ziplist/zmalloc.c	72;"	d	file:
update_zmalloc_stat_sub	ziplist/zmalloc.c	80;"	d	file:
usec	intset/intset.c	/^long long usec(void) {$/;"	f
usec	ziplist/ziplist.c	/^long long usec(void) {$/;"	f
used	dict/dict.h	/^    unsigned long used;     $/;"	m	struct:dictht
used_memory	adlist/zmalloc.c	/^static size_t used_memory = 0;$/;"	v	file:
used_memory	dict/zmalloc.c	/^static size_t used_memory = 0;$/;"	v	file:
used_memory	intset/zmalloc.c	/^static size_t used_memory = 0;$/;"	v	file:
used_memory	sds/zmalloc.c	/^static size_t used_memory = 0;$/;"	v	file:
used_memory	ziplist/zmalloc.c	/^static size_t used_memory = 0;$/;"	v	file:
used_memory_mutex	adlist/zmalloc.c	/^pthread_mutex_t used_memory_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
used_memory_mutex	dict/zmalloc.c	/^pthread_mutex_t used_memory_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
used_memory_mutex	intset/zmalloc.c	/^pthread_mutex_t used_memory_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
used_memory_mutex	sds/zmalloc.c	/^pthread_mutex_t used_memory_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
used_memory_mutex	ziplist/zmalloc.c	/^pthread_mutex_t used_memory_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
v	dict/dict.h	/^    } v;$/;"	m	struct:dictEntry	typeref:union:dictEntry::__anon2
val	dict/dict.h	/^        void *val;$/;"	m	union:dictEntry::__anon2
valDestructor	dict/dict.h	/^    void (*valDestructor)(void *privdata, void *obj);$/;"	m	struct:dictType
valDestructor	dict/int_dict_type.c	/^void valDestructor(void *privdata, void *value)$/;"	f
valDup	dict/dict.h	/^    void *(*valDup)(void *privdata, const void *obj);$/;"	m	struct:dictType
value	adlist/adlist.h	/^    void *value;$/;"	m	struct:listNode
value	dict/int_dict_type.h	/^    int value;$/;"	m	struct:__anon3
value	dict/int_dict_type.h	/^    int value;$/;"	m	struct:__anon4
verify	ziplist/ziplist.c	/^void verify(unsigned char *zl, zlentry *e) {$/;"	f
zcalloc	adlist/zmalloc.c	/^void *zcalloc(size_t size) {$/;"	f
zcalloc	dict/zmalloc.c	/^void *zcalloc(size_t size) {$/;"	f
zcalloc	intset/zmalloc.c	/^void *zcalloc(size_t size) {$/;"	f
zcalloc	sds/zmalloc.c	/^void *zcalloc(size_t size) {$/;"	f
zcalloc	ziplist/zmalloc.c	/^void *zcalloc(size_t size) {$/;"	f
zfree	adlist/zmalloc.c	/^void zfree(void *ptr) {$/;"	f
zfree	dict/zmalloc.c	/^void zfree(void *ptr) {$/;"	f
zfree	intset/zmalloc.c	/^void zfree(void *ptr) {$/;"	f
zfree	sds/zmalloc.c	/^void zfree(void *ptr) {$/;"	f
zfree	ziplist/zmalloc.c	/^void zfree(void *ptr) {$/;"	f
zipEncodeLength	ziplist/ziplist.c	/^static unsigned int zipEncodeLength(unsigned char *p, unsigned char encoding, unsigned int rawlen) {$/;"	f	file:
zipEntry	ziplist/ziplist.c	/^static zlentry zipEntry(unsigned char *p) {$/;"	f	file:
zipIntSize	ziplist/ziplist.c	/^static unsigned int zipIntSize(unsigned char encoding) {$/;"	f	file:
zipLoadInteger	ziplist/ziplist.c	/^static int64_t zipLoadInteger(unsigned char *p, unsigned char encoding) {$/;"	f	file:
zipPrevEncodeLength	ziplist/ziplist.c	/^static unsigned int zipPrevEncodeLength(unsigned char *p, unsigned int len) {$/;"	f	file:
zipPrevEncodeLengthForceLarge	ziplist/ziplist.c	/^static void zipPrevEncodeLengthForceLarge(unsigned char *p, unsigned int len) {$/;"	f	file:
zipPrevLenByteDiff	ziplist/ziplist.c	/^static int zipPrevLenByteDiff(unsigned char *p, unsigned int len) {$/;"	f	file:
zipRawEntryLength	ziplist/ziplist.c	/^static unsigned int zipRawEntryLength(unsigned char *p) {$/;"	f	file:
zipSaveInteger	ziplist/ziplist.c	/^static void zipSaveInteger(unsigned char *p, int64_t value, unsigned char encoding) {$/;"	f	file:
zipTryEncoding	ziplist/ziplist.c	/^static int zipTryEncoding(unsigned char *entry, unsigned int entrylen, long long *v, unsigned char *encoding) {$/;"	f	file:
ziplistBlobLen	ziplist/ziplist.c	/^size_t ziplistBlobLen(unsigned char *zl) {$/;"	f
ziplistCompare	ziplist/ziplist.c	/^unsigned int ziplistCompare(unsigned char *p, unsigned char *sstr, unsigned int slen) {$/;"	f
ziplistDelete	ziplist/ziplist.c	/^unsigned char *ziplistDelete(unsigned char *zl, unsigned char **p) {$/;"	f
ziplistDeleteRange	ziplist/ziplist.c	/^unsigned char *ziplistDeleteRange(unsigned char *zl, unsigned int index, unsigned int num) {$/;"	f
ziplistFind	ziplist/ziplist.c	/^unsigned char *ziplistFind(unsigned char *p, unsigned char *vstr, unsigned int vlen, unsigned int skip) {$/;"	f
ziplistGet	ziplist/ziplist.c	/^unsigned int ziplistGet(unsigned char *p, unsigned char **sstr, unsigned int *slen, long long *sval) {$/;"	f
ziplistIndex	ziplist/ziplist.c	/^unsigned char *ziplistIndex(unsigned char *zl, int index) {$/;"	f
ziplistInsert	ziplist/ziplist.c	/^unsigned char *ziplistInsert(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned int slen) {$/;"	f
ziplistLen	ziplist/ziplist.c	/^unsigned int ziplistLen(unsigned char *zl) {$/;"	f
ziplistNew	ziplist/ziplist.c	/^unsigned char *ziplistNew(void) {$/;"	f
ziplistNext	ziplist/ziplist.c	/^unsigned char *ziplistNext(unsigned char *zl, unsigned char *p) {$/;"	f
ziplistPrev	ziplist/ziplist.c	/^unsigned char *ziplistPrev(unsigned char *zl, unsigned char *p) {$/;"	f
ziplistPush	ziplist/ziplist.c	/^unsigned char *ziplistPush(unsigned char *zl, unsigned char *s, unsigned int slen, int where) {$/;"	f
ziplistRepr	ziplist/ziplist.c	/^void ziplistRepr(unsigned char *zl) {$/;"	f
ziplistResize	ziplist/ziplist.c	/^static unsigned char *ziplistResize(unsigned char *zl, unsigned int len) {$/;"	f	file:
zlentry	ziplist/ziplist.c	/^typedef struct zlentry {$/;"	s	file:
zlentry	ziplist/ziplist.c	/^} zlentry;$/;"	t	typeref:struct:zlentry	file:
zlibc_free	adlist/zmalloc.c	/^void zlibc_free(void *ptr) {$/;"	f
zlibc_free	dict/zmalloc.c	/^void zlibc_free(void *ptr) {$/;"	f
zlibc_free	intset/zmalloc.c	/^void zlibc_free(void *ptr) {$/;"	f
zlibc_free	sds/zmalloc.c	/^void zlibc_free(void *ptr) {$/;"	f
zlibc_free	ziplist/zmalloc.c	/^void zlibc_free(void *ptr) {$/;"	f
zmalloc	adlist/zmalloc.c	/^void *zmalloc(size_t size) {$/;"	f
zmalloc	dict/zmalloc.c	/^void *zmalloc(size_t size) {$/;"	f
zmalloc	intset/zmalloc.c	/^void *zmalloc(size_t size) {$/;"	f
zmalloc	sds/zmalloc.c	/^void *zmalloc(size_t size) {$/;"	f
zmalloc	ziplist/zmalloc.c	/^void *zmalloc(size_t size) {$/;"	f
zmalloc_default_oom	adlist/zmalloc.c	/^static void zmalloc_default_oom(size_t size) {$/;"	f	file:
zmalloc_default_oom	dict/zmalloc.c	/^static void zmalloc_default_oom(size_t size) {$/;"	f	file:
zmalloc_default_oom	intset/zmalloc.c	/^static void zmalloc_default_oom(size_t size) {$/;"	f	file:
zmalloc_default_oom	sds/zmalloc.c	/^static void zmalloc_default_oom(size_t size) {$/;"	f	file:
zmalloc_default_oom	ziplist/zmalloc.c	/^static void zmalloc_default_oom(size_t size) {$/;"	f	file:
zmalloc_enable_thread_safeness	adlist/zmalloc.c	/^void zmalloc_enable_thread_safeness(void) {$/;"	f
zmalloc_enable_thread_safeness	dict/zmalloc.c	/^void zmalloc_enable_thread_safeness(void) {$/;"	f
zmalloc_enable_thread_safeness	intset/zmalloc.c	/^void zmalloc_enable_thread_safeness(void) {$/;"	f
zmalloc_enable_thread_safeness	sds/zmalloc.c	/^void zmalloc_enable_thread_safeness(void) {$/;"	f
zmalloc_enable_thread_safeness	ziplist/zmalloc.c	/^void zmalloc_enable_thread_safeness(void) {$/;"	f
zmalloc_get_fragmentation_ratio	adlist/zmalloc.c	/^float zmalloc_get_fragmentation_ratio(void) {$/;"	f
zmalloc_get_fragmentation_ratio	dict/zmalloc.c	/^float zmalloc_get_fragmentation_ratio(void) {$/;"	f
zmalloc_get_fragmentation_ratio	intset/zmalloc.c	/^float zmalloc_get_fragmentation_ratio(void) {$/;"	f
zmalloc_get_fragmentation_ratio	sds/zmalloc.c	/^float zmalloc_get_fragmentation_ratio(void) {$/;"	f
zmalloc_get_fragmentation_ratio	ziplist/zmalloc.c	/^float zmalloc_get_fragmentation_ratio(void) {$/;"	f
zmalloc_get_private_dirty	adlist/zmalloc.c	/^size_t zmalloc_get_private_dirty(void) {$/;"	f
zmalloc_get_private_dirty	dict/zmalloc.c	/^size_t zmalloc_get_private_dirty(void) {$/;"	f
zmalloc_get_private_dirty	intset/zmalloc.c	/^size_t zmalloc_get_private_dirty(void) {$/;"	f
zmalloc_get_private_dirty	sds/zmalloc.c	/^size_t zmalloc_get_private_dirty(void) {$/;"	f
zmalloc_get_private_dirty	ziplist/zmalloc.c	/^size_t zmalloc_get_private_dirty(void) {$/;"	f
zmalloc_get_rss	adlist/zmalloc.c	/^size_t zmalloc_get_rss(void) {$/;"	f
zmalloc_get_rss	dict/zmalloc.c	/^size_t zmalloc_get_rss(void) {$/;"	f
zmalloc_get_rss	intset/zmalloc.c	/^size_t zmalloc_get_rss(void) {$/;"	f
zmalloc_get_rss	sds/zmalloc.c	/^size_t zmalloc_get_rss(void) {$/;"	f
zmalloc_get_rss	ziplist/zmalloc.c	/^size_t zmalloc_get_rss(void) {$/;"	f
zmalloc_oom_handler	adlist/zmalloc.c	/^static void (*zmalloc_oom_handler)(size_t) = zmalloc_default_oom;$/;"	v	file:
zmalloc_oom_handler	dict/zmalloc.c	/^static void (*zmalloc_oom_handler)(size_t) = zmalloc_default_oom;$/;"	v	file:
zmalloc_oom_handler	intset/zmalloc.c	/^static void (*zmalloc_oom_handler)(size_t) = zmalloc_default_oom;$/;"	v	file:
zmalloc_oom_handler	sds/zmalloc.c	/^static void (*zmalloc_oom_handler)(size_t) = zmalloc_default_oom;$/;"	v	file:
zmalloc_oom_handler	ziplist/zmalloc.c	/^static void (*zmalloc_oom_handler)(size_t) = zmalloc_default_oom;$/;"	v	file:
zmalloc_set_oom_handler	adlist/zmalloc.c	/^void zmalloc_set_oom_handler(void (*oom_handler)(size_t)) {$/;"	f
zmalloc_set_oom_handler	dict/zmalloc.c	/^void zmalloc_set_oom_handler(void (*oom_handler)(size_t)) {$/;"	f
zmalloc_set_oom_handler	intset/zmalloc.c	/^void zmalloc_set_oom_handler(void (*oom_handler)(size_t)) {$/;"	f
zmalloc_set_oom_handler	sds/zmalloc.c	/^void zmalloc_set_oom_handler(void (*oom_handler)(size_t)) {$/;"	f
zmalloc_set_oom_handler	ziplist/zmalloc.c	/^void zmalloc_set_oom_handler(void (*oom_handler)(size_t)) {$/;"	f
zmalloc_size	adlist/zmalloc.c	/^size_t zmalloc_size(void *ptr) {$/;"	f
zmalloc_size	adlist/zmalloc.h	44;"	d
zmalloc_size	adlist/zmalloc.h	54;"	d
zmalloc_size	adlist/zmalloc.h	62;"	d
zmalloc_size	dict/zmalloc.c	/^size_t zmalloc_size(void *ptr) {$/;"	f
zmalloc_size	dict/zmalloc.h	43;"	d
zmalloc_size	dict/zmalloc.h	53;"	d
zmalloc_size	dict/zmalloc.h	61;"	d
zmalloc_size	intset/zmalloc.c	/^size_t zmalloc_size(void *ptr) {$/;"	f
zmalloc_size	intset/zmalloc.h	43;"	d
zmalloc_size	intset/zmalloc.h	53;"	d
zmalloc_size	intset/zmalloc.h	61;"	d
zmalloc_size	sds/zmalloc.c	/^size_t zmalloc_size(void *ptr) {$/;"	f
zmalloc_size	sds/zmalloc.h	43;"	d
zmalloc_size	sds/zmalloc.h	53;"	d
zmalloc_size	sds/zmalloc.h	61;"	d
zmalloc_size	ziplist/zmalloc.c	/^size_t zmalloc_size(void *ptr) {$/;"	f
zmalloc_size	ziplist/zmalloc.h	43;"	d
zmalloc_size	ziplist/zmalloc.h	53;"	d
zmalloc_size	ziplist/zmalloc.h	61;"	d
zmalloc_thread_safe	adlist/zmalloc.c	/^static int zmalloc_thread_safe = 0;$/;"	v	file:
zmalloc_thread_safe	dict/zmalloc.c	/^static int zmalloc_thread_safe = 0;$/;"	v	file:
zmalloc_thread_safe	intset/zmalloc.c	/^static int zmalloc_thread_safe = 0;$/;"	v	file:
zmalloc_thread_safe	sds/zmalloc.c	/^static int zmalloc_thread_safe = 0;$/;"	v	file:
zmalloc_thread_safe	ziplist/zmalloc.c	/^static int zmalloc_thread_safe = 0;$/;"	v	file:
zmalloc_used_memory	adlist/zmalloc.c	/^size_t zmalloc_used_memory(void) {$/;"	f
zmalloc_used_memory	dict/zmalloc.c	/^size_t zmalloc_used_memory(void) {$/;"	f
zmalloc_used_memory	intset/zmalloc.c	/^size_t zmalloc_used_memory(void) {$/;"	f
zmalloc_used_memory	sds/zmalloc.c	/^size_t zmalloc_used_memory(void) {$/;"	f
zmalloc_used_memory	ziplist/zmalloc.c	/^size_t zmalloc_used_memory(void) {$/;"	f
zrealloc	adlist/zmalloc.c	/^void *zrealloc(void *ptr, size_t size) {$/;"	f
zrealloc	dict/zmalloc.c	/^void *zrealloc(void *ptr, size_t size) {$/;"	f
zrealloc	intset/zmalloc.c	/^void *zrealloc(void *ptr, size_t size) {$/;"	f
zrealloc	sds/zmalloc.c	/^void *zrealloc(void *ptr, size_t size) {$/;"	f
zrealloc	ziplist/zmalloc.c	/^void *zrealloc(void *ptr, size_t size) {$/;"	f
zstrdup	adlist/zmalloc.c	/^char *zstrdup(const char *s) {$/;"	f
zstrdup	dict/zmalloc.c	/^char *zstrdup(const char *s) {$/;"	f
zstrdup	intset/zmalloc.c	/^char *zstrdup(const char *s) {$/;"	f
zstrdup	sds/zmalloc.c	/^char *zstrdup(const char *s) {$/;"	f
zstrdup	ziplist/zmalloc.c	/^char *zstrdup(const char *s) {$/;"	f
