最后，我用一张表总结一下单测各个步骤中的关键点：
步骤                关键点
1.模块内结构设计    构思模块结构，可考虑采用分层架构，减少层与层之间的依赖，尤其是业务/引擎层对其它模块及物理IO的依赖。
2.模块内流程设计    抽象逻辑，避免掺杂过多细节；解耦，分离不利单测的因素；以数据流为中心的流程设计更方便单测；
3.函数原型设计      尽量设计纯函数，即只通过参数和返回值与其它函数协作的函数。对复杂数据结构提供全面检查有效性的函数，方便单测时调用来检查运行结果
4.单测编码          单测编码工作应该在函数实现之前完成，减少调试代码需要的额外工作；单测案例应该尽可能覆盖函数的所有场景；
                    单测必须尽可能完整的检查待测函数的所有类型结果（其改写过的能被别的函数访问到的数据），包括返回值，输出参数，全局变量，IO等；
5.函数实现          实现过程可以根据实现思路，补充单测用例，确保复杂逻辑确实按照预期工作
6.执行单测          单测执行的时间应当尽可能短，这样才能保证频繁执行，尽快验证代码正确性。需要大量运行时间的案例可以单独分开，不默认执行。
                    另外，如果为了调试某个函数，可以直接运行这个函数相关的测试案例，利用单测来替代gdb调试，节省时间
7.覆盖率分析        检查单测的覆盖率数据，确认所有逻辑都有测试验证到。如果有逻辑没测试验证到，应当补充案例覆盖该逻辑。覆盖率分析是一种很好的反馈手段，用于改善单测案例的质量。
8.工具检查          检查是否有内存泄露、溢出一类的问题。可以用valgrind运行单测案例，扫除C/C++的常见隐患
9.修正函数实现及单测 根据数据、反馈，修复逻辑，解决bug，修正单测案例。