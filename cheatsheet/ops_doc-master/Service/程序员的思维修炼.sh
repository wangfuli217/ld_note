http://wdxtub.com/2013/08/16/pragmatic-thinking-and-learning/
https://blog.csdn.net/yuyin86/article/details/7882868

pragmatic：实用主义的
pragmatism:实用主义 -> 做对你有用的事情(有效==实用)
wetware(wet software)湿件:利用计算机模型类比人类的思考过程
dreyfus model:徳雷福斯模型 -> 是一个情境模型，而不是个性或能力模型 -> 针对每项技能
                           -> 应用你自己的实践经验，理解情景和利用直觉
注重实效的编程。           -> 认识到新手需要与情境无关的规则，而专家使用与情境相关的直觉
  经验，指的是通过实施这项技术促进了思维的改变
  好的设计也是需要不断修改出来的
  复制-粘贴式编程的兴起，设计模式的普遍误用。
榜样：如果你有小孩，你可能已经注意到他们很少照你说的做，却总是模仿你的所作所为。

Brooks(没有银弹){
软件产品处于应用、用户、规则和硬件的合力之下。这些因素总是在不断变化，迫使软件产品也随之变化。
}
1. 沟通能力(敏捷方法：强调了团队成员之间、最终客户和开发团队之间的沟通交流)(敏捷开发依赖反馈 -> 自我纠正)
   敏捷开发是非常有效的工具，但它不适用于一个完全由新手和高级新手组成的团队。
   敏捷最显著的就是摆脱了死板的规则，丢弃了陈旧的日程表，注重实时的反馈。
2. 学习和思考能力(学习能力、批判性和的思考能力和创造力完全取决于你自己) <--本身宗旨 (每个人都是不同的)
   学习完全取决于你自己。
学习最重要的是改变自己的思维体系和行为模式，从而改变结果。

切忌随波逐流。 Only dead fish go with the flow. (生命中没有什么是永恒不变的，只有死鱼才随波逐流，尝试改变自己)

非情景化的客观性存在固有的风险。 -- 一种规格并非处处适用。
所有那些专业人士懂得去寻找至关重要的细节，同时也忽略无关的细节。
在系统思维中，如面向对象编程，往往是事物之间的联系最让人感兴趣，而不是事物本身。
thinking(诀窍1：始终关注情境-细节的重要性){ 新手(指令清单) -> 高级新手(有经验没有全面理解) -> 胜任者(基于谨慎的计划和过去的经验) 
-> 精通者(经验之谈:谚语或格言) -> 专家(经验丰富且在恰当的情境中选取和应用经验)著书写文章做巡回演讲(细节与特征匹配)

有些东西是基础的、各领域相通的。 There’s something fundamental here.
    成为一名专家的关键要素：应用你自己的实践经验、理解情境和利用直觉。直觉是一个专家的标志，什么时候你发现自己
开始使用直觉来判断和解决问题，那么说明你的技术已经上升了一个层次。
    专家通常很难把他们的行为恰如其分地解释清楚，他们的很多行为是如此地熟练以至于已经变成无意识的了。他们的大量
经验都是通过大脑的非语言、无意识区域存储的，这让我们难以观察，而专家则难以表述。新手和专家有着根本区别，他们看
待世界的方式不同，反应也不同。
    经验之谈犹如格言和谚语，是可以用于当前情景的基本原理。经验之谈不是指令清单，它们必须在一定的情境下使用。

1. 新手在该技能领域经验很少或者根本没有经验。这里提到的<经验，指的是通过实施这项技术促进了思维的改变>。<新手非常
   在乎他们能否成功>。没有太多经验指导他们，他们不知道自己的行为是对是错。新手不是特别想要学习，他们只是想实现
   一个立竿见影的目标。他们不知道如何应付错误，所以出错的时候，他们非常容易慌乱。 
   新手需要指令清单。 Novices need recipes.  -> 规则只能让你启程，不会让你走得更远。
2. 高级新手能够根据过去的经验，逐步在正确的情境中采纳建议，但比较吃力。他们没有全面的理解，而且的确不想有。
   如果你试图把一个更大的情境强加给高级新手，他们可能会认为该情境与那些原则不相关而忽略掉。
   高级新手不想要全局思维。 Advanced beginners don’t want the big picture.
3. <与更高水平者追随下意识反应不同，胜任者会探寻和解决问题，他们的工作更多是基于谨慎的计划和过去的经验>。如果
   没有更多的经验，在解决问题时，他们将难以确定关注哪些细节。
   胜任者能够解决问题。 Competents can troubleshoot. -> 有主动性 足智多谋 (既可以指导新手又不会经常骚扰专家)
4. 精通水平的从业者需要全局思维。他们将围绕这个技术，寻找并想了解更大的概念框架。对于过于简单化的信息，他们会
   非常沮丧。
   精通者能够自我纠正。 Proficient practitioners can self-correct.
   在德雷福斯模型中，处于精通水平的从业人员有一项重大突破：他们能够纠正以往不好的工作表现。他们会反思以前
   是如何做的，并修改其做法，期望下一次表现得更好。到这个阶段，自我改进才会出现。精通者有足够的经验，他们
   知道下一步会发生什么，如果没有发生又需要改变什么。他们非常明确哪些计划需要取消，而应该采取什么行动。
   理解情景是成为专家的关键。
5. 专家是各个领域知识和信息的主要来源。他们总是不断地寻找更好的方法和方式去做事。他们有丰富的经验，可以在
   恰当的情境中选取和应用这些经验。
   专家凭直觉工作。 Experts work from intuition.直觉是专家的工具，但公司往往轻视它，因为他们错误地认为，
   直觉'不科学'或者'不可重复'。因此，我们往往本末倒置，不倾听薪酬高昂的专家们的意见。
   专家知道：<哪些是无关紧要的细节，哪些是非常重要的细节>。
   专家非常<擅长做出有针对性的特征匹配>。
   
   清晰表述专业技能十分困难。 It’s hard to articulate expertise.

新手往往只是执行命令，新手过渡到胜任者最大的区别在于能独立解决问题和承担责任。
新手和专家有着根本区别，他们看待世界的方式不同，反应也不同。
    他们的研究表明，从新手到专家要经历巨大的变化。在这个过程中，人们不只是"知道更多"或者获得了技术，而且还在
如何认识世界，如何解决问题以及如何形成使用的思维模型等方面体验到根本性的区别。
    新手在该技能领域经验很少或者根本没有经验。这里提到的经验，指的是通过实施这项技术促进了思维的改变。
+++++ 新手需要指令清单。 Novices need recipes. 规则只能让你启程，不会让你走得更远.
++++++++++++ 高级新手不想要全局思维。 Advanced beginners don’t want the big picture.
++++++++ 胜任者能够解决问题。 Competents can troubleshoot.
++++ 精通者能够自我纠正。 Proficient practitioners can self-correct.
+ 专家凭直觉工作。 Experts work from intuition.
    规则断送专家。 Rules ruin experts. -> 研究人员要求专家遵循自己制定的规则。结果专家的表现明显不如以往。
}
专家依赖观察和区分模式。
thinking(诀窍2：新手使用规则，专家使用直觉){ R型能够提供直觉，专家依赖直觉，专家依赖R型能力
大多数人都是高级新手。 Most people are advanced beginners.
               专家依赖观察和区分模式，这里也有模式匹配。
新手 -> 专家： 脱离独立和绝对化的规则，进入直觉的境界并最终成为系统本身的一部分
在这个过程中，人们不只是"知道更多"或者获得技术，而且还在如何认识世界，如何解决问题以及如何形成使用的思考模型等方面体验到根本性的区别。

1. 从依赖规则向依赖直接转变
2. 观念的改变，问题已不再是一个相关度等同的所有单元的集合体，而是一个完整的和独特的整体，其中只有某些但是是相关的。
3. 最后，从问题的旁观者转变为问题涉及的系统本身的一部分
新手         |专家 != 老师 教学是一门技能，你在某个领域是专家，但这并不能保证你可以将它教给别人。
-------------|----------------- 十年成就专家 ...
规则         |直觉
考虑各个方面 |关注相关方面
旁观者       |系统的一部分
-------------|-----------------

无知往往来自于自信而不是知识。 -> 一旦你真的成为了一名专家，你会痛苦的意识到你知道的是多么少。
缺少准确的自我评估现象称为二阶不胜任(second-order incompetence)：不知道自己不知道
1. 高级新手不知道自己不知道多少。
2. 新手尽管能力差但是信心十足。
3. 专家在情况异常时会变得愈发谨慎。专家会更多地自我怀疑。

直觉和模式匹配能力超载了显性知识。 Intuition and pattern matching replace explicit knowledge.
}
thinking(积极的实践需要四个条件){
1. 需要一个明确定义的任务。 
2. 任务需要有适当难度——有挑战性但可行。 
3. 任务环境可以提供大量反馈，以便于你采取行动。
4. 提供重复犯错和纠正错误的机会。
}
question(软件开发的职业特征){ 中兴工作经历同感： 社会职业病体系
程序员往往认为自己是一种工具，从而漠视工作，只是执行分析师的指令，而不期望自己对项目的设计和架构有所创见。
由于薪酬等级的不平等，专家级的程序员争先恐后的离开一线编码，通过管理、教学或者巡回演讲赚更多的钱。
软件工程教育开始受到质疑。很多人认为正规的实践模式是最好的教育方法。这种对正规方法和工具的过度依赖削弱了实践中真正经验的作用。
最后，他们忽略了真正的目的--项目结果。无论采用何种过程和方法，无论谁参与了项目，结果是什么？项目成功了吗？在不断进步吗？还是相反？
}

thinking(诀窍4：通过观察和模仿来学习){ -- 没有实践就没有技能  模仿->吸收->创新
1. 新手往往只是执行命令，新手过渡到胜任者最大的区别在于能独立解决问题和承担责任。
2. 通过观察和模仿来学习（R&D)。如果你有孩子你会发现，他们很少照你说的做，而是大多时候在模仿你。
3. 模仿的同时就是实践的过程，没有实践就没有技能。而且没有什么东西可以替代实践，但是我们可以努力使你现有的经验发挥更大效力。
4. 保持实践以维持专家水平，全世界最优秀的那些专家没有因为做了20年以上开发而不去编码了，实践是保持技能的唯一手段。
首先模仿现有的做法，然后慢慢地吸收内在的知识和经验，最终将超越模仿阶段并能自主创新。

优胜者不会帮扶失败者。 Winners don’t carry losers.
}
thinking(诀窍5：保持实践以维持专家水平){
我们不断面临关键技能高手转向管理、竞争对手或其他领域的风险。
编程专家必须持续编程，并找到一个有意义、有价值的职业生涯。 

模型是工具，而不是一面镜子。 The model is a tool, not a mirror. <滥用这些方法将会得不偿失> 设计模式的滥用
    规则无法告诉你在某种情况下应该采取的最合适行为或者正确路线。它们充其量也就是"自行车的辅助轮"
——可以帮助启动，但是却限制并大大妨碍了以后的表现。
工具陷阱
  1. 混淆模型和现实
  2. 低估不能形式化的特征
  3. 规定违背个人自主性的行为
  4. 偏袒新手，从而疏远了经验丰富的员工
  5. 阐明太多细节
  6. 把复杂局势过于简单化
  7. 追求过度一致
  8. 忽视情境的细微差别
  9. 在遵从规则和自行判断之间犹豫
  10. 故弄玄虚
}
thinking(诀窍6：如果你需要创造力、直觉或者独创能力，避免使用形式方法){
1. 不要屈服于工具或者模型的虚假权威。没有什么可以替代思考。
2. 从德雷福斯模型学到的最重要的收获之一就是，<认识到新手需要与情境无关的规则，而专家使用与情境相关的直觉>。

警惕非情境化的客观性。 Beware decontextualized objectivity.
面向对象的编程，往往是事物之间的联系最让人感兴趣，而不是事物本身。

一种规格并非处处适用。 One size does not fit all.

    专家需要获得全貌；不要用约束性、官僚的规则妨碍他们做出自己的判断。你需要从他们的专业判断中获益。
请记住，不论怎样他们认为自己是系统的一部分，并将这些事情当作自己的事情来做，他们的投入超出你的想象。
}
thinking(诀窍7：学习如何学习的技能){
要获取专业技能，需要做到如下几项。
1. 培养更多的直觉。
2. 认识到情境和观察情境模式的重要性。
3. 更好地利用我们自己的经验。
}
thinking(两个CPU提供了L型和R型的处理模型){
1号CPU即线性的；  同步的，主要负责线性、逻辑思考和语言处理。按部就班地处理指令 -- 细致工作并实现目标
2号CPU是非线性的；异步的，把它想成一个超级正则表达式的搜索引擎，负责处理搜索和模式匹配。 -- 对直觉、问题解决和创造性
R型不能直接控制。R型在存储输入方面非常卖力；答案和灵感会独立于你的意识活动出现，而且不是总在恰当的时候。

R：图像、情感、整体经验都是R型的。R型不能直接控制 -> 随时记录想法 7*24小时
L：文字、语言
R型的类比和整体思考方式对软件架构和设计非常有价值，好的设计是由这些组成的。
谁主管这里？
  你可能会认为脑子里的叙述声音受你的控制，是有意识的，是真的你。它不是。实际上，当这些词语在你脑中
  形成时，背后的想法已经存在多时了。而在用口说出这些词语之前，又已经过了相当长的时间。
}
thinking(诀窍8：捕获所有的想法以从中获益更多){
如果你不记录这些伟大的想法，你就不会意识到拥有过它们。
    每个人都有好点子。 Everyone has good ideas.
    
    每个人——不论教育背景、经济状况如何，不论日常工作是什么，不论年龄大小——都有好想法。但是在这么多
拥有好想法的人里面，只有少数人在努力跟踪它们。而其中，又只有更少数人会努力付诸行动。随后，仅有少之
又少的人有能力将好想法成功实现。要想达到图3-3中金字塔的最顶层，必须跟踪好想法，这是最基本的要求。

拥有伟大的想法 -> 跟踪想法 -> 付诸行动 -> 成功实现
R姓处理特点：非语言；非理性；综合；空间性；具体；直觉；分析和全面；类比，观察和模式
             非语言性的，喜欢综合学习，集成事物形成整体。
             是一种综合，大局观的体现，也是一种逆向思维和想象力，创新能力的体现。
             全局、整体的模式
L型处理特点：语言能力；分析能力；符号能力；抽象能力；事件能力；推理能力；数字能力；逻辑能力；线性思维能力
             处理令人感到舒适、熟悉而放松，
             分析部分和细节
计算机一无是处，他们只能给你答案； -> 如果"答案"是无用的，那么这就意味着问题更重要。

<真正想要了解一只青蛙，传统的解剖不是办法，更好的方式是构造一只青蛙>
}
thinking(诀窍9：综合学习与分析学习并重){
    商品化意味着美学品味的竞争。 Commoditization means you compete on aesthetics.
    既然无法在价格上有竞争力，你必须在美学品味上赢得竞争。  <-> 设计胜于功能
    美学可以改变这些，不论是用户界面、代码和注释的布局，还是变量名的选择和桌面的整理，还是别的任何方面。
}
thinking(诀窍10:争取好的设计，它真的很有效){
20世纪最著名的建筑设计师之一路易·康，很好地解释了美和设计之间的关系："设计并不是创造美，美来自于
选择、共鸣、同化和爱。"
    创造来至于选择和组装，它要选择最合适的部件，并将它们组装成最合适的表现形式。
    美来自于选择(选择的目的是为了更好组装) -> 选择来自于模式匹配。
    模式匹配是专家表现的一项关键能力。它帮助专家缩小选择范围，把精力集中到与问题相关的事物上。
}
thinking(诀窍11：重新连线大脑，坚信这一点并不断实践){
    神经可塑性(大脑的可塑本质)也意味着你能够学习的最大容量或者你可以获得的技能数量不是固定的

    人应该努力学习洞察和培养自己内心深处的灵光一现，这远远胜于外面流光溢彩的整个世界。然而，人总
会下意识地抛弃自己特有的想法，仅仅因为那是他自己的想法。——拉尔夫·瓦尔多·爱默生(1803—1882)， 
}
thinking(诀窍12：增加感观体验以促进大脑的使用){
1. 大脑总是渴望接受这种额外的、新奇的刺激。大脑擅于持续适应变化的环境。因此，要定期改变环境，满足你的大脑。
2. 激活大脑的更多区域，也就启用了更多的处理能力。

积木，乐高积木展示面向对象；
CRC卡片
用右脑画画 -- 困难部分是观察
R型活动：听音乐、绘画、静思、慢跑、针线活、攀岩
L型是符号机器，对于阅读和写作这些符号性活动很好
}
1. 如果你还没有全局的概念就试图记忆细节，那么学习就会陷入僵局。
thinking(促成R型到L型的转变){ R型注重实时情景体验，L型注重体验后因果推理 -> R型开路，L型紧跟
去攀岩吧
罗扎诺夫教学法<谷歌搜索：罗扎诺夫的音乐暗示学习法>
酒酣写作，酒醒修改<R型先行，L型做整理>
结对编程<一人L型，一人R型>，结对编程每个程序员都应该尝试
隐喻相同<隐喻把抽象的概念与一些具体的、日常的事物联系起来，就更容易让人们理解它>
并列参照系<随机并列，也许两个想法相隔十万八千里，你却能将其并列起来。例如，香烟和交通灯可以引出这样一个概念：在香烟上使用红色标志区来作为帮助戒烟的提示。>
系统隐喻<隐喻思维是编程的基础，因为它存在于所有的抽象思维中>
讲个笑话吧<幽默既不是浪费时间，也不是无害的消遣，而是反映了思维、学习和创造所必须的重要能力。它与联系有关。培养幽默感以建立更强的隐喻>
}
thinking(教师的责任){
1. 训练两个脑半球，不仅仅是语言性的，符号性的，逻辑性的的左脑(传统的)，也包括空间性的、关系性的，综合性的右脑。
2. 训练学生学会选择适合当前任务的认知方式
3. 训练学生综合利用两种模式解决问题
}
thinking(完美主义者){
完美主义是压迫者的声音，是人们的敌人。它会束缚你的想法，毁掉你的生命，同时他也会妨碍你创建较差的草稿初案。
我认为完美主义基于一种强迫性的想法：如果你足够细致，每件事情都做得很好，那你就不会失败。
但事实是，无论怎么做你都有可能会失败，可是很多人即使不太仔细也会做的比你好，而其间也会拥有更多快乐。
}
thinking(收获R性线索){ L型是主动性的：当你集中注意力时，L型就在工作；R型则不同，你不能命令它，只能邀请他。
利用自由日记
  写信是一种伟大的习惯。blog这种模式很受欢迎,wordpress或者blogspot(墙外)推荐。
晨写技术
  早上起来第一件事情。
  至少写三页，最好不用电脑，如果使用电脑关掉所有跟写作无关的东西(只开evernote)
  不要审查删减你写的东西。不论是优秀的还是陈腐的，只管写下来。
  坚持天天写
"自由写"技术
  开个blog，将你的想法随时记录，或者用evernote，保持随时随地可以自由写
利用散步
  遇到问题的时候，试着找个安静的地方散散步，不要坐在电脑旁，离开键盘去解决难题。
  当你不寄希望于它时，就会发现答案自己冒了出来。
}
thinking(代码中的模式){
  如果你不是一个特别在意编码排版的人，那我可以负责任的告诉你，你离真正程序员的路还很远，反而用lisp的人，更注意代码排版，
看代码的时间远远高于你写代码的时间，如果你连代码都排列不好，问题自然避免不了。切记，你可以桌子混乱，实际是为了保持上下
文不被切换，而代码却不能格式混乱，格式都混乱甭提逻辑了。
  http://www.rtqe.net/ObliqueStrategies/ # 家布莱恩.伊诺和彼得.施密特提出了一套100种间接策略来换脑
  Debugging
}
CRC(卡片){

}
thinking(诀窍13：R型开路，L型紧跟){
    不要太着急。解决问题时，学会轻松面对不确定的事情。进行创造时，坦然面对荒谬和不切实际的东西。学习过程中，
不要太迫于学会和记忆，首先只是适应它。试着先理解其意思，掌握主旨思想。
    隐喻，语言和意象共同的地基，是在左右脑半球之间，在潜意识和意识之间来回游弋的途径。隐喻是一种激发
创造力的强大技术。 
}
thinking(诀窍14：使用隐喻作为L型和R型相融之所){
    两个想法差距越远，越难以通过有效的隐喻联系起来。
    幽默既不是浪费时间，也不是无害的消遣，而是反映了思维、学习和创造所必需的重要能力。它与联系有关。
    在任何情况下，幽默的能力都来自于发掘或扩展常规之外的关系，真正突破思维界限。急智——能够发现无关
事物的联系或者扩展思维突破其界限——是一种值得在团队中实践、锻炼和提倡的技能。
}
thinking(诀窍15：培养幽默感以建立更强大的隐喻){
    一旦开始写作，一定要注意坚持不懈。不要为技术问题而分心。不必担心有些话是不是还需要润色，
先把它们都写下来。
    有很多方法可以记录想法，其中一些效率更高。最好的方法之一就是晨写。
}
thinking(诀窍16：离开键盘去解决难题){ -- 代码一次编写，多次阅读
-- 模式匹配影响我们的感知 (排版对感知具有很强的影响)
统一排版( 不是一种浪费时间的愚蠢修饰，而是一种重要的交流工具 )
    当你不寄希望于它时，就会发现答案自己冒了出来。
    请努力使用一致的排版提示来辅助可视化知觉。编译器也许不在意，但是我们的确在意。
    对下述可能会出现的情况也要理解：如果你处于较高的技术水平上，同时又遭遇到团队里其他人的阻力，
要明白他们看待问题的方式肯定和你不同。他们不会自觉地认识到这种价值，因此你必须向他们解释。
    
    拥有创造力和问题解决能力的关键在于寻找思考问题的不同方式。
    错误是一种潜在的提示。
    由于记忆是一种脆弱和昂贵的机制，请随时准备记录下R型输出的精辟领悟，不论何时，不论何地。
}
thinking(诀窍17：改变解决问题的角度){
需要是发明之母。角色扮演是发明之父。 
    坚持晨写至少两周。
    培养快速的洞察能力。寻找不相关事物之间的关系或类比。
    面对难题时引入更多感观。哪些对你而言最有效果？
    阅读一些有别于平常的东西，比如小说，但不是科幻小说，等等。
    尝试不同类型的电影、假期、音乐或者咖啡。
    点一些你喜欢的餐馆里从未吃过的菜。
}
thinking(一些常见的偏见：){
认知偏见是一种让我们与理性或正确判断相偏离的倾向，常常应用在心理学和行为经济学中。
几十年来的心理学成果告诉我们，人类的理性是有限的，在实际生活中，很多认知和决策都处于非理性模式中，无论小事大事，无时不刻都受到认知偏见的影响。


思维定势      只是看到一个数字就会影响你随后对数字的预测和决定。
基本归因错误  我们倾向于把别人的行为归因于他们的个性，而不去考虑行为发生时的情境。
自私的偏见    这种偏见使人们相信，项目的成功是我的功劳，失败则与我无关。
需要定论      我们对疑问和不确定性感到不舒服——这种感觉如此强烈，我们会竭尽全力解决未有定论的问题，移除不确定性，进而得出定论
认可上的偏见  每一个人都根据自己的成见和喜好原则来选择相应的事实。
曝光效应      我们往往只因为非常熟悉某些事物而对它有所偏爱。这包括不再好用甚至会出错的工具、技术或者方法。
霍桑效应      研究人员注意到，人们在知道自己正被审视时，往往会改变自己的行为。
虚假记忆      大脑很容易把想象的事件和真实的记忆混淆。
符号约简谬论  如之前所看到的，L型非常乐于提供一个快速的符号来表示一个复杂的对象或者系统，这至少丢失了细节，有时甚至是事物的真相。
名词谬论      符号约简谬论的一种形式，以为给事物贴上标签就意味着能够解释或者理解它。
}
thinking(诀窍18：记住标题："很少"不意味着"没有"。){
黑天鹅现象警示我们不要把未观察到的或者罕见的事件认定为不可能。
}
thinking(诀窍19：适应不确定性。){
    我们对定论的渴望意味着我们总是努力消除不确定性。但是过早地下结论减少了你的选择，甚至可能消除了
成功的选择。
}

thinking(诀窍20：信任记录而不是记忆，每一次思维的输出都是一次输入。){
    不同的年龄段自然存在不同的价值观，你自己的态度和关注点也会随着年龄而改变。随着你和同代人年龄的增长，
你们开始接手前一代人留下的角色，但是你们将按照自己的思想调整形势。
    每一代人都会对前一代人的缺点做出反应，随着时间的推移，就会形成一种重复模式。这样来说，千年一代的
后一代将对他们的价值观做出反应，这种循环会不断重复。

    当你激烈地支持或者赞成一个观点时请记住这一点。你提出的论据是逻辑性的，还是情感作怪，或者只是因为熟悉？
在特定的情境中论据成立吗？你是否真的考虑过别人的看法？旁观者清，所以你需要从正反两个方面看待问题。
}
thinking(诀窍22：尊重不同人的不同性格。){
    如果你和幸福、乐观的人在一起，你的心情就会提升。如果和你相处的人都沮丧、悲观并认为自己是失败者，你也会
开始觉得自己是个沮丧、悲观的失败者。态度、信念、行为、情感——他们都是可传染的。 聚众施暴就是这样产生的。

    心灵是自己的地方，在那里可以把地狱变成天堂，也可以把天堂变成地狱。
}
thinking(诀窍23：像高级动物一样行动，请做深呼吸，而不要张口嘶鸣。){
}
thinking(诀窍24：相信直觉，但是要验证。){
    最后，为了避免一厢情愿、盲目乐观的想法，记住任何一个决定都是一种权衡。不是没有免费的午餐。凡事总有两面性，
仔细权衡——积极和消极的两面——有助于确保你更全面地评估形势。

    我们通过逻辑来证明，通过直觉去发现。 ——庞加莱
    大脑不是一个用于填充的容器，而是一束需要点燃的火焰。

    在当今技术和文化环境下，学习能力可能是成功的最重要因素。它决定了你是“大获全胜”还是“勉强通过”。
    技术本身并不重要，持续学习才是最重要的。
    目标任务使你更靠近目标。 Objectives move you to your goal.
}
thinking(诀窍25：建立SMART任务实现你的目标。){
    制定计划是实现任何目标的一种非常有效的步骤。我们大多数人常常陷入一种默认的学习日程表：
等到有空时再花时间学习一门新语言或者新函数库。不幸的是，把你的学习活动流放到"空闲时间"去，这就等同于失败。

    时间是无法创造和销毁的。时间只能分配。 Time can’t be created or destroyed, only allocated.

    制定计划就是巨大的进步。计划要具体，要运用SMART目标理念，要为不同时间段设计不同层次的目标

    所有知识投资都有价值。 All knowledge investments have value.
}
thinking(诀窍27：发现你的最佳学习方式。){
    研究表明同伴学习小组非常有用。学习主题是由参与者选择的，因此与日常工作直接相关。学习过程可以灵活、
方便地根据你的日程表来安排，而且无需昂贵的旅行和资料。学习小组是代替陌生、中毒性的羊浸式学习的伟大方法。
}
thinking(诀窍28：组织学习小组学习和辅导。){
尽量保持每一个小组不超过八到十个人。如果团队很大，可以将其分成多个更小的组织来讨论。

这项学习一本书或其他印刷品的方法称为SQ3R，是该方法具体步骤的首字母缩写。
    调查（Survey）：扫描目录和每章总结，得出总体看法。
    问题（Question）：记录所有问题。
    阅读（Read）：阅读全部内容。
    复述（Recite）：总结，做笔记，用自己的话来描述。
    回顾（Review）：重读，扩展笔记，与同事讨论。
}
thinking(诀窍29：主动阅读。){}
thinking(诀窍30：同时用R型和L型做笔记。){}
thinking(诀窍31：写文档的过程比文档本身更重要。){}
thinking(诀窍32：观察，实践，教学。){
积累经验是学习和成长的关键——我们通过实践的方法学习，效果最好。
通过构造来学习，而不是通过学习来构造。 更好地利用反馈，让失败也变得有意义。 让大脑提前为成功构建神经网络。
}
thinking(诀窍33：为了更好地学习，请更好地玩。){}
thinking(诀窍34：从相似点中学习，从差异中忘却。){}
thinking(诀窍35：在你的环境中安全地探索、创造和应用。){
    这是运用内在诀窍的关键要素：不要把精力放在纠正一个一个的细节上，只需要具有意识。接受事实是第一步，
只要意识到它即可。不要做出判断，不要急于拿出方案，不要指责。

    最后期限会使大脑恐慌。 Deadlines panic the mind.

    从内在诀窍系列书籍学到的另一个重要经验是，允许失败会促进成功。你无需主动犯错误，只是一旦犯了，那也没什么。
这听起来有点违反直觉，但是一旦你实践这种想法，就非常有意义。
}
thinking(诀窍37：允许失败，你会走向成功。){}
thinking(诀窍38：让大脑为成功形成惯例。){}
thinking(诀窍39：学习集中注意力。){
    毫无疑问，我们生活在信息丰富的时代。但往往过犹不及，过多的信息却导致了知识和注意力的匮乏。
置身于应接不暇的信息中，很容易失去思考的重心

    你的注意力是供不应求的。每天有那么多的事情都争相获取你的注意，而你仅仅能关注其中的一部分。
}
thinking(诀窍40：挤出思维的时间。){
冥想听起来好像没什么意义。但实际上意义重大。我强烈建议你尝试片刻，因为专注是一种重要的技能。
}
thinking(诀窍41：使用wiki来管理信息和知识。){
多任务处理对生产力会造成重大损失。一项研究发现，一般情况下，多任务处理将耗费你百分之二十至四十的生产力。

无论你做什么，请不要同时都做。
}
