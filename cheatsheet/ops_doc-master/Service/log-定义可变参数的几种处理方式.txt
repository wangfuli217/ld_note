用GCC和C99的可变参数宏， 可以更方便地打印调试信息，在gcc的预处理提供的可变参数宏定义非常方便，
具体大致有以下3种方式。

1. ##args
#ifdef DEBUG
    #define dbgprint(format,args...) fprintf(stderr, format, ##args)
#else
    #define dbgprint(format,args...)
#endif
如此定义之后，如果有DEBUG的宏定义，这个我们可以很方便的子啊makefile中控制，而不用修改源代码，
这样在需要调试的时候代码中就可以用dbgprint了，例如dbgprint("%s", str);


2. __VA_ARGS__
#define dgbmsg(fmt,...) printf(fmt,__VA_ARGS__)
程序代码:
#include <stdarg.h>
#include <stdio.h>
#define LOGSTRINGS(fm, ...) printf(fm,__VA_ARGS__)
int main()
{
    LOGSTRINGS("hello, %d ", 10);
    return 0;
}

"..."指可变参数。这类宏在被调用时，它(这里指"...")被表示成零个或多个符号，包括里面的
逗号，一直到到右括弧结束为止。当被调用时，在宏体(macro body)中，那些符号序列集合将代替
里面的VA_ARGS标识符。但现在似乎只有gcc才支持。


3.宏定义也就是替换
#define DEBUG(args) (printf("DEBUG: "), printf(args))
DEBUG("i = %d" , i);
这样也可以实现可变变量的打印，也很直观，缺点就是必须多写一对括号。