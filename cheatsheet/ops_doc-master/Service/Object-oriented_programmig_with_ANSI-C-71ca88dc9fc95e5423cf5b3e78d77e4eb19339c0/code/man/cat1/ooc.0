


ooc(1)                                                     ooc(1)


NAME
       ooc -- preprocessor for object-oriented coding in ANSI C

SYNOPSIS
       ooc [option ...] [report ...] description target ...

DESCRIPTION
       ooc  is  an awk program which reads class descriptions and
       performs the routine coding tasks necessary to do  object-
       oriented  coding in ANSI C.  Code generated by ooc is con-
       trolled by reports which may be changed.  This manual page
       describes the effects of the standard reports.

       description  is  a class name.  ooc loads a class descrip-
       tion file with  the  name  description.d  and  recursively
       class  description  files for all superclasses back to the
       root class.  If -h or -r is specified as  a  target,  a  C
       header file for the public interface or the private repre-
       sentation of description is written  to  standard  output.
       If  source.dc  or  -  is  specified  as a target, #include
       statements for the description header files are written to
       standard  output  and source.dc or standard input is read,
       preprocessed, and copied to standard output.   If  -dc  is
       specified  as  a target, a source skeleton for description
       is written to standard output, which contains all possible
       methods.

       The  output is produced by report generation from standard
       report files.  If file.rep is specified as a  report,  the
       standard files are not loaded.

       There are some global options to control ooc:

       -Dname[=value]
              defines value or an empty string as replacement for
              `name.  The name should be a single word.  ooc pre-
              defines GNUC with value 0.

       -d     arranges for debugging to follow normal processing.
              Debugging commands are read  from  standard  input:
              class.d  loads a class description file; report.rep
              loads a report file; a description, report,  class,
              or  method  name produces a dump of the appropriate
              information; and  all,  classes,  descriptions,  or
              reports dump all information in the respective cat-
              egory.

       -l     produces #line stamps as directed by the reports.

       -M     produces a makefile dependency  line  between  each
              description and its superclass description files.

       -R     must  be  specified if the root class is processed.
              Other standard reports are loaded in this case.



                            local: ats                          1





ooc(1)                                                     ooc(1)


   Lexical Conventions
       All input lines are processed as follows: first, a comment
       is removed; next, lines are glued together as long as they
       end with a backslash; finally,  trailing  white  space  is
       removed.

       A  comment  extends  from  // to the end of a line.  It is
       removed together with preceding white space before glueing
       takes place.

       In  glueing,  the backslash marks the contact point and is
       removed.  All white space  around  the  contact  point  is
       replaced with a single space.

       Identifiers  significant  to ooc follow the conventions of
       C, except that they may  not  use  underscore  characters.
       The  underscore is used to avoid clashes between ooc's and
       the user's code.

       Declarators significant to ooc are simplified relative  to
       C.   They  may  start  with const and the type information
       must precede the name.  The type information may use * but
       no  parentheses.   In general, an arbitrary declarator can
       be adapted for ooc by introducing a type name  with  type-
       def.

       A line starting with %% acts as end of file.

   Class Description File
       The class description file has the following format:
              header
              % meta class {
                 components
              %
                 methods with static linkage
              %-
                 methods with dynamic linkage
              %+
                 class methods
              %}
              ...

       header  is  arbitrary information which is copied to stan-
       dard output if the interface file is  produced.   Informa-
       tion  following  %prot is copied to standard output if the
       representation file is produced.

       components are C structure component declarations with one
       declarator per line.  They are copied into the struct gen-
       erated in the representation file  for  the  class.   They
       also  determine  the  order of the construction parameters
       for the root metaclass.

       The first set of methods has static  linkage,  i.e.,  they



                            local: ats                          2





ooc(1)                                                     ooc(1)


       are functions with at least one object as a parameter; the
       second set has dynamic linkage and  has  an  object  as  a
       parameter  for which the method is selected; the third set
       are class methods, i.e., they have a class as a  parameter
       for which the method is selected.  The selection object is
       always called self.   The  method  declarations  define  C
       function headers, selectors, and information for the meta-
       class constructor.

       The class header line % meta class  {  has  one  of  three
       forms.  The first form is used to introduce the root class
       only:

       % meta  class {
              class is the root class, indicated by the fact that
              it  has  no  superclass.   The  superclass  is then
              defined to be the root class itself.   meta  should
              be  introduced  later  as the root metaclass, indi-
              cated by the fact that it has itself as  metaclass.

       % meta  class: super {
              class is a new class with meta as its metaclass and
              super as its superclass.  This would also  be  used
              to  introduce  the root metaclass, which has itself
              as metaclass and the root class as superclass.   If
              super  is undefined, ooc will recursively (but only
              once) load the class description file  super.d  and
              then  super and meta must have been defined so that
              class can be defined.  If this form  of  the  class
              header  is  used,  only methods with static linkage
              can be introduced.

       % meta: supermeta  class: super {
              This additionally defines meta as a  new  metaclass
              with  supermeta  as  its  superclass.   If super is
              undefined, ooc will  recursively  (but  only  once)
              load  the  class  description file super.d and then
              super and supermeta must have been defined so  that
              meta and class can be defined.

       A  method  declaration  line has the following form, where
       braces indicate zero  or  more  occurrences  and  brackets
       indicate an optional item:

       [ tag : ] declarator ( declarator { , declarator } [ , ...
       ] );
              The optional  tag  is  an  identifier  involved  in
              locating  a  method  with  respondsTo().  The first
              declarator introduces the method  name  and  result
              type, the remaining declarators introduce parameter
              names and types.  Exactly one parameter  name  must
              be  self  to  indicate  the  receiver of the method
              call.




                            local: ats                          3





ooc(1)                                                     ooc(1)


       A declarator is a simplified  C  declarator  as  described
       above, but there are two special cases:

       _name  introduces  name  as the declarator name.  The type
              is a pointer to an instance of the current class or
              to  the class for which a dynamically linked method
              is overwritten.  Such a pointer  will  be  derefer-
              enced  by  %casts  as name within a method.  There-
              fore, self must be introduced as _self, where  self
              is the dereferenced object or class for class meth-
              ods and _self is the raw pointer.

       class @ name
              introduces name as a  pointer  to  an  instance  of
              class.  Such a pointer will not be dereferenced but
              it will be checked by %casts.

       The result type of a method can employ class @.   In  this
       case,  the  result  type  is  generated  as a pointer to a
       struct class which is useful  when  implementing  methods,
       and  which  cannot  be  used other than for assignments to
       void * in application code.  The  result  type  should  be
       void  *  for constructors and similar methods to emphasize
       the generic aspects of construction.

   Preprocessing
       Subject to the lexical  conventions  described  above,  an
       implementation  file  source.dc is copied to standard out-
       put.  Lines starting with % are preprocessed as follows:

       % class method {
              This is replaced by a C function header for method;
              the   header  is  declared  static  with  the  name
              class_method, unless method has static linkage.  In
              the  latter case, class is optional.  ooc checks in
              all cases that the  method  can  be  specified  for
              class.   Function names are remembered as necessary
              for initialization of the description of class  and
              the  corresponding  metaclass if any.  There can be
              an optional tag preceding class unless  method  has
              static linkage.

       %casts This  is replaced by definitions of local variables
              to  securely  dereference  parameter  pointers   to
              objects  in  the  current  class.   For  statically
              linked methods this is followed by checks to verify
              the   parameters   pointing  to  objects  of  other
              classes.  %casts should be used where  local  vari-
              ables can be defined; for statically linked methods
              it must be the last  definition.   Note  that  null
              pointers flunk the checks and terminate the calling
              program.

       %init  This should be near the end of  the  implementation



                            local: ats                          4





ooc(1)                                                     ooc(1)


              file.   If  the  description introduced a new meta-
              class, a constructor for the  metaclass,  selectors
              for  the  class,  and initializations for the meta-
              class are generated.  In either case,  an  initial-
              ization for the class is generated.

       If  a method m does not have static linkage, there are two
       selectors: m  with  the  same  parameters  as  the  method
       selecting the method defined for self, and super_m with an
       explicit class description as an additional first  parame-
       ter.  The second selector is used to pass a method call to
       the superclass of the class where the method is defined.

       If a dynamically linked or class  method  has  a  variable
       argument  list,  the  selector passes va_list * app to the
       actual method.

       If a selector recognizes that it cannot be applied to  its
       object,  it calls forward and passes its object, a pointer
       to a result area, or a null pointer, its own address,  its
       name  as  a string, and its entire argument list.  forward
       should be a dynamically linked method in the  root  class;
       it  can  be  used  to forward a message from one object to
       another.

   Tags
       respondsTo() is a method in the root class which takes  an
       object  and  a tag, i.e., a C string containing an identi-
       fier, and returns either a  null  pointer  or  a  selector
       which will accept the object and other parameters and call
       the method corresponding to the tag.

       The tag under which a class or dynamically  linked  method
       can be found is defined as follows.  The default is either
       the method name or tag in the method header in  the  class
       description file:
              [  tag : ] declarator ( declarator { , declarator }
              [ , ... ] );

       The method header in the implementation may overwrite  the
       tag:
              % mtag: class method {

       The effective tag is mtag if specified, or tag if not.  If
       mtag or tag is empty but the colon is specified,  respond-
       sTo() cannot find the method.

   Report File
       ooc  uses report files containing all code fragments which
       ooc will generate.  Names such as app for an argument list
       pointer  can  be changed in the report file.  Only self is
       built into ooc itself.

       A report file contains one or  more  reports.   The  usual



                            local: ats                          5





ooc(1)                                                     ooc(1)


       lexical  conventions  apply.  Each report is preceded by a
       line starting with % and containing the report name  which
       may  be enclosed by white space.  The report name is arbi-
       trary text but it must be unique.

       A report consists of lines of words  separated  by  single
       blanks  or  tabs,  called  spaces.   An empty word results
       between any two adjacent spaces or if a  space  starts  or
       ends a line.

       An  empty word, not at the beginning of an output line, is
       printed as a blank.  In particular, this  means  that  two
       successive  spaces in a report represent a single blank to
       be printed.  Any word not starting with a back quote `  is
       printed as is.

       A  word  starting  with  `% causes a report to be printed.
       The report name is the remainder of the word.

       `#line followed by a  word  causes  a  line  stamp  to  be
       printed  if  option -l is specified; the phrase is ignored
       otherwise.  If the word is a class, method, or class  com-
       ponent  name,  the  line stamp refers to its position in a
       class description file.  Otherwise, and in particular  for
       empty  words,  the  line stamp refers to the current input
       file position.

       A word starting with `{ starts a group.  The group is ter-
       minated  with  a  word  starting with `}.  All other words
       starting with a back quote ` are replaced during printing.
       Some  replacements are globally defined, others are set up
       by certain groups.  A table of replacements follows at the
       end of this section.

       Groups  are  either  loops over parts of the database col-
       lected by ooc or they are conditionals based on a compari-
       son.   Words  inside  a group are printed under control of
       the loop or the comparison.  Afterwards, printing  contin-
       ues  with  the  word  following  the group.  Groups can be
       nested, but that may not make sense for some parts of  the
       database.   Here is a table of words starting a loop: cen-
       ter; Lb L.  `{%  static methods  for  the  current  `class
       `{%- dynamic  methods  for  the  current `class `{%+ class
       methods for the current  `class  `{() parameters  for  the
       current  `method  `{dcl     class  headers  in  the  `desc
       description  file  `{pub     public  lines  in  the  `desc
       description  file  `{prot    protected  lines in the `desc
       description file `{links class  dynamic and class  methods
       defined  for  class  `{struct  class components  for class
       `{super   `desc and all its superclasses back to `root

       A loop is terminated with a word starting with `}.  If the
       terminating  word  is `}, in the loop over parameters, and
       if the loop will continue for  more  parameters,  a  comma



                            local: ats                          6





ooc(1)                                                     ooc(1)


       followed by a blank is printed for this word.  If the ter-
       minating word is `}n and if the  group  has  produced  any
       output,  a  newline  is printed for this word.  Otherwise,
       nothing is printed for termination.

       A conditional group starts with `{if or  `{ifnot  followed
       by  two  words.   The  words are replaced if necessary and
       compared.  If they are equal, the group starting with `{if
       is  executed;  if  they  are not equal, the group starting
       with `{ifnot is executed.  If either group is not executed
       and  if  it  is  followed by a group starting with `{else,
       this group is executed.  Otherwise  the  `{else  group  is
       skipped.

       In general it is best if the `} terminating the `{if group
       immediately precedes  `{else  on  the  same  line  of  the
       report.

       Here is a table of replaced words together with the events
       that set up the replacements: center; Li S Ab L.   set  up
       globally  `    no  text (empty string) ``   ` (back quote)
       `t   tab `n   newline (limited to one blank line)
       Li S Ab L.  set up  once  class  descriptions  are  loaded
       `desc     last     description     from    command    line
       `root     root class' name `metaroot root's metaclass name
       Liz  Rb  Ab  L.   set up for a class  % %- %+ `{dcl `{prot
       `{pub  `{super  `class    class'   name   `super    class'
       superclass    name    `meta     class'    metaclass   name
       `supermeta     metaclass' superclass name
       Liz Rb Ab L.  set up for a method `{%  `{%-  `{%+  `{links
       class  `method   method's  name  `result   method's result
       type   `linkage  method's   linkage:   %,   %-,   or    %+
       `tag method's  tag  `,...     ,  ... if variable arguments
       are declared,         empty if not `_last    last  parame-
       ter's name if variable arguments,         undefined if not
       Liz Rb Ab L.  set up for a declarator  `{() `{struct class
       `name     name in declarator `const    const followed by a
       blank,  if  so  declared  `type     void  *  for  objects,
       declared  type  otherwise  `_   _  if used in declaration,
       empty otherwise `cast     object's class name, empty  oth-
       erwise
       Liz  Rb  Ab  L.   set  up  for  lines from the description
       file   `{dcl `{prot `{pub `class    set  up  for  a  class
       description,  empty otherwise `line     line's text if not
       class description, undefined otherwise `newmeta  1 if  new
       metaclass is defined, 0 if not

       A  description  on  the  command line of ooc sets up for a
       class.  Requesting a method header in a source  file  sets
       up for a class and a method.  The loops `{dcl, `{prot, and
       `{pub set up for lines from a class description file.  The
       loops  `{%,  `{%-,  `{%+,  and  `{links class set up for a
       method.  The loop `{() sets up for a parameter declarator.
       The  loop  `{struct  class sets up for the declarator of a



                            local: ats                          7





ooc(1)                                                     ooc(1)


       component of a class.  The loop `{super runs from descrip-
       tion through all its superclasses.

   Environment
       OOCPATH  is  a  colon-separated  list of paths.  If a file
       name does not contain path delimiters, ooc looks  for  the
       file  (class  descriptions,  sources, and report files) by
       prefixing each entry of OOCPATH to the required file name.
       By  default, OOCPATH consists of the working directory and
       a standard place.

FILES
       class.d                       description for class
       class.dc                      implementation for class
       report.rep                    report file
       AWKPATH/*.awk                 modules
       AWKPATH/*.dbg                 debugger modules
       OOCPATH/c.rep                 implementation file reports
       OOCPATH/dc.rep                implementation thunks report
       OOCPATH/etc.rep               common reports
       OOCPATH/h.rep                 interface file report
       OOCPATH/header.rep            common reports
       OOCPATH/m.rep                 makefile dependency report
       OOCPATH/r.rep                 representation file reports
       OOCPATH/va.rep                common reports
       OOCPATH/[chr]-R.rep           root class versions

BUGS
       The C preprocessor is applied to the output of ooc, not to
       the  input,  i.e.,  conditional  compilation should not be
       applied to ooc controls.


























                            local: ats                          8


