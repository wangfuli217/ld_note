linker: https://imququ.com/post/four-ways-to-post-data-in-http.html
https://blog.csdn.net/qq_33706382/article/details/78168325

enctype 属性
http://www.w3school.com.cn/tags/att_form_enctype.asp


https://www.w3cschool.cn/html/
http://www.runoob.com/http/http-messages.html

    HTTP/1.1 协议规定的 HTTP 请求方法有 OPTIONS、GET、HEAD、POST、PUT、DELETE、TRACE、
CONNECT 这几种。其中 POST 一般用来向服务端提交数据，本文主要讨论 POST 提交数据的几种方式。
    我们知道，HTTP 协议是以 ASCII 码传输，建立在 TCP/IP 协议之上的应用层规范。
规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：
    <method> <request-URL> <version>
    <headers>
    
    <entity-body>
    协议规定 POST 提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据
必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的
HTTP 请求满足上面的格式就可以。
    但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 php、python 等，
以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头
（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体
进行解析。所以说到 POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。

type(application/x-www-form-urlencoded){
    这应该是最常见的 POST 提交数据的方式了。浏览器的原生 <form> 表单，如果不设置 
enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。
请求类似于下面这样（无关的请求头在本文中都省略掉了）：
    POST http://www.example.com HTTP/1.1
    Content-Type: application/x-www-form-urlencoded;charset=utf-8
    
    title=test&sub%5B%5D=1&sub%5B%5D=2&sub%5B%5D=3
    首先，Content-Type 被指定为 application/x-www-form-urlencoded；其次，提交的
数据按照 key1=val1&key2=val2 的方式进行编码，
    key 和 val 都进行了 URL 转码。大部分服务端语言都对这种方式有很好的支持。
例如 PHP 中，$_POST['title'] 可以获取到 title 的值，$_POST['sub'] 可以得到 sub 数组。
    很多时候，我们用 Ajax 提交数据时，也是使用这种方式。例如 JQuery 和 QWrap 的 Ajax，
Content-Type 默认值都是「application/x-www-form-urlencoded;charset=utf-8」。
}

type(multipart/form-data){
    这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 <form> 
表单的 enctype 等于 multipart/form-data。
直接来看一个请求示例：
    POST http://www.example.com HTTP/1.1
    Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA
    
    ------WebKitFormBoundaryrGKCBY7qhFd3TrwA
    Content-Disposition: form-data; name="text"
    
    title
    ------WebKitFormBoundaryrGKCBY7qhFd3TrwA
    Content-Disposition: form-data; name="file"; filename="chrome.png"
    Content-Type: image/png
    
    PNG ... content of chrome.png ...
    ------WebKitFormBoundaryrGKCBY7qhFd3TrwA--
    这个例子稍微复杂点。首先生成了一个 boundary 用于分割不同的字段，为了避免与正文内容重复，
boundary 很长很复杂。然后 Content-Type 里指明了数据是以 multipart/form-data 来编码，
本次请求的 boundary 是什么内容。消息主体里按照字段个数又分为多个结构类似的部分，
每部分都是以 --boundary 开始，紧接着是内容描述信息，然后是回车，最后是字段具体内容（文本或二进制）。
如果传输的是文件，还要包含文件名和文件类型信息。消息主体最后以 --boundary-- 标示结束。
关于 multipart/form-data 的详细定义，请前往 rfc1867 查看。

这种方式一般用来上传文件，各大服务端语言对它也有着良好的支持。
    上面提到的这两种 POST 数据的方式，都是浏览器原生支持的，而且现阶段标准中原生 <form> 表单也
只支持这两种方式（通过 <form> 元素的 enctype 属性指定，默认为 application/x-www-form-urlencoded。
其实 enctype 还支持 text/plain，不过用得非常少）。

随着越来越多的 Web 站点，尤其是 WebApp，全部使用 Ajax 进行数据交互之后，我们完全可以定义新的数据提交方式，给开发带来更多便利。
}
type(application/json){
    application/json 这个 Content-Type 作为响应头大家肯定不陌生。实际上，现在越来
越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 
规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也
都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。

    JSON 格式支持比键值对复杂得多的结构化数据，这一点也很有用。记得我几年前做一个
项目时，需要提交的数据层次非常深，我就是把数据 JSON 序列化之后来提交的。不过当时
我是把 JSON 字符串作为 val，仍然放在键值对里，以 x-www-form-urlencoded 方式提交。
}
type(text/xml){
    我的博客之前提到过 XML-RPC（XML Remote Procedure Call）。它是一种使用 HTTP 
作为传输协议，XML 作为编码方式的远程调用规范。典型的 XML-RPC 请求是这样的：
    POST http://www.example.com HTTP/1.1 
    Content-Type: text/xml
    
    <?xml version="1.0"?>
    <methodCall>
        <methodName>examples.getStateName</methodName>
        <params>
            <param>
                <value><i4>41</i4></value>
            </param>
        </params>
    </methodCall>
    XML-RPC 协议简单、功能够用，各种语言的实现都有。它的使用也很广泛，如 WordPress
的 XML-RPC Api，搜索引擎的 ping 服务等等。
    JavaScript 中，也有现成的库支持以这种方式进行数据交互，能很好的支持已有的 XML-RPC 
服务。不过，我个人觉得 XML 结构还是过于臃肿，一般场景用 JSON 会更灵活方便。
}
type(enctype){
定义和用法
enctype 属性规定在发送到服务器之前应该如何对表单数据进行编码。
默认地，表单数据会编码为 "application/x-www-form-urlencoded"。就是说，在发送到服务器之前，所有字符都会进行编码（空格转换为 "+" 加号，特殊符号转换为 ASCII HEX 值）。

<form enctype="value">
application/x-www-form-urlencoded	在发送前编码所有字符（默认）
multipart/form-data	                不对字符编码。在使用包含文件上传控件的表单时，必须使用该值。
text/plain	空格转换为 "+" 加号，但不对特殊字符编码。
}
type(contentType){
    表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为
text/html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。

    Content-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和
网页的编码，决定浏览器将以什么形式、什么编码读取这个文件，这就是经常看到一些Asp网页点击
的结果却是下载到的一个文件或一张图片的原因。

}