1、常用的调试技巧
(1)代码检查，重新阅读程序，排除比较明显的错误。编译时带上-Wall参数，生成所有的警告信息。
gcc -Wall -pedantic -ansi   表示以ansi/iso生成所有的警告信息。

(cppcheck、coverity、clang、pclint) splint

(2)取样法：在程序中增加一些代码，收集更多与程序运行时的行为相关的信息。使用条件编译，
可以清楚的辨别哪些是调试代码，有利于调试后的代码整理。
例如：
#ifdef DEBUG
　std::cout << x :
#endif
    程序编译时可以选择性的加上-DDEBUG。如果加上这个标志，就定义了DEBUG这个符号，
从而在程序中包含调试用的额外代码，没有加上该标志，这些调试代码将删除。

(3)程序的受控执行。用调试器来控制代码的运行，随时查看这些变量的状态。
    为了能够调试程序，需要在编译和链接时为每个源文件加上编译选项参数。这些选项的作用是
让编译器在程序中添加额外的调试信息。这些信息包括符号和源代码行号，调试器将利用这些信息
向用户显示程序已经执行到的源代码的位置。
    -g标志是对程序调试性编译时常用的一个选项。调试信息的加入使可执行程序的长度成倍的增长、
容量增加，程序运行时的内存数量还是和原来一样，程序调试结束后，最好还是将调试信息从程序的发行版中删除。

2、使用gdb进行程序调试
g++ -g -o test test.cpp  //编译时加上-g参数

1、启动gdb： gdb test
2、help
3、具备带有历史记录的命令行编辑功能，方向键选择之前执行过的命令，直接回车键再次执行
   最近执行过的那条命令。单步调试非常有用。
4、quit：退出
5、run:执行这个程序，程序运行失败时gdb会报告失败的原因和位置。
6、backtrace(bt):栈跟踪，失败时停止的位置，帮助我们找到程序到达错误地点的路径。
7、print：run 后检查变量，注意变量的生命期。
8、打印围绕当前位置前后的一段代码，继续使用list可以显示更多的代码。
9、设置断点，停止程序的运行，查看变量。help breakpoint，break lineNumber，cont，
    end，display，disable breakpoint number，clear，commands breakpointNumber.  
10、设置断点后经常使用单步调试命令next(n)，查看程序运行的细节。

3、valgrind内存调试
valgrind ./test2

