jsonc(new){
  + new () Construct a new luci.jsonc.parser instance.
  $ A luci.jsonc.parser object representing a JSON-C tokener.
  
  parser = luci.jsonc.new()
  print(parser)         -- null
  print(type(parser))   -- userdata
}

jsonc(parse){
  + parse (json) Parse a complete JSON string and convert it into a Lua data structure.
  # json: A string containing the JSON data to parse, must be either a JSON array or a JSON object.
  $ On success, a table containing the parsed JSON data is returned, 
    on failure the function returns nil and a string containing the reason of the parse error.
  
  data = luci.jsonc.parse('{ "name": "John", "age": 34 }') 
  print(data.name)  -- "John"
  luci.util.dumptable(data)
}

jsonc(stringify){
  + stringify (data, pretty) Convert given Lua data into a JSON string. 
  # data: The Lua data to convert, can be a table, string, boolean or number.
  # pretty: A boolean value indicating whether the resulting JSON should be pretty printed.
  $ Returns a string containing the JSON representation of the given Lua data.
  
  json = luci.jsonc.stringify({ item = true, values = { 1, 2, 3 } }) 
  print(json)  -- '{"item":true,"values":[1,2,3]}'

  json = luci.jsonc.stringify({ item = true, values = { 1, 2, 3 } }, true) 
  {
   "item": true,
   "values": [
     1,
     2,
     3
   ]
 }
}