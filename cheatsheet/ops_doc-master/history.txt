history_t20201010(){
borg vs rsync

borg create --progress --remote-path=PATH --stats --verbose HOST:REPOSITORY/::$(date +%Y-%m-%d) DIRECTORY # backup directory 
borg delete --remote-path=PATH HOST:REPOSITORY/::$(date +%Y-%m-%d) # remove backup 
borg init --encryption=repokey --remote-path=PATH HOST:REPOSITORY 

rsync --archive --human-readable --progress --verbose --remove-source-files source host:target # network transfer move 
rsync --rsh='ssh -p 2020 -i ~/.ssh/host.pem' --archive --human-readable --progress --verbose host:/path /target # network transfer 

battery
cbatticon --help-all 
cbatticon --list-power-supplies # battery 

coredumpctl dump PID > coredump.bin # trace segfault 
coredumpctl gdb PID <<< bt # trace segfault 
coredumpctl list # segfault

dia - a diagram drawing program

getconf ARG_MAX # arguments 
getconf -a # system configuration 


gpg --allow-secret-key-import --import ~/secring.gpg 
gpg --armor --export 92126B54 # print public key text 
gpg --decrypt encrypted.asc 
gpg --decrypt | gpg --import # import key signature 
gpg --delete-keys 44E2703A 
gpg --edit-key 4DF0089E 
gpg --export --armor --output 92126B54.public.gpg.key 92126B54 # export public key file 
gpg --full-gen-key # create key 
gpg --gen-revoke --output 4DF0089E.rev 4DF0089E # generate revoke key certificate file 
gpg --import ~/pubring.gpg 
gpg --keyserver keys.gnupg.net --receive-keys 55D0C732 # import pgp signature 
gpg --list-public-keys --with-fingerprint # print public keys 
gpg --list-secret-keys --with-fingerprint # print private keys 
gpg --list-sigs 92126B54 # key signature 
gpg --send-key 92126B54 # upload 
gpg --verify ./*.sig # pgp signature 

journalctl --boot --catalog --output=short-iso 
journalctl --catalog --follow 
journalctl --catalog --lines=10 
journalctl --catalog --since=today --output=short-iso SYSLOG_IDENTIFIER="xprofile-${USER}" # log user x profile 
journalctl --catalog --since=today --output=short-iso # systemd service log 
journalctl --catalog --since=today --unit=shadow.service 

}

history_git20201010(){
git add LICENSE 
git add Makefile 
git add README.markdown 
git add tools.mk 
git add --interactive 
git add --patch 
git add .gitignore 
git add . 
git bisect bad 
git bisect good 
git bisect reset 
git bisect run ./bisect.sh 
git bisect start HEAD HEAD~10 
git blame 1234abcd filename # revision 
git blame filename 
git branch 
git branch --all # list 
git branch --delete topic # local 
git branch --remotes 
git branch --set-upstream-to=origin/master master # track 
git branch --track topic master 
git checkout master # branch change 
git checkout -b topic remotes/origin/topic # branch change create 
git checkout . # revert 
git cherry-pick HEAD@{5} 
git cherry-pick master:HEAD 
git clean --dry-run -dx # directories .gitignore 
git clean --dry-run -d # directories 
git clone git://libdivecomputer.git.sourceforge.net/gitroot/libdivecomputer/libdivecomputer 
git clone --recurse-submodules https://github.com/l0b0/cronlist.deb ~/dev/cronlist-0.1 && cd ~/dev/cronlist-0.1 && git remote add upstream git://github.com/l0b0/cronlist.git && git fetch upstream && git branch upstream && wget --output-document ~/dev/cronlist_0.1.orig.tar.gz https://github.com/l0b0/cronlist/tarball/v0.1 && git-import-orig --pristine-tar ~/dev/cronlist_0.1.orig.tar.gz 
git clone --recurse-submodules https://github.com/l0b0/mkgithub.git 
git commit 
git commit --all --message "Example" 
git commit --amend 
git config branch.master.rebase true 
git config diff.minimal 
git config diff.minimal false 
git config diff.minimal invalid 
git config diff.minimal true 
git config --global github.user l0b0 
git config --global mergetool.prompt false 
git config --list 
git difftool old new # gui 
git diff 
git diff HEAD^ -- README.markdown # last commit 
git diff master origin/master 
git diff origin/master..HEAD # remote 
git diff 'HEAD@{2013.04.30 08:00}' # date 
git diff --cached # stage 
git diff --color-words 
git diff --exit-code # check 
git diff --ignore-all-space 
git diff --ignore-all-space --no-color | git apply --cached 
git diff --ignore-space-change 
git diff --raw 
git diff --staged 
git diff --staged --ignore-space-at-eol 
git diff --staged --stat 
git diff --word-diff 
git diff | diff-ignore-moved-lines 
git fetch 
git fetch && git merge FETCH_HEAD # pull 
git format-patch --find-renames HEAD^ 
git gc # garbage collect 
git grep -I --name-only --null -e '' | xargs --null sed --in-place 's/[ \t]\+\(\r\?\)$/\1/;$a\' -- # git whitespace eol eof 
git gui & 
git help add 
git help bisect 
git help blame 
git help branch 
git help checkout 
git help checkout-index 
git help cherry-pick 
git help clean 
git help clone 
git help commit 
git help config 
git help difftool 
git help diff 
git help fetch 
git help format-patch 
git help gc # garbage collection 
git help grep 
git help gui 
git help help 
git help ignore 
git help init 
git help instaweb 
git help log 
git help ls-files 
git help ls-tree 
git help mergetool 
git help merge 
git help mv 
git help pull 
git help push 
git help rebase 
git help reflog 
git help remote 
git help request-pull 
git help reset 
git help revert 
git help show 
git help stash 
git help status 
git help submodule 
git help tag 
git init 
git instaweb start 
git instaweb stop 
git log 
git log Makefile 
git log origin/master..HEAD # remote 
git log --after '2012-01-20 17:06' --before '2012-04-03 16:15' # date range 
git log --all --decorate --graph # branch 
git log --oneline --decorate 
git log --patch-with-stat 
git log --stat 
git ls-files '*.py' # list files 
git ls-tree --long HEAD ./* | awk '{print $4 " " $5}' # file size commit 
git mergetool 
git merge origin/master 
git merge topic # local branch 
git merge --abort # cancel revert 
git mv README{,.markdown} 
git pull 
git pull --recurse-submodules=yes --update-head-ok origin master # follow initial fetch 
git push 
git push origin COMMIT:BRANCH # push commit 
git push origin :BRANCH # delete remote branch 
git push origin :refs/tags/name # delete remote 
git push --set-upstream origin BRANCH # push new branch 
git push --tags 
git rebase master 
git rebase origin/master # avoid empty merge commit 
git rebase --abort 
git rebase --continue 
git rebase --interactive origin/master # change local commits 
git reflog 
git reflog show --patch-with-stat 
git remote add -f origin ssh://user@example.org/home/user/repo 
git remote --verbose # list 
git reset v0.1 
git reset --soft HEAD~1 # commit undo 
git revert 123abc # commit undo 
git show commit:./path > path.old 
git stash drop stash@{0} # delete 
git stash list --date=local 
git stash list --patch # diff 
git stash pop 
git stash pop stash@{1} 
git stash save "message" 
git stash save --keep-index "message" 
git stash save --patch "message" # diff create 
git stash show 
git stash show --patch stash@{1} # diff 
git stash show --patch # diff 
git stash && git merge origin/master && git stash pop 
git stash && git pull && git stash pop 
git stash && git rebase --interactive HEAD~20 
git stash --keep-index # stage 
git stash --patch # diff create 
git status 
git submodule add --force git://github.com/l0b0/make-includes.git 
git submodule add --force git://github.com/l0b0/shell-includes.git 
git submodule update --init 
git subtree add --prefix=example git@github.com:l0b0/example.git master # merge repository history 
git tag v0.1 
git tag --delete name # local 
git -C "$(git rev-parse --show-toplevel)" checkout-index --all --prefix="../$(basename "$(git rev-parse --show-toplevel)")-copy/" # copy repository file 
git --git-dir=../other/.git format-patch --keep-subject -1 --stdout HEAD | git am --keep --3way # cherry-pick commit head repo 
git --version 

}
