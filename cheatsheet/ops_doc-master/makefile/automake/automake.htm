<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<!-- 
This manual is for GNU Automake (version 1.15,
31 December 2014), a program that creates GNU standards-compliant
Makefiles from template files.

Copyright (C) 1995-2014 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License,
Version 1.3 or any later version published by the Free Software
Foundation; with no Invariant Sections, with no Front-Cover texts,
and with no Back-Cover Texts.  A copy of the license is included in the
section entitled "GNU Free Documentation License."
 -->
<!-- Created by GNU Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<head>
<title>automake</title>

<meta name="description" content="automake">
<meta name="keywords" content="automake">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="makeinfo">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="#Top" rel="start" title="Top">
<link href="#Indices" rel="index" title="Indices">
<link href="#SEC_Contents" rel="contents" title="Table of Contents">
<link href="/manual" rel="up" title="(dir)">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
blockquote.smallquotation {font-size: smaller}
div.display {margin-left: 3.2em}
div.example {margin-left: 3.2em}
div.indentedblock {margin-left: 3.2em}
div.lisp {margin-left: 3.2em}
div.smalldisplay {margin-left: 3.2em}
div.smallexample {margin-left: 3.2em}
div.smallindentedblock {margin-left: 3.2em; font-size: smaller}
div.smalllisp {margin-left: 3.2em}
kbd {font-style:oblique}
pre.display {font-family: inherit}
pre.format {font-family: inherit}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: inherit; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: inherit; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.nocodebreak {white-space:nowrap}
span.nolinebreak {white-space:nowrap}
span.roman {font-family:serif; font-weight:normal}
span.sansserif {font-family:sans-serif; font-weight:normal}
ul.no-bullet {list-style: none}
-->
</style>
<link rel="stylesheet" type="text/css" href="/software/gnulib/manual.css">


</head>

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">
<h1 class="settitle" align="center">automake</h1>








<a name="SEC_Contents"></a>
<h2 class="contents-heading">Table of Contents</h2>

<div class="contents">

<ul class="no-bullet">
  <li><a name="toc-Introduction-1" href="#Introduction">1 Introduction</a></li>
  <li><a name="toc-An-Introduction-to-the-Autotools" href="#Autotools-Introduction">2 An Introduction to the Autotools</a>
  <ul class="no-bullet">
    <li><a name="toc-Introducing-the-GNU-Build-System" href="#GNU-Build-System">2.1 Introducing the GNU Build System</a></li>
    <li><a name="toc-Use-Cases-for-the-GNU-Build-System" href="#Use-Cases">2.2 Use Cases for the GNU Build System</a>
    <ul class="no-bullet">
      <li><a name="toc-Basic-Installation-1" href="#Basic-Installation">2.2.1 Basic Installation</a></li>
      <li><a name="toc-Standard-Makefile-Targets" href="#Standard-Targets">2.2.2 Standard <samp>Makefile</samp> Targets</a></li>
      <li><a name="toc-Standard-Directory-Variables-1" href="#Standard-Directory-Variables">2.2.3 Standard Directory Variables</a></li>
      <li><a name="toc-Standard-Configuration-Variables-1" href="#Standard-Configuration-Variables">2.2.4 Standard Configuration Variables</a></li>
      <li><a name="toc-Overriding-Default-Configuration-Setting-with-config_002esite" href="#config_002esite">2.2.5 Overriding Default Configuration Setting with <samp>config.site</samp></a></li>
      <li><a name="toc-Parallel-Build-Trees-_0028a_002ek_002ea_002e-VPATH-Builds_0029" href="#VPATH-Builds">2.2.6 Parallel Build Trees (a.k.a. VPATH Builds)</a></li>
      <li><a name="toc-Two_002dPart-Installation" href="#Two_002dPart-Install">2.2.7 Two-Part Installation</a></li>
      <li><a name="toc-Cross_002dCompilation-1" href="#Cross_002dCompilation">2.2.8 Cross-Compilation</a></li>
      <li><a name="toc-Renaming-Programs-at-Install-Time" href="#Renaming">2.2.9 Renaming Programs at Install Time</a></li>
      <li><a name="toc-Building-Binary-Packages-Using-DESTDIR" href="#DESTDIR">2.2.10 Building Binary Packages Using DESTDIR</a></li>
      <li><a name="toc-Preparing-Distributions-1" href="#Preparing-Distributions">2.2.11 Preparing Distributions</a></li>
      <li><a name="toc-Automatic-Dependency-Tracking" href="#Dependency-Tracking">2.2.12 Automatic Dependency Tracking</a></li>
      <li><a name="toc-Nested-Packages-1" href="#Nested-Packages">2.2.13 Nested Packages</a></li>
    </ul></li>
    <li><a name="toc-How-Autotools-Help" href="#Why-Autotools">2.3 How Autotools Help</a></li>
    <li><a name="toc-A-Small-Hello-World" href="#Hello-World">2.4 A Small Hello World</a>
    <ul class="no-bullet">
      <li><a name="toc-Creating-amhello_002d1_002e0_002etar_002egz" href="#Creating-amhello">2.4.1 Creating <samp>amhello-1.0.tar.gz</samp></a></li>
      <li><a name="toc-amhello_0027s-configure_002eac-Setup-Explained-1" href="#amhello_0027s-configure_002eac-Setup-Explained">2.4.2 <code>amhello</code>&rsquo;s <samp>configure.ac</samp> Setup Explained</a></li>
      <li><a name="toc-amhello_0027s-Makefile_002eam-Setup-Explained-1" href="#amhello_0027s-Makefile_002eam-Setup-Explained">2.4.3 <code>amhello</code>&rsquo;s <samp>Makefile.am</samp> Setup Explained</a></li>
    </ul></li>
  </ul></li>
  <li><a name="toc-General-ideas" href="#Generalities">3 General ideas</a>
  <ul class="no-bullet">
    <li><a name="toc-General-Operation-1" href="#General-Operation">3.1 General Operation</a></li>
    <li><a name="toc-Strictness-1" href="#Strictness">3.2 Strictness</a></li>
    <li><a name="toc-The-Uniform-Naming-Scheme" href="#Uniform">3.3 The Uniform Naming Scheme</a></li>
    <li><a name="toc-Staying-below-the-command-line-length-limit" href="#Length-Limitations">3.4 Staying below the command line length limit</a></li>
    <li><a name="toc-How-derived-variables-are-named" href="#Canonicalization">3.5 How derived variables are named</a></li>
    <li><a name="toc-Variables-reserved-for-the-user" href="#User-Variables">3.6 Variables reserved for the user</a></li>
    <li><a name="toc-Programs-automake-might-require" href="#Auxiliary-Programs">3.7 Programs automake might require</a></li>
  </ul></li>
  <li><a name="toc-Some-example-packages" href="#Examples">4 Some example packages</a>
  <ul class="no-bullet">
    <li><a name="toc-A-simple-example_002c-start-to-finish" href="#Complete">4.1 A simple example, start to finish</a></li>
    <li><a name="toc-Building-true-and-false" href="#true">4.2 Building true and false</a></li>
  </ul></li>
  <li><a name="toc-Creating-a-Makefile_002ein" href="#automake-Invocation">5 Creating a <samp>Makefile.in</samp></a></li>
  <li><a name="toc-Scanning-configure_002eac_002c-using-aclocal" href="#configure">6 Scanning <samp>configure.ac</samp>, using <code>aclocal</code></a>
  <ul class="no-bullet">
    <li><a name="toc-Configuration-requirements" href="#Requirements">6.1 Configuration requirements</a></li>
    <li><a name="toc-Other-things-Automake-recognizes" href="#Optional">6.2 Other things Automake recognizes</a></li>
    <li><a name="toc-Auto_002dgenerating-aclocal_002em4" href="#aclocal-Invocation">6.3 Auto-generating aclocal.m4</a>
    <ul class="no-bullet">
      <li><a name="toc-aclocal-Options-1" href="#aclocal-Options">6.3.1 aclocal Options</a></li>
      <li><a name="toc-Macro-Search-Path-1" href="#Macro-Search-Path">6.3.2 Macro Search Path</a></li>
      <li><a name="toc-Writing-your-own-aclocal-macros" href="#Extending-aclocal">6.3.3 Writing your own aclocal macros</a></li>
      <li><a name="toc-Handling-Local-Macros" href="#Local-Macros">6.3.4 Handling Local Macros</a></li>
      <li><a name="toc-Serial-Numbers" href="#Serials">6.3.5 Serial Numbers</a></li>
      <li><a name="toc-The-Future-of-aclocal" href="#Future-of-aclocal">6.3.6 The Future of <code>aclocal</code></a></li>
    </ul></li>
    <li><a name="toc-Autoconf-macros-supplied-with-Automake" href="#Macros">6.4 Autoconf macros supplied with Automake</a>
    <ul class="no-bullet">
      <li><a name="toc-Public-Macros-1" href="#Public-Macros">6.4.1 Public Macros</a></li>
      <li><a name="toc-Obsolete-Macros-1" href="#Obsolete-Macros">6.4.2 Obsolete Macros</a></li>
      <li><a name="toc-Private-Macros-1" href="#Private-Macros">6.4.3 Private Macros</a></li>
    </ul></li>
  </ul></li>
  <li><a name="toc-Directories-1" href="#Directories">7 Directories</a>
  <ul class="no-bullet">
    <li><a name="toc-Recursing-subdirectories" href="#Subdirectories">7.1 Recursing subdirectories</a></li>
    <li><a name="toc-Conditional-Subdirectories-1" href="#Conditional-Subdirectories">7.2 Conditional Subdirectories</a>
    <ul class="no-bullet">
      <li><a name="toc-SUBDIRS-vs_002e-DIST_005fSUBDIRS" href="#SUBDIRS-vs-DIST_005fSUBDIRS">7.2.1 <code>SUBDIRS</code> vs. <code>DIST_SUBDIRS</code></a></li>
      <li><a name="toc-Subdirectories-with-AM_005fCONDITIONAL-1" href="#Subdirectories-with-AM_005fCONDITIONAL">7.2.2 Subdirectories with <code>AM_CONDITIONAL</code></a></li>
      <li><a name="toc-Subdirectories-with-AC_005fSUBST-1" href="#Subdirectories-with-AC_005fSUBST">7.2.3 Subdirectories with <code>AC_SUBST</code></a></li>
      <li><a name="toc-Unconfigured-Subdirectories-1" href="#Unconfigured-Subdirectories">7.2.4 Unconfigured Subdirectories</a></li>
    </ul></li>
    <li><a name="toc-An-Alternative-Approach-to-Subdirectories" href="#Alternative">7.3 An Alternative Approach to Subdirectories</a></li>
    <li><a name="toc-Nesting-Packages" href="#Subpackages">7.4 Nesting Packages</a></li>
  </ul></li>
  <li><a name="toc-Building-Programs-and-Libraries" href="#Programs">8 Building Programs and Libraries</a>
  <ul class="no-bullet">
    <li><a name="toc-Building-a-program" href="#A-Program">8.1 Building a program</a>
    <ul class="no-bullet">
      <li><a name="toc-Defining-program-sources" href="#Program-Sources">8.1.1 Defining program sources</a></li>
      <li><a name="toc-Linking-the-program" href="#Linking">8.1.2 Linking the program</a></li>
      <li><a name="toc-Conditional-compilation-of-sources" href="#Conditional-Sources">8.1.3 Conditional compilation of sources</a></li>
      <li><a name="toc-Conditional-compilation-of-programs" href="#Conditional-Programs">8.1.4 Conditional compilation of programs</a></li>
    </ul></li>
    <li><a name="toc-Building-a-library" href="#A-Library">8.2 Building a library</a></li>
    <li><a name="toc-Building-a-Shared-Library" href="#A-Shared-Library">8.3 Building a Shared Library</a>
    <ul class="no-bullet">
      <li><a name="toc-The-Libtool-Concept" href="#Libtool-Concept">8.3.1 The Libtool Concept</a></li>
      <li><a name="toc-Building-Libtool-Libraries" href="#Libtool-Libraries">8.3.2 Building Libtool Libraries</a></li>
      <li><a name="toc-Building-Libtool-Libraries-Conditionally" href="#Conditional-Libtool-Libraries">8.3.3 Building Libtool Libraries Conditionally</a></li>
      <li><a name="toc-Libtool-Libraries-with-Conditional-Sources" href="#Conditional-Libtool-Sources">8.3.4 Libtool Libraries with Conditional Sources</a></li>
      <li><a name="toc-Libtool-Convenience-Libraries-1" href="#Libtool-Convenience-Libraries">8.3.5 Libtool Convenience Libraries</a></li>
      <li><a name="toc-Libtool-Modules-1" href="#Libtool-Modules">8.3.6 Libtool Modules</a></li>
      <li><a name="toc-_005fLIBADD_002c-_005fLDFLAGS_002c-and-_005fLIBTOOLFLAGS" href="#Libtool-Flags">8.3.7 <code>_LIBADD</code>, <code>_LDFLAGS</code>, and <code>_LIBTOOLFLAGS</code></a></li>
      <li><a name="toc-LTLIBOBJS-and-LTALLOCA" href="#LTLIBOBJS">8.3.8 <code>LTLIBOBJS</code> and <code>LTALLOCA</code></a></li>
      <li><a name="toc-Common-Issues-Related-to-Libtool_0027s-Use" href="#Libtool-Issues">8.3.9 Common Issues Related to Libtool&rsquo;s Use</a>
      <ul class="no-bullet">
        <li><a name="toc-Error_003a-required-file-_0060_002e_002fltmain_002esh_0027-not-found" href="#Error-required-file-ltmain_002esh-not-found">8.3.9.1 Error: &lsquo;<samp>required file `./ltmain.sh' not found</samp>&rsquo;</a></li>
        <li><a name="toc-Objects-created-with-both-libtool-and-without" href="#Objects-created-both-with-libtool-and-without">8.3.9.2 Objects &lsquo;<samp>created with both libtool and without</samp>&rsquo;</a></li>
      </ul></li>
    </ul></li>
    <li><a name="toc-Program-and-Library-Variables-1" href="#Program-and-Library-Variables">8.4 Program and Library Variables</a></li>
    <li><a name="toc-Default-_005fSOURCES-1" href="#Default-_005fSOURCES">8.5 Default <code>_SOURCES</code></a></li>
    <li><a name="toc-Special-handling-for-LIBOBJS-and-ALLOCA" href="#LIBOBJS">8.6 Special handling for <code>LIBOBJS</code> and <code>ALLOCA</code></a></li>
    <li><a name="toc-Variables-used-when-building-a-program" href="#Program-Variables">8.7 Variables used when building a program</a></li>
    <li><a name="toc-Yacc-and-Lex-support" href="#Yacc-and-Lex">8.8 Yacc and Lex support</a></li>
    <li><a name="toc-C_002b_002b-Support-1" href="#C_002b_002b-Support">8.9 C++ Support</a></li>
    <li><a name="toc-Objective-C-Support-1" href="#Objective-C-Support">8.10 Objective C Support</a></li>
    <li><a name="toc-Objective-C_002b_002b-Support-1" href="#Objective-C_002b_002b-Support">8.11 Objective C++ Support</a></li>
    <li><a name="toc-Unified-Parallel-C-Support-1" href="#Unified-Parallel-C-Support">8.12 Unified Parallel C Support</a></li>
    <li><a name="toc-Assembly-Support-1" href="#Assembly-Support">8.13 Assembly Support</a></li>
    <li><a name="toc-Fortran-77-Support-1" href="#Fortran-77-Support">8.14 Fortran 77 Support</a>
    <ul class="no-bullet">
      <li><a name="toc-Preprocessing-Fortran-77-1" href="#Preprocessing-Fortran-77">8.14.1 Preprocessing Fortran 77</a></li>
      <li><a name="toc-Compiling-Fortran-77-Files-1" href="#Compiling-Fortran-77-Files">8.14.2 Compiling Fortran 77 Files</a></li>
      <li><a name="toc-Mixing-Fortran-77-With-C-and-C_002b_002b-1" href="#Mixing-Fortran-77-With-C-and-C_002b_002b">8.14.3 Mixing Fortran 77 With C and C++</a>
      <ul class="no-bullet">
        <li><a name="toc-How-the-Linker-is-Chosen-1" href="#How-the-Linker-is-Chosen">8.14.3.1 How the Linker is Chosen</a></li>
      </ul></li>
    </ul></li>
    <li><a name="toc-Fortran-9x-Support-1" href="#Fortran-9x-Support">8.15 Fortran 9x Support</a>
    <ul class="no-bullet">
      <li><a name="toc-Compiling-Fortran-9x-Files-1" href="#Compiling-Fortran-9x-Files">8.15.1 Compiling Fortran 9x Files</a></li>
    </ul></li>
    <li><a name="toc-Compiling-Java-sources-using-gcj" href="#Java-Support-with-gcj">8.16 Compiling Java sources using gcj</a></li>
    <li><a name="toc-Vala-Support-1" href="#Vala-Support">8.17 Vala Support</a></li>
    <li><a name="toc-Support-for-Other-Languages-1" href="#Support-for-Other-Languages">8.18 Support for Other Languages</a></li>
    <li><a name="toc-Automatic-dependency-tracking" href="#Dependencies">8.19 Automatic dependency tracking</a></li>
    <li><a name="toc-Support-for-executable-extensions" href="#EXEEXT">8.20 Support for executable extensions</a></li>
  </ul></li>
  <li><a name="toc-Other-Derived-Objects" href="#Other-Objects">9 Other Derived Objects</a>
  <ul class="no-bullet">
    <li><a name="toc-Executable-Scripts" href="#Scripts">9.1 Executable Scripts</a></li>
    <li><a name="toc-Header-files" href="#Headers">9.2 Header files</a></li>
    <li><a name="toc-Architecture_002dindependent-data-files" href="#Data">9.3 Architecture-independent data files</a></li>
    <li><a name="toc-Built-Sources" href="#Sources">9.4 Built Sources</a>
    <ul class="no-bullet">
      <li><a name="toc-Built-Sources-Example-1" href="#Built-Sources-Example">9.4.1 Built Sources Example</a></li>
    </ul></li>
  </ul></li>
  <li><a name="toc-Other-GNU-Tools-1" href="#Other-GNU-Tools">10 Other GNU Tools</a>
  <ul class="no-bullet">
    <li><a name="toc-Emacs-Lisp-1" href="#Emacs-Lisp">10.1 Emacs Lisp</a></li>
    <li><a name="toc-Gettext" href="#gettext">10.2 Gettext</a></li>
    <li><a name="toc-Libtool-1" href="#Libtool">10.3 Libtool</a></li>
    <li><a name="toc-Java-bytecode-compilation-_0028deprecated_0029" href="#Java">10.4 Java bytecode compilation (deprecated)</a></li>
    <li><a name="toc-Python-1" href="#Python">10.5 Python</a></li>
  </ul></li>
  <li><a name="toc-Building-documentation" href="#Documentation">11 Building documentation</a>
  <ul class="no-bullet">
    <li><a name="toc-Texinfo-1" href="#Texinfo">11.1 Texinfo</a></li>
    <li><a name="toc-Man-Pages-1" href="#Man-Pages">11.2 Man Pages</a></li>
  </ul></li>
  <li><a name="toc-What-Gets-Installed" href="#Install">12 What Gets Installed</a>
  <ul class="no-bullet">
    <li><a name="toc-Basics-of-Installation-1" href="#Basics-of-Installation">12.1 Basics of Installation</a></li>
    <li><a name="toc-The-Two-Parts-of-Install-1" href="#The-Two-Parts-of-Install">12.2 The Two Parts of Install</a></li>
    <li><a name="toc-Extending-Installation-1" href="#Extending-Installation">12.3 Extending Installation</a></li>
    <li><a name="toc-Staged-Installs-1" href="#Staged-Installs">12.4 Staged Installs</a></li>
    <li><a name="toc-Install-Rules-for-the-User-1" href="#Install-Rules-for-the-User">12.5 Install Rules for the User</a></li>
  </ul></li>
  <li><a name="toc-What-Gets-Cleaned" href="#Clean">13 What Gets Cleaned</a></li>
  <li><a name="toc-What-Goes-in-a-Distribution" href="#Dist">14 What Goes in a Distribution</a>
  <ul class="no-bullet">
    <li><a name="toc-Basics-of-Distribution-1" href="#Basics-of-Distribution">14.1 Basics of Distribution</a></li>
    <li><a name="toc-Fine_002dgrained-Distribution-Control-1" href="#Fine_002dgrained-Distribution-Control">14.2 Fine-grained Distribution Control</a></li>
    <li><a name="toc-The-dist-Hook-1" href="#The-dist-Hook">14.3 The dist Hook</a></li>
    <li><a name="toc-Checking-the-Distribution-1" href="#Checking-the-Distribution">14.4 Checking the Distribution</a></li>
    <li><a name="toc-The-Types-of-Distributions-1" href="#The-Types-of-Distributions">14.5 The Types of Distributions</a></li>
  </ul></li>
  <li><a name="toc-Support-for-test-suites" href="#Tests">15 Support for test suites</a>
  <ul class="no-bullet">
    <li><a name="toc-Generalities-about-Testing-1" href="#Generalities-about-Testing">15.1 Generalities about Testing</a></li>
    <li><a name="toc-Simple-Tests-1" href="#Simple-Tests">15.2 Simple Tests</a>
    <ul class="no-bullet">
      <li><a name="toc-Scripts_002dbased-Testsuites-1" href="#Scripts_002dbased-Testsuites">15.2.1 Scripts-based Testsuites</a></li>
      <li><a name="toc-Older-_0028and-discouraged_0029-serial-test-harness" href="#Serial-Test-Harness">15.2.2 Older (and discouraged) serial test harness</a></li>
      <li><a name="toc-Parallel-Test-Harness-1" href="#Parallel-Test-Harness">15.2.3 Parallel Test Harness</a></li>
    </ul></li>
    <li><a name="toc-Custom-Test-Drivers-1" href="#Custom-Test-Drivers">15.3 Custom Test Drivers</a>
    <ul class="no-bullet">
      <li><a name="toc-Overview-of-Custom-Test-Drivers-Support-1" href="#Overview-of-Custom-Test-Drivers-Support">15.3.1 Overview of Custom Test Drivers Support</a></li>
      <li><a name="toc-Declaring-Custom-Test-Drivers-1" href="#Declaring-Custom-Test-Drivers">15.3.2 Declaring Custom Test Drivers</a></li>
      <li><a name="toc-API-for-Custom-Test-Drivers-1" href="#API-for-Custom-Test-Drivers">15.3.3 API for Custom Test Drivers</a>
      <ul class="no-bullet">
        <li><a name="toc-Command_002dline-arguments-for-test-drivers-1" href="#Command_002dline-arguments-for-test-drivers">15.3.3.1 Command-line arguments for test drivers</a></li>
        <li><a name="toc-Log-files-generation-and-test-results-recording-1" href="#Log-files-generation-and-test-results-recording">15.3.3.2 Log files generation and test results recording</a></li>
        <li><a name="toc-Testsuite-progress-output-1" href="#Testsuite-progress-output">15.3.3.3 Testsuite progress output</a></li>
      </ul></li>
    </ul></li>
    <li><a name="toc-Using-the-TAP-test-protocol-1" href="#Using-the-TAP-test-protocol">15.4 Using the TAP test protocol</a>
    <ul class="no-bullet">
      <li><a name="toc-Introduction-to-TAP-1" href="#Introduction-to-TAP">15.4.1 Introduction to TAP</a></li>
      <li><a name="toc-Use-TAP-with-the-Automake-test-harness-1" href="#Use-TAP-with-the-Automake-test-harness">15.4.2 Use TAP with the Automake test harness</a></li>
      <li><a name="toc-Incompatibilities-with-other-TAP-parsers-and-drivers-1" href="#Incompatibilities-with-other-TAP-parsers-and-drivers">15.4.3 Incompatibilities with other TAP parsers and drivers</a></li>
      <li><a name="toc-Links-and-external-resources-on-TAP-1" href="#Links-and-external-resources-on-TAP">15.4.4 Links and external resources on TAP</a></li>
    </ul></li>
    <li><a name="toc-DejaGnu-Tests-1" href="#DejaGnu-Tests">15.5 DejaGnu Tests</a></li>
    <li><a name="toc-Install-Tests-1" href="#Install-Tests">15.6 Install Tests</a></li>
  </ul></li>
  <li><a name="toc-Rebuilding-Makefiles" href="#Rebuilding">16 Rebuilding Makefiles</a></li>
  <li><a name="toc-Changing-Automake_0027s-Behavior" href="#Options">17 Changing Automake&rsquo;s Behavior</a>
  <ul class="no-bullet">
    <li><a name="toc-Options-generalities-1" href="#Options-generalities">17.1 Options generalities</a></li>
    <li><a name="toc-List-of-Automake-options-1" href="#List-of-Automake-options">17.2 List of Automake options</a></li>
  </ul></li>
  <li><a name="toc-Miscellaneous-Rules" href="#Miscellaneous">18 Miscellaneous Rules</a>
  <ul class="no-bullet">
    <li><a name="toc-Interfacing-to-etags" href="#Tags">18.1 Interfacing to <code>etags</code></a></li>
    <li><a name="toc-Handling-new-file-extensions" href="#Suffixes">18.2 Handling new file extensions</a></li>
  </ul></li>
  <li><a name="toc-Include-1" href="#Include">19 Include</a></li>
  <li><a name="toc-Conditionals-1" href="#Conditionals">20 Conditionals</a>
  <ul class="no-bullet">
    <li><a name="toc-Usage-of-Conditionals-1" href="#Usage-of-Conditionals">20.1 Usage of Conditionals</a></li>
    <li><a name="toc-Limits-of-Conditionals-1" href="#Limits-of-Conditionals">20.2 Limits of Conditionals</a></li>
  </ul></li>
  <li><a name="toc-Silencing-make" href="#Silencing-Make">21 Silencing <code>make</code></a>
  <ul class="no-bullet">
    <li><a name="toc-Make-is-verbose-by-default" href="#Make-verbosity">21.1 Make is verbose by default</a></li>
    <li><a name="toc-Standard-and-generic-ways-to-silence-make" href="#Tricks-For-Silencing-Make">21.2 Standard and generic ways to silence make</a></li>
    <li><a name="toc-How-Automake-can-help-in-silencing-make" href="#Automake-Silent-Rules">21.3 How Automake can help in silencing make</a></li>
  </ul></li>
  <li><a name="toc-The-effect-of-_002d_002dgnu-and-_002d_002dgnits" href="#Gnits">22 The effect of <samp>--gnu</samp> and <samp>--gnits</samp></a></li>
  <li><a name="toc-When-Automake-Isn_0027t-Enough" href="#Not-Enough">23 When Automake Isn&rsquo;t Enough</a>
  <ul class="no-bullet">
    <li><a name="toc-Extending-Automake-Rules" href="#Extending">23.1 Extending Automake Rules</a></li>
    <li><a name="toc-Third_002dParty-Makefiles-1" href="#Third_002dParty-Makefiles">23.2 Third-Party <samp>Makefile</samp>s</a></li>
  </ul></li>
  <li><a name="toc-Distributing-Makefile_002eins" href="#Distributing">24 Distributing <samp>Makefile.in</samp>s</a></li>
  <li><a name="toc-Automake-API-Versioning" href="#API-Versioning">25 Automake API Versioning</a></li>
  <li><a name="toc-Upgrading-a-Package-to-a-Newer-Automake-Version" href="#Upgrading">26 Upgrading a Package to a Newer Automake Version</a></li>
  <li><a name="toc-Frequently-Asked-Questions-about-Automake" href="#FAQ">27 Frequently Asked Questions about Automake</a>
  <ul class="no-bullet">
    <li><a name="toc-CVS-and-generated-files" href="#CVS">27.1 CVS and generated files</a></li>
    <li><a name="toc-missing-and-AM_005fMAINTAINER_005fMODE" href="#maintainer_002dmode">27.2 <code>missing</code> and <code>AM_MAINTAINER_MODE</code></a></li>
    <li><a name="toc-Why-doesn_0027t-Automake-support-wildcards_003f" href="#Wildcards">27.3 Why doesn&rsquo;t Automake support wildcards?</a></li>
    <li><a name="toc-Limitations-on-File-Names-1" href="#Limitations-on-File-Names">27.4 Limitations on File Names</a></li>
    <li><a name="toc-Errors-with-distclean-1" href="#Errors-with-distclean">27.5 Errors with distclean</a></li>
    <li><a name="toc-Flag-Variables-Ordering-1" href="#Flag-Variables-Ordering">27.6 Flag Variables Ordering</a></li>
    <li><a name="toc-Why-are-object-files-sometimes-renamed_003f" href="#Renamed-Objects">27.7 Why are object files sometimes renamed?</a></li>
    <li><a name="toc-Per_002dObject-Flags-Emulation" href="#Per_002dObject-Flags">27.8 Per-Object Flags Emulation</a></li>
    <li><a name="toc-Handling-Tools-that-Produce-Many-Outputs" href="#Multiple-Outputs">27.9 Handling Tools that Produce Many Outputs</a></li>
    <li><a name="toc-Installing-to-Hard_002dCoded-Locations" href="#Hard_002dCoded-Install-Paths">27.10 Installing to Hard-Coded Locations</a></li>
    <li><a name="toc-Debugging-Make-Rules-1" href="#Debugging-Make-Rules">27.11 Debugging Make Rules</a></li>
    <li><a name="toc-Reporting-Bugs-1" href="#Reporting-Bugs">27.12 Reporting Bugs</a></li>
  </ul></li>
  <li><a name="toc-Copying-This-Manual-1" href="#Copying-This-Manual">Appendix A Copying This Manual</a>
  <ul class="no-bullet">
    <li><a name="toc-GNU-Free-Documentation-License-1" href="#GNU-Free-Documentation-License">A.1 GNU Free Documentation License</a></li>
  </ul></li>
  <li><a name="toc-Indices-1" href="#Indices">Appendix B Indices</a>
  <ul class="no-bullet">
    <li><a name="toc-Macro-Index-1" href="#Macro-Index">B.1 Macro Index</a></li>
    <li><a name="toc-Variable-Index-1" href="#Variable-Index">B.2 Variable Index</a></li>
    <li><a name="toc-General-Index-1" href="#General-Index">B.3 General Index</a></li>
  </ul></li>
</ul>
</div>






<a name="Top"></a>
<div class="header">
<p>
Next: <a href="#Introduction" accesskey="n" rel="next">Introduction</a>, Up: <a href="/manual" accesskey="u" rel="up">(dir)</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="GNU-Automake"></a>
<h1 class="top">GNU Automake</h1>


<p>This manual is for GNU Automake (version 1.15,
31 December 2014), a program that creates GNU standards-compliant
Makefiles from template files.
</p>
<p>Copyright &copy; 1995-2014 Free Software Foundation, Inc.
</p>
<blockquote>
<p>Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License,
Version 1.3 or any later version published by the Free Software
Foundation; with no Invariant Sections, with no Front-Cover texts,
and with no Back-Cover Texts.  A copy of the license is included in the
section entitled &ldquo;GNU Free Documentation License.&rdquo;
</p>
</blockquote>


<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Introduction" accesskey="1">Introduction</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Automake&rsquo;s purpose
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Autotools-Introduction" accesskey="2">Autotools Introduction</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">An Introduction to the Autotools
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Generalities" accesskey="3">Generalities</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">General ideas
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Examples" accesskey="4">Examples</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Some example packages
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#automake-Invocation" accesskey="5">automake Invocation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Creating a Makefile.in
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#configure" accesskey="6">configure</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Scanning configure.ac, using aclocal
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Directories" accesskey="7">Directories</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Declaring subdirectories
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Programs" accesskey="8">Programs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Building programs and libraries
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Other-Objects" accesskey="9">Other Objects</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Other derived objects
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Other-GNU-Tools">Other GNU Tools</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Other GNU Tools
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Documentation">Documentation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Building documentation
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Install">Install</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">What gets installed
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Clean">Clean</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">What gets cleaned
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Dist">Dist</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">What goes in a distribution
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Tests">Tests</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Support for test suites
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Rebuilding">Rebuilding</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Automatic rebuilding of Makefile
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Options">Options</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Changing Automake&rsquo;s behavior
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Miscellaneous">Miscellaneous</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Miscellaneous rules
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Include">Include</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Including extra files in an Automake template
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Conditionals">Conditionals</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Conditionals
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Silencing-Make">Silencing Make</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Obtain less verbose output from <code>make</code>
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Gnits">Gnits</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The effect of <samp>--gnu</samp> and <samp>--gnits</samp>
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Not-Enough">Not Enough</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">When Automake is not Enough
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Distributing">Distributing</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Distributing the Makefile.in
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#API-Versioning">API Versioning</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">About compatibility between Automake versions
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Upgrading">Upgrading</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Upgrading to a Newer Automake Version
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#FAQ">FAQ</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Frequently Asked Questions
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Copying-This-Manual">Copying This Manual</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to make copies of this manual
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Indices">Indices</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Indices of variables, macros, and concepts
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
</pre></th></tr><tr><th colspan="3" align="left" valign="top"><pre class="menu-comment"> &mdash; The Detailed Node Listing &mdash;

An Introduction to the Autotools

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#GNU-Build-System">GNU Build System</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Introducing the GNU Build System
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Use-Cases">Use Cases</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Use Cases for the GNU Build System
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Why-Autotools">Why Autotools</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How Autotools Help
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Hello-World">Hello World</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">A Small Hello World Package
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Use Cases for the GNU Build System

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Basic-Installation">Basic Installation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Common installation procedure
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Standard-Targets">Standard Targets</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">A list of standard Makefile targets
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Standard-Directory-Variables">Standard Directory Variables</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">A list of standard directory variables
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Standard-Configuration-Variables">Standard Configuration Variables</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Using configuration variables
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#config_002esite">config.site</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Using a config.site file
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#VPATH-Builds">VPATH Builds</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Parallel build trees
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Two_002dPart-Install">Two-Part Install</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Installing data and programs separately
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Cross_002dCompilation">Cross-Compilation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Building for other architectures
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Renaming">Renaming</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Renaming programs at install time
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#DESTDIR">DESTDIR</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Building binary packages with DESTDIR
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Preparing-Distributions">Preparing Distributions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Rolling out tarballs
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Dependency-Tracking">Dependency Tracking</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Automatic dependency tracking
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Nested-Packages">Nested Packages</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The GNU Build Systems can be nested
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
A Small Hello World

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Creating-amhello">Creating amhello</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Create <samp>amhello-1.0.tar.gz</samp> from scratch
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#amhello_0027s-configure_002eac-Setup-Explained">amhello's configure.ac Setup Explained</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#amhello_0027s-Makefile_002eam-Setup-Explained">amhello's Makefile.am Setup Explained</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
General ideas

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#General-Operation">General Operation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">General operation of Automake
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Strictness">Strictness</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Standards conformance checking
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Uniform">Uniform</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The Uniform Naming Scheme
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Length-Limitations">Length Limitations</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Staying below the command line length limit
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Canonicalization">Canonicalization</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How derived variables are named
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#User-Variables">User Variables</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Variables reserved for the user
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Auxiliary-Programs">Auxiliary Programs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Programs automake might require
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Some example packages

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Complete">Complete</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">A simple example, start to finish
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#true">true</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Building true and false
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Scanning <samp>configure.ac</samp>, using <code>aclocal</code>

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Requirements">Requirements</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Configuration requirements
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Optional">Optional</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Other things Automake recognizes
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#aclocal-Invocation">aclocal Invocation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Auto-generating aclocal.m4
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Macros">Macros</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Autoconf macros supplied with Automake
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Auto-generating aclocal.m4

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#aclocal-Options">aclocal Options</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Options supported by aclocal
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Macro-Search-Path">Macro Search Path</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How aclocal finds .m4 files
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Extending-aclocal">Extending aclocal</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Writing your own aclocal macros
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Local-Macros">Local Macros</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Organizing local macros
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Serials">Serials</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Serial lines in Autoconf macros
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Future-of-aclocal">Future of aclocal</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">aclocal&rsquo;s scheduled death
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Autoconf macros supplied with Automake

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Public-Macros">Public Macros</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Macros that you can use.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Private-Macros">Private Macros</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Macros that you should not use.
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Directories

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Subdirectories">Subdirectories</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Building subdirectories recursively
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Conditional-Subdirectories">Conditional Subdirectories</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Conditionally not building directories
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Alternative">Alternative</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Subdirectories without recursion
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Subpackages">Subpackages</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Nesting packages
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Conditional Subdirectories

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#SUBDIRS-vs-DIST_005fSUBDIRS">SUBDIRS vs DIST_SUBDIRS</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Two sets of directories
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Subdirectories-with-AM_005fCONDITIONAL">Subdirectories with AM_CONDITIONAL</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Specifying conditional subdirectories
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Subdirectories-with-AC_005fSUBST">Subdirectories with AC_SUBST</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Another way for conditional recursion
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Unconfigured-Subdirectories">Unconfigured Subdirectories</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Not even creating a &lsquo;<samp>Makefile</samp>&rsquo;
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Building Programs and Libraries

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#A-Program">A Program</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Building a program
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#A-Library">A Library</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Building a library
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#A-Shared-Library">A Shared Library</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Building a Libtool library
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Program-and-Library-Variables">Program and Library Variables</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Variables controlling program and
                                library builds
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Default-_005fSOURCES">Default _SOURCES</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Default source files
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#LIBOBJS">LIBOBJS</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Special handling for LIBOBJS and ALLOCA
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Program-Variables">Program Variables</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Variables used when building a program
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Yacc-and-Lex">Yacc and Lex</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Yacc and Lex support
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#C_002b_002b-Support">C++ Support</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compiling C++ sources
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Objective-C-Support">Objective C Support</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compiling Objective C sources
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Objective-C_002b_002b-Support">Objective C++ Support</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compiling Objective C++ sources
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Unified-Parallel-C-Support">Unified Parallel C Support</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compiling Unified Parallel C sources
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Assembly-Support">Assembly Support</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compiling assembly sources
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Fortran-77-Support">Fortran 77 Support</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compiling Fortran 77 sources
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Fortran-9x-Support">Fortran 9x Support</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compiling Fortran 9x sources
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Java-Support-with-gcj">Java Support with gcj</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compiling Java sources using gcj
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Vala-Support">Vala Support</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compiling Vala sources
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Support-for-Other-Languages">Support for Other Languages</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compiling other languages
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Dependencies">Dependencies</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Automatic dependency tracking
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#EXEEXT">EXEEXT</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Support for executable extensions
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Building a program

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Program-Sources">Program Sources</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Defining program sources
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Linking">Linking</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Linking with libraries or extra objects
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Conditional-Sources">Conditional Sources</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Handling conditional sources
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Conditional-Programs">Conditional Programs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Building a program conditionally
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Building a Shared Library

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Libtool-Concept">Libtool Concept</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Introducing Libtool
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Libtool-Libraries">Libtool Libraries</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Declaring Libtool Libraries
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Conditional-Libtool-Libraries">Conditional Libtool Libraries</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Building Libtool Libraries Conditionally
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Conditional-Libtool-Sources">Conditional Libtool Sources</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Choosing Library Sources Conditionally
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Libtool-Convenience-Libraries">Libtool Convenience Libraries</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Building Convenience Libtool Libraries
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Libtool-Modules">Libtool Modules</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Building Libtool Modules
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Libtool-Flags">Libtool Flags</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Using _LIBADD, _LDFLAGS, and _LIBTOOLFLAGS
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#LTLIBOBJS">LTLIBOBJS</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Using $(LTLIBOBJS) and $(LTALLOCA)
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Libtool-Issues">Libtool Issues</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Common Issues Related to Libtool&rsquo;s Use
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Common Issues Related to Libtool&rsquo;s Use

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Error-required-file-ltmain_002esh-not-found">Error required file ltmain.sh not found</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The need to run libtoolize
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Objects-created-both-with-libtool-and-without">Objects created both with libtool and without</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Avoid a specific build race
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Fortran 77 Support

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Preprocessing-Fortran-77">Preprocessing Fortran 77</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Preprocessing Fortran 77 sources
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Compiling-Fortran-77-Files">Compiling Fortran 77 Files</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compiling Fortran 77 sources
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Mixing-Fortran-77-With-C-and-C_002b_002b">Mixing Fortran 77 With C and C++</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Mixing Fortran 77 With C and C++
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Mixing Fortran 77 With C and C++

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#How-the-Linker-is-Chosen">How the Linker is Chosen</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Automatic linker selection
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Fortran 9x Support

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Compiling-Fortran-9x-Files">Compiling Fortran 9x Files</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compiling Fortran 9x sources
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Other Derived Objects

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Scripts">Scripts</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Executable scripts
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Headers">Headers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Header files
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Data">Data</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Architecture-independent data files
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Sources">Sources</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Derived sources
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Built Sources

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Built-Sources-Example">Built Sources Example</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Several ways to handle built sources.
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Other GNU Tools

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Emacs-Lisp">Emacs Lisp</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Emacs Lisp
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#gettext">gettext</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Gettext
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Libtool">Libtool</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Libtool
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Java">Java</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Java bytecode compilation (deprecated)
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Python">Python</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Python
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Building documentation

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Texinfo">Texinfo</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Texinfo
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Man-Pages">Man Pages</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Man pages
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
What Gets Installed

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Basics-of-Installation">Basics of Installation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">What gets installed where
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#The-Two-Parts-of-Install">The Two Parts of Install</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Installing data and programs separately
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Extending-Installation">Extending Installation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Adding your own rules for installation
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Staged-Installs">Staged Installs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Installation in a temporary location
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Install-Rules-for-the-User">Install Rules for the User</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Useful additional rules
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
What Goes in a Distribution

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Basics-of-Distribution">Basics of Distribution</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Files distributed by default
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Fine_002dgrained-Distribution-Control">Fine-grained Distribution Control</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top"><code>dist_</code> and <code>nodist_</code> prefixes
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#The-dist-Hook">The dist Hook</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">A target for last-minute distribution changes
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Checking-the-Distribution">Checking the Distribution</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">&lsquo;<samp>make distcheck</samp>&rsquo; explained
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#The-Types-of-Distributions">The Types of Distributions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">A variety of formats and compression methods
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Support for test suites

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Generalities-about-Testing">Generalities about Testing</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Generic concepts and terminology about testing
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Simple-Tests">Simple Tests</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Listing test scripts in <code>TESTS</code>
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Custom-Test-Drivers">Custom Test Drivers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Writing and using custom test drivers
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Using-the-TAP-test-protocol">Using the TAP test protocol</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Integrating test scripts that use the TAP protocol
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#DejaGnu-Tests">DejaGnu Tests</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Interfacing with the <code>dejagnu</code> testing framework
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Install-Tests">Install Tests</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Running tests on installed packages
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Simple Tests

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Scripts_002dbased-Testsuites">Scripts-based Testsuites</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Automake-specific concepts and terminology
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Serial-Test-Harness">Serial Test Harness</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Older (and discouraged) serial test harness
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Parallel-Test-Harness">Parallel Test Harness</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Generic concurrent test harness
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Using the TAP test protocol

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Introduction-to-TAP">Introduction to TAP</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Use-TAP-with-the-Automake-test-harness">Use TAP with the Automake test harness</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Incompatibilities-with-other-TAP-parsers-and-drivers">Incompatibilities with other TAP parsers and drivers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Links-and-external-resources-on-TAP">Links and external resources on TAP</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Custom Test Drivers

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Overview-of-Custom-Test-Drivers-Support">Overview of Custom Test Drivers Support</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Declaring-Custom-Test-Drivers">Declaring Custom Test Drivers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#API-for-Custom-Test-Drivers">API for Custom Test Drivers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
API for Custom Test Drivers

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Command_002dline-arguments-for-test-drivers">Command-line arguments for test drivers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Log-files-generation-and-test-results-recording">Log files generation and test results recording</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Testsuite-progress-output">Testsuite progress output</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Changing Automake&rsquo;s Behavior

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Options-generalities">Options generalities</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Semantics of Automake option
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#List-of-Automake-options">List of Automake options</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">A comprehensive list of Automake options
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Miscellaneous Rules

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Tags">Tags</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Interfacing to cscope, etags and mkid
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Suffixes">Suffixes</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Handling new file extensions
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Conditionals

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Usage-of-Conditionals">Usage of Conditionals</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Declaring conditional content
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Limits-of-Conditionals">Limits of Conditionals</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Enclosing complete statements
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Silencing Make

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Make-verbosity">Make verbosity</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Make is verbose by default
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Tricks-For-Silencing-Make">Tricks For Silencing Make</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Standard and generic ways to silence make
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Automake-Silent-Rules">Automake Silent Rules</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How Automake can help in silencing make
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
When Automake Isn&rsquo;t Enough

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Extending">Extending</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Adding new rules or overriding existing ones.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Third_002dParty-Makefiles">Third-Party Makefiles</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Integrating Non-Automake <samp>Makefile</samp>s.
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Frequently Asked Questions about Automake

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#CVS">CVS</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">CVS and generated files
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#maintainer_002dmode">maintainer-mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">missing and AM_MAINTAINER_MODE
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Wildcards">Wildcards</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Why doesn&rsquo;t Automake support wildcards?
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Limitations-on-File-Names">Limitations on File Names</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Limitations on source and installed file names
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Errors-with-distclean">Errors with distclean</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Files left in build directory after distclean
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Flag-Variables-Ordering">Flag Variables Ordering</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">CFLAGS vs. AM_CFLAGS vs. mumble_CFLAGS
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Renamed-Objects">Renamed Objects</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Why are object files sometimes renamed?
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Per_002dObject-Flags">Per-Object Flags</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to simulate per-object flags?
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Multiple-Outputs">Multiple Outputs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Writing rules for tools with many output files
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Hard_002dCoded-Install-Paths">Hard-Coded Install Paths</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Installing to hard-coded locations
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Debugging-Make-Rules">Debugging Make Rules</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Strategies when things don&rsquo;t work as expected
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Reporting-Bugs">Reporting Bugs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Feedback on bugs and feature requests
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Copying This Manual

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#GNU-Free-Documentation-License">GNU Free Documentation License</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">License for copying this manual
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
Indices

</pre></th></tr><tr><td align="left" valign="top">&bull; <a href="#Macro-Index">Macro Index</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Index of Autoconf macros
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Variable-Index">Variable Index</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Index of Makefile variables
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#General-Index">General Index</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">General index
</td></tr>
<tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
</pre></th></tr></table>



<hr>
<a name="Introduction"></a>
<div class="header">
<p>
Next: <a href="#Autotools-Introduction" accesskey="n" rel="next">Autotools Introduction</a>, Previous: <a href="#Top" accesskey="p" rel="prev">Top</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Introduction-1"></a>
<h2 class="chapter">1 Introduction</h2>

<p>Automake is a tool for automatically generating <samp>Makefile.in</samp>s
from files called <samp>Makefile.am</samp>.  Each <samp>Makefile.am</samp> is
basically a series of <code>make</code> variable
definitions<a name="DOCF1" href="#FOOT1"><sup>1</sup></a>, with rules being thrown in
occasionally.  The generated <samp>Makefile.in</samp>s are compliant with
the GNU Makefile standards.
</p>
<a name="index-GNU-Makefile-standards"></a>

<p>The GNU Makefile Standards Document
(see <a href="http://www.gnu.org/prep/standards/standards.html#Makefile-Conventions">Makefile Conventions</a> in <cite>The GNU Coding Standards</cite>)
is long, complicated, and subject to change.  The goal of Automake is to
remove the burden of Makefile maintenance from the back of the
individual GNU maintainer (and put it on the back of the Automake
maintainers).
</p>
<p>The typical Automake input file is simply a series of variable definitions.
Each such file is processed to create a <samp>Makefile.in</samp>.
</p>
<a name="index-Constraints-of-Automake"></a>
<a name="index-Automake-constraints"></a>

<p>Automake does constrain a project in certain ways; for instance, it
assumes that the project uses Autoconf (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Top">Introduction</a> in <cite>The Autoconf Manual</cite>), and enforces certain restrictions on
the <samp>configure.ac</samp> contents.
</p>
<a name="index-Automake-requirements"></a>
<a name="index-Requirements_002c-Automake"></a>

<p>Automake requires <code>perl</code> in order to generate the
<samp>Makefile.in</samp>s.  However, the distributions created by Automake are
fully GNU standards-compliant, and do not require <code>perl</code> in order
to be built.
</p>
<a name="index-Bugs_002c-reporting"></a>
<a name="index-Reporting-bugs"></a>
<a name="index-E_002dmail_002c-bug-reports"></a>

<p>For more information on bug reports, See <a href="#Reporting-Bugs">Reporting Bugs</a>.
</p>
<hr>
<a name="Autotools-Introduction"></a>
<div class="header">
<p>
Next: <a href="#Generalities" accesskey="n" rel="next">Generalities</a>, Previous: <a href="#Introduction" accesskey="p" rel="prev">Introduction</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="An-Introduction-to-the-Autotools"></a>
<h2 class="chapter">2 An Introduction to the Autotools</h2>

<p>If you are new to Automake, maybe you know that it is part of a set of
tools called <em>The Autotools</em>.  Maybe you&rsquo;ve already delved into a
package full of files named <samp>configure</samp>, <samp>configure.ac</samp>,
<samp>Makefile.in</samp>, <samp>Makefile.am</samp>, <samp>aclocal.m4</samp>, &hellip;,
some of them claiming to be <em>generated by</em> Autoconf or Automake.
But the exact purpose of these files and their relations is probably
fuzzy.  The goal of this chapter is to introduce you to this machinery,
to show you how it works and how powerful it is.  If you&rsquo;ve never
installed or seen such a package, do not worry: this chapter will walk
you through it.
</p>
<p>If you need some teaching material, more illustrations, or a less
<code>automake</code>-centered continuation, some slides for this
introduction are available in Alexandre Duret-Lutz&rsquo;s
<a href="http://www.lrde.epita.fr/~adl/autotools.html">Autotools Tutorial</a>.
This chapter is the written version of the first part of his tutorial.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#GNU-Build-System" accesskey="1">GNU Build System</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Introducing the GNU Build System
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Use-Cases" accesskey="2">Use Cases</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Use Cases for the GNU Build System
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Why-Autotools" accesskey="3">Why Autotools</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How Autotools Help
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Hello-World" accesskey="4">Hello World</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">A Small Hello World Package
</td></tr>
</table>

<hr>
<a name="GNU-Build-System"></a>
<div class="header">
<p>
Next: <a href="#Use-Cases" accesskey="n" rel="next">Use Cases</a>, Up: <a href="#Autotools-Introduction" accesskey="u" rel="up">Autotools Introduction</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Introducing-the-GNU-Build-System"></a>
<h3 class="section">2.1 Introducing the GNU Build System</h3>
<a name="index-GNU-Build-System_002c-introduction"></a>

<p>It is a truth universally acknowledged, that as a developer in
possession of a new package, you must be in want of a build system.
</p>
<p>In the Unix world, such a build system is traditionally achieved using
the command <code>make</code> (see <a href="http://www.gnu.org/software/make/manual/make.html#Top">Overview</a> in <cite>The GNU Make
Manual</cite>).  You express the recipe to build your package in a
<samp>Makefile</samp>.  This file is a set of rules to build the files in
the package.  For instance the program <samp>prog</samp> may be built by
running the linker on the files <samp>main.o</samp>, <samp>foo.o</samp>, and
<samp>bar.o</samp>; the file <samp>main.o</samp> may be built by running the
compiler on <samp>main.c</samp>; etc.  Each time <code>make</code> is run, it
reads <samp>Makefile</samp>, checks the existence and modification time of
the files mentioned, decides what files need to be built (or rebuilt),
and runs the associated commands.
</p>
<p>When a package needs to be built on a different platform than the one
it was developed on, its <samp>Makefile</samp> usually needs to be adjusted.
For instance the compiler may have another name or require more
options.  In 1991, David J. MacKenzie got tired of customizing
<samp>Makefile</samp> for the 20 platforms he had to deal with.  Instead, he
handcrafted a little shell script called <samp>configure</samp> to
automatically adjust the <samp>Makefile</samp> (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Genesis">Genesis</a> in <cite>The Autoconf Manual</cite>).  Compiling his package was now
as simple as running <code>./configure &amp;&amp; make</code>.
</p>
<a name="index-GNU-Coding-Standards"></a>

<p>Today this process has been standardized in the GNU project.  The GNU
Coding Standards (see <a href="http://www.gnu.org/prep/standards/standards.html#Managing-Releases">The Release Process</a> in <cite>The GNU Coding Standards</cite>) explains how each package of the
GNU project should have a <samp>configure</samp> script, and the minimal
interface it should have.  The <samp>Makefile</samp> too should follow some
established conventions.  The result?  A unified build system that
makes all packages almost indistinguishable by the installer.  In its
simplest scenario, all the installer has to do is to unpack the
package, run <code>./configure &amp;&amp; make &amp;&amp; make install</code>, and repeat
with the next package to install.
</p>
<p>We call this build system the <em>GNU Build System</em>, since it was
grown out of the GNU project.  However it is used by a vast number of
other packages: following any existing convention has its advantages.
</p>
<a name="index-Autotools_002c-introduction"></a>

<p>The Autotools are tools that will create a GNU Build System for your
package.  Autoconf mostly focuses on <samp>configure</samp> and Automake on
<samp>Makefile</samp>s.  It is entirely possible to create a GNU Build
System without the help of these tools.  However it is rather
burdensome and error-prone.  We will discuss this again after some
illustration of the GNU Build System in action.
</p>
<hr>
<a name="Use-Cases"></a>
<div class="header">
<p>
Next: <a href="#Why-Autotools" accesskey="n" rel="next">Why Autotools</a>, Previous: <a href="#GNU-Build-System" accesskey="p" rel="prev">GNU Build System</a>, Up: <a href="#Autotools-Introduction" accesskey="u" rel="up">Autotools Introduction</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Use-Cases-for-the-GNU-Build-System"></a>
<h3 class="section">2.2 Use Cases for the GNU Build System</h3>
<a name="index-GNU-Build-System_002c-use-cases"></a>
<a name="index-GNU-Build-System_002c-features"></a>
<a name="index-Features-of-the-GNU-Build-System"></a>
<a name="index-Use-Cases-for-the-GNU-Build-System"></a>
<a name="index-amhello_002d1_002e0_002etar_002egz_002c-location"></a>
<a name="index-amhello_002d1_002e0_002etar_002egz_002c-use-cases"></a>

<p>In this section we explore several use cases for the GNU Build System.
You can replay all of these examples on the <samp>amhello-1.0.tar.gz</samp>
package distributed with Automake.  If Automake is installed on your
system, you should find a copy of this file in
<samp><var>prefix</var>/share/doc/automake/amhello-1.0.tar.gz</samp>, where
<var>prefix</var> is the installation prefix specified during configuration
(<var>prefix</var> defaults to <samp>/usr/local</samp>, however if Automake was
installed by some GNU/Linux distribution it most likely has been set
to <samp>/usr</samp>).  If you do not have a copy of Automake installed,
you can find a copy of this file inside the <samp>doc/</samp> directory of
the Automake package.
</p>
<p>Some of the following use cases present features that are in fact
extensions to the GNU Build System.  Read: they are not specified by
the GNU Coding Standards, but they are nonetheless part of the build
system created by the Autotools.  To keep things simple, we do not
point out the difference.  Our objective is to show you many of the
features that the build system created by the Autotools will offer to
you.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Basic-Installation" accesskey="1">Basic Installation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Common installation procedure
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Standard-Targets" accesskey="2">Standard Targets</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">A list of standard Makefile targets
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Standard-Directory-Variables" accesskey="3">Standard Directory Variables</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">A list of standard directory variables
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Standard-Configuration-Variables" accesskey="4">Standard Configuration Variables</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Using configuration variables
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#config_002esite" accesskey="5">config.site</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Using a config.site file
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#VPATH-Builds" accesskey="6">VPATH Builds</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Parallel build trees
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Two_002dPart-Install" accesskey="7">Two-Part Install</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Installing data and programs separately
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Cross_002dCompilation" accesskey="8">Cross-Compilation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Building for other architectures
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Renaming" accesskey="9">Renaming</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Renaming programs at install time
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#DESTDIR">DESTDIR</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Building binary packages with DESTDIR
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Preparing-Distributions">Preparing Distributions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Rolling out tarballs
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Dependency-Tracking">Dependency Tracking</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Automatic dependency tracking
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Nested-Packages">Nested Packages</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The GNU Build Systems can be nested
</td></tr>
</table>

<hr>
<a name="Basic-Installation"></a>
<div class="header">
<p>
Next: <a href="#Standard-Targets" accesskey="n" rel="next">Standard Targets</a>, Up: <a href="#Use-Cases" accesskey="u" rel="up">Use Cases</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Basic-Installation-1"></a>
<h4 class="subsection">2.2.1 Basic Installation</h4>
<a name="index-Configuration_002c-basics"></a>
<a name="index-Installation_002c-basics"></a>
<a name="index-GNU-Build-System_002c-basics"></a>

<p>The most common installation procedure looks as follows.
</p>
<div class="example">
<pre class="example">~ % <kbd>tar zxf amhello-1.0.tar.gz</kbd>
~ % <kbd>cd amhello-1.0</kbd>
~/amhello-1.0 % <kbd>./configure</kbd>
&hellip;
config.status: creating Makefile
config.status: creating src/Makefile
&hellip;
~/amhello-1.0 % <kbd>make</kbd>
&hellip;
~/amhello-1.0 % <kbd>make check</kbd>
&hellip;
~/amhello-1.0 % <kbd>su</kbd>
Password:
/home/adl/amhello-1.0 # <kbd>make install</kbd>
&hellip;
/home/adl/amhello-1.0 # <kbd>exit</kbd>
~/amhello-1.0 % <kbd>make installcheck</kbd>
&hellip;
</pre></div>

<a name="index-Unpacking"></a>

<p>The user first unpacks the package.  Here, and in the following
examples, we will use the non-portable <code>tar zxf</code> command for
simplicity.  On a system without GNU <code>tar</code> installed, this
command should read <code>gunzip -c amhello-1.0.tar.gz | tar xf -</code>.
</p>
<p>The user then enters the newly created directory to run the
<samp>configure</samp> script.  This script probes the system for various
features, and finally creates the <samp>Makefile</samp>s.  In this toy
example there are only two <samp>Makefile</samp>s, but in real-world projects,
there may be many more, usually one <samp>Makefile</samp> per directory.
</p>
<p>It is now possible to run <code>make</code>.  This will construct all the
programs, libraries, and scripts that need to be constructed for the
package.  In our example, this compiles the <samp>hello</samp> program.
All files are constructed in place, in the source tree; we will see
later how this can be changed.
</p>
<p><code>make check</code> causes the package&rsquo;s tests to be run.  This step is
not mandatory, but it is often good to make sure the programs that
have been built behave as they should, before you decide to install
them.  Our example does not contain any tests, so running <code>make
check</code> is a no-op.
</p>
<a name="index-su_002c-before-make-install"></a>
<p>After everything has been built, and maybe tested, it is time to
install it on the system.  That means copying the programs,
libraries, header files, scripts, and other data files from the
source directory to their final destination on the system.  The
command <code>make install</code> will do that.  However, by default
everything will be installed in subdirectories of <samp>/usr/local</samp>:
binaries will go into <samp>/usr/local/bin</samp>, libraries will end up in
<samp>/usr/local/lib</samp>, etc.  This destination is usually not writable
by any user, so we assume that we have to become root before we can
run <code>make install</code>.  In our example, running <code>make install</code>
will copy the program <samp>hello</samp> into <samp>/usr/local/bin</samp>
and <samp>README</samp> into <samp>/usr/local/share/doc/amhello</samp>.
</p>
<p>A last and optional step is to run <code>make installcheck</code>.  This
command may run tests on the installed files.  <code>make check</code> tests
the files in the source tree, while <code>make installcheck</code> tests
their installed copies.  The tests run by the latter can be different
from those run by the former.  For instance, there are tests that
cannot be run in the source tree.  Conversely, some packages are set
up so that <code>make installcheck</code> will run the very same tests as
<code>make check</code>, only on different files (non-installed
vs. installed).  It can make a difference, for instance when the
source tree&rsquo;s layout is different from that of the installation.
Furthermore it may help to diagnose an incomplete installation.
</p>
<p>Presently most packages do not have any <code>installcheck</code> tests
because the existence of <code>installcheck</code> is little known, and its
usefulness is neglected.  Our little toy package is no better: <code>make
installcheck</code> does nothing.
</p>
<hr>
<a name="Standard-Targets"></a>
<div class="header">
<p>
Next: <a href="#Standard-Directory-Variables" accesskey="n" rel="next">Standard Directory Variables</a>, Previous: <a href="#Basic-Installation" accesskey="p" rel="prev">Basic Installation</a>, Up: <a href="#Use-Cases" accesskey="u" rel="up">Use Cases</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Standard-Makefile-Targets"></a>
<h4 class="subsection">2.2.2 Standard <samp>Makefile</samp> Targets</h4>

<p>So far we have come across four ways to run <code>make</code> in the GNU
Build System: <code>make</code>, <code>make check</code>, <code>make install</code>, and
<code>make installcheck</code>.  The words <code>check</code>, <code>install</code>, and
<code>installcheck</code>, passed as arguments to <code>make</code>, are called
<em>targets</em>.  <code>make</code> is a shorthand for <code>make all</code>,
<code>all</code> being the default target in the GNU Build System.
</p>
<p>Here is a list of the most useful targets that the GNU Coding Standards
specify.
</p>
<dl compact="compact">
<dt><code>make all</code></dt>
<dd><a name="index-all"></a>
<p>Build programs, libraries, documentation, etc. (same as <code>make</code>).
</p></dd>
<dt><code>make install</code></dt>
<dd><a name="index-install"></a>
<p>Install what needs to be installed, copying the files from the
package&rsquo;s tree to system-wide directories.
</p></dd>
<dt><code>make install-strip</code></dt>
<dd><a name="index-install_002dstrip"></a>
<p>Same as <code>make install</code>, then strip debugging symbols.  Some
users like to trade space for useful bug reports<small class="enddots">...</small>
</p></dd>
<dt><code>make uninstall</code></dt>
<dd><a name="index-uninstall"></a>
<p>The opposite of <code>make install</code>: erase the installed files.
(This needs to be run from the same build tree that was installed.)
</p></dd>
<dt><code>make clean</code></dt>
<dd><a name="index-clean"></a>
<p>Erase from the build tree the files built by <code>make all</code>.
</p></dd>
<dt><code>make distclean</code></dt>
<dd><a name="index-distclean"></a>
<p>Additionally erase anything <code>./configure</code> created.
</p></dd>
<dt><code>make check</code></dt>
<dd><a name="index-check"></a>
<p>Run the test suite, if any.
</p></dd>
<dt><code>make installcheck</code></dt>
<dd><a name="index-installcheck"></a>
<p>Check the installed programs or libraries, if supported.
</p></dd>
<dt><code>make dist</code></dt>
<dd><a name="index-dist"></a>
<p>Recreate <samp><var>package</var>-<var>version</var>.tar.gz</samp> from all the source
files.
</p></dd>
</dl>

<hr>
<a name="Standard-Directory-Variables"></a>
<div class="header">
<p>
Next: <a href="#Standard-Configuration-Variables" accesskey="n" rel="next">Standard Configuration Variables</a>, Previous: <a href="#Standard-Targets" accesskey="p" rel="prev">Standard Targets</a>, Up: <a href="#Use-Cases" accesskey="u" rel="up">Use Cases</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Standard-Directory-Variables-1"></a>
<h4 class="subsection">2.2.3 Standard Directory Variables</h4>
<a name="index-directory-variables"></a>

<p>The GNU Coding Standards also specify a hierarchy of variables to
denote installation directories.  Some of these are:
</p>
<table>
<thead><tr><th>Directory variable</th><th>Default value</th></tr></thead>
<tr><td><code>prefix</code></td><td><code>/usr/local</code></td></tr>
<tr><td>&nbsp;&nbsp;<code><span class="nolinebreak">exec_prefix</span></code><!-- /@w --></td><td><code>${prefix}</code></td></tr>
<tr><td>&nbsp;&nbsp;&nbsp;&nbsp;<code>bindir</code><!-- /@w --></td><td><code>${exec_prefix}/bin</code></td></tr>
<tr><td>&nbsp;&nbsp;&nbsp;&nbsp;<code>libdir</code><!-- /@w --></td><td><code>${exec_prefix}/lib</code></td></tr>
<tr><td>&nbsp;&nbsp;&nbsp;&nbsp;&hellip;<!-- /@w --></td></tr>
<tr><td>&nbsp;&nbsp;<code>includedir</code><!-- /@w --></td><td><code>${prefix}/include</code></td></tr>
<tr><td>&nbsp;&nbsp;<code>datarootdir</code><!-- /@w --></td><td><code>${prefix}/share</code></td></tr>
<tr><td>&nbsp;&nbsp;&nbsp;&nbsp;<code>datadir</code><!-- /@w --></td><td><code>${datarootdir}</code></td></tr>
<tr><td>&nbsp;&nbsp;&nbsp;&nbsp;<code>mandir</code><!-- /@w --></td><td><code>${datarootdir}/man</code></td></tr>
<tr><td>&nbsp;&nbsp;&nbsp;&nbsp;<code>infodir</code><!-- /@w --></td><td><code>${datarootdir}/info</code></td></tr>
<tr><td>&nbsp;&nbsp;&nbsp;&nbsp;<code>docdir</code><!-- /@w --></td><td><code>${datarootdir}/doc/${PACKAGE}</code></td></tr>
<tr><td>&nbsp;&nbsp;&hellip;<!-- /@w --></td></tr>
</table>


<p>Each of these directories has a role which is often obvious from its
name.  In a package, any installable file will be installed in one of
these directories.  For instance in <code>amhello-1.0</code>, the program
<samp>hello</samp> is to be installed in <var>bindir</var>, the directory for
binaries.  The default value for this directory is
<samp>/usr/local/bin</samp>, but the user can supply a different value when
calling <code>configure</code>.  Also the file <samp>README</samp> will be
installed into <var>docdir</var>, which defaults to
<samp>/usr/local/share/doc/amhello</samp>.
</p>
<a name="index-_002d_002dprefix"></a>

<p>As a user, if you wish to install a package on your own account, you
could proceed as follows:
</p>
<div class="example">
<pre class="example">~/amhello-1.0 % <kbd>./configure --prefix ~/usr</kbd>
&hellip;
~/amhello-1.0 % <kbd>make</kbd>
&hellip;
~/amhello-1.0 % <kbd>make install</kbd>
&hellip;
</pre></div>

<p>This would install <samp>~/usr/bin/hello</samp> and
<samp>~/usr/share/doc/amhello/README</samp>.
</p>
<p>The list of all such directory options is shown by
<code>./configure --help</code>.
</p>
<hr>
<a name="Standard-Configuration-Variables"></a>
<div class="header">
<p>
Next: <a href="#config_002esite" accesskey="n" rel="next">config.site</a>, Previous: <a href="#Standard-Directory-Variables" accesskey="p" rel="prev">Standard Directory Variables</a>, Up: <a href="#Use-Cases" accesskey="u" rel="up">Use Cases</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Standard-Configuration-Variables-1"></a>
<h4 class="subsection">2.2.4 Standard Configuration Variables</h4>
<a name="index-configuration-variables_002c-overriding"></a>

<p>The GNU Coding Standards also define a set of standard configuration
variables used during the build.  Here are some:
</p>
<dl compact="compact">
<dt><code>CC</code></dt>
<dd><p>C compiler command
</p></dd>
<dt><code>CFLAGS</code></dt>
<dd><p>C compiler flags
</p></dd>
<dt><code>CXX</code></dt>
<dd><p>C++ compiler command
</p></dd>
<dt><code>CXXFLAGS</code></dt>
<dd><p>C++ compiler flags
</p></dd>
<dt><code>LDFLAGS</code></dt>
<dd><p>linker flags
</p></dd>
<dt><code>CPPFLAGS</code></dt>
<dd><p>C/C++ preprocessor flags
</p></dd>
<dt>&hellip;</dt>
</dl>

<p><code>configure</code> usually does a good job at setting appropriate
values for these variables, but there are cases where you may want to
override them.  For instance you may have several versions of a
compiler installed and would like to use another one, you may have
header files installed outside the default search path of the
compiler, or even libraries out of the way of the linker.
</p>
<p>Here is how one would call <code>configure</code> to force it to use
<code>gcc-3</code> as C compiler, use header files from
<samp>~/usr/include</samp> when compiling, and libraries from
<samp>~/usr/lib</samp> when linking.
</p>
<div class="example">
<pre class="example">~/amhello-1.0 % <kbd>./configure --prefix ~/usr CC=gcc-3 \
CPPFLAGS=-I$HOME/usr/include LDFLAGS=-L$HOME/usr/lib</kbd>
</pre></div>

<p>Again, a full list of these variables appears in the output of
<code>./configure --help</code>.
</p>
<hr>
<a name="config_002esite"></a>
<div class="header">
<p>
Next: <a href="#VPATH-Builds" accesskey="n" rel="next">VPATH Builds</a>, Previous: <a href="#Standard-Configuration-Variables" accesskey="p" rel="prev">Standard Configuration Variables</a>, Up: <a href="#Use-Cases" accesskey="u" rel="up">Use Cases</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Overriding-Default-Configuration-Setting-with-config_002esite"></a>
<h4 class="subsection">2.2.5 Overriding Default Configuration Setting with <samp>config.site</samp></h4>
<a name="index-config_002esite-example"></a>

<p>When installing several packages using the same setup, it can be
convenient to create a file to capture common settings.
If a file named <samp><var>prefix</var>/share/config.site</samp> exists,
<code>configure</code> will source it at the beginning of its execution.
</p>
<p>Recall the command from the previous section:
</p>
<div class="example">
<pre class="example">~/amhello-1.0 % <kbd>./configure --prefix ~/usr CC=gcc-3 \
CPPFLAGS=-I$HOME/usr/include LDFLAGS=-L$HOME/usr/lib</kbd>
</pre></div>

<p>Assuming we are installing many package in <samp>~/usr</samp>, and will
always want to use these definitions of <code>CC</code>, <code>CPPFLAGS</code>, and
<code>LDFLAGS</code>, we can automate this by creating the following
<samp>~/usr/share/config.site</samp> file:
</p>
<div class="example">
<pre class="example">test -z &quot;$CC&quot; &amp;&amp; CC=gcc-3
test -z &quot;$CPPFLAGS&quot; &amp;&amp; CPPFLAGS=-I$HOME/usr/include
test -z &quot;$LDFLAGS&quot; &amp;&amp; LDFLAGS=-L$HOME/usr/lib
</pre></div>

<p>Now, any time a <samp>configure</samp> script is using the <samp>~/usr</samp>
prefix, it will execute the above <samp>config.site</samp> and define
these three variables.
</p>
<div class="example">
<pre class="example">~/amhello-1.0 % <kbd>./configure --prefix ~/usr</kbd>
configure: loading site script /home/adl/usr/share/config.site
&hellip;
</pre></div>

<p>See <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Site-Defaults">Setting Site Defaults</a> in <cite>The Autoconf
Manual</cite>, for more information about this feature.
</p>

<hr>
<a name="VPATH-Builds"></a>
<div class="header">
<p>
Next: <a href="#Two_002dPart-Install" accesskey="n" rel="next">Two-Part Install</a>, Previous: <a href="#config_002esite" accesskey="p" rel="prev">config.site</a>, Up: <a href="#Use-Cases" accesskey="u" rel="up">Use Cases</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Parallel-Build-Trees-_0028a_002ek_002ea_002e-VPATH-Builds_0029"></a>
<h4 class="subsection">2.2.6 Parallel Build Trees (a.k.a. VPATH Builds)</h4>
<a name="index-Parallel-build-trees"></a>
<a name="index-VPATH-builds"></a>
<a name="index-source-tree-and-build-tree"></a>
<a name="index-build-tree-and-source-tree"></a>
<a name="index-trees_002c-source-vs_002e-build"></a>

<p>The GNU Build System distinguishes two trees: the source tree, and
the build tree.
</p>
<p>The source tree is rooted in the directory containing
<samp>configure</samp>.  It contains all the sources files (those that are
distributed), and may be arranged using several subdirectories.
</p>
<p>The build tree is rooted in the directory in which <samp>configure</samp>
was run, and is populated with all object files, programs, libraries,
and other derived files built from the sources (and hence not
distributed).  The build tree usually has the same subdirectory layout
as the source tree; its subdirectories are created automatically by
the build system.
</p>
<p>If <samp>configure</samp> is executed in its own directory, the source and
build trees are combined: derived files are constructed in the same
directories as their sources.  This was the case in our first
installation example (see <a href="#Basic-Installation">Basic Installation</a>).
</p>
<p>A common request from users is that they want to confine all derived
files to a single directory, to keep their source directories
uncluttered.  Here is how we could run <samp>configure</samp> to build
everything in a subdirectory called <samp>build/</samp>.
</p>
<div class="example">
<pre class="example">~ % <kbd>tar zxf ~/amhello-1.0.tar.gz</kbd>
~ % <kbd>cd amhello-1.0</kbd>
~/amhello-1.0 % <kbd>mkdir build &amp;&amp; cd build</kbd>
~/amhello-1.0/build % <kbd>../configure</kbd>
&hellip;
~/amhello-1.0/build % <kbd>make</kbd>
&hellip;
</pre></div>

<p>These setups, where source and build trees are different, are often
called <em>parallel builds</em> or <em>VPATH builds</em>.  The expression
<em>parallel build</em> is misleading: the word <em>parallel</em> is a
reference to the way the build tree shadows the source tree, it is not
about some concurrency in the way build commands are run.  For this
reason we refer to such setups using the name <em>VPATH builds</em> in
the following.  <em>VPATH</em> is the name of the <code>make</code> feature
used by the <samp>Makefile</samp>s to allow these builds (see <a href="http://www.gnu.org/software/make/manual/make.html#General-Search"><code>VPATH</code> Search Path for All Prerequisites</a> in <cite>The
GNU Make Manual</cite>).
</p>
<a name="index-multiple-configurations_002c-example"></a>
<a name="index-debug-build_002c-example"></a>
<a name="index-optimized-build_002c-example"></a>

<p>VPATH builds have other interesting uses.  One is to build the same
sources with multiple configurations.  For instance:
</p>
<div class="example">
<pre class="example">~ % <kbd>tar zxf ~/amhello-1.0.tar.gz</kbd>
~ % <kbd>cd amhello-1.0</kbd>
~/amhello-1.0 % <kbd>mkdir debug optim &amp;&amp; cd debug</kbd>
~/amhello-1.0/debug % <kbd>../configure CFLAGS='-g -O0'</kbd>
&hellip;
~/amhello-1.0/debug % <kbd>make</kbd>
&hellip;
~/amhello-1.0/debug % cd ../optim
~/amhello-1.0/optim % <kbd>../configure CFLAGS='-O3 -fomit-frame-pointer'</kbd>
&hellip;
~/amhello-1.0/optim % <kbd>make</kbd>
&hellip;
</pre></div>

<p>With network file systems, a similar approach can be used to build the
same sources on different machines.  For instance, suppose that the
sources are installed on a directory shared by two hosts: <code>HOST1</code>
and <code>HOST2</code>, which may be different platforms.
</p>
<div class="example">
<pre class="example">~ % <kbd>cd /nfs/src</kbd>
/nfs/src % <kbd>tar zxf ~/amhello-1.0.tar.gz</kbd>
</pre></div>

<p>On the first host, you could create a local build directory:
</p><div class="example">
<pre class="example">[HOST1] ~ % <kbd>mkdir /tmp/amh &amp;&amp; cd /tmp/amh</kbd>
[HOST1] /tmp/amh % <kbd>/nfs/src/amhello-1.0/configure</kbd>
...
[HOST1] /tmp/amh % <kbd>make &amp;&amp; sudo make install</kbd>
...
</pre></div>

<p>(Here we assume that the installer has configured <code>sudo</code> so it
can execute <code>make install</code> with root privileges; it is more convenient
than using <code>su</code> like in <a href="#Basic-Installation">Basic Installation</a>).
</p>
<p>On the second host, you would do exactly the same, possibly at
the same time:
</p><div class="example">
<pre class="example">[HOST2] ~ % <kbd>mkdir /tmp/amh &amp;&amp; cd /tmp/amh</kbd>
[HOST2] /tmp/amh % <kbd>/nfs/src/amhello-1.0/configure</kbd>
...
[HOST2] /tmp/amh % <kbd>make &amp;&amp; sudo make install</kbd>
...
</pre></div>

<a name="index-read_002donly-source-tree"></a>
<a name="index-source-tree_002c-read_002donly"></a>

<p>In this scenario, nothing forbids the <samp>/nfs/src/amhello-1.0</samp>
directory from being read-only.  In fact VPATH builds are also a means
of building packages from a read-only medium such as a CD-ROM.  (The
FSF used to sell CD-ROM with unpacked source code, before the GNU
project grew so big.)
</p>
<hr>
<a name="Two_002dPart-Install"></a>
<div class="header">
<p>
Next: <a href="#Cross_002dCompilation" accesskey="n" rel="next">Cross-Compilation</a>, Previous: <a href="#VPATH-Builds" accesskey="p" rel="prev">VPATH Builds</a>, Up: <a href="#Use-Cases" accesskey="u" rel="up">Use Cases</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Two_002dPart-Installation"></a>
<h4 class="subsection">2.2.7 Two-Part Installation</h4>

<p>In our last example (see <a href="#VPATH-Builds">VPATH Builds</a>), a source tree was shared
by two hosts, but compilation and installation were done separately on
each host.
</p>
<p>The GNU Build System also supports networked setups where part of the
installed files should be shared amongst multiple hosts.  It does so
by distinguishing architecture-dependent files from
architecture-independent files, and providing two <samp>Makefile</samp>
targets to install each of these classes of files.
</p>
<a name="index-install_002dexec"></a>
<a name="index-install_002ddata"></a>

<p>These targets are <code>install-exec</code> for architecture-dependent files
and <code>install-data</code> for architecture-independent files.
The command we used up to now, <code>make install</code>, can be thought of
as a shorthand for <code>make install-exec install-data</code>.
</p>
<p>From the GNU Build System point of view, the distinction between
architecture-dependent files and architecture-independent files is
based exclusively on the directory variable used to specify their
installation destination.  In the list of directory variables we
provided earlier (see <a href="#Standard-Directory-Variables">Standard Directory Variables</a>), all the
variables based on <var>exec-prefix</var> designate architecture-dependent
directories whose files will be installed by <code>make install-exec</code>.
The others designate architecture-independent directories and will
serve files installed by <code>make install-data</code>.  See <a href="#The-Two-Parts-of-Install">The Two Parts of Install</a>, for more details.
</p>
<p>Here is how we could revisit our two-host installation example,
assuming that (1) we want to install the package directly in
<samp>/usr</samp>, and (2) the directory <samp>/usr/share</samp> is shared by the
two hosts.
</p>
<p>On the first host we would run
</p><div class="example">
<pre class="example">[HOST1] ~ % <kbd>mkdir /tmp/amh &amp;&amp; cd /tmp/amh</kbd>
[HOST1] /tmp/amh % <kbd>/nfs/src/amhello-1.0/configure --prefix /usr</kbd>
...
[HOST1] /tmp/amh % <kbd>make &amp;&amp; sudo make install</kbd>
...
</pre></div>

<p>On the second host, however, we need only install the
architecture-specific files.
</p><div class="example">
<pre class="example">[HOST2] ~ % <kbd>mkdir /tmp/amh &amp;&amp; cd /tmp/amh</kbd>
[HOST2] /tmp/amh % <kbd>/nfs/src/amhello-1.0/configure --prefix /usr</kbd>
...
[HOST2] /tmp/amh % <kbd>make &amp;&amp; sudo make install-exec</kbd>
...
</pre></div>

<p>In packages that have installation checks, it would make sense to run
<code>make installcheck</code> (see <a href="#Basic-Installation">Basic Installation</a>) to verify that
the package works correctly despite the apparent partial installation.
</p>
<hr>
<a name="Cross_002dCompilation"></a>
<div class="header">
<p>
Next: <a href="#Renaming" accesskey="n" rel="next">Renaming</a>, Previous: <a href="#Two_002dPart-Install" accesskey="p" rel="prev">Two-Part Install</a>, Up: <a href="#Use-Cases" accesskey="u" rel="up">Use Cases</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Cross_002dCompilation-1"></a>
<h4 class="subsection">2.2.8 Cross-Compilation</h4>
<a name="index-cross_002dcompilation"></a>

<p>To <em>cross-compile</em> is to build on one platform a binary that will
run on another platform.  When speaking of cross-compilation, it is
important to distinguish between the <em>build platform</em> on which
the compilation is performed, and the <em>host platform</em> on which the
resulting executable is expected to run.  The following
<code>configure</code> options are used to specify each of them:
</p>
<dl compact="compact">
<dt><samp>--build=<var>build</var></samp></dt>
<dd><a name="index-_002d_002dbuild_003dbuild"></a>
<p>The system on which the package is built.
</p></dd>
<dt><samp>--host=<var>host</var></samp></dt>
<dd><a name="index-_002d_002dhost_003dhost"></a>
<p>The system where built programs and libraries will run.
</p></dd>
</dl>

<p>When the <samp>--host</samp> is used, <code>configure</code> will search for
the cross-compiling suite for this platform.  Cross-compilation tools
commonly have their target architecture as prefix of their name.  For
instance my cross-compiler for MinGW32 has its binaries called
<code>i586-mingw32msvc-gcc</code>, <code>i586-mingw32msvc-ld</code>,
<code>i586-mingw32msvc-as</code>, etc.
</p>
<a name="index-MinGW-cross_002dcompilation-example"></a>
<a name="index-cross_002dcompilation-example"></a>

<p>Here is how we could build <code>amhello-1.0</code> for
<code>i586-mingw32msvc</code> on a GNU/Linux PC.
</p>
<div class="smallexample">
<pre class="smallexample">~/amhello-1.0 % <kbd>./configure --build i686-pc-linux-gnu --host i586-mingw32msvc</kbd>
checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for gawk... gawk
checking whether make sets $(MAKE)... yes
checking for i586-mingw32msvc-strip... i586-mingw32msvc-strip
checking for i586-mingw32msvc-gcc... i586-mingw32msvc-gcc
checking for C compiler default output file name... a.exe
checking whether the C compiler works... yes
checking whether we are cross compiling... yes
checking for suffix of executables... .exe
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether i586-mingw32msvc-gcc accepts -g... yes
checking for i586-mingw32msvc-gcc option to accept ANSI C...
&hellip;
~/amhello-1.0 % <kbd>make</kbd>
&hellip;
~/amhello-1.0 % <kbd>cd src; file hello.exe</kbd>
hello.exe: MS Windows PE 32-bit Intel 80386 console executable not relocatable
</pre></div>

<p>The <samp>--host</samp> and <samp>--build</samp> options are usually all we
need for cross-compiling.  The only exception is if the package being
built is itself a cross-compiler: we need a third option to specify
its target architecture.
</p>
<dl compact="compact">
<dt><samp>--target=<var>target</var></samp></dt>
<dd><a name="index-_002d_002dtarget_003dtarget"></a>
<p>When building compiler tools: the system for which the tools will
create output.
</p></dd>
</dl>

<p>For instance when installing GCC, the GNU Compiler Collection, we can
use <samp>--target=<var>target</var></samp> to specify that we want to build
GCC as a cross-compiler for <var>target</var>.  Mixing <samp>--build</samp> and
<samp>--target</samp>, we can actually cross-compile a cross-compiler;
such a three-way cross-compilation is known as a <em>Canadian cross</em>.
</p>
<p>See <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Specifying-Names">Specifying the System Type</a> in <cite>The
Autoconf Manual</cite>, for more information about these <code>configure</code>
options.
</p>
<hr>
<a name="Renaming"></a>
<div class="header">
<p>
Next: <a href="#DESTDIR" accesskey="n" rel="next">DESTDIR</a>, Previous: <a href="#Cross_002dCompilation" accesskey="p" rel="prev">Cross-Compilation</a>, Up: <a href="#Use-Cases" accesskey="u" rel="up">Use Cases</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Renaming-Programs-at-Install-Time"></a>
<h4 class="subsection">2.2.9 Renaming Programs at Install Time</h4>
<a name="index-Renaming-programs"></a>
<a name="index-Transforming-program-names"></a>
<a name="index-Programs_002c-renaming-during-installation"></a>

<p>The GNU Build System provides means to automatically rename
executables and manpages before they are installed (see <a href="#Man-Pages">Man Pages</a>).
This is especially convenient
when installing a GNU package on a system that already has a
proprietary implementation you do not want to overwrite.  For instance,
you may want to install GNU <code>tar</code> as <code>gtar</code> so you can
distinguish it from your vendor&rsquo;s <code>tar</code>.
</p>
<p>This can be done using one of these three <code>configure</code> options.
</p>
<dl compact="compact">
<dt><samp>--program-prefix=<var>prefix</var></samp></dt>
<dd><a name="index-_002d_002dprogram_002dprefix_003dprefix"></a>
<p>Prepend <var>prefix</var> to installed program names.
</p></dd>
<dt><samp>--program-suffix=<var>suffix</var></samp></dt>
<dd><a name="index-_002d_002dprogram_002dsuffix_003dsuffix"></a>
<p>Append <var>suffix</var> to installed program names.
</p></dd>
<dt><samp>--program-transform-name=<var>program</var></samp></dt>
<dd><a name="index-_002d_002dprogram_002dtransform_002dname_003dprogram"></a>
<p>Run <code>sed <var>program</var></code> on installed program names.
</p></dd>
</dl>

<p>The following commands would install <samp>hello</samp>
as <samp>/usr/local/bin/test-hello</samp>, for instance.
</p>
<div class="example">
<pre class="example">~/amhello-1.0 % <kbd>./configure --program-prefix test-</kbd>
&hellip;
~/amhello-1.0 % <kbd>make</kbd>
&hellip;
~/amhello-1.0 % <kbd>sudo make install</kbd>
&hellip;
</pre></div>

<hr>
<a name="DESTDIR"></a>
<div class="header">
<p>
Next: <a href="#Preparing-Distributions" accesskey="n" rel="next">Preparing Distributions</a>, Previous: <a href="#Renaming" accesskey="p" rel="prev">Renaming</a>, Up: <a href="#Use-Cases" accesskey="u" rel="up">Use Cases</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Building-Binary-Packages-Using-DESTDIR"></a>
<h4 class="subsection">2.2.10 Building Binary Packages Using DESTDIR</h4>
<a name="index-DESTDIR"></a>

<p>The GNU Build System&rsquo;s <code>make install</code> and <code>make uninstall</code>
interface does not exactly fit the needs of a system administrator
who has to deploy and upgrade packages on lots of hosts.  In other
words, the GNU Build System does not replace a package manager.
</p>
<p>Such package managers usually need to know which files have been
installed by a package, so a mere <code>make install</code> is
inappropriate.
</p>
<a name="index-Staged-installation"></a>

<p>The <code>DESTDIR</code> variable can be used to perform a staged
installation.  The package should be configured as if it was going to
be installed in its final location (e.g., <code>--prefix /usr</code>), but
when running <code>make install</code>, the <code>DESTDIR</code> should be set to
the absolute name of a directory into which the installation will be
diverted.  From this directory it is easy to review which files are
being installed where, and finally copy them to their final location
by some means.
</p>
<a name="index-Binary-package"></a>

<p>For instance here is how we could create a binary package containing a
snapshot of all the files to be installed.
</p>
<div class="example">
<pre class="example">~/amhello-1.0 % <kbd>./configure --prefix /usr</kbd>
&hellip;
~/amhello-1.0 % <kbd>make</kbd>
&hellip;
~/amhello-1.0 % <kbd>make DESTDIR=$HOME/inst install</kbd>
&hellip;
~/amhello-1.0 % <kbd>cd ~/inst</kbd>
~/inst % <kbd>find . -type f -print &gt; ../files.lst</kbd>
~/inst % <kbd>tar zcvf ~/amhello-1.0-i686.tar.gz `cat ../files.lst`</kbd>
./usr/bin/hello
./usr/share/doc/amhello/README
</pre></div>

<p>After this example, <code>amhello-1.0-i686.tar.gz</code> is ready to be
uncompressed in <samp>/</samp> on many hosts.  (Using <code>`cat ../files.lst`</code>
instead of &lsquo;<samp>.</samp>&rsquo; as argument for <code>tar</code> avoids entries for
each subdirectory in the archive: we would not like <code>tar</code> to
restore the modification time of <samp>/</samp>, <samp>/usr/</samp>, etc.)
</p>
<p>Note that when building packages for several architectures, it might
be convenient to use <code>make install-data</code> and <code>make
install-exec</code> (see <a href="#Two_002dPart-Install">Two-Part Install</a>) to gather
architecture-independent files in a single package.
</p>
<p>See <a href="#Install">Install</a>, for more information.
</p>

<hr>
<a name="Preparing-Distributions"></a>
<div class="header">
<p>
Next: <a href="#Dependency-Tracking" accesskey="n" rel="next">Dependency Tracking</a>, Previous: <a href="#DESTDIR" accesskey="p" rel="prev">DESTDIR</a>, Up: <a href="#Use-Cases" accesskey="u" rel="up">Use Cases</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Preparing-Distributions-1"></a>
<h4 class="subsection">2.2.11 Preparing Distributions</h4>
<a name="index-Preparing-distributions"></a>
<a name="index-Packages_002c-preparation"></a>
<a name="index-Distributions_002c-preparation"></a>

<p>We have already mentioned <code>make dist</code>.  This target collects all
your source files and the necessary parts of the build system to
create a tarball named <samp><var>package</var>-<var>version</var>.tar.gz</samp>.
</p>
<a name="index-distcheck-better-than-dist"></a>

<p>Another, more useful command is <code>make distcheck</code>.  The
<code>distcheck</code> target constructs
<samp><var>package</var>-<var>version</var>.tar.gz</samp> just as well as <code>dist</code>,
but it additionally ensures most of the use cases presented so far
work:
</p>
<ul>
<li> It attempts a full compilation of the package (see <a href="#Basic-Installation">Basic Installation</a>), unpacking the newly constructed tarball, running
<code>make</code>, <code>make check</code>, <code>make install</code>, as well as
<code>make installcheck</code>, and even <code>make dist</code>,
</li><li> it tests VPATH builds with read-only source tree (see <a href="#VPATH-Builds">VPATH Builds</a>),
</li><li> it makes sure <code>make clean</code>, <code>make distclean</code>, and <code>make
uninstall</code> do not omit any file (see <a href="#Standard-Targets">Standard Targets</a>),
</li><li> and it checks that <code>DESTDIR</code> installations work (see <a href="#DESTDIR">DESTDIR</a>).
</li></ul>

<p>All of these actions are performed in a temporary directory, so that no
root privileges are required.  Please note that the exact location and the
exact structure of such a subdirectory (where the extracted sources are
placed, how the temporary build and install directories are named and how
deeply they are nested, etc.) is to be considered an implementation detail,
which can change at any time; so do not rely on it.
</p>
<p>Releasing a package that fails <code>make distcheck</code> means that one of
the scenarios we presented will not work and some users will be
disappointed.  Therefore it is a good practice to release a package
only after a successful <code>make distcheck</code>.  This of course does
not imply that the package will be flawless, but at least it will
prevent some of the embarrassing errors you may find in packages
released by people who have never heard about <code>distcheck</code> (like
<code>DESTDIR</code> not working because of a typo, or a distributed file
being erased by <code>make clean</code>, or even <code>VPATH</code> builds not
working).
</p>
<p>See <a href="#Creating-amhello">Creating amhello</a>, to recreate <samp>amhello-1.0.tar.gz</samp> using
<code>make distcheck</code>.  See <a href="#Checking-the-Distribution">Checking the Distribution</a>, for more
information about <code>distcheck</code>.
</p>
<hr>
<a name="Dependency-Tracking"></a>
<div class="header">
<p>
Next: <a href="#Nested-Packages" accesskey="n" rel="next">Nested Packages</a>, Previous: <a href="#Preparing-Distributions" accesskey="p" rel="prev">Preparing Distributions</a>, Up: <a href="#Use-Cases" accesskey="u" rel="up">Use Cases</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Automatic-Dependency-Tracking"></a>
<h4 class="subsection">2.2.12 Automatic Dependency Tracking</h4>
<a name="index-Dependency-tracking"></a>

<p>Dependency tracking is performed as a side-effect of compilation.
Each time the build system compiles a source file, it computes its
list of dependencies (in C these are the header files included by the
source being compiled).  Later, any time <code>make</code> is run and a
dependency appears to have changed, the dependent files will be
rebuilt.
</p>
<p>Automake generates code for automatic dependency tracking by default,
unless the developer chooses to override it; for more information,
see <a href="#Dependencies">Dependencies</a>.
</p>
<p>When <code>configure</code> is executed, you can see it probing each
compiler for the dependency mechanism it supports (several mechanisms
can be used):
</p>
<div class="example">
<pre class="example">~/amhello-1.0 % <kbd>./configure --prefix /usr</kbd>
&hellip;
checking dependency style of gcc... gcc3
&hellip;
</pre></div>

<p>Because dependencies are only computed as a side-effect of the
compilation, no dependency information exists the first time a package
is built.  This is OK because all the files need to be built anyway:
<code>make</code> does not have to decide which files need to be rebuilt.
In fact, dependency tracking is completely useless for one-time builds
and there is a <code>configure</code> option to disable this:
</p>
<dl compact="compact">
<dt><samp>--disable-dependency-tracking</samp></dt>
<dd><a name="index-_002d_002ddisable_002ddependency_002dtracking"></a>
<p>Speed up one-time builds.
</p></dd>
</dl>

<p>Some compilers do not offer any practical way to derive the list of
dependencies as a side-effect of the compilation, requiring a separate
run (maybe of another tool) to compute these dependencies.  The
performance penalty implied by these methods is important enough to
disable them by default.  The option <samp>--enable-dependency-tracking</samp>
must be passed to <code>configure</code> to activate them.
</p>
<dl compact="compact">
<dt><samp>--enable-dependency-tracking</samp></dt>
<dd><a name="index-_002d_002denable_002ddependency_002dtracking"></a>
<p>Do not reject slow dependency extractors.
</p></dd>
</dl>

<p>See <a href="http://www.gnu.org/software/automake/history/automake-history.html#Dependency-Tracking-Evolution">Dependency Tracking Evolution</a> in <cite>Brief History of Automake</cite>, for some discussion about
the different dependency tracking schemes used by Automake over the years.
</p>
<hr>
<a name="Nested-Packages"></a>
<div class="header">
<p>
Previous: <a href="#Dependency-Tracking" accesskey="p" rel="prev">Dependency Tracking</a>, Up: <a href="#Use-Cases" accesskey="u" rel="up">Use Cases</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Nested-Packages-1"></a>
<h4 class="subsection">2.2.13 Nested Packages</h4>
<a name="index-Nested-packages"></a>
<a name="index-Packages_002c-nested"></a>
<a name="index-Subpackages"></a>

<p>Although nesting packages isn&rsquo;t something we would recommend to
someone who is discovering the Autotools, it is a nice feature worthy
of mention in this small advertising tour.
</p>
<p>Autoconfiscated packages (that means packages whose build system have
been created by Autoconf and friends) can be nested to arbitrary
depth.
</p>
<p>A typical setup is that package A will distribute one of the libraries
it needs in a subdirectory.  This library B is a complete package with
its own GNU Build System.  The <code>configure</code> script of A will
run the <code>configure</code> script of B as part of its execution,
building and installing A will also build and install B.  Generating a
distribution for A will also include B.
</p>
<p>It is possible to gather several packages like this.  GCC is a heavy
user of this feature.  This gives installers a single package to
configure, build and install, while it allows developers to work on
subpackages independently.
</p>
<p>When configuring nested packages, the <code>configure</code> options
given to the top-level <code>configure</code> are passed recursively to
nested <code>configure</code>s.  A package that does not understand an
option will ignore it, assuming it is meaningful to some other
package.
</p>
<a name="index-_002d_002dhelp_003drecursive"></a>

<p>The command <code>configure --help=recursive</code> can be used to display
the options supported by all the included packages.
</p>
<p>See <a href="#Subpackages">Subpackages</a>, for an example setup.
</p>
<hr>
<a name="Why-Autotools"></a>
<div class="header">
<p>
Next: <a href="#Hello-World" accesskey="n" rel="next">Hello World</a>, Previous: <a href="#Use-Cases" accesskey="p" rel="prev">Use Cases</a>, Up: <a href="#Autotools-Introduction" accesskey="u" rel="up">Autotools Introduction</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="How-Autotools-Help"></a>
<h3 class="section">2.3 How Autotools Help</h3>
<a name="index-Autotools_002c-purpose"></a>

<p>There are several reasons why you may not want to implement the GNU
Build System yourself (read: write a <samp>configure</samp> script and
<samp>Makefile</samp>s yourself).
</p>
<ul>
<li> As we have seen, the GNU Build System has a lot of
features (see <a href="#Use-Cases">Use Cases</a>).
Some users may expect features you have not implemented because
you did not need them.
</li><li> Implementing these features portably is difficult and exhausting.
Think of writing portable shell scripts, and portable
<samp>Makefile</samp>s, for systems you may not have handy.  See <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Portable-Shell">Portable Shell Programming</a> in <cite>The Autoconf Manual</cite>, to
convince yourself.
</li><li> You will have to upgrade your setup to follow changes to the GNU
Coding Standards.
</li></ul>

<p>The GNU Autotools take all this burden off your back and provide:
</p>
<ul>
<li> Tools to create a portable, complete, and self-contained GNU Build
System, from simple instructions.
<em>Self-contained</em> meaning the resulting build system does not
require the GNU Autotools.
</li><li> A central place where fixes and improvements are made:
a bug-fix for a portability issue will benefit every package.
</li></ul>

<p>Yet there also exist reasons why you may want NOT to use the
Autotools<small class="enddots">...</small> For instance you may be already using (or used to)
another incompatible build system.  Autotools will only be useful if
you do accept the concepts of the GNU Build System.  People who have their
own idea of how a build system should work will feel frustrated by the
Autotools.
</p>
<hr>
<a name="Hello-World"></a>
<div class="header">
<p>
Previous: <a href="#Why-Autotools" accesskey="p" rel="prev">Why Autotools</a>, Up: <a href="#Autotools-Introduction" accesskey="u" rel="up">Autotools Introduction</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="A-Small-Hello-World"></a>
<h3 class="section">2.4 A Small Hello World</h3>
<a name="index-Example-Hello-World"></a>
<a name="index-Hello-World-example"></a>
<a name="index-amhello_002d1_002e0_002etar_002egz_002c-creation"></a>

<p>In this section we recreate the <samp>amhello-1.0</samp> package from
scratch.  The first subsection shows how to call the Autotools to
instantiate the GNU Build System, while the second explains the
meaning of the <samp>configure.ac</samp> and <samp>Makefile.am</samp> files read
by the Autotools.
</p>
<a name="amhello-Explained"></a><table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Creating-amhello" accesskey="1">Creating amhello</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Create <samp>amhello-1.0.tar.gz</samp> from scratch
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#amhello_0027s-configure_002eac-Setup-Explained" accesskey="2">amhello's configure.ac Setup Explained</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#amhello_0027s-Makefile_002eam-Setup-Explained" accesskey="3">amhello's Makefile.am Setup Explained</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Creating-amhello"></a>
<div class="header">
<p>
Next: <a href="#amhello_0027s-configure_002eac-Setup-Explained" accesskey="n" rel="next">amhello's configure.ac Setup Explained</a>, Up: <a href="#Hello-World" accesskey="u" rel="up">Hello World</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Creating-amhello_002d1_002e0_002etar_002egz"></a>
<h4 class="subsection">2.4.1 Creating <samp>amhello-1.0.tar.gz</samp></h4>

<p>Here is how we can recreate <samp>amhello-1.0.tar.gz</samp> from scratch.
The package is simple enough so that we will only need to write 5
files.  (You may copy them from the final <samp>amhello-1.0.tar.gz</samp>
that is distributed with Automake if you do not want to write them.)
</p>
<p>Create the following files in an empty directory.
</p>
<ul>
<li> <samp>src/main.c</samp> is the source file for the <samp>hello</samp> program.  We
store it in the <samp>src/</samp> subdirectory, because later, when the package
evolves, it will ease the addition of a <samp>man/</samp> directory for man
pages, a <samp>data/</samp> directory for data files, etc.
<div class="example">
<pre class="example">~/amhello % <kbd>cat src/main.c</kbd>
#include &lt;config.h&gt;
#include &lt;stdio.h&gt;

int
main (void)
{
  puts (&quot;Hello World!&quot;);
  puts (&quot;This is &quot; PACKAGE_STRING &quot;.&quot;);
  return 0;
}
</pre></div>

</li><li> <samp>README</samp> contains some very limited documentation for our little
package.
<div class="example">
<pre class="example">~/amhello % <kbd>cat README</kbd>
This is a demonstration package for GNU Automake.
Type 'info Automake' to read the Automake manual.
</pre></div>

</li><li> <samp>Makefile.am</samp> and <samp>src/Makefile.am</samp> contain Automake
instructions for these two directories.

<div class="example">
<pre class="example">~/amhello % <kbd>cat src/Makefile.am</kbd>
bin_PROGRAMS = hello
hello_SOURCES = main.c
~/amhello % <kbd>cat Makefile.am</kbd>
SUBDIRS = src
dist_doc_DATA = README
</pre></div>

</li><li> Finally, <samp>configure.ac</samp> contains Autoconf instructions to
create the <code>configure</code> script.

<div class="example">
<pre class="example">~/amhello % <kbd>cat configure.ac</kbd>
AC_INIT([amhello], [1.0], [bug-automake@gnu.org])
AM_INIT_AUTOMAKE([-Wall -Werror foreign])
AC_PROG_CC
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_FILES([
 Makefile
 src/Makefile
])
AC_OUTPUT
</pre></div>
</li></ul>

<a name="index-autoreconf_002c-example"></a>

<p>Once you have these five files, it is time to run the Autotools to
instantiate the build system.  Do this using the <code>autoreconf</code>
command as follows:
</p>
<div class="example">
<pre class="example">~/amhello % <kbd>autoreconf --install</kbd>
configure.ac: installing './install-sh'
configure.ac: installing './missing'
configure.ac: installing './compile'
src/Makefile.am: installing './depcomp'
</pre></div>

<p>At this point the build system is complete.
</p>
<p>In addition to the three scripts mentioned in its output, you can see
that <code>autoreconf</code> created four other files: <samp>configure</samp>,
<samp>config.h.in</samp>, <samp>Makefile.in</samp>, and <samp>src/Makefile.in</samp>.
The latter three files are templates that will be adapted to the
system by <code>configure</code> under the names <samp>config.h</samp>,
<samp>Makefile</samp>, and <samp>src/Makefile</samp>.  Let&rsquo;s do this:
</p>
<div class="example">
<pre class="example">~/amhello % <kbd>./configure</kbd>
checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for gawk... no
checking for mawk... mawk
checking whether make sets $(MAKE)... yes
checking for gcc... gcc
checking for C compiler default output file name... a.out
checking whether the C compiler works... yes
checking whether we are cross compiling... no
checking for suffix of executables...
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking for style of include used by make... GNU
checking dependency style of gcc... gcc3
configure: creating ./config.status
config.status: creating Makefile
config.status: creating src/Makefile
config.status: creating config.h
config.status: executing depfiles commands
</pre></div>

<a name="index-distcheck"></a>
<a name="index-distcheck-example"></a>

<p>You can see <samp>Makefile</samp>, <samp>src/Makefile</samp>, and <samp>config.h</samp>
being created at the end after <code>configure</code> has probed the
system.  It is now possible to run all the targets we wish
(see <a href="#Standard-Targets">Standard Targets</a>).  For instance:
</p>
<div class="example">
<pre class="example">~/amhello % <kbd>make</kbd>
&hellip;
~/amhello % <kbd>src/hello</kbd>
Hello World!
This is amhello 1.0.
~/amhello % <kbd>make distcheck</kbd>
&hellip;
=============================================
amhello-1.0 archives ready for distribution:
amhello-1.0.tar.gz
=============================================
</pre></div>

<p>Note that running <code>autoreconf</code> is only needed initially when
the GNU Build System does not exist.  When you later change some
instructions in a <samp>Makefile.am</samp> or <samp>configure.ac</samp>, the
relevant part of the build system will be regenerated automatically
when you execute <code>make</code>.
</p>
<p><code>autoreconf</code> is a script that calls <code>autoconf</code>,
<code>automake</code>, and a bunch of other commands in the right order.
If you are beginning with these tools, it is not important to figure
out in which order all of these tools should be invoked and why.  However,
because Autoconf and Automake have separate manuals, the important
point to understand is that <code>autoconf</code> is in charge of
creating <samp>configure</samp> from <samp>configure.ac</samp>, while
<code>automake</code> is in charge of creating <samp>Makefile.in</samp>s from
<samp>Makefile.am</samp>s and <samp>configure.ac</samp>.  This should at least
direct you to the right manual when seeking answers.
</p>

<hr>
<a name="amhello_0027s-configure_002eac-Setup-Explained"></a>
<div class="header">
<p>
Next: <a href="#amhello_0027s-Makefile_002eam-Setup-Explained" accesskey="n" rel="next">amhello's Makefile.am Setup Explained</a>, Previous: <a href="#Creating-amhello" accesskey="p" rel="prev">Creating amhello</a>, Up: <a href="#Hello-World" accesskey="u" rel="up">Hello World</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="amhello_0027s-configure_002eac-Setup-Explained-1"></a>
<h4 class="subsection">2.4.2 <code>amhello</code>&rsquo;s <samp>configure.ac</samp> Setup Explained</h4>

<a name="index-configure_002eac_002c-Hello-World"></a>

<p>Let us begin with the contents of <samp>configure.ac</samp>.
</p>
<div class="example">
<pre class="example">AC_INIT([amhello], [1.0], [bug-automake@gnu.org])
AM_INIT_AUTOMAKE([-Wall -Werror foreign])
AC_PROG_CC
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_FILES([
 Makefile
 src/Makefile
])
AC_OUTPUT
</pre></div>

<p>This file is read by both <code>autoconf</code> (to create
<samp>configure</samp>) and <code>automake</code> (to create the various
<samp>Makefile.in</samp>s).  It contains a series of M4 macros that will be
expanded as shell code to finally form the <samp>configure</samp> script.
We will not elaborate on the syntax of this file, because the Autoconf
manual has a whole section about it (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Writing-Autoconf-Input">Writing <samp>configure.ac</samp></a> in <cite>The Autoconf Manual</cite>).
</p>
<p>The macros prefixed with <code>AC_</code> are Autoconf macros, documented
in the Autoconf manual (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Autoconf-Macro-Index">Autoconf Macro
Index</a> in <cite>The Autoconf Manual</cite>).  The macros that start with
<code>AM_</code> are Automake macros, documented later in this manual
(see <a href="#Macro-Index">Macro Index</a>).
</p>
<p>The first two lines of <samp>configure.ac</samp> initialize Autoconf and
Automake.  <code>AC_INIT</code> takes in as parameters the name of the package,
its version number, and a contact address for bug-reports about the
package (this address is output at the end of <code>./configure
--help</code>, for instance).  When adapting this setup to your own package,
by all means please do not blindly copy Automake&rsquo;s address: use the
mailing list of your package, or your own mail address.
</p>
<a name="index-_002dWall"></a>
<a name="index-_002dWerror"></a>
<a name="index-foreign"></a>

<p>The argument to <code>AM_INIT_AUTOMAKE</code> is a list of options for
<code>automake</code> (see <a href="#Options">Options</a>).  <samp>-Wall</samp> and
<samp>-Werror</samp> ask <code>automake</code> to turn on all warnings and
report them as errors.  We are speaking of <strong>Automake</strong> warnings
here, such as dubious instructions in <samp>Makefile.am</samp>.  This has
absolutely nothing to do with how the compiler will be called, even
though it may support options with similar names.  Using <samp>-Wall
-Werror</samp> is a safe setting when starting to work on a package: you do
not want to miss any issues.  Later you may decide to relax things a
bit.  The <samp>foreign</samp> option tells Automake that this package
will not follow the GNU Standards.  GNU packages should always
distribute additional files such as <samp>ChangeLog</samp>, <samp>AUTHORS</samp>,
etc.  We do not want <code>automake</code> to complain about these
missing files in our small example.
</p>
<p>The <code>AC_PROG_CC</code> line causes the <code>configure</code> script to
search for a C compiler and define the variable <code>CC</code> with its
name.  The <samp>src/Makefile.in</samp> file generated by Automake uses the
variable <code>CC</code> to build <samp>hello</samp>, so when <code>configure</code>
creates <samp>src/Makefile</samp> from <samp>src/Makefile.in</samp>, it will define
<code>CC</code> with the value it has found.  If Automake is asked to create
a <samp>Makefile.in</samp> that uses <code>CC</code> but <samp>configure.ac</samp> does
not define it, it will suggest you add a call to <code>AC_PROG_CC</code>.
</p>
<p>The <code>AC_CONFIG_HEADERS([config.h])</code> invocation causes the
<code>configure</code> script to create a <samp>config.h</samp> file gathering
&lsquo;<samp>#define</samp>&rsquo;s defined by other macros in <samp>configure.ac</samp>.  In our
case, the <code>AC_INIT</code> macro already defined a few of them.  Here
is an excerpt of <samp>config.h</samp> after <code>configure</code> has run:
</p>
<div class="smallexample">
<pre class="smallexample">&hellip;
/* Define to the address where bug reports for this package should be sent. */
#define PACKAGE_BUGREPORT &quot;bug-automake@gnu.org&quot;

/* Define to the full name and version of this package. */
#define PACKAGE_STRING &quot;amhello 1.0&quot;
&hellip;
</pre></div>

<p>As you probably noticed, <samp>src/main.c</samp> includes <samp>config.h</samp> so
it can use <code>PACKAGE_STRING</code>.  In a real-world project,
<samp>config.h</samp> can grow really big, with one &lsquo;<samp>#define</samp>&rsquo; per
feature probed on the system.
</p>
<p>The <code>AC_CONFIG_FILES</code> macro declares the list of files that
<code>configure</code> should create from their <samp>*.in</samp> templates.
Automake also scans this list to find the <samp>Makefile.am</samp> files it must
process.  (This is important to remember: when adding a new directory
to your project, you should add its <samp>Makefile</samp> to this list,
otherwise Automake will never process the new <samp>Makefile.am</samp> you
wrote in that directory.)
</p>
<p>Finally, the <code>AC_OUTPUT</code> line is a closing command that actually
produces the part of the script in charge of creating the files
registered with <code>AC_CONFIG_HEADERS</code> and <code>AC_CONFIG_FILES</code>.
</p>
<a name="index-autoscan"></a>

<p>When starting a new project, we suggest you start with such a simple
<samp>configure.ac</samp>, and gradually add the other tests it requires.
The command <code>autoscan</code> can also suggest a few of the tests
your package may need (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#autoscan-Invocation">Using
<code>autoscan</code> to Create <samp>configure.ac</samp></a> in <cite>The
Autoconf Manual</cite>).
</p>

<hr>
<a name="amhello_0027s-Makefile_002eam-Setup-Explained"></a>
<div class="header">
<p>
Previous: <a href="#amhello_0027s-configure_002eac-Setup-Explained" accesskey="p" rel="prev">amhello's configure.ac Setup Explained</a>, Up: <a href="#Hello-World" accesskey="u" rel="up">Hello World</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="amhello_0027s-Makefile_002eam-Setup-Explained-1"></a>
<h4 class="subsection">2.4.3 <code>amhello</code>&rsquo;s <samp>Makefile.am</samp> Setup Explained</h4>

<a name="index-Makefile_002eam_002c-Hello-World"></a>

<p>We now turn to <samp>src/Makefile.am</samp>.  This file contains
Automake instructions to build and install <samp>hello</samp>.
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = hello
hello_SOURCES = main.c
</pre></div>

<p>A <samp>Makefile.am</samp> has the same syntax as an ordinary
<samp>Makefile</samp>.  When <code>automake</code> processes a
<samp>Makefile.am</samp> it copies the entire file into the output
<samp>Makefile.in</samp> (that will be later turned into <samp>Makefile</samp> by
<code>configure</code>) but will react to certain variable definitions
by generating some build rules and other variables.
Often <samp>Makefile.am</samp>s contain only a list of variable definitions as
above, but they can also contain other variable and rule definitions that
<code>automake</code> will pass along without interpretation.
</p>
<p>Variables that end with <code>_PROGRAMS</code> are special variables
that list programs that the resulting <samp>Makefile</samp> should build.
In Automake speak, this <code>_PROGRAMS</code> suffix is called a
<em>primary</em>; Automake recognizes other primaries such as
<code>_SCRIPTS</code>, <code>_DATA</code>, <code>_LIBRARIES</code>, etc. corresponding
to different types of files.
</p>
<p>The &lsquo;<samp>bin</samp>&rsquo; part of the <code>bin_PROGRAMS</code> tells
<code>automake</code> that the resulting programs should be installed in
<var>bindir</var>.  Recall that the GNU Build System uses a set of variables
to denote destination directories and allow users to customize these
locations (see <a href="#Standard-Directory-Variables">Standard Directory Variables</a>).  Any such directory
variable can be put in front of a primary (omitting the <code>dir</code>
suffix) to tell <code>automake</code> where to install the listed files.
</p>
<p>Programs need to be built from source files, so for each program
<code><var>prog</var></code> listed in a <code><span class="nolinebreak">_PROGRAMS</span><!-- /@w --></code> variable,
<code>automake</code> will look for another variable named
<code><var>prog</var>_SOURCES</code> listing its source files.  There may be more
than one source file: they will all be compiled and linked together.
</p>
<p>Automake also knows that source files need to be distributed when
creating a tarball (unlike built programs).  So a side-effect of this
<code>hello_SOURCES</code> declaration is that <samp>main.c</samp> will be
part of the tarball created by <code>make dist</code>.
</p>
<p>Finally here are some explanations regarding the top-level
<samp>Makefile.am</samp>.
</p>
<div class="example">
<pre class="example">SUBDIRS = src
dist_doc_DATA = README
</pre></div>

<p><code>SUBDIRS</code> is a special variable listing all directories that
<code>make</code> should recurse into before processing the current
directory.  So this line is responsible for <code>make</code> building
<samp>src/hello</samp> even though we run it from the top-level.  This line
also causes <code>make install</code> to install <samp>src/hello</samp> before
installing <samp>README</samp> (not that this order matters).
</p>
<p>The line <code>dist_doc_DATA = README</code> causes <samp>README</samp> to be
distributed and installed in <var>docdir</var>.  Files listed with the
<code>_DATA</code> primary are not automatically part of the tarball built
with <code>make dist</code>, so we add the <code>dist_</code> prefix so they get
distributed.  However, for <samp>README</samp> it would not have been
necessary: <code>automake</code> automatically distributes any
<samp>README</samp> file it encounters (the list of other files
automatically distributed is presented by <code>automake --help</code>).
The only important effect of this second line is therefore to install
<samp>README</samp> during <code>make install</code>.
</p>
<p>One thing not covered in this example is accessing the installation
directory values (see <a href="#Standard-Directory-Variables">Standard Directory Variables</a>) from your
program code, that is, converting them into defined macros.  For this,
see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Defining-Directories">Defining Directories</a> in <cite>The Autoconf Manual</cite>.
</p>

<hr>
<a name="Generalities"></a>
<div class="header">
<p>
Next: <a href="#Examples" accesskey="n" rel="next">Examples</a>, Previous: <a href="#Autotools-Introduction" accesskey="p" rel="prev">Autotools Introduction</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="General-ideas"></a>
<h2 class="chapter">3 General ideas</h2>

<p>The following sections cover a few basic ideas that will help you
understand how Automake works.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#General-Operation" accesskey="1">General Operation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">General operation of Automake
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Strictness" accesskey="2">Strictness</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Standards conformance checking
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Uniform" accesskey="3">Uniform</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The Uniform Naming Scheme
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Length-Limitations" accesskey="4">Length Limitations</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Staying below the command line length limit
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Canonicalization" accesskey="5">Canonicalization</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How derived variables are named
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#User-Variables" accesskey="6">User Variables</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Variables reserved for the user
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Auxiliary-Programs" accesskey="7">Auxiliary Programs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Programs automake might require
</td></tr>
</table>


<hr>
<a name="General-Operation"></a>
<div class="header">
<p>
Next: <a href="#Strictness" accesskey="n" rel="next">Strictness</a>, Up: <a href="#Generalities" accesskey="u" rel="up">Generalities</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="General-Operation-1"></a>
<h3 class="section">3.1 General Operation</h3>

<p>Automake works by reading a <samp>Makefile.am</samp> and generating a
<samp>Makefile.in</samp>.  Certain variables and rules defined in the
<samp>Makefile.am</samp> instruct Automake to generate more specialized code;
for instance, a <code>bin_PROGRAMS</code> variable definition will cause rules
for compiling and linking programs to be generated.
</p>
<a name="index-Non_002dstandard-targets"></a>
<a name="index-git_002ddist_002c-non_002dstandard-example"></a>
<a name="index-git_002ddist"></a>

<p>The variable definitions and rules in the <samp>Makefile.am</samp> are
copied mostly verbatim into the generated file, with all variable
definitions preceding all rules.  This allows you to add almost
arbitrary code into the generated <samp>Makefile.in</samp>.  For instance,
the Automake distribution includes a non-standard rule for the
<code>git-dist</code> target, which the Automake maintainer uses to make
distributions from the source control system.
</p>
<a name="index-GNU-make-extensions"></a>

<p>Note that most GNU make extensions are not recognized by Automake.  Using
such extensions in a <samp>Makefile.am</samp> will lead to errors or confusing
behavior.
</p>
<a name="index-Append-operator"></a>
<a name="index-_002b_003d"></a>
<p>A special exception is that the GNU make append operator, &lsquo;<samp>+=</samp>&rsquo;, is
supported.  This operator appends its right hand argument to the variable
specified on the left.  Automake will translate the operator into
an ordinary &lsquo;<samp>=</samp>&rsquo; operator; &lsquo;<samp>+=</samp>&rsquo; will thus work with any make program.
</p>
<p>Automake tries to keep comments grouped with any adjoining rules or
variable definitions.
</p>
<a name="index-Limitations-of-automake-parser"></a>
<a name="index-Automake-parser_002c-limitations-of"></a>
<a name="index-indentation-in-Makefile_002eam"></a>
<p>Generally, Automake is not particularly smart in the parsing of unusual
Makefile constructs, so you&rsquo;re advised to avoid fancy constructs or
&ldquo;creative&rdquo; use of whitespace.
For example, <tt class="key">TAB</tt> characters cannot be used between a target name
and the following &ldquo;<code>:</code>&rdquo; character, and variable assignments
shouldn&rsquo;t be indented with <tt class="key">TAB</tt> characters.
Also, using more complex macro in target names can cause trouble:
</p>
<div class="example">
<pre class="example">% <kbd>cat Makefile.am</kbd>
$(FOO:=x): bar
% <kbd>automake</kbd>
Makefile.am:1: bad characters in variable name '$(FOO'
Makefile.am:1: ':='-style assignments are not portable
</pre></div>

<a name="index-Make-targets_002c-overriding"></a>
<a name="index-Make-rules_002c-overriding"></a>
<a name="index-Overriding-make-rules"></a>
<a name="index-Overriding-make-targets"></a>

<p>A rule defined in <samp>Makefile.am</samp> generally overrides any such
rule of a similar name that would be automatically generated by
<code>automake</code>.  Although this is a supported feature, it is generally
best to avoid making use of it, as sometimes the generated rules are
very particular.
</p>
<a name="index-Variables_002c-overriding"></a>
<a name="index-Overriding-make-variables"></a>

<p>Similarly, a variable defined in <samp>Makefile.am</samp> or
<code>AC_SUBST</code>ed from <samp>configure.ac</samp> will override any
definition of the variable that <code>automake</code> would ordinarily
create.  This feature is more often useful than the ability to
override a rule.  Be warned that many of the variables generated by
<code>automake</code> are considered to be for internal use only, and their
names might change in future releases.
</p>
<a name="index-Recursive-operation-of-Automake"></a>
<a name="index-Automake_002c-recursive-operation"></a>
<a name="index-Example-of-recursive-operation"></a>

<p>When examining a variable definition, Automake will recursively examine
variables referenced in the definition.  For example, if Automake is
looking at the content of <code>foo_SOURCES</code> in this snippet
</p>
<div class="example">
<pre class="example">xs = a.c b.c
foo_SOURCES = c.c $(xs)
</pre></div>

<p>it would use the files <samp>a.c</samp>, <samp>b.c</samp>, and <samp>c.c</samp> as the
contents of <code>foo_SOURCES</code>.
</p>
<a name="index-_0023_0023-_0028special-Automake-comment_0029"></a>
<a name="index-Special-Automake-comment"></a>
<a name="index-Comment_002c-special-to-Automake"></a>

<p>Automake also allows a form of comment that is <em>not</em> copied into
the output; all lines beginning with &lsquo;<samp>##</samp>&rsquo; (leading spaces allowed)
are completely ignored by Automake.
</p>
<p>It is customary to make the first line of <samp>Makefile.am</samp> read:
</p>
<a name="index-Makefile_002eam_002c-first-line"></a>
<a name="index-First-line-of-Makefile_002eam"></a>

<div class="example">
<pre class="example">## Process this file with automake to produce Makefile.in
</pre></div>



<hr>
<a name="Strictness"></a>
<div class="header">
<p>
Next: <a href="#Uniform" accesskey="n" rel="next">Uniform</a>, Previous: <a href="#General-Operation" accesskey="p" rel="prev">General Operation</a>, Up: <a href="#Generalities" accesskey="u" rel="up">Generalities</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Strictness-1"></a>
<h3 class="section">3.2 Strictness</h3>

<a name="index-Non_002dGNU-packages"></a>

<p>While Automake is intended to be used by maintainers of GNU packages, it
does make some effort to accommodate those who wish to use it, but do
not want to use all the GNU conventions.
</p>
<a name="index-Strictness_002c-defined"></a>
<a name="index-Strictness_002c-foreign"></a>
<a name="index-foreign-strictness"></a>
<a name="index-Strictness_002c-gnu"></a>
<a name="index-gnu-strictness"></a>
<a name="index-Strictness_002c-gnits"></a>
<a name="index-gnits-strictness"></a>

<p>To this end, Automake supports three levels of <em>strictness</em>&mdash;the
strictness indicating how stringently Automake should check standards
conformance.
</p>
<p>The valid strictness levels are:
</p>
<dl compact="compact">
<dt><samp>foreign</samp></dt>
<dd><p>Automake will check for only those things that are absolutely
required for proper operations.  For instance, whereas GNU standards
dictate the existence of a <samp>NEWS</samp> file, it will not be required in
this mode.  This strictness will also turn off some warnings by default
(among them, portability warnings).
The name comes from the fact that Automake is intended to be
used for GNU programs; these relaxed rules are not the standard mode of
operation.
</p>
</dd>
<dt><samp>gnu</samp></dt>
<dd><p>Automake will check&mdash;as much as possible&mdash;for compliance to the GNU
standards for packages.  This is the default.
</p>
</dd>
<dt><samp>gnits</samp></dt>
<dd><p>Automake will check for compliance to the as-yet-unwritten <em>Gnits
standards</em>.  These are based on the GNU standards, but are even more
detailed.  Unless you are a Gnits standards contributor, it is
recommended that you avoid this option until such time as the Gnits
standard is actually published (which may never happen).
</p></dd>
</dl>

<p>See <a href="#Gnits">Gnits</a>, for more information on the precise implications of the
strictness level.
</p>

<hr>
<a name="Uniform"></a>
<div class="header">
<p>
Next: <a href="#Length-Limitations" accesskey="n" rel="next">Length Limitations</a>, Previous: <a href="#Strictness" accesskey="p" rel="prev">Strictness</a>, Up: <a href="#Generalities" accesskey="u" rel="up">Generalities</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="The-Uniform-Naming-Scheme"></a>
<h3 class="section">3.3 The Uniform Naming Scheme</h3>

<a name="index-Uniform-naming-scheme"></a>

<p>Automake variables generally follow a <em>uniform naming scheme</em> that
makes it easy to decide how programs (and other derived objects) are
built, and how they are installed.  This scheme also supports
<code>configure</code> time determination of what should be built.
</p>
<a name="index-_005fPROGRAMS-primary-variable"></a>
<a name="index-PROGRAMS-primary-variable"></a>
<a name="index-Primary-variable_002c-PROGRAMS"></a>
<a name="index-Primary-variable_002c-defined"></a>
<a name="index-_005fPROGRAMS"></a>

<p>At <code>make</code> time, certain variables are used to determine which
objects are to be built.  The variable names are made of several pieces
that are concatenated together.
</p>
<p>The piece that tells <code>automake</code> what is being built is commonly called
the <em>primary</em>.  For instance, the primary <code>PROGRAMS</code> holds a
list of programs that are to be compiled and linked.
<a name="index-PROGRAMS"></a>
</p>
<a name="index-pkgdatadir_002c-defined"></a>
<a name="index-pkgincludedir_002c-defined"></a>
<a name="index-pkglibdir_002c-defined"></a>
<a name="index-pkglibexecdir_002c-defined"></a>

<a name="index-pkgdatadir"></a>
<a name="index-pkgincludedir"></a>
<a name="index-pkglibdir"></a>
<a name="index-pkglibexecdir"></a>

<a name="index-PACKAGE_002c-directory"></a>
<p>A different set of names is used to decide where the built objects
should be installed.  These names are prefixes to the primary, and they
indicate which standard directory should be used as the installation
directory.  The standard directory names are given in the GNU standards
(see <a href="http://www.gnu.org/prep/standards/standards.html#Directory-Variables">Directory Variables</a> in <cite>The GNU Coding Standards</cite>).
Automake extends this list with <code>pkgdatadir</code>, <code>pkgincludedir</code>,
<code>pkglibdir</code>, and <code>pkglibexecdir</code>; these are the same as the
non-&lsquo;<samp>pkg</samp>&rsquo; versions, but with &lsquo;<samp>$(PACKAGE)</samp>&rsquo; appended.  For instance,
<code>pkglibdir</code> is defined as &lsquo;<samp>$(libdir)/$(PACKAGE)</samp>&rsquo;.
</p>
<a name="index-EXTRA_005f_002c-prepending"></a>
<p>For each primary, there is one additional variable named by prepending
&lsquo;<samp>EXTRA_</samp>&rsquo; to the primary name.  This variable is used to list
objects that may or may not be built, depending on what
<code>configure</code> decides.  This variable is required because Automake
must statically know the entire list of objects that may be built in
order to generate a <samp>Makefile.in</samp> that will work in all cases.
</p>
<a name="index-EXTRA_005fPROGRAMS_002c-defined"></a>
<a name="index-Example_002c-EXTRA_005fPROGRAMS"></a>
<a name="index-cpio-example"></a>

<p>For instance, <code>cpio</code> decides at configure time which programs
should be built.  Some of the programs are installed in <code>bindir</code>,
and some are installed in <code>sbindir</code>:
</p>
<div class="example">
<pre class="example">EXTRA_PROGRAMS = mt rmt
bin_PROGRAMS = cpio pax
sbin_PROGRAMS = $(MORE_PROGRAMS)
</pre></div>

<p>Defining a primary without a prefix as a variable, e.g.,
&lsquo;<samp>PROGRAMS</samp>&rsquo;, is an error.
</p>
<p>Note that the common &lsquo;<samp>dir</samp>&rsquo; suffix is left off when constructing the
variable names; thus one writes &lsquo;<samp>bin_PROGRAMS</samp>&rsquo; and not
&lsquo;<samp>bindir_PROGRAMS</samp>&rsquo;.
</p>
<p>Not every sort of object can be installed in every directory.  Automake
will flag those attempts it finds in error (but see below how to override
the check if you really need to).
Automake will also diagnose obvious misspellings in directory names.
</p>
<a name="index-Extending-list-of-installation-directories"></a>
<a name="index-Installation-directories_002c-extending-list"></a>

<p>Sometimes the standard directories&mdash;even as augmented by
Automake&mdash;are not enough.  In particular it is sometimes useful, for
clarity, to install objects in a subdirectory of some predefined
directory.  To this end, Automake allows you to extend the list of
possible installation directories.  A given prefix (e.g., &lsquo;<samp>zar</samp>&rsquo;)
is valid if a variable of the same name with &lsquo;<samp>dir</samp>&rsquo; appended is
defined (e.g., &lsquo;<samp>zardir</samp>&rsquo;).
</p>
<p>For instance, the following snippet will install <samp>file.xml</samp> into
&lsquo;<samp>$(datadir)/xml</samp>&rsquo;.
</p>
<div class="example">
<pre class="example">xmldir = $(datadir)/xml
xml_DATA = file.xml
</pre></div>

<p>This feature can also be used to override the sanity checks Automake
performs to diagnose suspicious directory/primary couples (in the
unlikely case these checks are undesirable, and you really know what
you&rsquo;re doing).  For example, Automake would error out on this input:
</p>
<div class="example">
<pre class="example"># Forbidden directory combinations, automake will error out on this.
pkglib_PROGRAMS = foo
doc_LIBRARIES = libquux.a
</pre></div>

<p>but it will succeed with this:
</p>
<div class="example">
<pre class="example"># Work around forbidden directory combinations.  Do not use this
# without a very good reason!
my_execbindir = $(pkglibdir)
my_doclibdir = $(docdir)
my_execbin_PROGRAMS = foo
my_doclib_LIBRARIES = libquux.a
</pre></div>

<p>The &lsquo;<samp>exec</samp>&rsquo; substring of the &lsquo;<samp>my_execbindir</samp>&rsquo; variable lets
the files be installed at the right time (see <a href="#The-Two-Parts-of-Install">The Two Parts of Install</a>).
</p>
<a name="index-noinst_005f-primary-prefix_002c-definition"></a>
<a name="index-noinst_005f"></a>

<p>The special prefix &lsquo;<samp>noinst_</samp>&rsquo; indicates that the objects in question
should be built but not installed at all.  This is usually used for
objects required to build the rest of your package, for instance static
libraries (see <a href="#A-Library">A Library</a>), or helper scripts.
</p>
<a name="index-check_005f-primary-prefix_002c-definition"></a>
<a name="index-check_005f"></a>

<p>The special prefix &lsquo;<samp>check_</samp>&rsquo; indicates that the objects in question
should not be built until the &lsquo;<samp>make check</samp>&rsquo; command is run.  Those
objects are not installed either.
</p>
<p>The current primary names are &lsquo;<samp>PROGRAMS</samp>&rsquo;, &lsquo;<samp>LIBRARIES</samp>&rsquo;,
&lsquo;<samp>LTLIBRARIES</samp>&rsquo;, &lsquo;<samp>LISP</samp>&rsquo;, &lsquo;<samp>PYTHON</samp>&rsquo;, &lsquo;<samp>JAVA</samp>&rsquo;,
&lsquo;<samp>SCRIPTS</samp>&rsquo;, &lsquo;<samp>DATA</samp>&rsquo;, &lsquo;<samp>HEADERS</samp>&rsquo;, &lsquo;<samp>MANS</samp>&rsquo;, and
&lsquo;<samp>TEXINFOS</samp>&rsquo;.
<a name="index-PROGRAMS-1"></a>
<a name="index-LIBRARIES"></a>
<a name="index-LTLIBRARIES"></a>
<a name="index-LISP"></a>
<a name="index-PYTHON"></a>
<a name="index-JAVA"></a>
<a name="index-SCRIPTS"></a>
<a name="index-DATA"></a>
<a name="index-HEADERS"></a>
<a name="index-MANS"></a>
<a name="index-TEXINFOS"></a>
</p>
<p>Some primaries also allow additional prefixes that control other
aspects of <code>automake</code>&rsquo;s behavior.  The currently defined prefixes
are &lsquo;<samp>dist_</samp>&rsquo;, &lsquo;<samp>nodist_</samp>&rsquo;, &lsquo;<samp>nobase_</samp>&rsquo;, and &lsquo;<samp>notrans_</samp>&rsquo;.
These prefixes are explained later (see <a href="#Program-and-Library-Variables">Program and Library Variables</a>)
(see <a href="#Man-Pages">Man Pages</a>).
</p>

<hr>
<a name="Length-Limitations"></a>
<div class="header">
<p>
Next: <a href="#Canonicalization" accesskey="n" rel="next">Canonicalization</a>, Previous: <a href="#Uniform" accesskey="p" rel="prev">Uniform</a>, Up: <a href="#Generalities" accesskey="u" rel="up">Generalities</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Staying-below-the-command-line-length-limit"></a>
<h3 class="section">3.4 Staying below the command line length limit</h3>

<a name="index-command-line-length-limit"></a>
<a name="index-ARG_005fMAX"></a>

<p>Traditionally, most unix-like systems have a length limitation for the
command line arguments and environment contents when creating new
processes (see for example
<a href="http://www.in-ulm.de/~mascheck/various/argmax/">http://www.in-ulm.de/~mascheck/various/argmax/</a> for an
overview on this issue),
which of course also applies to commands spawned by <code>make</code>.
POSIX requires this limit to be at least 4096 bytes, and most modern
systems have quite high limits (or are unlimited).
</p>
<p>In order to create portable Makefiles that do not trip over these
limits, it is necessary to keep the length of file lists bounded.
Unfortunately, it is not possible to do so fully transparently within
Automake, so your help may be needed.  Typically, you can split long
file lists manually and use different installation directory names for
each list.  For example,
</p>
<div class="example">
<pre class="example">data_DATA = file1 &hellip; file<var>N</var> file<var>N+1</var> &hellip; file<var>2N</var>
</pre></div>

<p>may also be written as
</p>
<div class="example">
<pre class="example">data_DATA = file1 &hellip; file<var>N</var>
data2dir = $(datadir)
data2_DATA = file<var>N+1</var> &hellip; file<var>2N</var>
</pre></div>

<p>and will cause Automake to treat the two lists separately during
<code>make install</code>.  See <a href="#The-Two-Parts-of-Install">The Two Parts of Install</a> for choosing
directory names that will keep the ordering of the two parts of
installation Note that <code>make dist</code> may still only work on a host
with a higher length limit in this example.
</p>
<p>Automake itself employs a couple of strategies to avoid long command
lines.  For example, when &lsquo;<samp>${srcdir}/</samp>&rsquo; is prepended to file
names, as can happen with above <code>$(data_DATA)</code> lists, it limits
the amount of arguments passed to external commands.
</p>
<p>Unfortunately, some system&rsquo;s <code>make</code> commands may prepend
<code>VPATH</code> prefixes like &lsquo;<samp>${srcdir}/</samp>&rsquo; to file names from the
source tree automatically (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Automatic-Rule-Rewriting">Automatic
Rule Rewriting</a> in <cite>The Autoconf Manual</cite>).  In this case, the user
may have to switch to use GNU Make, or refrain from using VPATH builds,
in order to stay below the length limit.
</p>
<p>For libraries and programs built from many sources, convenience archives
may be used as intermediates in order to limit the object list length
(see <a href="#Libtool-Convenience-Libraries">Libtool Convenience Libraries</a>).
</p>

<hr>
<a name="Canonicalization"></a>
<div class="header">
<p>
Next: <a href="#User-Variables" accesskey="n" rel="next">User Variables</a>, Previous: <a href="#Length-Limitations" accesskey="p" rel="prev">Length Limitations</a>, Up: <a href="#Generalities" accesskey="u" rel="up">Generalities</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="How-derived-variables-are-named"></a>
<h3 class="section">3.5 How derived variables are named</h3>

<a name="index-canonicalizing-Automake-variables"></a>

<p>Sometimes a Makefile variable name is derived from some text the
maintainer supplies.  For instance, a program name listed in
&lsquo;<samp>_PROGRAMS</samp>&rsquo; is rewritten into the name of a &lsquo;<samp>_SOURCES</samp>&rsquo;
variable.  In cases like this, Automake canonicalizes the text, so that
program names and the like do not have to follow Makefile variable naming
rules.  All characters in the name except for letters, numbers, the
strudel (@), and the underscore are turned into underscores when making
variable references.
</p>
<p>For example, if your program is named <samp>sniff-glue</samp>, the derived
variable name would be &lsquo;<samp>sniff_glue_SOURCES</samp>&rsquo;, not
&lsquo;<samp>sniff-glue_SOURCES</samp>&rsquo;.  Similarly the sources for a library named
<samp>libmumble++.a</samp> should be listed in the
&lsquo;<samp>libmumble___a_SOURCES</samp>&rsquo; variable.
</p>
<p>The strudel is an addition, to make the use of Autoconf substitutions in
variable names less obfuscating.
</p>

<hr>
<a name="User-Variables"></a>
<div class="header">
<p>
Next: <a href="#Auxiliary-Programs" accesskey="n" rel="next">Auxiliary Programs</a>, Previous: <a href="#Canonicalization" accesskey="p" rel="prev">Canonicalization</a>, Up: <a href="#Generalities" accesskey="u" rel="up">Generalities</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Variables-reserved-for-the-user"></a>
<h3 class="section">3.6 Variables reserved for the user</h3>

<a name="index-variables_002c-reserved-for-the-user"></a>
<a name="index-user-variables"></a>

<p>Some <samp>Makefile</samp> variables are reserved by the GNU Coding Standards
for the use of the &ldquo;user&rdquo;&mdash;the person building the package.  For
instance, <code>CFLAGS</code> is one such variable.
</p>
<p>Sometimes package developers are tempted to set user variables such as
<code>CFLAGS</code> because it appears to make their job easier.  However,
the package itself should never set a user variable, particularly not
to include switches that are required for proper compilation of the
package.  Since these variables are documented as being for the
package builder, that person rightfully expects to be able to override
any of these variables at build time.
</p>
<p>To get around this problem, Automake introduces an automake-specific
shadow variable for each user flag variable.  (Shadow variables are
not introduced for variables like <code>CC</code>, where they would make no
sense.)  The shadow variable is named by prepending &lsquo;<samp>AM_</samp>&rsquo; to the
user variable&rsquo;s name.  For instance, the shadow variable for
<code>YFLAGS</code> is <code>AM_YFLAGS</code>.  The package maintainer&mdash;that is,
the author(s) of the <samp>Makefile.am</samp> and <samp>configure.ac</samp>
files&mdash;may adjust these shadow variables however necessary.
</p>
<p>See <a href="#Flag-Variables-Ordering">Flag Variables Ordering</a>, for more discussion about these
variables and how they interact with per-target variables.
</p>
<hr>
<a name="Auxiliary-Programs"></a>
<div class="header">
<p>
Previous: <a href="#User-Variables" accesskey="p" rel="prev">User Variables</a>, Up: <a href="#Generalities" accesskey="u" rel="up">Generalities</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Programs-automake-might-require"></a>
<h3 class="section">3.7 Programs automake might require</h3>

<a name="index-Programs_002c-auxiliary"></a>
<a name="index-Auxiliary-programs"></a>

<p>Automake sometimes requires helper programs so that the generated
<samp>Makefile</samp> can do its work properly.  There are a fairly large
number of them, and we list them here.
</p>
<p>Although all of these files are distributed and installed with
Automake, a couple of them are maintained separately.  The Automake
copies are updated before each release, but we mention the original
source in case you need more recent versions.
</p>
<dl compact="compact">
<dt><code>ar-lib</code></dt>
<dd><p>This is a wrapper primarily for the Microsoft lib archiver, to make
it more POSIX-like.
</p>
</dd>
<dt><code>compile</code></dt>
<dd><p>This is a wrapper for compilers that do not accept options <samp>-c</samp>
and <samp>-o</samp> at the same time.  It is only used when absolutely
required.  Such compilers are rare, with the Microsoft C/C++ Compiler
as the most notable exception. This wrapper also makes the following
common options available for that compiler, while performing file name
translation where needed: <samp>-I</samp>, <samp>-L</samp>, <samp>-l</samp>,
<samp>-Wl,</samp> and <samp>-Xlinker</samp>.
</p>
</dd>
<dt><code>config.guess</code></dt>
<dt><code>config.sub</code></dt>
<dd><p>These two programs compute the canonical triplets for the given build,
host, or target architecture.  These programs are updated regularly to
support new architectures and fix probes broken by changes in new
kernel versions.  Each new release of Automake comes with up-to-date
copies of these programs.  If your copy of Automake is getting old,
you are encouraged to fetch the latest versions of these files from
<a href="http://savannah.gnu.org/git/?group=config">http://savannah.gnu.org/git/?group=config</a> before making a
release.
</p>
</dd>
<dt><code>depcomp</code></dt>
<dd><p>This program understands how to run a compiler so that it will
generate not only the desired output but also dependency information
that is then used by the automatic dependency tracking feature
(see <a href="#Dependencies">Dependencies</a>).
</p>
</dd>
<dt><code>install-sh</code></dt>
<dd><p>This is a replacement for the <code>install</code> program that works on
platforms where <code>install</code> is unavailable or unusable.
</p>
</dd>
<dt><code>mdate-sh</code></dt>
<dd><p>This script is used to generate a <samp>version.texi</samp> file.  It examines
a file and prints some date information about it.
</p>
</dd>
<dt><code>missing</code></dt>
<dd><p>This wraps a number of programs that are typically only required by
maintainers.  If the program in question doesn&rsquo;t exist, or seems to old,
<code>missing</code> will print an informative warning before failing out,
to provide the user with more context and information.
</p>
</dd>
<dt><code>mkinstalldirs</code></dt>
<dd><p>This script used to be a wrapper around &lsquo;<samp>mkdir -p</samp>&rsquo;, which is not
portable.  Now we prefer to use &lsquo;<samp>install-sh -d</samp>&rsquo; when <code>configure</code>
finds that &lsquo;<samp>mkdir -p</samp>&rsquo; does not work, this makes one less script to
distribute.
</p>
<p>For backward compatibility <samp>mkinstalldirs</samp> is still used and
distributed when <code>automake</code> finds it in a package.  But it is no
longer installed automatically, and it should be safe to remove it.
</p>
</dd>
<dt><code>py-compile</code></dt>
<dd><p>This is used to byte-compile Python scripts.
</p>
</dd>
<dt><code>test-driver</code></dt>
<dd><p>This implements the default test driver offered by the parallel
testsuite harness.
</p>
</dd>
<dt><code>texinfo.tex</code></dt>
<dd><p>Not a program, this file is required for &lsquo;<samp>make dvi</samp>&rsquo;, &lsquo;<samp>make
ps</samp>&rsquo; and &lsquo;<samp>make pdf</samp>&rsquo; to work when Texinfo sources are in the
package.  The latest version can be downloaded from
<a href="http://www.gnu.org/software/texinfo/">http://www.gnu.org/software/texinfo/</a>.
</p>
</dd>
<dt><code>ylwrap</code></dt>
<dd><p>This program wraps <code>lex</code> and <code>yacc</code> to rename their
output files.  It also ensures that, for instance, multiple
<code>yacc</code> instances can be invoked in a single directory in
parallel.
</p>
</dd>
</dl>


<hr>
<a name="Examples"></a>
<div class="header">
<p>
Next: <a href="#automake-Invocation" accesskey="n" rel="next">automake Invocation</a>, Previous: <a href="#Generalities" accesskey="p" rel="prev">Generalities</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Some-example-packages"></a>
<h2 class="chapter">4 Some example packages</h2>

<p>This section contains two small examples.
</p>
<p>The first example (see <a href="#Complete">Complete</a>) assumes you have an existing
project already using Autoconf, with handcrafted <samp>Makefile</samp>s, and
that you want to convert it to using Automake.  If you are discovering
both tools, it is probably better that you look at the Hello World
example presented earlier (see <a href="#Hello-World">Hello World</a>).
</p>
<p>The second example (see <a href="#true">true</a>) shows how two programs can be built
from the same file, using different compilation parameters.  It
contains some technical digressions that are probably best skipped on
first read.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Complete" accesskey="1">Complete</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">A simple example, start to finish
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#true" accesskey="2">true</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Building true and false
</td></tr>
</table>


<hr>
<a name="Complete"></a>
<div class="header">
<p>
Next: <a href="#true" accesskey="n" rel="next">true</a>, Up: <a href="#Examples" accesskey="u" rel="up">Examples</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="A-simple-example_002c-start-to-finish"></a>
<h3 class="section">4.1 A simple example, start to finish</h3>

<a name="index-Complete-example"></a>

<p>Let&rsquo;s suppose you just finished writing <code>zardoz</code>, a program to make
your head float from vortex to vortex.  You&rsquo;ve been using Autoconf to
provide a portability framework, but your <samp>Makefile.in</samp>s have been
ad-hoc.  You want to make them bulletproof, so you turn to Automake.
</p>
<a name="index-AM_005fINIT_005fAUTOMAKE_002c-example-use"></a>

<p>The first step is to update your <samp>configure.ac</samp> to include the
commands that <code>automake</code> needs.  The way to do this is to add an
<code>AM_INIT_AUTOMAKE</code> call just after <code>AC_INIT</code>:
</p>
<div class="example">
<pre class="example">AC_INIT([zardoz], [1.0])
AM_INIT_AUTOMAKE
&hellip;
</pre></div>

<p>Since your program doesn&rsquo;t have any complicating factors (e.g., it
doesn&rsquo;t use <code>gettext</code>, it doesn&rsquo;t want to build a shared library),
you&rsquo;re done with this part.  That was easy!
</p>
<a name="index-aclocal-program_002c-introduction"></a>
<a name="index-aclocal_002em4_002c-preexisting"></a>
<a name="index-acinclude_002em4_002c-defined"></a>

<p>Now you must regenerate <samp>configure</samp>.  But to do that, you&rsquo;ll need
to tell <code>autoconf</code> how to find the new macro you&rsquo;ve used.  The
easiest way to do this is to use the <code>aclocal</code> program to
generate your <samp>aclocal.m4</samp> for you.  But wait&hellip; maybe you
already have an <samp>aclocal.m4</samp>, because you had to write some hairy
macros for your program.  The <code>aclocal</code> program lets you put
your own macros into <samp>acinclude.m4</samp>, so simply rename and then
run:
</p>
<div class="example">
<pre class="example">mv aclocal.m4 acinclude.m4
aclocal
autoconf
</pre></div>

<a name="index-zardoz-example"></a>

<p>Now it is time to write your <samp>Makefile.am</samp> for <code>zardoz</code>.
Since <code>zardoz</code> is a user program, you want to install it where the
rest of the user programs go: <code>bindir</code>.  Additionally,
<code>zardoz</code> has some Texinfo documentation.  Your <samp>configure.ac</samp>
script uses <code>AC_REPLACE_FUNCS</code>, so you need to link against
&lsquo;<samp>$(LIBOBJS)</samp>&rsquo;.  So here&rsquo;s what you&rsquo;d write:
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = zardoz
zardoz_SOURCES = main.c head.c float.c vortex9.c gun.c
zardoz_LDADD = $(LIBOBJS)

info_TEXINFOS = zardoz.texi
</pre></div>

<p>Now you can run &lsquo;<samp>automake --add-missing</samp>&rsquo; to generate your
<samp>Makefile.in</samp> and grab any auxiliary files you might need, and
you&rsquo;re done!
</p>

<hr>
<a name="true"></a>
<div class="header">
<p>
Previous: <a href="#Complete" accesskey="p" rel="prev">Complete</a>, Up: <a href="#Examples" accesskey="u" rel="up">Examples</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Building-true-and-false"></a>
<h3 class="section">4.2 Building true and false</h3>

<a name="index-Example_002c-false-and-true"></a>
<a name="index-false-Example"></a>
<a name="index-true-Example"></a>

<p>Here is another, trickier example.  It shows how to generate two
programs (<code>true</code> and <code>false</code>) from the same source file
(<samp>true.c</samp>).  The difficult part is that each compilation of
<samp>true.c</samp> requires different <code>cpp</code> flags.
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = true false
false_SOURCES =
false_LDADD = false.o

true.o: true.c
        $(COMPILE) -DEXIT_CODE=0 -c true.c

false.o: true.c
        $(COMPILE) -DEXIT_CODE=1 -o false.o -c true.c
</pre></div>

<p>Note that there is no <code>true_SOURCES</code> definition.  Automake will
implicitly assume that there is a source file named <samp>true.c</samp>
(see <a href="#Default-_005fSOURCES">Default _SOURCES</a>), and
define rules to compile <samp>true.o</samp> and link <samp>true</samp>.  The
&lsquo;<samp>true.o: true.c</samp>&rsquo; rule supplied by the above <samp>Makefile.am</samp>,
will override the Automake generated rule to build <samp>true.o</samp>.
</p>
<p><code>false_SOURCES</code> is defined to be empty&mdash;that way no implicit value
is substituted.  Because we have not listed the source of
<samp>false</samp>, we have to tell Automake how to link the program.  This is
the purpose of the <code>false_LDADD</code> line.  A <code>false_DEPENDENCIES</code>
variable, holding the dependencies of the <samp>false</samp> target will be
automatically generated by Automake from the content of
<code>false_LDADD</code>.
</p>
<p>The above rules won&rsquo;t work if your compiler doesn&rsquo;t accept both
<samp>-c</samp> and <samp>-o</samp>.  The simplest fix for this is to introduce a
bogus dependency (to avoid problems with a parallel <code>make</code>):
</p>
<div class="example">
<pre class="example">true.o: true.c false.o
        $(COMPILE) -DEXIT_CODE=0 -c true.c

false.o: true.c
        $(COMPILE) -DEXIT_CODE=1 -c true.c &amp;&amp; mv true.o false.o
</pre></div>

<p>As it turns out, there is also a much easier way to do this same task.
Some of the above technique is useful enough that we&rsquo;ve kept the
example in the manual.  However if you were to build <code>true</code> and
<code>false</code> in real life, you would probably use per-program
compilation flags, like so:
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = false true

false_SOURCES = true.c
false_CPPFLAGS = -DEXIT_CODE=1

true_SOURCES = true.c
true_CPPFLAGS = -DEXIT_CODE=0
</pre></div>

<p>In this case Automake will cause <samp>true.c</samp> to be compiled twice,
with different flags.  In this instance, the names of the object files
would be chosen by automake; they would be <samp>false-true.o</samp> and
<samp>true-true.o</samp>. (The name of the object files rarely matters.)
</p>
<hr>
<a name="automake-Invocation"></a>
<div class="header">
<p>
Next: <a href="#configure" accesskey="n" rel="next">configure</a>, Previous: <a href="#Examples" accesskey="p" rel="prev">Examples</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Creating-a-Makefile_002ein"></a>
<h2 class="chapter">5 Creating a <samp>Makefile.in</samp></h2>
<a name="Invoking-automake"></a>
<a name="index-Multiple-configure_002eac-files"></a>
<a name="index-Invoking-automake"></a>
<a name="index-automake_002c-invoking"></a>
<a name="index-Invocation-of-automake"></a>
<a name="index-automake_002c-invocation"></a>

<p>To create all the <samp>Makefile.in</samp>s for a package, run the
<code>automake</code> program in the top level directory, with no
arguments.  <code>automake</code> will automatically find each
appropriate <samp>Makefile.am</samp> (by scanning <samp>configure.ac</samp>;
see <a href="#configure">configure</a>) and generate the corresponding <samp>Makefile.in</samp>.
Note that <code>automake</code> has a rather simplistic view of what
constitutes a package; it assumes that a package has only one
<samp>configure.ac</samp>, at the top.  If your package has multiple
<samp>configure.ac</samp>s, then you must run <code>automake</code> in each
directory holding a <samp>configure.ac</samp>.  (Alternatively, you may rely
on Autoconf&rsquo;s <code>autoreconf</code>, which is able to recurse your
package tree and run <code>automake</code> where appropriate.)
</p>
<p>You can optionally give <code>automake</code> an argument; <samp>.am</samp> is
appended to the argument and the result is used as the name of the
input file.  This feature is generally only used to automatically
rebuild an out-of-date <samp>Makefile.in</samp>.  Note that
<code>automake</code> must always be run from the topmost directory of a
project, even if being used to regenerate the <samp>Makefile.in</samp> in
some subdirectory.  This is necessary because <code>automake</code> must
scan <samp>configure.ac</samp>, and because <code>automake</code> uses the
knowledge that a <samp>Makefile.in</samp> is in a subdirectory to change its
behavior in some cases.
</p>
<a name="index-AUTOCONF"></a>
<p>Automake will run <code>autoconf</code> to scan <samp>configure.ac</samp> and
its dependencies (i.e., <samp>aclocal.m4</samp> and any included file),
therefore <code>autoconf</code> must be in your <code>PATH</code>.  If there is
an <code>AUTOCONF</code> variable in your environment it will be used
instead of <code>autoconf</code>, this allows you to select a particular
version of Autoconf.  By the way, don&rsquo;t misunderstand this paragraph:
<code>automake</code> runs <code>autoconf</code> to <strong>scan</strong> your
<samp>configure.ac</samp>, this won&rsquo;t build <samp>configure</samp> and you still
have to run <code>autoconf</code> yourself for this purpose.
</p>
<a name="index-automake-options"></a>
<a name="index-Options_002c-automake"></a>
<a name="index-Strictness_002c-command-line"></a>

<p><code>automake</code> accepts the following options:
</p>
<a name="index-Extra-files-distributed-with-Automake"></a>
<a name="index-Files-distributed-with-Automake"></a>
<a name="index-config_002eguess"></a>

<dl compact="compact">
<dt><code>-a</code></dt>
<dt><code>--add-missing</code></dt>
<dd><a name="index-_002da"></a>
<a name="index-_002d_002dadd_002dmissing"></a>
<p>Automake requires certain common files to exist in certain situations;
for instance, <samp>config.guess</samp> is required if <samp>configure.ac</samp> invokes
<code>AC_CANONICAL_HOST</code>.  Automake is distributed with several of these
files (see <a href="#Auxiliary-Programs">Auxiliary Programs</a>); this option will cause the missing
ones to be automatically added to the package, whenever possible.  In
general if Automake tells you a file is missing, try using this option.
By default Automake tries to make a symbolic link pointing to its own
copy of the missing file; this can be changed with <samp>--copy</samp>.
</p>
<p>Many of the potentially-missing files are common scripts whose
location may be specified via the <code>AC_CONFIG_AUX_DIR</code> macro.
Therefore, <code>AC_CONFIG_AUX_DIR</code>&rsquo;s setting affects whether a
file is considered missing, and where the missing file is added
(see <a href="#Optional">Optional</a>).
</p>
<p>In some strictness modes, additional files are installed, see <a href="#Gnits">Gnits</a>
for more information.
</p>
</dd>
<dt><code>--libdir=<var>dir</var></code></dt>
<dd><a name="index-_002d_002dlibdir"></a>
<p>Look for Automake data files in directory <var>dir</var> instead of in the
installation directory.  This is typically used for debugging.
</p>
</dd>
<dt><code>--print-libdir</code></dt>
<dd><a name="index-_002d_002dprint_002dlibdir"></a>
<p>Print the path of the installation directory containing Automake-provided
scripts and data files (like e.g., <samp>texinfo.texi</samp> and
<samp>install-sh</samp>).
</p>
</dd>
<dt><code>-c</code></dt>
<dd><a name="index-_002dc"></a>
</dd>
<dt><code>--copy</code></dt>
<dd><a name="index-_002d_002dcopy"></a>
<p>When used with <samp>--add-missing</samp>, causes installed files to be
copied.  The default is to make a symbolic link.
</p>
</dd>
<dt><code>-f</code></dt>
<dd><a name="index-_002df"></a>
</dd>
<dt><code>--force-missing</code></dt>
<dd><a name="index-_002d_002dforce_002dmissing"></a>
<p>When used with <samp>--add-missing</samp>, causes standard files to be reinstalled
even if they already exist in the source tree.  This involves removing
the file from the source tree before creating the new symlink (or, with
<samp>--copy</samp>, copying the new file).
</p>
</dd>
<dt><code>--foreign</code></dt>
<dd><a name="index-_002d_002dforeign"></a>
<p>Set the global strictness to <samp>foreign</samp>.  For more information, see
<a href="#Strictness">Strictness</a>.
</p>
</dd>
<dt><code>--gnits</code></dt>
<dd><a name="index-_002d_002dgnits"></a>
<p>Set the global strictness to <samp>gnits</samp>.  For more information, see
<a href="#Gnits">Gnits</a>.
</p>
</dd>
<dt><code>--gnu</code></dt>
<dd><a name="index-_002d_002dgnu"></a>
<p>Set the global strictness to <samp>gnu</samp>.  For more information, see
<a href="#Gnits">Gnits</a>.  This is the default strictness.
</p>
</dd>
<dt><code>--help</code></dt>
<dd><a name="index-_002d_002dhelp"></a>
<p>Print a summary of the command line options and exit.
</p>
</dd>
<dt><code>-i</code></dt>
<dt><code>--ignore-deps</code></dt>
<dd><a name="index-_002di"></a>
<p>This disables the dependency tracking feature in generated
<samp>Makefile</samp>s; see <a href="#Dependencies">Dependencies</a>.
</p>
</dd>
<dt><code>--include-deps</code></dt>
<dd><a name="index-_002d_002dinclude_002ddeps"></a>
<p>This enables the dependency tracking feature.  This feature is enabled
by default.  This option is provided for historical reasons only and
probably should not be used.
</p>
</dd>
<dt><code>--no-force</code></dt>
<dd><a name="index-_002d_002dno_002dforce"></a>
<p>Ordinarily <code>automake</code> creates all <samp>Makefile.in</samp>s mentioned in
<samp>configure.ac</samp>.  This option causes it to only update those
<samp>Makefile.in</samp>s that are out of date with respect to one of their
dependents.
</p>
</dd>
<dt><code>-o <var>dir</var></code></dt>
<dt><code>--output-dir=<var>dir</var></code></dt>
<dd><a name="index-_002do"></a>
<a name="index-_002d_002doutput_002ddir"></a>
<p>Put the generated <samp>Makefile.in</samp> in the directory <var>dir</var>.
Ordinarily each <samp>Makefile.in</samp> is created in the directory of the
corresponding <samp>Makefile.am</samp>.  This option is deprecated and will be
removed in a future release.
</p>
</dd>
<dt><code>-v</code></dt>
<dt><code>--verbose</code></dt>
<dd><a name="index-_002dv"></a>
<a name="index-_002d_002dverbose"></a>
<p>Cause Automake to print information about which files are being read or
created.
</p>
</dd>
<dt><code>--version</code></dt>
<dd><a name="index-_002d_002dversion"></a>
<p>Print the version number of Automake and exit.
</p>
</dd>
<dt><code>-W CATEGORY</code></dt>
<dt><code>--warnings=<var>category</var></code></dt>
<dd><a name="index-_002dW"></a>
<a name="index-_002d_002dwarnings"></a>
<p>Output warnings falling in <var>category</var>.  <var>category</var> can be
one of:
</p><dl compact="compact">
<dt><code>gnu</code></dt>
<dd><p>warnings related to the GNU Coding Standards
(see <cite><a href="http://www.gnu.org/prep/standards/standards.html#Top">The GNU Coding Standards</a></cite>).
</p></dd>
<dt><code>obsolete</code></dt>
<dd><p>obsolete features or constructions
</p></dd>
<dt><code>override</code></dt>
<dd><p>user redefinitions of Automake rules or variables
</p></dd>
<dt><code>portability</code></dt>
<dd><p>portability issues (e.g., use of <code>make</code> features that are
known to be not portable)
</p></dd>
<dt><code>extra-portability</code></dt>
<dd><p>extra portability issues related to obscure tools.  One example of such
a tool is the Microsoft <code>lib</code> archiver.
</p></dd>
<dt><code>syntax</code></dt>
<dd><p>weird syntax, unused variables, typos
</p></dd>
<dt><code>unsupported</code></dt>
<dd><p>unsupported or incomplete features
</p></dd>
<dt><code>all</code></dt>
<dd><p>all the warnings
</p></dd>
<dt><code>none</code></dt>
<dd><p>turn off all the warnings
</p></dd>
<dt><code>error</code></dt>
<dd><p>treat warnings as errors
</p></dd>
</dl>

<p>A category can be turned off by prefixing its name with &lsquo;<samp>no-</samp>&rsquo;.  For
instance, <samp>-Wno-syntax</samp> will hide the warnings about unused
variables.
</p>
<p>The categories output by default are &lsquo;<samp>obsolete</samp>&rsquo;, &lsquo;<samp>syntax</samp>&rsquo; and
&lsquo;<samp>unsupported</samp>&rsquo;.  Additionally, &lsquo;<samp>gnu</samp>&rsquo; and &lsquo;<samp>portability</samp>&rsquo;
are enabled in <samp>--gnu</samp> and <samp>--gnits</samp> strictness.
</p>
<p>Turning off &lsquo;<samp>portability</samp>&rsquo; will also turn off &lsquo;<samp>extra-portability</samp>&rsquo;,
and similarly turning on &lsquo;<samp>extra-portability</samp>&rsquo; will also turn on
&lsquo;<samp>portability</samp>&rsquo;.  However, turning on &lsquo;<samp>portability</samp>&rsquo; or turning
off &lsquo;<samp>extra-portability</samp>&rsquo; will not affect the other category.
</p>
<a name="index-WARNINGS"></a>
<p>The environment variable <code>WARNINGS</code> can contain a comma separated
list of categories to enable.  It will be taken into account before the
command-line switches, this way <samp>-Wnone</samp> will also ignore any
warning category enabled by <code>WARNINGS</code>.  This variable is also used
by other tools like <code>autoconf</code>; unknown categories are ignored
for this reason.
</p>
</dd>
</dl>

<a name="index-AUTOMAKE_005fJOBS"></a>
<p>If the environment variable <code>AUTOMAKE_JOBS</code> contains a positive
number, it is taken as the maximum number of Perl threads to use in
<code>automake</code> for generating multiple <samp>Makefile.in</samp> files
concurrently.  This is an experimental feature.
</p>

<hr>
<a name="configure"></a>
<div class="header">
<p>
Next: <a href="#Directories" accesskey="n" rel="next">Directories</a>, Previous: <a href="#automake-Invocation" accesskey="p" rel="prev">automake Invocation</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Scanning-configure_002eac_002c-using-aclocal"></a>
<h2 class="chapter">6 Scanning <samp>configure.ac</samp>, using <code>aclocal</code></h2>

<a name="index-configure_002eac_002c-scanning"></a>
<a name="index-Scanning-configure_002eac"></a>
<a name="index-Using-aclocal"></a>
<a name="index-aclocal_002c-using"></a>

<p>Automake scans the package&rsquo;s <samp>configure.ac</samp> to determine certain
information about the package.  Some <code>autoconf</code> macros are required
and some variables must be defined in <samp>configure.ac</samp>.  Automake
will also use information from <samp>configure.ac</samp> to further tailor its
output.
</p>
<p>Automake also supplies some Autoconf macros to make the maintenance
easier.  These macros can automatically be put into your
<samp>aclocal.m4</samp> using the <code>aclocal</code> program.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Requirements" accesskey="1">Requirements</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Configuration requirements
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Optional" accesskey="2">Optional</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Other things Automake recognizes
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#aclocal-Invocation" accesskey="3">aclocal Invocation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Auto-generating aclocal.m4
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Macros" accesskey="4">Macros</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Autoconf macros supplied with Automake
</td></tr>
</table>


<hr>
<a name="Requirements"></a>
<div class="header">
<p>
Next: <a href="#Optional" accesskey="n" rel="next">Optional</a>, Up: <a href="#configure" accesskey="u" rel="up">configure</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Configuration-requirements"></a>
<h3 class="section">6.1 Configuration requirements</h3>

<a name="index-Automake-requirements-1"></a>
<a name="index-Requirements-of-Automake"></a>

<a name="index-AM_005fINIT_005fAUTOMAKE"></a>
<p>The one real requirement of Automake is that your <samp>configure.ac</samp>
call <code>AM_INIT_AUTOMAKE</code>.  This macro does several things that are
required for proper Automake operation (see <a href="#Macros">Macros</a>).
</p>
<p>Here are the other macros that Automake requires but which are not run
by <code>AM_INIT_AUTOMAKE</code>:
</p>
<dl compact="compact">
<dt><code>AC_CONFIG_FILES</code></dt>
<dt><code>AC_OUTPUT</code></dt>
<dd><a name="index-AC_005fCONFIG_005fFILES"></a>
<a name="index-AC_005fOUTPUT"></a>
<p>These two macros are usually invoked as follows near the end of
<samp>configure.ac</samp>.
</p>
<div class="example">
<pre class="example">&hellip;
AC_CONFIG_FILES([
  Makefile
  doc/Makefile
  src/Makefile
  src/lib/Makefile
  &hellip;
])
AC_OUTPUT
</pre></div>

<p>Automake uses these to determine which files to create (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Output">Creating Output Files</a> in <cite>The Autoconf Manual</cite>).  A listed file
is considered to be an Automake generated <samp>Makefile</samp> if there
exists a file with the same name and the <samp>.am</samp> extension appended.
Typically, &lsquo;<samp>AC_CONFIG_FILES([foo/Makefile])</samp>&rsquo; will cause Automake to
generate <samp>foo/Makefile.in</samp> if <samp>foo/Makefile.am</samp> exists.
</p>
<p>When using <code>AC_CONFIG_FILES</code> with multiple input files, as in
</p>
<div class="example">
<pre class="example">AC_CONFIG_FILES([Makefile:top.in:Makefile.in:bot.in])
</pre></div>

<p><code>automake</code> will generate the first <samp>.in</samp> input file for
which a <samp>.am</samp> file exists.  If no such file exists the output
file is not considered to be generated by Automake.
</p>
<p>Files created by <code>AC_CONFIG_FILES</code>, be they Automake
<samp>Makefile</samp>s or not, are all removed by &lsquo;<samp>make distclean</samp>&rsquo;.
Their inputs are automatically distributed, unless they
are the output of prior <code>AC_CONFIG_FILES</code> commands.
Finally, rebuild rules are generated in the Automake <samp>Makefile</samp>
existing in the subdirectory of the output file, if there is one, or
in the top-level <samp>Makefile</samp> otherwise.
</p>
<p>The above machinery (cleaning, distributing, and rebuilding) works
fine if the <code>AC_CONFIG_FILES</code> specifications contain only
literals.  If part of the specification uses shell variables,
<code>automake</code> will not be able to fulfill this setup, and you will
have to complete the missing bits by hand.  For instance, on
</p>
<div class="example">
<pre class="example">file=input
&hellip;
AC_CONFIG_FILES([output:$file],, [file=$file])
</pre></div>

<p><code>automake</code> will output rules to clean <samp>output</samp>, and
rebuild it.  However the rebuild rule will not depend on <samp>input</samp>,
and this file will not be distributed either.  (You must add
&lsquo;<samp>EXTRA_DIST = input</samp>&rsquo; to your <samp>Makefile.am</samp> if <samp>input</samp> is a
source file.)
</p>
<p>Similarly
</p>
<div class="example">
<pre class="example">file=output
file2=out:in
&hellip;
AC_CONFIG_FILES([$file:input],, [file=$file])
AC_CONFIG_FILES([$file2],, [file2=$file2])
</pre></div>

<p>will only cause <samp>input</samp> to be distributed.  No file will be
cleaned automatically (add &lsquo;<samp>DISTCLEANFILES = output out</samp>&rsquo;
yourself), and no rebuild rule will be output.
</p>
<p>Obviously <code>automake</code> cannot guess what value &lsquo;<samp>$file</samp>&rsquo; is
going to hold later when <samp>configure</samp> is run, and it cannot use
the shell variable &lsquo;<samp>$file</samp>&rsquo; in a <samp>Makefile</samp>.  However, if you
make reference to &lsquo;<samp>$file</samp>&rsquo; as &lsquo;<samp>${file}</samp>&rsquo; (i.e., in a way
that is compatible with <code>make</code>&rsquo;s syntax) and furthermore use
<code>AC_SUBST</code> to ensure that &lsquo;<samp>${file}</samp>&rsquo; is meaningful in a
<samp>Makefile</samp>, then <code>automake</code> will be able to use
&lsquo;<samp>${file}</samp>&rsquo; to generate all of these rules.  For instance, here is
how the Automake package itself generates versioned scripts for its
test suite:
</p>
<div class="example">
<pre class="example">AC_SUBST([APIVERSION], &hellip;)
&hellip;
AC_CONFIG_FILES(
  [tests/aclocal-${APIVERSION}:tests/aclocal.in],
  [chmod +x tests/aclocal-${APIVERSION}],
  [APIVERSION=$APIVERSION])
AC_CONFIG_FILES(
  [tests/automake-${APIVERSION}:tests/automake.in],
  [chmod +x tests/automake-${APIVERSION}])
</pre></div>

<p>Here cleaning, distributing, and rebuilding are done automatically,
because &lsquo;<samp>${APIVERSION}</samp>&rsquo; is known at <code>make</code>-time.
</p>
<p>Note that you should not use shell variables to declare
<samp>Makefile</samp> files for which <code>automake</code> must create
<samp>Makefile.in</samp>.  Even <code>AC_SUBST</code> does not help here, because
<code>automake</code> needs to know the file name when it runs in order
to check whether <samp>Makefile.am</samp> exists.  (In the very hairy case
that your setup requires such use of variables, you will have to tell
Automake which <samp>Makefile.in</samp>s to generate on the command-line.)
</p>
<p>It is possible to let <code>automake</code> emit conditional rules for
<code>AC_CONFIG_FILES</code> with the help of <code>AM_COND_IF</code>
(see <a href="#Optional">Optional</a>).
</p>
<p>To summarize:
</p><ul>
<li> Use literals for <samp>Makefile</samp>s, and for other files whenever possible.
</li><li> Use &lsquo;<samp>$file</samp>&rsquo; (or &lsquo;<samp>${file}</samp>&rsquo; without &lsquo;<samp>AC_SUBST([file])</samp>&rsquo;)
for files that <code>automake</code> should ignore.
</li><li> Use &lsquo;<samp>${file}</samp>&rsquo; and &lsquo;<samp>AC_SUBST([file])</samp>&rsquo; for files
that <code>automake</code> should not ignore.
</li></ul>

</dd>
</dl>


<hr>
<a name="Optional"></a>
<div class="header">
<p>
Next: <a href="#aclocal-Invocation" accesskey="n" rel="next">aclocal Invocation</a>, Previous: <a href="#Requirements" accesskey="p" rel="prev">Requirements</a>, Up: <a href="#configure" accesskey="u" rel="up">configure</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Other-things-Automake-recognizes"></a>
<h3 class="section">6.2 Other things Automake recognizes</h3>

<a name="index-Macros-Automake-recognizes"></a>
<a name="index-Recognized-macros-by-Automake"></a>

<p>Every time Automake is run it calls Autoconf to trace
<samp>configure.ac</samp>.  This way it can recognize the use of certain
macros and tailor the generated <samp>Makefile.in</samp> appropriately.
Currently recognized macros and their effects are:
</p>
<dl compact="compact">
<dt><code>AC_CANONICAL_BUILD</code>
<a name="index-AC_005fCANONICAL_005fBUILD"></a>
</dt>
<dt><code>AC_CANONICAL_HOST</code>
<a name="index-AC_005fCANONICAL_005fHOST"></a>
</dt>
<dt><code>AC_CANONICAL_TARGET</code>
<a name="index-AC_005fCANONICAL_005fTARGET"></a>
</dt>
<dd><a name="index-build_005ftriplet"></a>
<a name="index-host_005ftriplet"></a>
<a name="index-target_005ftriplet"></a>
<p>Automake will ensure that <samp>config.guess</samp> and <samp>config.sub</samp>
exist.  Also, the <samp>Makefile</samp> variables <code>build_triplet</code>,
<code>host_triplet</code> and <code>target_triplet</code> are introduced.  See
<a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Canonicalizing">Getting the Canonical System Type</a> in <cite>The Autoconf Manual</cite>.
</p>
</dd>
<dt><code>AC_CONFIG_AUX_DIR</code>
<a name="index-AC_005fCONFIG_005fAUX_005fDIR-1"></a>
</dt>
<dd><p>Automake will look for various helper scripts, such as
<samp>install-sh</samp>, in the directory named in this macro invocation.
(The full list of scripts is:
<samp>ar-lib</samp>,
<samp>config.guess</samp>,
<samp>config.sub</samp>,
<samp>depcomp</samp>,
<samp>compile</samp>,
<samp>install-sh</samp>,
<samp>ltmain.sh</samp>,
<samp>mdate-sh</samp>,
<samp>missing</samp>,
<samp>mkinstalldirs</samp>,
<samp>py-compile</samp>,
<samp>test-driver</samp>,
<samp>texinfo.tex</samp>,
<samp>ylwrap</samp>.)
Not all scripts are always searched for; some scripts
will only be sought if the generated <samp>Makefile.in</samp> requires them.
</p>
<p>If <code>AC_CONFIG_AUX_DIR</code> is not given, the scripts are looked for in
their standard locations.  For <samp>mdate-sh</samp>,
<samp>texinfo.tex</samp>, and <samp>ylwrap</samp>, the standard location is the
source directory corresponding to the current <samp>Makefile.am</samp>.  For
the rest, the standard location is the first one of <samp>.</samp>, <samp>..</samp>,
or <samp>../..</samp> (relative to the top source directory) that provides any
one of the helper scripts.  See <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Input">Finding &lsquo;configure&rsquo; Input</a> in <cite>The Autoconf Manual</cite>.
</p>
<p>Required files from <code>AC_CONFIG_AUX_DIR</code> are automatically
distributed, even if there is no <samp>Makefile.am</samp> in this directory.
</p>
</dd>
<dt><code>AC_CONFIG_LIBOBJ_DIR</code>
<a name="index-AC_005fCONFIG_005fLIBOBJ_005fDIR-1"></a>
</dt>
<dd><p>Automake will require the sources file declared with
<code>AC_LIBSOURCE</code> (see below) in the directory specified by this
macro.
</p>
</dd>
<dt><code>AC_CONFIG_HEADERS</code>
<a name="index-AC_005fCONFIG_005fHEADERS"></a>
</dt>
<dd><p>Automake will generate rules to rebuild these headers from the
corresponding templates (usually, the template for a <samp>foo.h</samp>
header being <samp>foo.h.in</samp>).  Older versions of Automake
required the use of <code>AM_CONFIG_HEADER</code>; this is no longer
the case, and that macro has indeed been removed.
</p>
<p>As with <code>AC_CONFIG_FILES</code> (see <a href="#Requirements">Requirements</a>), parts of the
specification using shell variables will be ignored as far as
cleaning, distributing, and rebuilding is concerned.
</p>
</dd>
<dt><code>AC_CONFIG_LINKS</code>
<a name="index-AC_005fCONFIG_005fLINKS"></a>
</dt>
<dd><p>Automake will generate rules to remove <samp>configure</samp> generated
links on &lsquo;<samp>make distclean</samp>&rsquo; and to distribute named source files as
part of &lsquo;<samp>make dist</samp>&rsquo;.
</p>
<p>As for <code>AC_CONFIG_FILES</code> (see <a href="#Requirements">Requirements</a>), parts of the
specification using shell variables will be ignored as far as cleaning
and distributing is concerned.  (There are no rebuild rules for links.)
</p>
</dd>
<dt><code>AC_LIBOBJ</code>
<a name="index-AC_005fLIBOBJ-2"></a>
</dt>
<dt><code>AC_LIBSOURCE</code>
<a name="index-AC_005fLIBSOURCE-1"></a>
</dt>
<dt><code>AC_LIBSOURCES</code>
<a name="index-AC_005fLIBSOURCES"></a>
</dt>
<dd><a name="index-LIBOBJS"></a>
<p>Automake will automatically distribute any file listed in
<code>AC_LIBSOURCE</code> or <code>AC_LIBSOURCES</code>.
</p>
<p>Note that the <code>AC_LIBOBJ</code> macro calls <code>AC_LIBSOURCE</code>.  So if
an Autoconf macro is documented to call &lsquo;<samp>AC_LIBOBJ([file])</samp>&rsquo;, then
<samp>file.c</samp> will be distributed automatically by Automake.  This
encompasses many macros like <code>AC_FUNC_ALLOCA</code>,
<code>AC_FUNC_MEMCMP</code>, <code>AC_REPLACE_FUNCS</code>, and others.
</p>
<p>By the way, direct assignments to <code>LIBOBJS</code> are no longer
supported.  You should always use <code>AC_LIBOBJ</code> for this purpose.
See <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#AC_005fLIBOBJ-vs-LIBOBJS"><code>AC_LIBOBJ</code> vs. <code>LIBOBJS</code></a> in <cite>The Autoconf Manual</cite>.
</p>
</dd>
<dt><code>AC_PROG_RANLIB</code>
<a name="index-AC_005fPROG_005fRANLIB"></a>
</dt>
<dd><p>This is required if any libraries are built in the package.
See <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Particular-Programs">Particular Program Checks</a> in <cite>The
Autoconf Manual</cite>.
</p>
</dd>
<dt><code>AC_PROG_CXX</code>
<a name="index-AC_005fPROG_005fCXX"></a>
</dt>
<dd><p>This is required if any C++ source is included.  See <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Particular-Programs">Particular Program Checks</a> in <cite>The Autoconf Manual</cite>.
</p>
</dd>
<dt><code>AC_PROG_OBJC</code>
<a name="index-AC_005fPROG_005fOBJC"></a>
</dt>
<dd><p>This is required if any Objective C source is included.  See <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Particular-Programs">Particular Program Checks</a> in <cite>The Autoconf Manual</cite>.
</p>
</dd>
<dt><code>AC_PROG_OBJCXX</code>
<a name="index-AC_005fPROG_005fOBJCXX"></a>
</dt>
<dd><p>This is required if any Objective C++ source is included.  See <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Particular-Programs">Particular Program Checks</a> in <cite>The Autoconf Manual</cite>.
</p>
</dd>
<dt><code>AC_PROG_F77</code>
<a name="index-AC_005fPROG_005fF77"></a>
</dt>
<dd><p>This is required if any Fortran 77 source is included.  See <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Particular-Programs">Particular Program Checks</a> in <cite>The Autoconf Manual</cite>.
</p>
</dd>
<dt><code>AC_F77_LIBRARY_LDFLAGS</code>
<a name="index-AC_005fF77_005fLIBRARY_005fLDFLAGS"></a>
</dt>
<dd><p>This is required for programs and shared libraries that are a mixture of
languages that include Fortran 77 (see <a href="#Mixing-Fortran-77-With-C-and-C_002b_002b">Mixing Fortran 77 With C and C++</a>).  See <a href="#Macros">Autoconf macros supplied with Automake</a>.
</p>
</dd>
<dt><code>AC_FC_SRCEXT</code>
<a name="index-AC_005fFC_005fSRCEXT"></a>
</dt>
<dd><p>Automake will add the flags computed by <code>AC_FC_SRCEXT</code> to compilation
of files with the respective source extension (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Fortran-Compiler">Fortran Compiler Characteristics</a> in <cite>The Autoconf Manual</cite>).
</p>
</dd>
<dt><code>AC_PROG_FC</code>
<a name="index-AC_005fPROG_005fFC"></a>
</dt>
<dd><p>This is required if any Fortran 90/95 source is included.  This macro is
distributed with Autoconf version 2.58 and later.  See <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Particular-Programs">Particular Program Checks</a> in <cite>The Autoconf Manual</cite>.
</p>
</dd>
<dt><code>AC_PROG_LIBTOOL</code>
<a name="index-AC_005fPROG_005fLIBTOOL"></a>
</dt>
<dd><p>Automake will turn on processing for <code>libtool</code> (see <a href="http://www.gnu.org/software/libtool/manual/libtool.html#Top">Introduction</a> in <cite>The Libtool Manual</cite>).
</p>
</dd>
<dt><code>AC_PROG_YACC</code>
<a name="index-AC_005fPROG_005fYACC"></a>
</dt>
<dd><a name="index-YACC"></a>
<p>If a Yacc source file is seen, then you must either use this macro or
define the variable <code>YACC</code> in <samp>configure.ac</samp>.  The former is
preferred (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Particular-Programs">Particular Program Checks</a> in <cite>The Autoconf Manual</cite>).
</p>
</dd>
<dt><code>AC_PROG_LEX</code>
<a name="index-AC_005fPROG_005fLEX-1"></a>
</dt>
<dd><p>If a Lex source file is seen, then this macro must be used.
See <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Particular-Programs">Particular Program Checks</a> in <cite>The
Autoconf Manual</cite>.
</p>
</dd>
<dt><code>AC_REQUIRE_AUX_FILE</code>
<a name="index-AC_005fREQUIRE_005fAUX_005fFILE"></a>
</dt>
<dd><p>For each <code>AC_REQUIRE_AUX_FILE([<var>file</var>])</code>,
<code>automake</code> will ensure that <samp><var>file</var></samp> exists in the
aux directory, and will complain otherwise.  It
will also automatically distribute the file.  This macro should be
used by third-party Autoconf macros that require some supporting
files in the aux directory specified with <code>AC_CONFIG_AUX_DIR</code>
above.  See <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Input">Finding <code>configure</code> Input</a> in <cite>The Autoconf Manual</cite>.
</p>
</dd>
<dt><code>AC_SUBST</code>
<a name="index-AC_005fSUBST"></a>
</dt>
<dd><p>The first argument is automatically defined as a variable in each
generated <samp>Makefile.in</samp>, unless <code>AM_SUBST_NOTMAKE</code> is also
used for this variable.  See <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Setting-Output-Variables">Setting
Output Variables</a> in <cite>The Autoconf Manual</cite>.
</p>
<p>For every substituted variable <var>var</var>, <code>automake</code> will add
a line <code><var>var</var> = <var>value</var></code> to each <samp>Makefile.in</samp> file.
Many Autoconf macros invoke <code>AC_SUBST</code> to set output variables
this way, e.g., <code>AC_PATH_XTRA</code> defines <code>X_CFLAGS</code> and
<code>X_LIBS</code>.  Thus, you can access these variables as
<code>$(X_CFLAGS)</code> and <code>$(X_LIBS)</code> in any <samp>Makefile.am</samp>
if <code>AC_PATH_XTRA</code> is called.
</p>
</dd>
<dt><code>AM_CONDITIONAL</code>
<a name="index-AM_005fCONDITIONAL-1"></a>
</dt>
<dd><p>This introduces an Automake conditional (see <a href="#Conditionals">Conditionals</a>).
</p>
</dd>
<dt><code>AM_COND_IF</code>
<a name="index-AM_005fCOND_005fIF-1"></a>
</dt>
<dd><p>This macro allows <code>automake</code> to detect subsequent access within
<samp>configure.ac</samp> to a conditional previously introduced with
<code>AM_CONDITIONAL</code>, thus enabling conditional <code>AC_CONFIG_FILES</code>
(see <a href="#Usage-of-Conditionals">Usage of Conditionals</a>).
</p>
</dd>
<dt><code>AM_GNU_GETTEXT</code>
<a name="index-AM_005fGNU_005fGETTEXT"></a>
</dt>
<dd><p>This macro is required for packages that use GNU gettext
(see <a href="#gettext">gettext</a>).  It is distributed with gettext.  If Automake sees
this macro it ensures that the package meets some of gettext&rsquo;s
requirements.
</p>
</dd>
<dt><code>AM_GNU_GETTEXT_INTL_SUBDIR</code>
<a name="index-AM_005fGNU_005fGETTEXT_005fINTL_005fSUBDIR"></a>
</dt>
<dd><p>This macro specifies that the <samp>intl/</samp> subdirectory is to be built,
even if the <code>AM_GNU_GETTEXT</code> macro was invoked with a first argument
of &lsquo;<samp>external</samp>&rsquo;.
</p>
</dd>
<dt><code>AM_MAINTAINER_MODE(<span class="roman">[</span><var>default-mode</var><span class="roman">]</span>)</code>
<a name="index-AM_005fMAINTAINER_005fMODE_0028_005bdefault_002dmode_005d_0029"></a>
</dt>
<dd><a name="index-_002d_002denable_002dmaintainer_002dmode"></a>
<a name="index-_002d_002ddisable_002dmaintainer_002dmode"></a>
<p>This macro adds an <samp>--enable-maintainer-mode</samp> option to
<code>configure</code>.  If this is used, <code>automake</code> will cause
&ldquo;maintainer-only&rdquo; rules to be turned off by default in the
generated <samp>Makefile.in</samp>s, unless <var>default-mode</var> is
&lsquo;<samp>enable</samp>&rsquo;.  This macro defines the <code>MAINTAINER_MODE</code>
conditional, which you can use in your own <samp>Makefile.am</samp>.
See <a href="#maintainer_002dmode">maintainer-mode</a>.
</p>
</dd>
<dt><code>AM_SUBST_NOTMAKE(<var>var</var>)</code>
<a name="index-AM_005fSUBST_005fNOTMAKE_0028var_0029"></a>
</dt>
<dd><p>Prevent Automake from defining a variable <var>var</var>, even if it is
substituted by <code>config.status</code>.  Normally, Automake defines a
<code>make</code> variable for each <code>configure</code> substitution,
i.e., for each <code>AC_SUBST([<var>var</var>])</code>.  This macro prevents that
definition from Automake.  If <code>AC_SUBST</code> has not been called
for this variable, then <code>AM_SUBST_NOTMAKE</code> has no effects.
Preventing variable definitions may be useful for substitution of
multi-line values, where <code><var>var</var> = @<var>value</var>@</code> might yield
unintended results.
</p>
</dd>
<dt><code>m4_include</code>
<a name="index-m4_005finclude-1"></a>
</dt>
<dd><p>Files included by <samp>configure.ac</samp> using this macro will be
detected by Automake and automatically distributed.  They will also
appear as dependencies in <samp>Makefile</samp> rules.
</p>
<p><code>m4_include</code> is seldom used by <samp>configure.ac</samp> authors, but
can appear in <samp>aclocal.m4</samp> when <code>aclocal</code> detects that
some required macros come from files local to your package (as opposed to
macros installed in a system-wide directory, see <a href="#aclocal-Invocation">aclocal Invocation</a>).
</p>
</dd>
</dl>

<hr>
<a name="aclocal-Invocation"></a>
<div class="header">
<p>
Next: <a href="#Macros" accesskey="n" rel="next">Macros</a>, Previous: <a href="#Optional" accesskey="p" rel="prev">Optional</a>, Up: <a href="#configure" accesskey="u" rel="up">configure</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Auto_002dgenerating-aclocal_002em4"></a>
<h3 class="section">6.3 Auto-generating aclocal.m4</h3>
<a name="Invoking-aclocal"></a>
<a name="index-Invocation-of-aclocal"></a>
<a name="index-aclocal_002c-Invocation"></a>
<a name="index-Invoking-aclocal"></a>
<a name="index-aclocal_002c-Invoking"></a>

<p>Automake includes a number of Autoconf macros that can be used in
your package (see <a href="#Macros">Macros</a>); some of them are actually required by
Automake in certain situations.  These macros must be defined in your
<samp>aclocal.m4</samp>; otherwise they will not be seen by
<code>autoconf</code>.
</p>
<p>The <code>aclocal</code> program will automatically generate
<samp>aclocal.m4</samp> files based on the contents of <samp>configure.ac</samp>.
This provides a convenient way to get Automake-provided macros,
without having to search around.  The <code>aclocal</code> mechanism
allows other packages to supply their own macros (see <a href="#Extending-aclocal">Extending aclocal</a>).  You can also use it to maintain your own set of custom
macros (see <a href="#Local-Macros">Local Macros</a>).
</p>
<p>At startup, <code>aclocal</code> scans all the <samp>.m4</samp> files it can
find, looking for macro definitions (see <a href="#Macro-Search-Path">Macro Search Path</a>).  Then
it scans <samp>configure.ac</samp>.  Any mention of one of the macros found
in the first step causes that macro, and any macros it in turn
requires, to be put into <samp>aclocal.m4</samp>.
</p>
<p><em>Putting</em> the file that contains the macro definition into
<samp>aclocal.m4</samp> is usually done by copying the entire text of this
file, including unused macro definitions as well as both &lsquo;<samp>#</samp>&rsquo; and
&lsquo;<samp>dnl</samp>&rsquo; comments.  If you want to make a comment that will be
completely ignored by <code>aclocal</code>, use &lsquo;<samp>##</samp>&rsquo; as the comment
leader.
</p>
<p>When a file selected by <code>aclocal</code> is located in a subdirectory
specified as a relative search path with <code>aclocal</code>&rsquo;s <samp>-I</samp>
argument, <code>aclocal</code> assumes the file belongs to the package
and uses <code>m4_include</code> instead of copying it into
<samp>aclocal.m4</samp>.  This makes the package smaller, eases dependency
tracking, and cause the file to be distributed automatically.
(See <a href="#Local-Macros">Local Macros</a>, for an example.)  Any macro that is found in a
system-wide directory, or via an absolute search path will be copied.
So use &lsquo;<samp>-I `pwd`/reldir</samp>&rsquo; instead of &lsquo;<samp>-I reldir</samp>&rsquo; whenever
some relative directory should be considered outside the package.
</p>
<p>The contents of <samp>acinclude.m4</samp>, if this file exists, are also
automatically included in <samp>aclocal.m4</samp>.  We recommend against
using <samp>acinclude.m4</samp> in new packages (see <a href="#Local-Macros">Local Macros</a>).
</p>
<a name="index-AUTOM4TE"></a>
<a name="index-autom4te"></a>
<p>While computing <samp>aclocal.m4</samp>, <code>aclocal</code> runs
<code>autom4te</code> (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Using-autom4te">Using <code>Autom4te</code></a> in <cite>The Autoconf Manual</cite>) in order to trace the macros that are
really used, and omit from <samp>aclocal.m4</samp> all macros that are
mentioned but otherwise unexpanded (this can happen when a macro is
called conditionally).  <code>autom4te</code> is expected to be in the
<code>PATH</code>, just as <code>autoconf</code>.  Its location can be
overridden using the <code>AUTOM4TE</code> environment variable.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#aclocal-Options" accesskey="1">aclocal Options</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Options supported by aclocal
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Macro-Search-Path" accesskey="2">Macro Search Path</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How aclocal finds .m4 files
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Extending-aclocal" accesskey="3">Extending aclocal</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Writing your own aclocal macros
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Local-Macros" accesskey="4">Local Macros</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Organizing local macros
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Serials" accesskey="5">Serials</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Serial lines in Autoconf macros
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Future-of-aclocal" accesskey="6">Future of aclocal</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">aclocal&rsquo;s scheduled death
</td></tr>
</table>

<hr>
<a name="aclocal-Options"></a>
<div class="header">
<p>
Next: <a href="#Macro-Search-Path" accesskey="n" rel="next">Macro Search Path</a>, Up: <a href="#aclocal-Invocation" accesskey="u" rel="up">aclocal Invocation</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="aclocal-Options-1"></a>
<h4 class="subsection">6.3.1 aclocal Options</h4>

<a name="index-aclocal_002c-Options"></a>
<a name="index-Options_002c-aclocal"></a>

<p><code>aclocal</code> accepts the following options:
</p>
<dl compact="compact">
<dt><code>--automake-acdir=<var>dir</var></code></dt>
<dd><a name="index-_002d_002dautomake_002dacdir"></a>
<p>Look for the automake-provided macro files in <var>dir</var> instead of
in the installation directory.  This is typically used for debugging.
</p>
</dd>
<dt><code>--system-acdir=<var>dir</var></code></dt>
<dd><a name="index-_002d_002dsystem_002dacdir"></a>
<p>Look for the system-wide third-party macro files (and the special
<samp>dirlist</samp> file) in <var>dir</var> instead of in the installation
directory.  This is typically used for debugging.
</p>
</dd>
<dt><code>--diff[=<var>command</var>]</code></dt>
<dd><a name="index-_002d_002ddiff"></a>
<p>Run <var>command</var> on M4 file that would be installed or overwritten
by <samp>--install</samp>.  The default <var>command</var> is &lsquo;<samp>diff -u</samp>&rsquo;.
This option implies <samp>--install</samp> and <samp>--dry-run</samp>.
</p>
</dd>
<dt><code>--dry-run</code></dt>
<dd><a name="index-_002d_002ddry_002drun"></a>
<p>Do not actually overwrite (or create) <samp>aclocal.m4</samp> and M4
files installed by <samp>--install</samp>.
</p>
</dd>
<dt><code>--help</code></dt>
<dd><a name="index-_002d_002dhelp-1"></a>
<p>Print a summary of the command line options and exit.
</p>
</dd>
<dt><code>-I <var>dir</var></code></dt>
<dd><a name="index-_002dI"></a>
<p>Add the directory <var>dir</var> to the list of directories searched for
<samp>.m4</samp> files.
</p>
</dd>
<dt><code>--install</code></dt>
<dd><a name="index-_002d_002dinstall"></a>
<p>Install system-wide third-party macros into the first directory
specified with &lsquo;<samp>-I <var>dir</var></samp>&rsquo; instead of copying them in the
output file.
Note that this will happen also if <var>dir</var> is an absolute path.
</p>
<a name="index-serial-number-and-_002d_002dinstall"></a>
<p>When this option is used, and only when this option is used,
<code>aclocal</code> will also honor &lsquo;<samp>#serial <var>number</var></samp>&rsquo; lines
that appear in macros: an M4 file is ignored if there exists another
M4 file with the same basename and a greater serial number in the
search path (see <a href="#Serials">Serials</a>).
</p>
</dd>
<dt><code>--force</code></dt>
<dd><a name="index-_002d_002dforce"></a>
<p>Always overwrite the output file.  The default is to overwrite the output
file only when really needed, i.e., when its contents changes or if one
of its dependencies is younger.
</p>
<p>This option forces the update of <samp>aclocal.m4</samp> (or the file
specified with <samp>--output</samp> below) and only this file, it has
absolutely no influence on files that may need to be installed by
<samp>--install</samp>.
</p>
</dd>
<dt><code>--output=<var>file</var></code></dt>
<dd><a name="index-_002d_002doutput"></a>
<p>Cause the output to be put into <var>file</var> instead of <samp>aclocal.m4</samp>.
</p>
</dd>
<dt><code>--print-ac-dir</code></dt>
<dd><a name="index-_002d_002dprint_002dac_002ddir"></a>
<p>Prints the name of the directory that <code>aclocal</code> will search to
find third-party <samp>.m4</samp> files.  When this option is given, normal
processing is suppressed.  This option was used <em>in the past</em> by
third-party packages to determine where to install <samp>.m4</samp> macro
files, but <em>this usage is today discouraged</em>, since it causes
&lsquo;<samp>$(prefix)</samp>&rsquo; not to be thoroughly honored (which violates the
GNU Coding Standards), and a similar semantics can be better obtained
with the <code>ACLOCAL_PATH</code> environment variable; see <a href="#Extending-aclocal">Extending aclocal</a>.
</p>
</dd>
<dt><code>--verbose</code></dt>
<dd><a name="index-_002d_002dverbose-1"></a>
<p>Print the names of the files it examines.
</p>
</dd>
<dt><code>--version</code></dt>
<dd><a name="index-_002d_002dversion-1"></a>
<p>Print the version number of Automake and exit.
</p>
</dd>
<dt><code>-W CATEGORY</code></dt>
<dt><code>--warnings=<var>category</var></code></dt>
<dd><a name="index-_002dW-1"></a>
<a name="index-_002d_002dwarnings-1"></a>
<p>Output warnings falling in <var>category</var>.  <var>category</var> can be
one of:
</p><dl compact="compact">
<dt><code>syntax</code></dt>
<dd><p>dubious syntactic constructs, underquoted macros, unused macros, etc.
</p></dd>
<dt><code>unsupported</code></dt>
<dd><p>unknown macros
</p></dd>
<dt><code>all</code></dt>
<dd><p>all the warnings, this is the default
</p></dd>
<dt><code>none</code></dt>
<dd><p>turn off all the warnings
</p></dd>
<dt><code>error</code></dt>
<dd><p>treat warnings as errors
</p></dd>
</dl>

<p>All warnings are output by default.
</p>
<a name="index-WARNINGS-1"></a>
<p>The environment variable <code>WARNINGS</code> is honored in the same
way as it is for <code>automake</code> (see <a href="#automake-Invocation">automake Invocation</a>).
</p>
</dd>
</dl>

<hr>
<a name="Macro-Search-Path"></a>
<div class="header">
<p>
Next: <a href="#Extending-aclocal" accesskey="n" rel="next">Extending aclocal</a>, Previous: <a href="#aclocal-Options" accesskey="p" rel="prev">aclocal Options</a>, Up: <a href="#aclocal-Invocation" accesskey="u" rel="up">aclocal Invocation</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Macro-Search-Path-1"></a>
<h4 class="subsection">6.3.2 Macro Search Path</h4>

<a name="index-Macro-search-path"></a>
<a name="index-aclocal-search-path"></a>

<p>By default, <code>aclocal</code> searches for <samp>.m4</samp> files in the following
directories, in this order:
</p>
<dl compact="compact">
<dt><code><var>acdir-APIVERSION</var></code></dt>
<dd><p>This is where the <samp>.m4</samp> macros distributed with Automake itself
are stored.  <var>APIVERSION</var> depends on the Automake release used;
for example, for Automake 1.11.x, <var>APIVERSION</var> = <code>1.11</code>.
</p>
</dd>
<dt><code><var>acdir</var></code></dt>
<dd><p>This directory is intended for third party <samp>.m4</samp> files, and is
configured when <code>automake</code> itself is built.  This is
<samp>@datadir@/aclocal/</samp>, which typically
expands to <samp>${prefix}/share/aclocal/</samp>.  To find the compiled-in
value of <var>acdir</var>, use the <samp>--print-ac-dir</samp> option
(see <a href="#aclocal-Options">aclocal Options</a>).
</p></dd>
</dl>

<p>As an example, suppose that <code>automake-1.11.2</code> was configured with
<samp>--prefix=/usr/local</samp>.  Then, the search path would be:
</p>
<ol>
<li> <samp>/usr/local/share/aclocal-1.11.2/</samp>
</li><li> <samp>/usr/local/share/aclocal/</samp>
</li></ol>

<p>The paths for the <var>acdir</var> and <var>acdir-APIVERSION</var> directories can
be changed respectively through aclocal options <samp>--system-acdir</samp>
and <samp>--automake-acdir</samp> (see <a href="#aclocal-Options">aclocal Options</a>).  Note however
that these options are only intended for use by the internal Automake
test suite, or for debugging under highly unusual situations; they are
not ordinarily needed by end-users.
</p>
<p>As explained in (see <a href="#aclocal-Options">aclocal Options</a>), there are several options that
can be used to change or extend this search path.
</p>
<a name="Modifying-the-Macro-Search-Path_003a-_002dI-dir"></a>
<h4 class="subsubheading">Modifying the Macro Search Path: &lsquo;<samp>-I <var>dir</var></samp>&rsquo;</h4>

<p>Any extra directories specified using <samp>-I</samp> options
(see <a href="#aclocal-Options">aclocal Options</a>) are <em>prepended</em> to this search list.  Thus,
&lsquo;<samp>aclocal -I /foo -I /bar</samp>&rsquo; results in the following search path:
</p>
<ol>
<li> <samp>/foo</samp>
</li><li> <samp>/bar</samp>
</li><li> <var>acdir</var>-<var>APIVERSION</var>
</li><li> <var>acdir</var>
</li></ol>

<a name="Modifying-the-Macro-Search-Path_003a-dirlist"></a>
<h4 class="subsubheading">Modifying the Macro Search Path: <samp>dirlist</samp></h4>
<a name="index-dirlist"></a>

<p>There is a third mechanism for customizing the search path.  If a
<samp>dirlist</samp> file exists in <var>acdir</var>, then that file is assumed to
contain a list of directory patterns, one per line.  <code>aclocal</code>
expands these patterns to directory names, and adds them to the search
list <em>after</em> all other directories.  <samp>dirlist</samp> entries may
use shell wildcards such as &lsquo;<samp>*</samp>&rsquo;, &lsquo;<samp>?</samp>&rsquo;, or <code>[...]</code>.
</p>
<p>For example, suppose
<samp><var>acdir</var>/dirlist</samp> contains the following:
</p>
<div class="example">
<pre class="example">/test1
/test2
/test3*
</pre></div>

<p>and that <code>aclocal</code> was called with the &lsquo;<samp>-I /foo -I /bar</samp>&rsquo; options.
Then, the search path would be
</p>
<ol>
<li> <code>/foo</code>
</li><li> <code>/bar</code>
</li><li> <var>acdir</var>-<var>APIVERSION</var>
</li><li> <var>acdir</var>
</li><li> <code>/test1</code>
</li><li> <code>/test2</code>
</li></ol>

<p>and all directories with path names starting with <code>/test3</code>.
</p>
<p>If the <samp>--system-acdir=<var>dir</var></samp> option is used, then
<code>aclocal</code> will search for the <samp>dirlist</samp> file in
<var>dir</var>; but remember the warnings  above against the use of
<samp>--system-acdir</samp>.
</p>
<p><samp>dirlist</samp> is useful in the following situation: suppose that
<code>automake</code> version <code>1.11.2</code> is installed with
&lsquo;<samp>--prefix=/usr</samp>&rsquo; by the system vendor.  Thus, the default search
directories are
</p>
<ol>
<li> <code>/usr/share/aclocal-1.11/</code>
</li><li> <code>/usr/share/aclocal/</code>
</li></ol>

<p>However, suppose further that many packages have been manually
installed on the system, with $prefix=/usr/local, as is typical.  In
that case, many of these &ldquo;extra&rdquo; <samp>.m4</samp> files are in
<samp>/usr/local/share/aclocal</samp>.  The only way to force
<samp>/usr/bin/aclocal</samp> to find these &ldquo;extra&rdquo; <samp>.m4</samp> files is to
always call &lsquo;<samp>aclocal -I /usr/local/share/aclocal</samp>&rsquo;.  This is
inconvenient.  With <samp>dirlist</samp>, one may create a file
<samp>/usr/share/aclocal/dirlist</samp> containing only the single line
</p>
<div class="example">
<pre class="example">/usr/local/share/aclocal
</pre></div>

<p>Now, the &ldquo;default&rdquo; search path on the affected system is
</p>
<ol>
<li> <code>/usr/share/aclocal-1.11/</code>
</li><li> <code>/usr/share/aclocal/</code>
</li><li> <code>/usr/local/share/aclocal/</code>
</li></ol>

<p>without the need for <samp>-I</samp> options; <samp>-I</samp> options can be reserved
for project-specific needs (<samp>my-source-dir/m4/</samp>), rather than
using it to work around local system-dependent tool installation
directories.
</p>
<p>Similarly, <samp>dirlist</samp> can be handy if you have installed a local
copy of Automake in your account and want <code>aclocal</code> to look for
macros installed at other places on the system.
</p>
<a name="ACLOCAL_005fPATH"></a><a name="Modifying-the-Macro-Search-Path_003a-ACLOCAL_005fPATH"></a>
<h4 class="subsubheading">Modifying the Macro Search Path: <samp>ACLOCAL_PATH</samp></h4>
<a name="index-ACLOCAL_005fPATH"></a>

<p>The fourth and last mechanism to customize the macro search path is
also the simplest.  Any directory included in the colon-separated
environment variable <code>ACLOCAL_PATH</code> is added to the search path
and takes precedence over system directories (including those found via
<samp>dirlist</samp>), with the exception of the versioned directory
<var>acdir-APIVERSION</var> (see <a href="#Macro-Search-Path">Macro Search Path</a>).  However, directories
passed via <samp>-I</samp> will take precedence over directories in
<code>ACLOCAL_PATH</code>.
</p>
<p>Also note that, if the <samp>--install</samp> option is used, any <samp>.m4</samp>
file containing a required macro that is found in a directory listed in
<code>ACLOCAL_PATH</code> will be installed locally.
In this case, serial numbers in <samp>.m4</samp> are honored too,
see <a href="#Serials">Serials</a>.
</p>
<p>Conversely to <samp>dirlist</samp>, <code>ACLOCAL_PATH</code> is useful if you are
using a global copy of Automake and want <code>aclocal</code> to look for
macros somewhere under your home directory.
</p>
<a name="Planned-future-incompatibilities"></a>
<h4 class="subsubheading">Planned future incompatibilities</h4>

<p>The order in which the directories in the macro search path are currently
looked up is confusing and/or suboptimal in various aspects, and is
probably going to be changed in the future Automake release.  In
particular, directories in <code>ACLOCAL_PATH</code> and <samp><var>acdir</var></samp>
might end up taking precedence over <samp><var>acdir-APIVERSION</var></samp>, and
directories in <samp><var>acdir</var>/dirlist</samp> might end up taking precedence
over <samp><var>acdir</var></samp>.  <em>This is a possible future incompatibility!</em>
</p>
<hr>
<a name="Extending-aclocal"></a>
<div class="header">
<p>
Next: <a href="#Local-Macros" accesskey="n" rel="next">Local Macros</a>, Previous: <a href="#Macro-Search-Path" accesskey="p" rel="prev">Macro Search Path</a>, Up: <a href="#aclocal-Invocation" accesskey="u" rel="up">aclocal Invocation</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Writing-your-own-aclocal-macros"></a>
<h4 class="subsection">6.3.3 Writing your own aclocal macros</h4>

<a name="index-aclocal_002c-extending"></a>
<a name="index-Extending-aclocal"></a>

<p>The <code>aclocal</code> program doesn&rsquo;t have any built-in knowledge of any
macros, so it is easy to extend it with your own macros.
</p>
<p>This can be used by libraries that want to supply their own Autoconf
macros for use by other programs.  For instance, the <code>gettext</code>
library supplies a macro <code>AM_GNU_GETTEXT</code> that should be used by
any package using <code>gettext</code>.  When the library is installed, it
installs this macro so that <code>aclocal</code> will find it.
</p>
<p>A macro file&rsquo;s name should end in <samp>.m4</samp>.  Such files should be
installed in <samp>$(datadir)/aclocal</samp>.  This is as simple as writing:
</p>
<div class="example">
<pre class="example">aclocaldir = $(datadir)/aclocal
aclocal_DATA = mymacro.m4 myothermacro.m4
</pre></div>

<p>Please do use <samp>$(datadir)/aclocal</samp>, and not something based on
the result of &lsquo;<samp>aclocal --print-ac-dir</samp>&rsquo; (see <a href="#Hard_002dCoded-Install-Paths">Hard-Coded Install Paths</a>, for arguments).  It might also be helpful to suggest to
the user to add the <samp>$(datadir)/aclocal</samp> directory to his
<code>ACLOCAL_PATH</code> variable (see <a href="#ACLOCAL_005fPATH">ACLOCAL_PATH</a>) so that
<code>aclocal</code> will find the <samp>.m4</samp> files installed by your
package automatically.
</p>
<p>A file of macros should be a series of properly quoted
<code>AC_DEFUN</code>&rsquo;s (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Macro-Definitions">Macro Definitions</a> in <cite>The
Autoconf Manual</cite>).  The <code>aclocal</code> programs also understands
<code>AC_REQUIRE</code> (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Prerequisite-Macros">Prerequisite Macros</a> in <cite>The
Autoconf Manual</cite>), so it is safe to put each macro in a separate file.
Each file should have no side effects but macro definitions.
Especially, any call to <code>AC_PREREQ</code> should be done inside the
defined macro, not at the beginning of the file.
</p>
<a name="index-underquoted-AC_005fDEFUN"></a>
<a name="index-AC_005fDEFUN"></a>
<a name="index-AC_005fPREREQ"></a>

<p>Starting with Automake 1.8, <code>aclocal</code> will warn about all
underquoted calls to <code>AC_DEFUN</code>.  We realize this will annoy a
lot of people, because <code>aclocal</code> was not so strict in the past
and many third party macros are underquoted; and we have to apologize
for this temporary inconvenience.  The reason we have to be stricter
is that a future implementation of <code>aclocal</code> (see <a href="#Future-of-aclocal">Future of aclocal</a>) will have to temporarily include all of these third party
<samp>.m4</samp> files, maybe several times, including even files that are
not actually needed.  Doing so should alleviate many problems of the
current implementation, however it requires a stricter style from the
macro authors.  Hopefully it is easy to revise the existing macros.
For instance,
</p>
<div class="example">
<pre class="example"># bad style
AC_PREREQ(2.68)
AC_DEFUN(AX_FOOBAR,
[AC_REQUIRE([AX_SOMETHING])dnl
AX_FOO
AX_BAR
])
</pre></div>

<p>should be rewritten as
</p>
<div class="example">
<pre class="example">AC_DEFUN([AX_FOOBAR],
[AC_PREREQ([2.68])dnl
AC_REQUIRE([AX_SOMETHING])dnl
AX_FOO
AX_BAR
])
</pre></div>

<p>Wrapping the <code>AC_PREREQ</code> call inside the macro ensures that
Autoconf 2.68 will not be required if <code>AX_FOOBAR</code> is not actually
used.  Most importantly, quoting the first argument of <code>AC_DEFUN</code>
allows the macro to be redefined or included twice (otherwise this
first argument would be expanded during the second definition).  For
consistency we like to quote even arguments such as <code>2.68</code> that
do not require it.
</p>
<p>If you have been directed here by the <code>aclocal</code> diagnostic but
are not the maintainer of the implicated macro, you will want to
contact the maintainer of that macro.  Please make sure you have the
latest version of the macro and that the problem hasn&rsquo;t already been
reported before doing so: people tend to work faster when they aren&rsquo;t
flooded by mails.
</p>
<p>Another situation where <code>aclocal</code> is commonly used is to
manage macros that are used locally by the package, <a href="#Local-Macros">Local Macros</a>.
</p>
<hr>
<a name="Local-Macros"></a>
<div class="header">
<p>
Next: <a href="#Serials" accesskey="n" rel="next">Serials</a>, Previous: <a href="#Extending-aclocal" accesskey="p" rel="prev">Extending aclocal</a>, Up: <a href="#aclocal-Invocation" accesskey="u" rel="up">aclocal Invocation</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Handling-Local-Macros"></a>
<h4 class="subsection">6.3.4 Handling Local Macros</h4>

<p>Feature tests offered by Autoconf do not cover all needs.  People
often have to supplement existing tests with their own macros, or
with third-party macros.
</p>
<p>There are two ways to organize custom macros in a package.
</p>
<p>The first possibility (the historical practice) is to list all your
macros in <samp>acinclude.m4</samp>.  This file will be included in
<samp>aclocal.m4</samp> when you run <code>aclocal</code>, and its macro(s) will
henceforth be visible to <code>autoconf</code>.  However if it contains
numerous macros, it will rapidly become difficult to maintain, and it
will be almost impossible to share macros between packages.
</p>
<p>The second possibility, which we do recommend, is to write each macro
in its own file and gather all these files in a directory.  This
directory is usually called <samp>m4/</samp>.  Then it&rsquo;s enough to update
<samp>configure.ac</samp> by adding a proper call to <code>AC_CONFIG_MACRO_DIRS</code>:
</p>
<div class="example">
<pre class="example">AC_CONFIG_MACRO_DIRS([m4])
</pre></div>

<p><code>aclocal</code> will then take care of automatically adding <samp>m4/</samp>
to its search path for m4 files.
</p>
<p>When &lsquo;<samp>aclocal</samp>&rsquo; is run, it will build an <samp>aclocal.m4</samp>
that <code>m4_include</code>s any file from <samp>m4/</samp> that defines a
required macro.  Macros not found locally will still be searched in
system-wide directories, as explained in <a href="#Macro-Search-Path">Macro Search Path</a>.
</p>
<p>Custom macros should be distributed for the same reason that
<samp>configure.ac</samp> is: so that other people have all the sources of
your package if they want to work on it.  Actually, this distribution
happens automatically because all <code>m4_include</code>d files are
distributed.
</p>
<p>However there is no consensus on the distribution of third-party
macros that your package may use.  Many libraries install their own
macro in the system-wide <code>aclocal</code> directory (see <a href="#Extending-aclocal">Extending aclocal</a>).  For instance, Guile ships with a file called
<samp>guile.m4</samp> that contains the macro <code>GUILE_FLAGS</code> that can
be used to define setup compiler and linker flags appropriate for
using Guile.  Using <code>GUILE_FLAGS</code> in <samp>configure.ac</samp> will
cause <code>aclocal</code> to copy <samp>guile.m4</samp> into
<samp>aclocal.m4</samp>, but as <samp>guile.m4</samp> is not part of the project,
it will not be distributed.  Technically, that means a user who
needs to rebuild <samp>aclocal.m4</samp> will have to install Guile first.
This is probably OK, if Guile already is a requirement to build the
package.  However, if Guile is only an optional feature, or if your
package might run on architectures where Guile cannot be installed,
this requirement will hinder development.  An easy solution is to copy
such third-party macros in your local <samp>m4/</samp> directory so they get
distributed.
</p>
<p>Since Automake 1.10, <code>aclocal</code> offers the option <code>--install</code>
to copy these system-wide third-party macros in your local macro directory,
helping to solve the above problem.
</p>
<p>With this setup, system-wide macros will be copied to <samp>m4/</samp>
the first time you run <code>aclocal</code>.  Then the locally installed
macros will have precedence over the system-wide installed macros
each time <code>aclocal</code> is run again.
</p>
<p>One reason why you should keep <samp>--install</samp> in the flags even
after the first run is that when you later edit <samp>configure.ac</samp>
and depend on a new macro, this macro will be installed in your
<samp>m4/</samp> automatically.  Another one is that serial numbers
(see <a href="#Serials">Serials</a>) can be used to update the macros in your source tree
automatically when new system-wide versions are installed.  A serial
number should be a single line of the form
</p>
<div class="example">
<pre class="example">#serial <var>nnn</var>
</pre></div>

<p>where <var>nnn</var> contains only digits and dots.  It should appear in
the M4 file before any macro definition.  It is a good practice to
maintain a serial number for each macro you distribute, even if you do
not use the <samp>--install</samp> option of <code>aclocal</code>: this allows
other people to use it.
</p>

<hr>
<a name="Serials"></a>
<div class="header">
<p>
Next: <a href="#Future-of-aclocal" accesskey="n" rel="next">Future of aclocal</a>, Previous: <a href="#Local-Macros" accesskey="p" rel="prev">Local Macros</a>, Up: <a href="#aclocal-Invocation" accesskey="u" rel="up">aclocal Invocation</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Serial-Numbers"></a>
<h4 class="subsection">6.3.5 Serial Numbers</h4>
<a name="index-serial-numbers-in-macros"></a>
<a name="index-macro-serial-numbers"></a>
<a name="index-_0023serial-syntax"></a>
<a name="index-aclocal-and-serial-numbers"></a>

<p>Because third-party macros defined in <samp>*.m4</samp> files are naturally
shared between multiple projects, some people like to version them.
This makes it easier to tell which of two M4 files is newer.  Since at
least 1996, the tradition is to use a &lsquo;<samp>#serial</samp>&rsquo; line for this.
</p>
<p>A serial number should be a single line of the form
</p>
<div class="example">
<pre class="example"># serial <var>version</var>
</pre></div>

<p>where <var>version</var> is a version number containing only digits and
dots.  Usually people use a single integer, and they increment it each
time they change the macro (hence the name of &ldquo;serial&rdquo;).  Such a
line should appear in the M4 file before any macro definition.
</p>
<p>The &lsquo;<samp>#</samp>&rsquo; must be the first character on the line,
and it is OK to have extra words after the version, as in
</p>
<div class="example">
<pre class="example">#serial <var>version</var> <var>garbage</var>
</pre></div>

<p>Normally these serial numbers are completely ignored by
<code>aclocal</code> and <code>autoconf</code>, like any genuine comment.
However when using <code>aclocal</code>&rsquo;s <samp>--install</samp> feature, these
serial numbers will modify the way <code>aclocal</code> selects the
macros to install in the package: if two files with the same basename
exist in your search path, and if at least one of them uses a
&lsquo;<samp>#serial</samp>&rsquo; line, <code>aclocal</code> will ignore the file that has
the older &lsquo;<samp>#serial</samp>&rsquo; line (or the file that has none).
</p>
<p>Note that a serial number applies to a whole M4 file, not to any macro
it contains.  A file can contains multiple macros, but only one
serial.
</p>
<p>Here is a use case that illustrates the use of <samp>--install</samp> and
its interaction with serial numbers.  Let&rsquo;s assume we maintain a
package called MyPackage, the <samp>configure.ac</samp> of which requires a
third-party macro <code>AX_THIRD_PARTY</code> defined in
<samp>/usr/share/aclocal/thirdparty.m4</samp> as follows:
</p>
<div class="example">
<pre class="example"># serial 1
AC_DEFUN([AX_THIRD_PARTY], [...])
</pre></div>

<p>MyPackage uses an <samp>m4/</samp> directory to store local macros as
explained in <a href="#Local-Macros">Local Macros</a>, and has
</p>
<div class="example">
<pre class="example">AC_CONFIG_MACRO_DIRS([m4])
</pre></div>

<p>in its <samp>configure.ac</samp>.
</p>
<p>Initially the <samp>m4/</samp> directory is empty.  The first time we run
<code>aclocal --install</code>, it will notice that
</p>
<ul>
<li> <samp>configure.ac</samp> uses <code>AX_THIRD_PARTY</code>
</li><li> No local macros define <code>AX_THIRD_PARTY</code>
</li><li> <samp>/usr/share/aclocal/thirdparty.m4</samp> defines <code>AX_THIRD_PARTY</code>
with serial 1.
</li></ul>

<p>Because <samp>/usr/share/aclocal/thirdparty.m4</samp> is a system-wide macro
and <code>aclocal</code> was given the <samp>--install</samp> option, it will
copy this file in <samp>m4/thirdparty.m4</samp>, and output an
<samp>aclocal.m4</samp> that contains &lsquo;<samp>m4_include([m4/thirdparty.m4])</samp>&rsquo;.
</p>
<p>The next time &lsquo;<samp>aclocal --install</samp>&rsquo; is run, something different
happens.  <code>aclocal</code> notices that
</p>
<ul>
<li> <samp>configure.ac</samp> uses <code>AX_THIRD_PARTY</code>
</li><li> <samp>m4/thirdparty.m4</samp> defines <code>AX_THIRD_PARTY</code>
with serial 1.
</li><li> <samp>/usr/share/aclocal/thirdparty.m4</samp> defines <code>AX_THIRD_PARTY</code>
with serial 1.
</li></ul>

<p>Because both files have the same serial number, <code>aclocal</code> uses
the first it found in its search path order (see <a href="#Macro-Search-Path">Macro Search Path</a>).  <code>aclocal</code> therefore ignores
<samp>/usr/share/aclocal/thirdparty.m4</samp> and outputs an
<samp>aclocal.m4</samp> that contains &lsquo;<samp>m4_include([m4/thirdparty.m4])</samp>&rsquo;.
</p>
<p>Local directories specified with <samp>-I</samp> are always searched before
system-wide directories, so a local file will always be preferred to
the system-wide file in case of equal serial numbers.
</p>
<p>Now suppose the system-wide third-party macro is changed.  This can
happen if the package installing this macro is updated.  Let&rsquo;s suppose
the new macro has serial number 2.  The next time &lsquo;<samp>aclocal --install</samp>&rsquo;
is run the situation is the following:
</p>
<ul>
<li> <samp>configure.ac</samp> uses <code>AX_THIRD_PARTY</code>
</li><li> <samp>m4/thirdparty.m4</samp> defines <code>AX_THIRD_PARTY</code>
with serial 1.
</li><li> <samp>/usr/share/aclocal/thirdparty.m4</samp> defines <code>AX_THIRD_PARTY</code>
with serial 2.
</li></ul>

<p>When <code>aclocal</code> sees a greater serial number, it immediately
forgets anything it knows from files that have the same basename and a
smaller serial number.  So after it has found
<samp>/usr/share/aclocal/thirdparty.m4</samp> with serial 2,
<code>aclocal</code> will proceed as if it had never seen
<samp>m4/thirdparty.m4</samp>.  This brings us back to a situation similar
to that at the beginning of our example, where no local file defined
the macro.  <code>aclocal</code> will install the new version of the
macro in <samp>m4/thirdparty.m4</samp>, in this case overriding the old
version.  MyPackage just had its macro updated as a side effect of
running <code>aclocal</code>.
</p>
<p>If you are leery of letting <code>aclocal</code> update your local
macro, you can run &lsquo;<samp>aclocal --diff</samp>&rsquo; to review the changes
&lsquo;<samp>aclocal --install</samp>&rsquo; would perform on these macros.
</p>
<p>Finally, note that the <samp>--force</samp> option of <code>aclocal</code> has
absolutely no effect on the files installed by <samp>--install</samp>.  For
instance, if you have modified your local macros, do not expect
<samp>--install --force</samp> to replace the local macros by their
system-wide versions.  If you want to do so, simply erase the local
macros you want to revert, and run &lsquo;<samp>aclocal --install</samp>&rsquo;.
</p>

<hr>
<a name="Future-of-aclocal"></a>
<div class="header">
<p>
Previous: <a href="#Serials" accesskey="p" rel="prev">Serials</a>, Up: <a href="#aclocal-Invocation" accesskey="u" rel="up">aclocal Invocation</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="The-Future-of-aclocal"></a>
<h4 class="subsection">6.3.6 The Future of <code>aclocal</code></h4>
<a name="index-aclocal_0027s-scheduled-death"></a>

<p><code>aclocal</code> is expected to disappear.  This feature really
should not be offered by Automake.  Automake should focus on
generating <samp>Makefile</samp>s; dealing with M4 macros really is
Autoconf&rsquo;s job.  The fact that some people install Automake just to use
<code>aclocal</code>, but do not use <code>automake</code> otherwise is an
indication of how that feature is misplaced.
</p>
<p>The new implementation will probably be done slightly differently.
For instance, it could enforce the <samp>m4/</samp>-style layout discussed in
<a href="#Local-Macros">Local Macros</a>.
</p>
<p>We have no idea when and how this will happen.  This has been
discussed several times in the past, but someone still has to commit
to that non-trivial task.
</p>
<p>From the user point of view, <code>aclocal</code>&rsquo;s removal might turn
out to be painful.  There is a simple precaution that you may take to
make that switch more seamless: never call <code>aclocal</code> yourself.
Keep this guy under the exclusive control of <code>autoreconf</code> and
Automake&rsquo;s rebuild rules.  Hopefully you won&rsquo;t need to worry about
things breaking, when <code>aclocal</code> disappears, because everything
will have been taken care of.  If otherwise you used to call
<code>aclocal</code> directly yourself or from some script, you will
quickly notice the change.
</p>
<p>Many packages come with a script called <samp>bootstrap.sh</samp> or
<samp>autogen.sh</samp>, that will just call <code>aclocal</code>,
<code>libtoolize</code>, <code>gettextize</code> or <code>autopoint</code>,
<code>autoconf</code>, <code>autoheader</code>, and <code>automake</code> in
the right order.  Actually this is precisely what <code>autoreconf</code>
can do for you.  If your package has such a <samp>bootstrap.sh</samp> or
<samp>autogen.sh</samp> script, consider using <code>autoreconf</code>.  That
should simplify its logic a lot (less things to maintain, yum!), it&rsquo;s
even likely you will not need the script anymore, and more to the point
you will not call <code>aclocal</code> directly anymore.
</p>
<p>For the time being, third-party packages should continue to install
public macros into <samp>/usr/share/aclocal/</samp>.  If <code>aclocal</code>
is replaced by another tool it might make sense to rename the
directory, but supporting <samp>/usr/share/aclocal/</samp> for backward
compatibility should be really easy provided all macros are properly
written (see <a href="#Extending-aclocal">Extending aclocal</a>).
</p>


<hr>
<a name="Macros"></a>
<div class="header">
<p>
Previous: <a href="#aclocal-Invocation" accesskey="p" rel="prev">aclocal Invocation</a>, Up: <a href="#configure" accesskey="u" rel="up">configure</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Autoconf-macros-supplied-with-Automake"></a>
<h3 class="section">6.4 Autoconf macros supplied with Automake</h3>

<p>Automake ships with several Autoconf macros that you can use from your
<samp>configure.ac</samp>.  When you use one of them it will be included by
<code>aclocal</code> in <samp>aclocal.m4</samp>.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Public-Macros" accesskey="1">Public Macros</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Macros that you can use.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Obsolete-Macros" accesskey="2">Obsolete Macros</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Macros that will soon be removed.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Private-Macros" accesskey="3">Private Macros</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Macros that you should not use.
</td></tr>
</table>


<hr>
<a name="Public-Macros"></a>
<div class="header">
<p>
Next: <a href="#Obsolete-Macros" accesskey="n" rel="next">Obsolete Macros</a>, Up: <a href="#Macros" accesskey="u" rel="up">Macros</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Public-Macros-1"></a>
<h4 class="subsection">6.4.1 Public Macros</h4>

<dl compact="compact">
<dt><code>AM_INIT_AUTOMAKE([OPTIONS])</code></dt>
<dd><a name="index-AM_005fINIT_005fAUTOMAKE-1"></a>
<p>Runs many macros required for proper operation of the generated Makefiles.
</p>
<a name="index-AUTOMAKE_005fOPTIONS"></a>
<p>Today, <code>AM_INIT_AUTOMAKE</code> is called with a single argument: a
space-separated list of Automake options that should be applied to
every <samp>Makefile.am</samp> in the tree.  The effect is as if
each option were listed in <code>AUTOMAKE_OPTIONS</code> (see <a href="#Options">Options</a>).
</p>
<a name="index-AC_005fINIT"></a>
<p>This macro can also be called in another, <em>deprecated</em> form:
<code>AM_INIT_AUTOMAKE(PACKAGE, VERSION, [NO-DEFINE])</code>.  In this form,
there are two required arguments: the package and the version number.
This usage is mostly obsolete because the <var>package</var> and <var>version</var>
can be obtained from Autoconf&rsquo;s <code>AC_INIT</code> macro.  However,
differently from what happens for <code>AC_INIT</code> invocations, this
<code>AM_INIT_AUTOMAKE</code> invocation supports shell variables&rsquo; expansions
in the <code>PACKAGE</code> and <code>VERSION</code> arguments (which otherwise
defaults, respectively, to the <code>PACKAGE_TARNAME</code> and
<code>PACKAGE_VERSION</code> defined via the <code>AC_INIT</code> invocation;
see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#AC_005fINIT">The <code>AC_INIT</code> macro</a> in <cite>The Autoconf Manual</cite>);
and this can be still be useful in some selected situations.
Our hope is that future Autoconf versions will improve their support
for package versions defined dynamically at configure runtime; when
(and if) this happens, support for the two-args <code>AM_INIT_AUTOMAKE</code>
invocation will likely be removed from Automake.
</p>
<a name="Modernize-AM_005fINIT_005fAUTOMAKE-invocation"></a><p>If your <samp>configure.ac</samp> has:
</p>
<div class="example">
<pre class="example">AC_INIT([src/foo.c])
AM_INIT_AUTOMAKE([mumble], [1.5])
</pre></div>

<p>you should modernize it as follows:
</p>
<div class="example">
<pre class="example">AC_INIT([mumble], [1.5])
AC_CONFIG_SRCDIR([src/foo.c])
AM_INIT_AUTOMAKE
</pre></div>

<p>Note that if you&rsquo;re upgrading your <samp>configure.ac</samp> from an earlier
version of Automake, it is not always correct to simply move the
package and version arguments from <code>AM_INIT_AUTOMAKE</code> directly to
<code>AC_INIT</code>, as in the example above.  The first argument to
<code>AC_INIT</code> should be the name of your package (e.g., &lsquo;<samp>GNU
Automake</samp>&rsquo;), not the tarball name (e.g., &lsquo;<samp>automake</samp>&rsquo;) that you used
to pass to <code>AM_INIT_AUTOMAKE</code>.  Autoconf tries to derive a
tarball name from the package name, which should work for most but not
all package names.  (If it doesn&rsquo;t work for yours, you can use the
four-argument form of <code>AC_INIT</code> to provide the tarball name
explicitly).
</p>
<a name="index-PACKAGE_002c-prevent-definition"></a>
<a name="index-VERSION_002c-prevent-definition"></a>
<a name="index-no_002ddefine"></a>
<p>By default this macro <code>AC_DEFINE</code>&rsquo;s <code>PACKAGE</code> and
<code>VERSION</code>.  This can be avoided by passing the <samp>no-define</samp>
option (see <a href="#List-of-Automake-options">List of Automake options</a>):
</p><div class="example">
<pre class="example">AM_INIT_AUTOMAKE([no-define ...])
</pre></div>

</dd>
<dt><code>AM_PATH_LISPDIR</code></dt>
<dd><a name="index-AM_005fPATH_005fLISPDIR"></a>
<a name="index-EMACS"></a>
<a name="index-lispdir"></a>
<p>Searches for the program <code>emacs</code>, and, if found, sets the
output variable <code>lispdir</code> to the full path to Emacs&rsquo; site-lisp
directory.
</p>
<p>Note that this test assumes the <code>emacs</code> found to be a version
that supports Emacs Lisp (such as GNU Emacs or XEmacs).  Other
emacsen can cause this test to hang (some, like old versions of
MicroEmacs, start up in interactive mode, requiring <kbd>C-x C-c</kbd> to
exit, which is hardly obvious for a non-emacs user).  In most cases,
however, you should be able to use <kbd>C-c</kbd> to kill the test.  In
order to avoid problems, you can set <code>EMACS</code> to &ldquo;no&rdquo; in the
environment, or use the <samp>--with-lispdir</samp> option to
<code>configure</code> to explicitly set the correct path (if you&rsquo;re sure
you have an <code>emacs</code> that supports Emacs Lisp).
</p>
</dd>
<dt><code>AM_PROG_AR(<span class="roman">[</span><var>act-if-fail</var><span class="roman">]</span>)</code></dt>
<dd><a name="index-AM_005fPROG_005fAR"></a>
<a name="index-AR"></a>
<p>You must use this macro when you use the archiver in your project, if
you want support for unusual archivers such as Microsoft <code>lib</code>.
The content of the optional argument is executed if the archiver
interface is not recognized; the default action is to abort configure
with an error message.
</p>
</dd>
<dt><code>AM_PROG_AS</code></dt>
<dd><a name="index-AM_005fPROG_005fAS"></a>
<a name="index-CCAS"></a>
<a name="index-CCASFLAGS"></a>
<p>Use this macro when you have assembly code in your project.  This will
choose the assembler for you (by default the C compiler) and set
<code>CCAS</code>, and will also set <code>CCASFLAGS</code> if required.
</p>
</dd>
<dt><code>AM_PROG_CC_C_O</code></dt>
<dd><a name="index-AM_005fPROG_005fCC_005fC_005fO"></a>
<p>This is an obsolescent macro that checks that the C compiler supports
the <samp>-c</samp> and <samp>-o</samp> options together.  Note that, since
Automake 1.14, the <code>AC_PROG_CC</code> is rewritten to implement such
checks itself, and thus the explicit use of <code>AM_PROG_CC_C_O</code>
should no longer be required.
</p>
</dd>
<dt><code>AM_PROG_LEX</code></dt>
<dd><a name="index-AM_005fPROG_005fLEX"></a>
<a name="index-AC_005fPROG_005fLEX"></a>
<a name="index-HP_002dUX-10_002c-lex-problems"></a>
<a name="index-lex-problems-with-HP_002dUX-10"></a>
<p>Like <code>AC_PROG_LEX</code> (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Particular-Programs">Particular
Program Checks</a> in <cite>The Autoconf Manual</cite>), but uses the
<code>missing</code> script on systems that do not have <code>lex</code>.
HP-UX 10 is one such system.
</p>
</dd>
<dt><code>AM_PROG_GCJ</code></dt>
<dd><a name="index-AM_005fPROG_005fGCJ"></a>
<a name="index-GCJ"></a>
<a name="index-GCJFLAGS"></a>
<p>This macro finds the <code>gcj</code> program or causes an error.  It sets
<code>GCJ</code> and <code>GCJFLAGS</code>.  <code>gcj</code> is the Java front-end to the
GNU Compiler Collection.
</p>
</dd>
<dt><code>AM_PROG_UPC([<var>compiler-search-list</var>])</code></dt>
<dd><a name="index-AM_005fPROG_005fUPC"></a>
<a name="index-UPC"></a>
<p>Find a compiler for Unified Parallel C and define the <code>UPC</code>
variable.  The default <var>compiler-search-list</var> is &lsquo;<samp>upcc upc</samp>&rsquo;.
This macro will abort <code>configure</code> if no Unified Parallel C
compiler is found.
</p>
</dd>
<dt><code>AM_MISSING_PROG(<var>name</var>, <var>program</var>)</code></dt>
<dd><a name="index-AM_005fMISSING_005fPROG"></a>
<a name="index-MISSING"></a>
<p>Find a maintainer tool <var>program</var> and define the <var>name</var>
environment variable with its location.  If <var>program</var> is not
detected, then <var>name</var> will instead invoke the <code>missing</code>
script, in order to give useful advice to the user about the missing
maintainer tool.  See <a href="#maintainer_002dmode">maintainer-mode</a>, for more information on when
the <code>missing</code> script is appropriate.
</p>
</dd>
<dt><code>AM_SILENT_RULES</code></dt>
<dd><a name="index-AM_005fSILENT_005fRULES"></a>
<p>Control the machinery for less verbose build output
(see <a href="#Automake-Silent-Rules">Automake Silent Rules</a>).
</p>
</dd>
<dt><code>AM_WITH_DMALLOC</code></dt>
<dd><a name="index-AM_005fWITH_005fDMALLOC"></a>
<a name="index-dmalloc_002c-support-for"></a>
<a name="index-WITH_005fDMALLOC"></a>
<a name="index-_002d_002dwith_002ddmalloc"></a>
<p>Add support for the <a href="http://dmalloc.com/">Dmalloc package</a>.  If
the user runs <code>configure</code> with <samp>--with-dmalloc</samp>, then
define <code>WITH_DMALLOC</code> and add <samp>-ldmalloc</samp> to <code>LIBS</code>.
</p>
</dd>
</dl>


<hr>
<a name="Obsolete-Macros"></a>
<div class="header">
<p>
Next: <a href="#Private-Macros" accesskey="n" rel="next">Private Macros</a>, Previous: <a href="#Public-Macros" accesskey="p" rel="prev">Public Macros</a>, Up: <a href="#Macros" accesskey="u" rel="up">Macros</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Obsolete-Macros-1"></a>
<h4 class="subsection">6.4.2 Obsolete Macros</h4>
<a name="index-obsolete-macros"></a>
<a name="index-autoupdate"></a>

<p>Although using some of the following macros was required in past
releases, you should not use any of them in new code.  <em>All
these macros will be removed in the next major Automake version</em>;
if you are still using them, running <code>autoupdate</code> should
adjust your <samp>configure.ac</samp> automatically (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#autoupdate-Invocation">Using <code>autoupdate</code> to Modernize
<samp>configure.ac</samp></a> in <cite>The Autoconf Manual</cite>).
<em>Do it NOW!</em>
</p>
<dl compact="compact">
<dt><code>AM_PROG_MKDIR_P</code></dt>
<dd><a name="index-AM_005fPROG_005fMKDIR_005fP"></a>
<a name="index-mkdir-_002dp_002c-macro-check"></a>
<a name="index-MKDIR_005fP"></a>
<a name="index-mkdir_005fp"></a>

<p>From Automake 1.8 to 1.9.6 this macro used to define the output
variable <code>mkdir_p</code> to one of <code>mkdir -p</code>, <code>install-sh
-d</code>, or <code>mkinstalldirs</code>.
</p>
<p>Nowadays Autoconf provides a similar functionality with
<code>AC_PROG_MKDIR_P</code> (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Particular-Programs">Particular
Program Checks</a> in <cite>The Autoconf Manual</cite>), however this defines
the output variable <code>MKDIR_P</code> instead.  In case you are still
using the <code>AM_PROG_MKDIR_P</code> macro in your <samp>configure.ac</samp>,
or its provided variable <code>$(mkdir_p)</code> in your <samp>Makefile.am</samp>,
you are advised to switch ASAP to the more modern Autoconf-provided
interface instead; both the macro and the variable might be removed
in a future major Automake release.
</p>
</dd>
</dl>


<hr>
<a name="Private-Macros"></a>
<div class="header">
<p>
Previous: <a href="#Obsolete-Macros" accesskey="p" rel="prev">Obsolete Macros</a>, Up: <a href="#Macros" accesskey="u" rel="up">Macros</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Private-Macros-1"></a>
<h4 class="subsection">6.4.3 Private Macros</h4>

<p>The following macros are private macros you should not call directly.
They are called by the other public macros when appropriate.  Do not
rely on them, as they might be changed in a future version.  Consider
them as implementation details; or better, do not consider them at all:
skip this section!
</p>
<dl compact="compact">
<dt><code>_AM_DEPENDENCIES</code>
<a name="index-_005fAM_005fDEPENDENCIES"></a>
</dt>
<dt><code>AM_SET_DEPDIR</code>
<a name="index-AM_005fSET_005fDEPDIR"></a>
</dt>
<dt><code>AM_DEP_TRACK</code>
<a name="index-AM_005fDEP_005fTRACK"></a>
</dt>
<dt><code>AM_OUTPUT_DEPENDENCY_COMMANDS</code>
<a name="index-AM_005fOUTPUT_005fDEPENDENCY_005fCOMMANDS"></a>
</dt>
<dd><p>These macros are used to implement Automake&rsquo;s automatic dependency
tracking scheme.  They are called automatically by Automake when
required, and there should be no need to invoke them manually.
</p>
</dd>
<dt><code>AM_MAKE_INCLUDE</code>
<a name="index-AM_005fMAKE_005fINCLUDE"></a>
</dt>
<dd><p>This macro is used to discover how the user&rsquo;s <code>make</code> handles
<code>include</code> statements.  This macro is automatically invoked when
needed; there should be no need to invoke it manually.
</p>
</dd>
<dt><code>AM_PROG_INSTALL_STRIP</code>
<a name="index-AM_005fPROG_005fINSTALL_005fSTRIP"></a>
</dt>
<dd><p>This is used to find a version of <code>install</code> that can be used to
strip a program at installation time.  This macro is automatically
included when required.
</p>
</dd>
<dt><code>AM_SANITY_CHECK</code>
<a name="index-AM_005fSANITY_005fCHECK"></a>
</dt>
<dd><p>This checks to make sure that a file created in the build directory is
newer than a file in the source directory.  This can fail on systems
where the clock is set incorrectly.  This macro is automatically run
from <code>AM_INIT_AUTOMAKE</code>.
</p>
</dd>
</dl>


<hr>
<a name="Directories"></a>
<div class="header">
<p>
Next: <a href="#Programs" accesskey="n" rel="next">Programs</a>, Previous: <a href="#configure" accesskey="p" rel="prev">configure</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Directories-1"></a>
<h2 class="chapter">7 Directories</h2>

<p>For simple projects that distribute all files in the same directory
it is enough to have a single <samp>Makefile.am</samp> that builds
everything in place.
</p>
<p>In larger projects, it is common to organize files in different
directories, in a tree.  For example, there could be a directory
for the program&rsquo;s source, one for the testsuite, and one for the
documentation; or, for very large projects, there could be one
directory per program, per library or per module.
</p>
<p>The traditional approach is to build these subdirectories recursively,
employing <em>make recursion</em>: each directory contains its
own <samp>Makefile</samp>, and when <code>make</code> is run from the top-level
directory, it enters each subdirectory in turn, and invokes there a
new <code>make</code> instance to build the directory&rsquo;s contents.
</p>
<p>Because this approach is very widespread, Automake offers built-in
support for it.  However, it is worth nothing that the use of make
recursion has its own serious issues and drawbacks, and that it&rsquo;s
well possible to have packages with a multi directory layout that
make little or no use of such recursion (examples of such packages
are GNU Bison and GNU Automake itself); see also the <a href="#Alternative">Alternative</a>
section below.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Subdirectories" accesskey="1">Subdirectories</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Building subdirectories recursively
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Conditional-Subdirectories" accesskey="2">Conditional Subdirectories</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Conditionally not building directories
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Alternative" accesskey="3">Alternative</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Subdirectories without recursion
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Subpackages" accesskey="4">Subpackages</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Nesting packages
</td></tr>
</table>

<hr>
<a name="Subdirectories"></a>
<div class="header">
<p>
Next: <a href="#Conditional-Subdirectories" accesskey="n" rel="next">Conditional Subdirectories</a>, Up: <a href="#Directories" accesskey="u" rel="up">Directories</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Recursing-subdirectories"></a>
<h3 class="section">7.1 Recursing subdirectories</h3>

<a name="index-SUBDIRS_002c-explained"></a>

<p>In packages using make recursion, the top level <samp>Makefile.am</samp> must
tell Automake which subdirectories are to be built.  This is done via
the <code>SUBDIRS</code> variable.
<a name="index-SUBDIRS"></a>
</p>
<p>The <code>SUBDIRS</code> variable holds a list of subdirectories in which
building of various sorts can occur.  The rules for many targets
(e.g., <code>all</code>) in the generated <samp>Makefile</samp> will run commands
both locally and in all specified subdirectories.  Note that the
directories listed in <code>SUBDIRS</code> are not required to contain
<samp>Makefile.am</samp>s; only <samp>Makefile</samp>s (after configuration).
This allows inclusion of libraries from packages that do not use
Automake (such as <code>gettext</code>; see also <a href="#Third_002dParty-Makefiles">Third-Party Makefiles</a>).
</p>
<p>In packages that use subdirectories, the top-level <samp>Makefile.am</samp> is
often very short.  For instance, here is the <samp>Makefile.am</samp> from the
GNU Hello distribution:
</p>
<div class="example">
<pre class="example">EXTRA_DIST = BUGS ChangeLog.O README-alpha
SUBDIRS = doc intl po src tests
</pre></div>

<p>When Automake invokes <code>make</code> in a subdirectory, it uses the value
of the <code>MAKE</code> variable.  It passes the value of the variable
<code>AM_MAKEFLAGS</code> to the <code>make</code> invocation; this can be set in
<samp>Makefile.am</samp> if there are flags you must always pass to
<code>make</code>.
<a name="index-MAKE"></a>
<a name="index-AM_005fMAKEFLAGS"></a>
</p>
<p>The directories mentioned in <code>SUBDIRS</code> are usually direct
children of the current directory, each subdirectory containing its
own <samp>Makefile.am</samp> with a <code>SUBDIRS</code> pointing to deeper
subdirectories.  Automake can be used to construct packages of
arbitrary depth this way.
</p>
<p>By default, Automake generates <samp>Makefiles</samp> that work depth-first
in postfix order: the subdirectories are built before the current
directory.  However, it is possible to change this ordering.  You can
do this by putting &lsquo;<samp>.</samp>&rsquo; into <code>SUBDIRS</code>.  For instance,
putting &lsquo;<samp>.</samp>&rsquo; first will cause a prefix ordering of
directories.
</p>
<p>Using
</p>
<div class="example">
<pre class="example">SUBDIRS = lib src . test
</pre></div>

<p>will cause <samp>lib/</samp> to be built before <samp>src/</samp>, then the
current directory will be built, finally the <samp>test/</samp> directory
will be built.  It is customary to arrange test directories to be
built after everything else since they are meant to test what has
been constructed.
</p>
<p>In addition to the built-in recursive targets defined by Automake
(<code>all</code>, <code>check</code>, etc.), the developer can also define his
own recursive targets.  That is done by passing the names of such
targets as arguments to the m4 macro <code>AM_EXTRA_RECURSIVE_TARGETS</code>
in <samp>configure.ac</samp>.  Automake generates rules to handle the
recursion for such targets; and the developer can define real actions
for them by defining corresponding <code>-local</code> targets.
</p>
<div class="example">
<pre class="example">% <kbd>cat configure.ac</kbd>
AC_INIT([pkg-name], [1.0]
AM_INIT_AUTOMAKE
AM_EXTRA_RECURSIVE_TARGETS([foo])
AC_CONFIG_FILES([Makefile sub/Makefile sub/src/Makefile])
AC_OUTPUT
% <kbd>cat Makefile.am</kbd>
SUBDIRS = sub
foo-local:
        @echo This will be run by &quot;make foo&quot;.
% <kbd>cat sub/Makefile.am</kbd>
SUBDIRS = src
% <kbd>cat sub/src/Makefile.am</kbd>
foo-local:
        @echo This too will be run by a &quot;make foo&quot; issued either in
        @echo the 'sub/src/' directory, the 'sub/' directory, or the
        @echo top-level directory.
</pre></div>

<hr>
<a name="Conditional-Subdirectories"></a>
<div class="header">
<p>
Next: <a href="#Alternative" accesskey="n" rel="next">Alternative</a>, Previous: <a href="#Subdirectories" accesskey="p" rel="prev">Subdirectories</a>, Up: <a href="#Directories" accesskey="u" rel="up">Directories</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Conditional-Subdirectories-1"></a>
<h3 class="section">7.2 Conditional Subdirectories</h3>
<a name="index-Subdirectories_002c-building-conditionally"></a>
<a name="index-Conditional-subdirectories"></a>
<a name="index-SUBDIRS_002c-conditional"></a>
<a name="index-Conditional-SUBDIRS"></a>

<p>It is possible to define the <code>SUBDIRS</code> variable conditionally if,
like in the case of GNU Inetutils, you want to only build a subset of
the entire package.
</p>
<p>To illustrate how this works, let&rsquo;s assume we have two directories
<samp>src/</samp> and <samp>opt/</samp>.  <samp>src/</samp> should always be built, but we
want to decide in <code>configure</code> whether <samp>opt/</samp> will be built
or not.  (For this example we will assume that <samp>opt/</samp> should be
built when the variable &lsquo;<samp>$want_opt</samp>&rsquo; was set to &lsquo;<samp>yes</samp>&rsquo;.)
</p>
<p>Running <code>make</code> should thus recurse into <samp>src/</samp> always, and
then maybe in <samp>opt/</samp>.
</p>
<p>However &lsquo;<samp>make dist</samp>&rsquo; should always recurse into both <samp>src/</samp>
and <samp>opt/</samp>.  Because <samp>opt/</samp> should be distributed even if it
is not needed in the current configuration.  This means
<samp>opt/Makefile</samp> should be created <em>unconditionally</em>.
</p>
<p>There are two ways to setup a project like this.  You can use Automake
conditionals (see <a href="#Conditionals">Conditionals</a>) or use Autoconf <code>AC_SUBST</code>
variables (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Setting-Output-Variables">Setting Output
Variables</a> in <cite>The Autoconf Manual</cite>).  Using Automake
conditionals is the preferred solution.  Before we illustrate these
two possibilities, let&rsquo;s introduce <code>DIST_SUBDIRS</code>.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#SUBDIRS-vs-DIST_005fSUBDIRS" accesskey="1">SUBDIRS vs DIST_SUBDIRS</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Two sets of directories
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Subdirectories-with-AM_005fCONDITIONAL" accesskey="2">Subdirectories with AM_CONDITIONAL</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Specifying conditional subdirectories
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Subdirectories-with-AC_005fSUBST" accesskey="3">Subdirectories with AC_SUBST</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Another way for conditional recursion
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Unconfigured-Subdirectories" accesskey="4">Unconfigured Subdirectories</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Not even creating a &lsquo;<samp>Makefile</samp>&rsquo;
</td></tr>
</table>

<hr>
<a name="SUBDIRS-vs-DIST_005fSUBDIRS"></a>
<div class="header">
<p>
Next: <a href="#Subdirectories-with-AM_005fCONDITIONAL" accesskey="n" rel="next">Subdirectories with AM_CONDITIONAL</a>, Up: <a href="#Conditional-Subdirectories" accesskey="u" rel="up">Conditional Subdirectories</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="SUBDIRS-vs_002e-DIST_005fSUBDIRS"></a>
<h4 class="subsection">7.2.1 <code>SUBDIRS</code> vs. <code>DIST_SUBDIRS</code></h4>
<a name="index-DIST_005fSUBDIRS_002c-explained"></a>

<p>Automake considers two sets of directories, defined by the variables
<code>SUBDIRS</code> and <code>DIST_SUBDIRS</code>.
</p>
<p><code>SUBDIRS</code> contains the subdirectories of the current directory
that must be built (see <a href="#Subdirectories">Subdirectories</a>).  It must be defined
manually; Automake will never guess a directory is to be built.  As we
will see in the next two sections, it is possible to define it
conditionally so that some directory will be omitted from the build.
</p>
<p><code>DIST_SUBDIRS</code> is used in rules that need to recurse in all
directories, even those that have been conditionally left out of the
build.  Recall our example where we may not want to build subdirectory
<samp>opt/</samp>, but yet we want to distribute it?  This is where
<code>DIST_SUBDIRS</code> comes into play: &lsquo;<samp>opt</samp>&rsquo; may not appear in
<code>SUBDIRS</code>, but it must appear in <code>DIST_SUBDIRS</code>.
</p>
<p>Precisely, <code>DIST_SUBDIRS</code> is used by &lsquo;<samp>make
maintainer-clean</samp>&rsquo;, &lsquo;<samp>make distclean</samp>&rsquo; and &lsquo;<samp>make dist</samp>&rsquo;.  All
other recursive rules use <code>SUBDIRS</code>.
</p>
<p>If <code>SUBDIRS</code> is defined conditionally using Automake
conditionals, Automake will define <code>DIST_SUBDIRS</code> automatically
from the possible values of <code>SUBDIRS</code> in all conditions.
</p>
<p>If <code>SUBDIRS</code> contains <code>AC_SUBST</code> variables,
<code>DIST_SUBDIRS</code> will not be defined correctly because Automake
does not know the possible values of these variables.  In this case
<code>DIST_SUBDIRS</code> needs to be defined manually.
</p>
<hr>
<a name="Subdirectories-with-AM_005fCONDITIONAL"></a>
<div class="header">
<p>
Next: <a href="#Subdirectories-with-AC_005fSUBST" accesskey="n" rel="next">Subdirectories with AC_SUBST</a>, Previous: <a href="#SUBDIRS-vs-DIST_005fSUBDIRS" accesskey="p" rel="prev">SUBDIRS vs DIST_SUBDIRS</a>, Up: <a href="#Conditional-Subdirectories" accesskey="u" rel="up">Conditional Subdirectories</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Subdirectories-with-AM_005fCONDITIONAL-1"></a>
<h4 class="subsection">7.2.2 Subdirectories with <code>AM_CONDITIONAL</code></h4>
<a name="index-SUBDIRS-and-AM_005fCONDITIONAL"></a>
<a name="index-AM_005fCONDITIONAL-and-SUBDIRS"></a>


<p><samp>configure</samp> should output the <samp>Makefile</samp> for each directory
and define a condition into which <samp>opt/</samp> should be built.
</p>
<div class="example">
<pre class="example">&hellip;
AM_CONDITIONAL([COND_OPT], [test &quot;$want_opt&quot; = yes])
AC_CONFIG_FILES([Makefile src/Makefile opt/Makefile])
&hellip;
</pre></div>

<p>Then <code>SUBDIRS</code> can be defined in the top-level <samp>Makefile.am</samp>
as follows.
</p>
<div class="example">
<pre class="example">if COND_OPT
  MAYBE_OPT = opt
endif
SUBDIRS = src $(MAYBE_OPT)
</pre></div>

<p>As you can see, running <code>make</code> will rightly recurse into
<samp>src/</samp> and maybe <samp>opt/</samp>.
</p>
<a name="index-DIST_005fSUBDIRS"></a>
<p>As you can&rsquo;t see, running &lsquo;<samp>make dist</samp>&rsquo; will recurse into both
<samp>src/</samp> and <samp>opt/</samp> directories because &lsquo;<samp>make dist</samp>&rsquo;, unlike
&lsquo;<samp>make all</samp>&rsquo;, doesn&rsquo;t use the <code>SUBDIRS</code> variable.  It uses the
<code>DIST_SUBDIRS</code> variable.
</p>
<p>In this case Automake will define &lsquo;<samp>DIST_SUBDIRS = src opt</samp>&rsquo;
automatically because it knows that <code>MAYBE_OPT</code> can contain
&lsquo;<samp>opt</samp>&rsquo; in some condition.
</p>
<hr>
<a name="Subdirectories-with-AC_005fSUBST"></a>
<div class="header">
<p>
Next: <a href="#Unconfigured-Subdirectories" accesskey="n" rel="next">Unconfigured Subdirectories</a>, Previous: <a href="#Subdirectories-with-AM_005fCONDITIONAL" accesskey="p" rel="prev">Subdirectories with AM_CONDITIONAL</a>, Up: <a href="#Conditional-Subdirectories" accesskey="u" rel="up">Conditional Subdirectories</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Subdirectories-with-AC_005fSUBST-1"></a>
<h4 class="subsection">7.2.3 Subdirectories with <code>AC_SUBST</code></h4>
<a name="index-SUBDIRS-and-AC_005fSUBST"></a>
<a name="index-AC_005fSUBST-and-SUBDIRS"></a>


<p>Another possibility is to define <code>MAYBE_OPT</code> from
<samp>./configure</samp> using <code>AC_SUBST</code>:
</p>
<div class="example">
<pre class="example">&hellip;
if test &quot;$want_opt&quot; = yes; then
  MAYBE_OPT=opt
else
  MAYBE_OPT=
fi
AC_SUBST([MAYBE_OPT])
AC_CONFIG_FILES([Makefile src/Makefile opt/Makefile])
&hellip;
</pre></div>

<p>In this case the top-level <samp>Makefile.am</samp> should look as follows.
</p>
<div class="example">
<pre class="example">SUBDIRS = src $(MAYBE_OPT)
DIST_SUBDIRS = src opt
</pre></div>

<p>The drawback is that since Automake cannot guess what the possible
values of <code>MAYBE_OPT</code> are, it is necessary to define
<code>DIST_SUBDIRS</code>.
</p>
<hr>
<a name="Unconfigured-Subdirectories"></a>
<div class="header">
<p>
Previous: <a href="#Subdirectories-with-AC_005fSUBST" accesskey="p" rel="prev">Subdirectories with AC_SUBST</a>, Up: <a href="#Conditional-Subdirectories" accesskey="u" rel="up">Conditional Subdirectories</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Unconfigured-Subdirectories-1"></a>
<h4 class="subsection">7.2.4 Unconfigured Subdirectories</h4>
<a name="index-Subdirectories_002c-configured-conditionally"></a>

<p>The semantics of <code>DIST_SUBDIRS</code> are often misunderstood by some
users that try to <em>configure and build</em> subdirectories
conditionally.  Here by configuring we mean creating the
<samp>Makefile</samp> (it might also involve running a nested
<code>configure</code> script: this is a costly operation that explains
why people want to do it conditionally, but only the <samp>Makefile</samp>
is relevant to the discussion).
</p>
<p>The above examples all assume that every <samp>Makefile</samp> is created,
even in directories that are not going to be built.  The simple reason
is that we want &lsquo;<samp>make dist</samp>&rsquo; to distribute even the directories
that are not being built (e.g., platform-dependent code), hence
<samp>make dist</samp> must recurse into the subdirectory, hence this
directory must be configured and appear in <code>DIST_SUBDIRS</code>.
</p>
<p>Building packages that do not configure every subdirectory is a tricky
business, and we do not recommend it to the novice as it is easy to
produce an incomplete tarball by mistake.  We will not discuss this
topic in depth here, yet for the adventurous here are a few rules to
remember.
</p>
<table class="cartouche" border="1"><tr><td>
<ul>
<li> <code>SUBDIRS</code> should always be a subset of <code>DIST_SUBDIRS</code>.

<p>It makes little sense to have a directory in <code>SUBDIRS</code> that
is not in <code>DIST_SUBDIRS</code>.  Think of the former as a way to tell
which directories listed in the latter should be built.
</p></li><li> Any directory listed in <code>DIST_SUBDIRS</code> and <code>SUBDIRS</code>
must be configured.

<p>I.e., the <samp>Makefile</samp> must exists or the recursive <code>make</code>
rules will not be able to process the directory.
</p></li><li> Any configured directory must be listed in <code>DIST_SUBDIRS</code>.

<p>So that the cleaning rules remove the generated <samp>Makefile</samp>s.
It would be correct to see <code>DIST_SUBDIRS</code> as a variable that
lists all the directories that have been configured.
</p></li></ul>
</td></tr></table>

<p>In order to prevent recursion in some unconfigured directory you
must therefore ensure that this directory does not appear in
<code>DIST_SUBDIRS</code> (and <code>SUBDIRS</code>).  For instance, if you define
<code>SUBDIRS</code> conditionally using <code>AC_SUBST</code> and do not define
<code>DIST_SUBDIRS</code> explicitly, it will be default to
&lsquo;<samp>$(SUBDIRS)</samp>&rsquo;; another possibility is to force <code>DIST_SUBDIRS
= $(SUBDIRS)</code>.
</p>
<p>Of course, directories that are omitted from <code>DIST_SUBDIRS</code> will
not be distributed unless you make other arrangements for this to
happen (for instance, always running &lsquo;<samp>make dist</samp>&rsquo; in a
configuration where all directories are known to appear in
<code>DIST_SUBDIRS</code>; or writing a <code>dist-hook</code> target to
distribute these directories).
</p>
<a name="index-Subdirectories_002c-not-distributed"></a>
<p>In few packages, unconfigured directories are not even expected to
be distributed.  Although these packages do not require the
aforementioned extra arrangements, there is another pitfall.  If the
name of a directory appears in <code>SUBDIRS</code> or <code>DIST_SUBDIRS</code>,
<code>automake</code> will make sure the directory exists.  Consequently
<code>automake</code> cannot be run on such a distribution when one
directory has been omitted.  One way to avoid this check is to use the
<code>AC_SUBST</code> method to declare conditional directories; since
<code>automake</code> does not know the values of <code>AC_SUBST</code>
variables it cannot ensure the corresponding directory exists.
</p>
<hr>
<a name="Alternative"></a>
<div class="header">
<p>
Next: <a href="#Subpackages" accesskey="n" rel="next">Subpackages</a>, Previous: <a href="#Conditional-Subdirectories" accesskey="p" rel="prev">Conditional Subdirectories</a>, Up: <a href="#Directories" accesskey="u" rel="up">Directories</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="An-Alternative-Approach-to-Subdirectories"></a>
<h3 class="section">7.3 An Alternative Approach to Subdirectories</h3>

<p>If you&rsquo;ve ever read Peter Miller&rsquo;s excellent paper,
<a href="http://miller.emu.id.au/pmiller/books/rmch/">Recursive Make Considered Harmful</a>, the preceding sections on the use of
make recursion will probably come as unwelcome advice.  For those who
haven&rsquo;t read the paper, Miller&rsquo;s main thesis is that recursive
<code>make</code> invocations are both slow and error-prone.
</p>
<p>Automake provides sufficient cross-directory support <a name="DOCF2" href="#FOOT2"><sup>2</sup></a> to enable you
to write a single <samp>Makefile.am</samp> for a complex multi-directory
package.
</p>
<p>By default an installable file specified in a subdirectory will have its
directory name stripped before installation.  For instance, in this
example, the header file will be installed as
<samp>$(includedir)/stdio.h</samp>:
</p>
<div class="example">
<pre class="example">include_HEADERS = inc/stdio.h
</pre></div>

<a name="index-nobase_005f"></a>
<a name="index-nobase_005f-prefix"></a>
<a name="index-Path-stripping_002c-avoiding"></a>
<a name="index-Avoiding-path-stripping"></a>

<p>However, the &lsquo;<samp>nobase_</samp>&rsquo; prefix can be used to circumvent this path
stripping.  In this example, the header file will be installed as
<samp>$(includedir)/sys/types.h</samp>:
</p>
<div class="example">
<pre class="example">nobase_include_HEADERS = sys/types.h
</pre></div>

<a name="index-nobase_005f-and-dist_005f-or-nodist_005f"></a>
<a name="index-dist_005f-and-nobase_005f"></a>
<a name="index-nodist_005f-and-nobase_005f"></a>
<a name="index-dist_005f"></a>
<a name="index-nodist_005f"></a>

<p>&lsquo;<samp>nobase_</samp>&rsquo; should be specified first when used in conjunction with
either &lsquo;<samp>dist_</samp>&rsquo; or &lsquo;<samp>nodist_</samp>&rsquo; (see <a href="#Fine_002dgrained-Distribution-Control">Fine-grained Distribution Control</a>).  For instance:
</p>
<div class="example">
<pre class="example">nobase_dist_pkgdata_DATA = images/vortex.pgm sounds/whirl.ogg
</pre></div>

<p>Finally, note that a variable using the &lsquo;<samp>nobase_</samp>&rsquo; prefix can
often be replaced by several variables, one for each destination
directory (see <a href="#Uniform">Uniform</a>).  For instance, the last example could be
rewritten as follows:
</p>
<div class="example">
<pre class="example">imagesdir = $(pkgdatadir)/images
soundsdir = $(pkgdatadir)/sounds
dist_images_DATA = images/vortex.pgm
dist_sounds_DATA = sounds/whirl.ogg
</pre></div>

<p>This latter syntax makes it possible to change one destination
directory without changing the layout of the source tree.
</p>
<p>Currently, &lsquo;<samp>nobase_*_LTLIBRARIES</samp>&rsquo; are the only exception to this
rule, in that there is no particular installation order guarantee for
an otherwise equivalent set of variables without &lsquo;<samp>nobase_</samp>&rsquo; prefix.
</p>
<hr>
<a name="Subpackages"></a>
<div class="header">
<p>
Previous: <a href="#Alternative" accesskey="p" rel="prev">Alternative</a>, Up: <a href="#Directories" accesskey="u" rel="up">Directories</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Nesting-Packages"></a>
<h3 class="section">7.4 Nesting Packages</h3>
<a name="index-Nesting-packages"></a>
<a name="index-Subpackages-1"></a>
<a name="index-AC_005fCONFIG_005fSUBDIRS"></a>
<a name="index-AC_005fCONFIG_005fAUX_005fDIR"></a>


<p>In the GNU Build System, packages can be nested to arbitrary depth.
This means that a package can embed other packages with their own
<samp>configure</samp>, <samp>Makefile</samp>s, etc.
</p>
<p>These other packages should just appear as subdirectories of their
parent package.  They must be listed in <code>SUBDIRS</code> like other
ordinary directories.  However the subpackage&rsquo;s <samp>Makefile</samp>s
should be output by its own <samp>configure</samp> script, not by the
parent&rsquo;s <samp>configure</samp>.  This is achieved using the
<code>AC_CONFIG_SUBDIRS</code> Autoconf macro (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Subdirectories">Configuring Other Packages in Subdirectories</a> in <cite>The Autoconf Manual</cite>).
</p>
<p>Here is an example package for an <code>arm</code> program that links with
a <code>hand</code> library that is a nested package in subdirectory
<samp>hand/</samp>.
</p>
<p><code>arm</code>&rsquo;s <samp>configure.ac</samp>:
</p>
<div class="example">
<pre class="example">AC_INIT([arm], [1.0])
AC_CONFIG_AUX_DIR([.])
AM_INIT_AUTOMAKE
AC_PROG_CC
AC_CONFIG_FILES([Makefile])
# Call hand's ./configure script recursively.
AC_CONFIG_SUBDIRS([hand])
AC_OUTPUT
</pre></div>

<p><code>arm</code>&rsquo;s <samp>Makefile.am</samp>:
</p>
<div class="example">
<pre class="example"># Build the library in the hand subdirectory first.
SUBDIRS = hand

# Include hand's header when compiling this directory.
AM_CPPFLAGS = -I$(srcdir)/hand

bin_PROGRAMS = arm
arm_SOURCES = arm.c
# link with the hand library.
arm_LDADD = hand/libhand.a
</pre></div>

<p>Now here is <code>hand</code>&rsquo;s <samp>hand/configure.ac</samp>:
</p>
<div class="example">
<pre class="example">AC_INIT([hand], [1.2])
AC_CONFIG_AUX_DIR([.])
AM_INIT_AUTOMAKE
AC_PROG_CC
AM_PROG_AR
AC_PROG_RANLIB
AC_CONFIG_FILES([Makefile])
AC_OUTPUT
</pre></div>

<p>and its <samp>hand/Makefile.am</samp>:
</p>
<div class="example">
<pre class="example">lib_LIBRARIES = libhand.a
libhand_a_SOURCES = hand.c
</pre></div>

<p>When &lsquo;<samp>make dist</samp>&rsquo; is run from the top-level directory it will
create an archive <samp>arm-1.0.tar.gz</samp> that contains the <code>arm</code>
code as well as the <samp>hand</samp> subdirectory.  This package can be
built and installed like any ordinary package, with the usual
&lsquo;<samp>./configure &amp;&amp; make &amp;&amp; make install</samp>&rsquo; sequence (the <code>hand</code>
subpackage will be built and installed by the process).
</p>
<p>When &lsquo;<samp>make dist</samp>&rsquo; is run from the hand directory, it will create a
self-contained <samp>hand-1.2.tar.gz</samp> archive.  So although it appears
to be embedded in another package, it can still be used separately.
</p>
<p>The purpose of the &lsquo;<samp>AC_CONFIG_AUX_DIR([.])</samp>&rsquo; instruction is to
force Automake and Autoconf to search for auxiliary scripts in the
current directory.  For instance, this means that there will be two
copies of <samp>install-sh</samp>: one in the top-level of the <code>arm</code>
package, and another one in the <samp>hand/</samp> subdirectory for the
<code>hand</code> package.
</p>
<p>The historical default is to search for these auxiliary scripts in
the parent directory and the grandparent directory.  So if the
&lsquo;<samp>AC_CONFIG_AUX_DIR([.])</samp>&rsquo; line was removed from
<samp>hand/configure.ac</samp>, that subpackage would share the auxiliary
script of the <code>arm</code> package.  This may looks like a gain in size
(a few kilobytes), but it is actually a loss of modularity as the
<code>hand</code> subpackage is no longer self-contained (&lsquo;<samp>make dist</samp>&rsquo;
in the subdirectory will not work anymore).
</p>
<p>Packages that do not use Automake need more work to be integrated this
way.  See <a href="#Third_002dParty-Makefiles">Third-Party Makefiles</a>.
</p>
<hr>
<a name="Programs"></a>
<div class="header">
<p>
Next: <a href="#Other-Objects" accesskey="n" rel="next">Other Objects</a>, Previous: <a href="#Directories" accesskey="p" rel="prev">Directories</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Building-Programs-and-Libraries"></a>
<h2 class="chapter">8 Building Programs and Libraries</h2>

<p>A large part of Automake&rsquo;s functionality is dedicated to making it easy
to build programs and libraries.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#A-Program" accesskey="1">A Program</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Building a program
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#A-Library" accesskey="2">A Library</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Building a library
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#A-Shared-Library" accesskey="3">A Shared Library</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Building a Libtool library
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Program-and-Library-Variables" accesskey="4">Program and Library Variables</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Variables controlling program and
                                library builds
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Default-_005fSOURCES" accesskey="5">Default _SOURCES</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Default source files
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#LIBOBJS" accesskey="6">LIBOBJS</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Special handling for LIBOBJS and ALLOCA
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Program-Variables" accesskey="7">Program Variables</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Variables used when building a program
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Yacc-and-Lex" accesskey="8">Yacc and Lex</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Yacc and Lex support
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#C_002b_002b-Support" accesskey="9">C++ Support</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compiling C++ sources
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Objective-C-Support">Objective C Support</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compiling Objective C sources
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Objective-C_002b_002b-Support">Objective C++ Support</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compiling Objective C++ sources
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Unified-Parallel-C-Support">Unified Parallel C Support</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compiling Unified Parallel C sources
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Assembly-Support">Assembly Support</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compiling assembly sources
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Fortran-77-Support">Fortran 77 Support</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compiling Fortran 77 sources
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Fortran-9x-Support">Fortran 9x Support</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compiling Fortran 9x sources
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Java-Support-with-gcj">Java Support with gcj</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compiling Java sources using gcj
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Vala-Support">Vala Support</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compiling Vala sources
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Support-for-Other-Languages">Support for Other Languages</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compiling other languages
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Dependencies">Dependencies</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Automatic dependency tracking
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#EXEEXT">EXEEXT</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Support for executable extensions
</td></tr>
</table>


<hr>
<a name="A-Program"></a>
<div class="header">
<p>
Next: <a href="#A-Library" accesskey="n" rel="next">A Library</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Building-a-program"></a>
<h3 class="section">8.1 Building a program</h3>

<p>In order to build a program, you need to tell Automake which sources
are part of it, and which libraries it should be linked with.
</p>
<p>This section also covers conditional compilation of sources or
programs.  Most of the comments about these also apply to libraries
(see <a href="#A-Library">A Library</a>) and libtool libraries (see <a href="#A-Shared-Library">A Shared Library</a>).
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Program-Sources" accesskey="1">Program Sources</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Defining program sources
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Linking" accesskey="2">Linking</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Linking with libraries or extra objects
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Conditional-Sources" accesskey="3">Conditional Sources</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Handling conditional sources
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Conditional-Programs" accesskey="4">Conditional Programs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Building a program conditionally
</td></tr>
</table>

<hr>
<a name="Program-Sources"></a>
<div class="header">
<p>
Next: <a href="#Linking" accesskey="n" rel="next">Linking</a>, Up: <a href="#A-Program" accesskey="u" rel="up">A Program</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Defining-program-sources"></a>
<h4 class="subsection">8.1.1 Defining program sources</h4>

<a name="index-PROGRAMS_002c-bindir"></a>
<a name="index-_005fPROGRAMS-1"></a>
<a name="index-bin_005fPROGRAMS"></a>
<a name="index-sbin_005fPROGRAMS"></a>
<a name="index-libexec_005fPROGRAMS"></a>
<a name="index-pkglibexec_005fPROGRAMS"></a>
<a name="index-noinst_005fPROGRAMS"></a>
<a name="index-check_005fPROGRAMS"></a>

<p>In a directory containing source that gets built into a program (as
opposed to a library or a script), the <code>PROGRAMS</code> primary is used.
Programs can be installed in <code>bindir</code>, <code>sbindir</code>,
<code>libexecdir</code>, <code>pkglibexecdir</code>, or not at all
(<code>noinst_</code>).  They can also be built only for &lsquo;<samp>make check</samp>&rsquo;, in
which case the prefix is &lsquo;<samp>check_</samp>&rsquo;.
</p>
<p>For instance:
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = hello
</pre></div>

<p>In this simple case, the resulting <samp>Makefile.in</samp> will contain code
to generate a program named <code>hello</code>.
</p>
<p>Associated with each program are several assisting variables that are
named after the program.  These variables are all optional, and have
reasonable defaults.  Each variable, its use, and default is spelled out
below; we use the &ldquo;hello&rdquo; example throughout.
</p>
<p>The variable <code>hello_SOURCES</code> is used to specify which source files
get built into an executable:
</p>
<div class="example">
<pre class="example">hello_SOURCES = hello.c version.c getopt.c getopt1.c getopt.h system.h
</pre></div>

<p>This causes each mentioned <samp>.c</samp> file to be compiled into the
corresponding <samp>.o</samp>.  Then all are linked to produce <samp>hello</samp>.
</p>
<a name="index-_005fSOURCES-primary_002c-defined"></a>
<a name="index-SOURCES-primary_002c-defined"></a>
<a name="index-Primary-variable_002c-SOURCES"></a>
<a name="index-_005fSOURCES"></a>

<p>If <code>hello_SOURCES</code> is not specified, then it defaults to the single
file <samp>hello.c</samp> (see <a href="#Default-_005fSOURCES">Default _SOURCES</a>).
<a name="index-_005fSOURCES-1"></a>
<a name="index-SOURCES"></a>
</p>
<p>Multiple programs can be built in a single directory.  Multiple programs
can share a single source file, which must be listed in each
<code>_SOURCES</code> definition.
</p>
<a name="index-Header-files-in-_005fSOURCES"></a>
<a name="index-_005fSOURCES-and-header-files"></a>

<p>Header files listed in a <code>_SOURCES</code> definition will be included in
the distribution but otherwise ignored.  In case it isn&rsquo;t obvious, you
should not include the header file generated by <samp>configure</samp> in a
<code>_SOURCES</code> variable; this file should not be distributed.  Lex
(<samp>.l</samp>) and Yacc (<samp>.y</samp>) files can also be listed; see <a href="#Yacc-and-Lex">Yacc and Lex</a>.
</p>

<hr>
<a name="Linking"></a>
<div class="header">
<p>
Next: <a href="#Conditional-Sources" accesskey="n" rel="next">Conditional Sources</a>, Previous: <a href="#Program-Sources" accesskey="p" rel="prev">Program Sources</a>, Up: <a href="#A-Program" accesskey="u" rel="up">A Program</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Linking-the-program"></a>
<h4 class="subsection">8.1.2 Linking the program</h4>

<p>If you need to link against libraries that are not found by
<code>configure</code>, you can use <code>LDADD</code> to do so.  This variable is
used to specify additional objects or libraries to link with; it is
inappropriate for specifying specific linker flags, you should use
<code>AM_LDFLAGS</code> for this purpose.
<a name="index-LDADD"></a>
<a name="index-AM_005fLDFLAGS"></a>
</p>
<a name="index-prog_005fLDADD_002c-defined"></a>

<p>Sometimes, multiple programs are built in one directory but do not share
the same link-time requirements.  In this case, you can use the
<code><var>prog</var>_LDADD</code> variable (where <var>prog</var> is the name of the
program as it appears in some <code>_PROGRAMS</code> variable, and usually
written in lowercase) to override <code>LDADD</code>.  If this variable exists
for a given program, then that program is not linked using <code>LDADD</code>.
<a name="index-maude_005fLDADD"></a>
</p>
<p>For instance, in GNU cpio, <code>pax</code>, <code>cpio</code> and <code>mt</code> are
linked against the library <samp>libcpio.a</samp>.  However, <code>rmt</code> is
built in the same directory, and has no such link requirement.  Also,
<code>mt</code> and <code>rmt</code> are only built on certain architectures.  Here
is what cpio&rsquo;s <samp>src/Makefile.am</samp> looks like (abridged):
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = cpio pax $(MT)
libexec_PROGRAMS = $(RMT)
EXTRA_PROGRAMS = mt rmt

LDADD = ../lib/libcpio.a $(INTLLIBS)
rmt_LDADD =

cpio_SOURCES = &hellip;
pax_SOURCES = &hellip;
mt_SOURCES = &hellip;
rmt_SOURCES = &hellip;
</pre></div>

<a name="index-_005fLDFLAGS_002c-defined"></a>
<a name="index-maude_005fLDFLAGS"></a>
<p><code><var>prog</var>_LDADD</code> is inappropriate for passing program-specific
linker flags (except for <samp>-l</samp>, <samp>-L</samp>, <samp>-dlopen</samp> and
<samp>-dlpreopen</samp>).  So, use the <code><var>prog</var>_LDFLAGS</code> variable for
this purpose.
</p>
<a name="index-_005fDEPENDENCIES_002c-defined"></a>
<a name="index-maude_005fDEPENDENCIES"></a>
<a name="index-EXTRA_005fmaude_005fDEPENDENCIES"></a>
<p>It is also occasionally useful to have a program depend on some other
target that is not actually part of that program.  This can be done
using either the <code><var>prog</var>_DEPENDENCIES</code> or the
<code>EXTRA_<var>prog</var>_DEPENDENCIES</code> variable.  Each program depends on
the contents both variables, but no further interpretation is done.
</p>
<p>Since these dependencies are associated to the link rule used to
create the programs they should normally list files used by the link
command.  That is <samp>*.$(OBJEXT)</samp>, <samp>*.a</samp>, or <samp>*.la</samp>
files.  In rare cases you may need to add other kinds of files such as
linker scripts, but <em>listing a source file in
<code>_DEPENDENCIES</code> is wrong</em>.  If some source file needs to be built
before all the components of a program are built, consider using the
<code>BUILT_SOURCES</code> variable instead (see <a href="#Sources">Sources</a>).
</p>
<p>If <code><var>prog</var>_DEPENDENCIES</code> is not supplied, it is computed by
Automake.  The automatically-assigned value is the contents of
<code><var>prog</var>_LDADD</code>, with most configure substitutions, <samp>-l</samp>,
<samp>-L</samp>, <samp>-dlopen</samp> and <samp>-dlpreopen</samp> options removed.  The
configure substitutions that are left in are only &lsquo;<samp>$(LIBOBJS)</samp>&rsquo; and
&lsquo;<samp>$(ALLOCA)</samp>&rsquo;; these are left because it is known that they will not
cause an invalid value for <code><var>prog</var>_DEPENDENCIES</code> to be
generated.
</p>
<p><a href="#Conditional-Sources">Conditional Sources</a> shows a situation where <code>_DEPENDENCIES</code>
may be used.
</p>
<p>The <code>EXTRA_<var>prog</var>_DEPENDENCIES</code> may be useful for cases where
you merely want to augment the <code>automake</code>-generated
<code><var>prog</var>_DEPENDENCIES</code> rather than replacing it.
</p>
<a name="index-LDADD-and-_002dl"></a>
<a name="index-_002dl-and-LDADD"></a>
<p>We recommend that you avoid using <samp>-l</samp> options in <code>LDADD</code>
or <code><var>prog</var>_LDADD</code> when referring to libraries built by your
package.  Instead, write the file name of the library explicitly as in
the above <code>cpio</code> example.  Use <samp>-l</samp> only to list
third-party libraries.  If you follow this rule, the default value of
<code><var>prog</var>_DEPENDENCIES</code> will list all your local libraries and
omit the other ones.
</p>

<hr>
<a name="Conditional-Sources"></a>
<div class="header">
<p>
Next: <a href="#Conditional-Programs" accesskey="n" rel="next">Conditional Programs</a>, Previous: <a href="#Linking" accesskey="p" rel="prev">Linking</a>, Up: <a href="#A-Program" accesskey="u" rel="up">A Program</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Conditional-compilation-of-sources"></a>
<h4 class="subsection">8.1.3 Conditional compilation of sources</h4>

<p>You can&rsquo;t put a configure substitution (e.g., &lsquo;<samp>@FOO@</samp>&rsquo; or
&lsquo;<samp>$(FOO)</samp>&rsquo; where <code>FOO</code> is defined via <code>AC_SUBST</code>) into a
<code>_SOURCES</code> variable.  The reason for this is a bit hard to
explain, but suffice to say that it simply won&rsquo;t work.  Automake will
give an error if you try to do this.
</p>
<p>Fortunately there are two other ways to achieve the same result.  One is
to use configure substitutions in <code>_LDADD</code> variables, the other is
to use an Automake conditional.
</p>
<a name="Conditional-Compilation-using-_005fLDADD-Substitutions"></a>
<h4 class="subsubheading">Conditional Compilation using <code>_LDADD</code> Substitutions</h4>

<a name="index-EXTRA_005fprog_005fSOURCES_002c-defined"></a>

<p>Automake must know all the source files that could possibly go into a
program, even if not all the files are built in every circumstance.  Any
files that are only conditionally built should be listed in the
appropriate <code>EXTRA_</code> variable.  For instance, if
<samp>hello-linux.c</samp> or <samp>hello-generic.c</samp> were conditionally included
in <code>hello</code>, the <samp>Makefile.am</samp> would contain:
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = hello
hello_SOURCES = hello-common.c
EXTRA_hello_SOURCES = hello-linux.c hello-generic.c
hello_LDADD = $(HELLO_SYSTEM)
hello_DEPENDENCIES = $(HELLO_SYSTEM)
</pre></div>

<p>You can then setup the &lsquo;<samp>$(HELLO_SYSTEM)</samp>&rsquo; substitution from
<samp>configure.ac</samp>:
</p>
<div class="example">
<pre class="example">&hellip;
case $host in
  *linux*) HELLO_SYSTEM='hello-linux.$(OBJEXT)' ;;
  *)       HELLO_SYSTEM='hello-generic.$(OBJEXT)' ;;
esac
AC_SUBST([HELLO_SYSTEM])
&hellip;
</pre></div>

<p>In this case, the variable <code>HELLO_SYSTEM</code> should be replaced by
either <samp>hello-linux.o</samp> or <samp>hello-generic.o</samp>, and added to
both <code>hello_DEPENDENCIES</code> and <code>hello_LDADD</code> in order to be
built and linked in.
</p>
<a name="Conditional-Compilation-using-Automake-Conditionals"></a>
<h4 class="subsubheading">Conditional Compilation using Automake Conditionals</h4>

<p>An often simpler way to compile source files conditionally is to use
Automake conditionals.  For instance, you could use this
<samp>Makefile.am</samp> construct to build the same <samp>hello</samp> example:
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = hello
if LINUX
hello_SOURCES = hello-linux.c hello-common.c
else
hello_SOURCES = hello-generic.c hello-common.c
endif
</pre></div>

<p>In this case, <samp>configure.ac</samp> should setup the <code>LINUX</code>
conditional using <code>AM_CONDITIONAL</code> (see <a href="#Conditionals">Conditionals</a>).
</p>
<p>When using conditionals like this you don&rsquo;t need to use the
<code>EXTRA_</code> variable, because Automake will examine the contents of
each variable to construct the complete list of source files.
</p>
<p>If your program uses a lot of files, you will probably prefer a
conditional &lsquo;<samp>+=</samp>&rsquo;.
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = hello
hello_SOURCES = hello-common.c
if LINUX
hello_SOURCES += hello-linux.c
else
hello_SOURCES += hello-generic.c
endif
</pre></div>

<hr>
<a name="Conditional-Programs"></a>
<div class="header">
<p>
Previous: <a href="#Conditional-Sources" accesskey="p" rel="prev">Conditional Sources</a>, Up: <a href="#A-Program" accesskey="u" rel="up">A Program</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Conditional-compilation-of-programs"></a>
<h4 class="subsection">8.1.4 Conditional compilation of programs</h4>
<a name="index-Conditional-programs"></a>
<a name="index-Programs_002c-conditional"></a>

<p>Sometimes it is useful to determine the programs that are to be built
at configure time.  For instance, GNU <code>cpio</code> only builds
<code>mt</code> and <code>rmt</code> under special circumstances.  The means to
achieve conditional compilation of programs are the same you can use
to compile source files conditionally: substitutions or conditionals.
</p>
<a name="Conditional-Programs-using-configure-Substitutions"></a>
<h4 class="subsubheading">Conditional Programs using <code>configure</code> Substitutions</h4>

<a name="index-EXTRA_005fPROGRAMS"></a>
<a name="index-EXTRA_005fPROGRAMS_002c-defined-1"></a>
<p>In this case, you must notify Automake of all the programs that can
possibly be built, but at the same time cause the generated
<samp>Makefile.in</samp> to use the programs specified by <code>configure</code>.
This is done by having <code>configure</code> substitute values into each
<code>_PROGRAMS</code> definition, while listing all optionally built programs
in <code>EXTRA_PROGRAMS</code>.
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = cpio pax $(MT)
libexec_PROGRAMS = $(RMT)
EXTRA_PROGRAMS = mt rmt
</pre></div>

<p>As explained in <a href="#EXEEXT">EXEEXT</a>, Automake will rewrite
<code>bin_PROGRAMS</code>, <code>libexec_PROGRAMS</code>, and
<code>EXTRA_PROGRAMS</code>, appending &lsquo;<samp>$(EXEEXT)</samp>&rsquo; to each binary.
Obviously it cannot rewrite values obtained at run-time through
<code>configure</code> substitutions, therefore you should take care of
appending &lsquo;<samp>$(EXEEXT)</samp>&rsquo; yourself, as in &lsquo;<samp>AC_SUBST([MT],
['mt${EXEEXT}'])</samp>&rsquo;.
</p>
<a name="Conditional-Programs-using-Automake-Conditionals"></a>
<h4 class="subsubheading">Conditional Programs using Automake Conditionals</h4>

<p>You can also use Automake conditionals (see <a href="#Conditionals">Conditionals</a>) to
select programs to be built.  In this case you don&rsquo;t have to worry
about &lsquo;<samp>$(EXEEXT)</samp>&rsquo; or <code>EXTRA_PROGRAMS</code>.
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = cpio pax
if WANT_MT
  bin_PROGRAMS += mt
endif
if WANT_RMT
  libexec_PROGRAMS = rmt
endif
</pre></div>


<hr>
<a name="A-Library"></a>
<div class="header">
<p>
Next: <a href="#A-Shared-Library" accesskey="n" rel="next">A Shared Library</a>, Previous: <a href="#A-Program" accesskey="p" rel="prev">A Program</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Building-a-library"></a>
<h3 class="section">8.2 Building a library</h3>

<a name="index-_005fLIBRARIES-primary_002c-defined"></a>
<a name="index-LIBRARIES-primary_002c-defined"></a>
<a name="index-Primary-variable_002c-LIBRARIES"></a>
<a name="index-_005fLIBRARIES"></a>

<a name="index-lib_005fLIBRARIES"></a>
<a name="index-pkglib_005fLIBRARIES"></a>
<a name="index-noinst_005fLIBRARIES"></a>

<p>Building a library is much like building a program.  In this case, the
name of the primary is <code>LIBRARIES</code>.  Libraries can be installed in
<code>libdir</code> or <code>pkglibdir</code>.
</p>
<p>See <a href="#A-Shared-Library">A Shared Library</a>, for information on how to build shared
libraries using libtool and the <code>LTLIBRARIES</code> primary.
</p>
<p>Each <code>_LIBRARIES</code> variable is a list of the libraries to be built.
For instance, to create a library named <samp>libcpio.a</samp>, but not install
it, you would write:
</p>
<div class="example">
<pre class="example">noinst_LIBRARIES = libcpio.a
libcpio_a_SOURCES = &hellip;
</pre></div>

<p>The sources that go into a library are determined exactly as they are
for programs, via the <code>_SOURCES</code> variables.  Note that the library
name is canonicalized (see <a href="#Canonicalization">Canonicalization</a>), so the <code>_SOURCES</code>
variable corresponding to <samp>libcpio.a</samp> is &lsquo;<samp>libcpio_a_SOURCES</samp>&rsquo;,
not &lsquo;<samp>libcpio.a_SOURCES</samp>&rsquo;.
</p>
<a name="index-maude_005fLIBADD"></a>
<p>Extra objects can be added to a library using the
<code><var>library</var>_LIBADD</code> variable.  This should be used for objects
determined by <code>configure</code>.  Again from <code>cpio</code>:
</p>
<div class="example">
<pre class="example">libcpio_a_LIBADD = $(LIBOBJS) $(ALLOCA)
</pre></div>

<p>In addition, sources for extra objects that will not exist until
configure-time must be added to the <code>BUILT_SOURCES</code> variable
(see <a href="#Sources">Sources</a>).
</p>
<p>Building a static library is done by compiling all object files, then
by invoking &lsquo;<samp>$(AR) $(ARFLAGS)</samp>&rsquo; followed by the name of the
library and the list of objects, and finally by calling
&lsquo;<samp>$(RANLIB)</samp>&rsquo; on that library.  You should call
<code>AC_PROG_RANLIB</code> from your <samp>configure.ac</samp> to define
<code>RANLIB</code> (Automake will complain otherwise).  You should also
call <code>AM_PROG_AR</code> to define <code>AR</code>, in order to support unusual
archivers such as Microsoft lib.  <code>ARFLAGS</code> will default to
<code>cru</code>; you can override this variable by setting it in your
<samp>Makefile.am</samp> or by <code>AC_SUBST</code>ing it from your
<samp>configure.ac</samp>.  You can override the <code>AR</code> variable by
defining a per-library <code>maude_AR</code> variable (see <a href="#Program-and-Library-Variables">Program and Library Variables</a>).
</p>
<a name="index-Empty-libraries"></a>
<p>Be careful when selecting library components conditionally.  Because
building an empty library is not portable, you should ensure that any
library always contains at least one object.
</p>
<p>To use a static library when building a program, add it to
<code>LDADD</code> for this program.  In the following example, the program
<samp>cpio</samp> is statically linked with the library <samp>libcpio.a</samp>.
</p>
<div class="example">
<pre class="example">noinst_LIBRARIES = libcpio.a
libcpio_a_SOURCES = &hellip;

bin_PROGRAMS = cpio
cpio_SOURCES = cpio.c &hellip;
cpio_LDADD = libcpio.a
</pre></div>


<hr>
<a name="A-Shared-Library"></a>
<div class="header">
<p>
Next: <a href="#Program-and-Library-Variables" accesskey="n" rel="next">Program and Library Variables</a>, Previous: <a href="#A-Library" accesskey="p" rel="prev">A Library</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Building-a-Shared-Library"></a>
<h3 class="section">8.3 Building a Shared Library</h3>

<a name="index-Shared-libraries_002c-support-for"></a>

<p>Building shared libraries portably is a relatively complex matter.
For this reason, GNU Libtool (see <a href="http://www.gnu.org/software/libtool/manual/libtool.html#Top">Introduction</a> in <cite>The
Libtool Manual</cite>) was created to help build shared libraries in a
platform-independent way.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Libtool-Concept" accesskey="1">Libtool Concept</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Introducing Libtool
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Libtool-Libraries" accesskey="2">Libtool Libraries</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Declaring Libtool Libraries
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Conditional-Libtool-Libraries" accesskey="3">Conditional Libtool Libraries</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Building Libtool Libraries Conditionally
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Conditional-Libtool-Sources" accesskey="4">Conditional Libtool Sources</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Choosing Library Sources Conditionally
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Libtool-Convenience-Libraries" accesskey="5">Libtool Convenience Libraries</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Building Convenience Libtool Libraries
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Libtool-Modules" accesskey="6">Libtool Modules</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Building Libtool Modules
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Libtool-Flags" accesskey="7">Libtool Flags</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Using _LIBADD, _LDFLAGS, and _LIBTOOLFLAGS
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#LTLIBOBJS" accesskey="8">LTLIBOBJS</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Using $(LTLIBOBJS) and $(LTALLOCA)
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Libtool-Issues" accesskey="9">Libtool Issues</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Common Issues Related to Libtool&rsquo;s Use
</td></tr>
</table>

<hr>
<a name="Libtool-Concept"></a>
<div class="header">
<p>
Next: <a href="#Libtool-Libraries" accesskey="n" rel="next">Libtool Libraries</a>, Up: <a href="#A-Shared-Library" accesskey="u" rel="up">A Shared Library</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="The-Libtool-Concept"></a>
<h4 class="subsection">8.3.1 The Libtool Concept</h4>

<a name="index-libtool_002c-introduction"></a>
<a name="index-libtool-library_002c-definition"></a>
<a name="index-suffix-_002ela_002c-defined"></a>
<a name="index-_002ela-suffix_002c-defined"></a>

<p>Libtool abstracts shared and static libraries into a unified concept
henceforth called <em>libtool libraries</em>.  Libtool libraries are
files using the <samp>.la</samp> suffix, and can designate a static library,
a shared library, or maybe both.  Their exact nature cannot be
determined until <samp>./configure</samp> is run: not all platforms support
all kinds of libraries, and users can explicitly select which
libraries should be built.  (However the package&rsquo;s maintainers can
tune the default, see <a href="http://www.gnu.org/software/libtool/manual/libtool.html#AC_005fPROG_005fLIBTOOL">The <code>AC_PROG_LIBTOOL</code>
macro</a> in <cite>The Libtool Manual</cite>.)
</p>
<a name="index-suffix-_002elo_002c-defined"></a>
<p>Because object files for shared and static libraries must be compiled
differently, libtool is also used during compilation.  Object files
built by libtool are called <em>libtool objects</em>: these are files
using the <samp>.lo</samp> suffix.  Libtool libraries are built from these
libtool objects.
</p>
<p>You should not assume anything about the structure of <samp>.la</samp> or
<samp>.lo</samp> files and how libtool constructs them: this is libtool&rsquo;s
concern, and the last thing one wants is to learn about libtool&rsquo;s
guts.  However the existence of these files matters, because they are
used as targets and dependencies in <samp>Makefile</samp>s rules when
building libtool libraries.  There are situations where you may have
to refer to these, for instance when expressing dependencies for
building source files conditionally (see <a href="#Conditional-Libtool-Sources">Conditional Libtool Sources</a>).
</p>
<a name="index-libltdl_002c-introduction"></a>

<p>People considering writing a plug-in system, with dynamically loaded
modules, should look into <samp>libltdl</samp>: libtool&rsquo;s dlopening library
(see <a href="http://www.gnu.org/software/libtool/manual/libtool.html#Using-libltdl">Using libltdl</a> in <cite>The Libtool Manual</cite>).
This offers a portable dlopening facility to load libtool libraries
dynamically, and can also achieve static linking where unavoidable.
</p>
<p>Before we discuss how to use libtool with Automake in details, it
should be noted that the libtool manual also has a section about how
to use Automake with libtool (see <a href="http://www.gnu.org/software/libtool/manual/libtool.html#Using-Automake">Using Automake
with Libtool</a> in <cite>The Libtool Manual</cite>).
</p>
<hr>
<a name="Libtool-Libraries"></a>
<div class="header">
<p>
Next: <a href="#Conditional-Libtool-Libraries" accesskey="n" rel="next">Conditional Libtool Libraries</a>, Previous: <a href="#Libtool-Concept" accesskey="p" rel="prev">Libtool Concept</a>, Up: <a href="#A-Shared-Library" accesskey="u" rel="up">A Shared Library</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Building-Libtool-Libraries"></a>
<h4 class="subsection">8.3.2 Building Libtool Libraries</h4>

<a name="index-_005fLTLIBRARIES-primary_002c-defined"></a>
<a name="index-LTLIBRARIES-primary_002c-defined"></a>
<a name="index-Primary-variable_002c-LTLIBRARIES"></a>
<a name="index-Example-of-shared-libraries"></a>
<a name="index-lib_005fLTLIBRARIES"></a>
<a name="index-pkglib_005fLTLIBRARIES"></a>
<a name="index-_005fLTLIBRARIES"></a>

<p>Automake uses libtool to build libraries declared with the
<code>LTLIBRARIES</code> primary.  Each <code>_LTLIBRARIES</code> variable is a
list of libtool libraries to build.  For instance, to create a libtool
library named <samp>libgettext.la</samp>, and install it in <code>libdir</code>,
write:
</p>
<div class="example">
<pre class="example">lib_LTLIBRARIES = libgettext.la
libgettext_la_SOURCES = gettext.c gettext.h &hellip;
</pre></div>

<p>Automake predefines the variable <code>pkglibdir</code>, so you can use
<code>pkglib_LTLIBRARIES</code> to install libraries in
&lsquo;<samp>$(libdir)/@PACKAGE@/</samp>&rsquo;.
</p>
<p>If <samp>gettext.h</samp> is a public header file that needs to be installed
in order for people to use the library, it should be declared using a
<code>_HEADERS</code> variable, not in <code>libgettext_la_SOURCES</code>.
Headers listed in the latter should be internal headers that are not
part of the public interface.
</p>
<div class="example">
<pre class="example">lib_LTLIBRARIES = libgettext.la
libgettext_la_SOURCES = gettext.c &hellip;
include_HEADERS = gettext.h &hellip;
</pre></div>

<p>A package can build and install such a library along with other
programs that use it.  This dependency should be specified using
<code>LDADD</code>.  The following example builds a program named
<samp>hello</samp> that is linked with <samp>libgettext.la</samp>.
</p>
<div class="example">
<pre class="example">lib_LTLIBRARIES = libgettext.la
libgettext_la_SOURCES = gettext.c &hellip;

bin_PROGRAMS = hello
hello_SOURCES = hello.c &hellip;
hello_LDADD = libgettext.la
</pre></div>

<p>Whether <samp>hello</samp> is statically or dynamically linked with
<samp>libgettext.la</samp> is not yet known: this will depend on the
configuration of libtool and the capabilities of the host.
</p>

<hr>
<a name="Conditional-Libtool-Libraries"></a>
<div class="header">
<p>
Next: <a href="#Conditional-Libtool-Sources" accesskey="n" rel="next">Conditional Libtool Sources</a>, Previous: <a href="#Libtool-Libraries" accesskey="p" rel="prev">Libtool Libraries</a>, Up: <a href="#A-Shared-Library" accesskey="u" rel="up">A Shared Library</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Building-Libtool-Libraries-Conditionally"></a>
<h4 class="subsection">8.3.3 Building Libtool Libraries Conditionally</h4>
<a name="index-libtool-libraries_002c-conditional"></a>
<a name="index-conditional-libtool-libraries"></a>

<p>Like conditional programs (see <a href="#Conditional-Programs">Conditional Programs</a>), there are
two main ways to build conditional libraries: using Automake
conditionals or using Autoconf <code>AC_SUBST</code>itutions.
</p>
<p>The important implementation detail you have to be aware of is that
the place where a library will be installed matters to libtool: it
needs to be indicated <em>at link-time</em> using the <samp>-rpath</samp>
option.
</p>
<p>For libraries whose destination directory is known when Automake runs,
Automake will automatically supply the appropriate <samp>-rpath</samp>
option to libtool.  This is the case for libraries listed explicitly in
some installable <code>_LTLIBRARIES</code> variables such as
<code>lib_LTLIBRARIES</code>.
</p>
<p>However, for libraries determined at configure time (and thus
mentioned in <code>EXTRA_LTLIBRARIES</code>), Automake does not know the
final installation directory.  For such libraries you must add the
<samp>-rpath</samp> option to the appropriate <code>_LDFLAGS</code> variable by
hand.
</p>
<p>The examples below illustrate the differences between these two methods.
</p>
<p>Here is an example where <code>WANTEDLIBS</code> is an <code>AC_SUBST</code>ed
variable set at <samp>./configure</samp>-time to either <samp>libfoo.la</samp>,
<samp>libbar.la</samp>, both, or none.  Although &lsquo;<samp>$(WANTEDLIBS)</samp>&rsquo;
appears in the <code>lib_LTLIBRARIES</code>, Automake cannot guess it
relates to <samp>libfoo.la</samp> or <samp>libbar.la</samp> at the time it creates
the link rule for these two libraries.  Therefore the <samp>-rpath</samp>
argument must be explicitly supplied.
</p>
<div class="example">
<pre class="example">EXTRA_LTLIBRARIES = libfoo.la libbar.la
lib_LTLIBRARIES = $(WANTEDLIBS)
libfoo_la_SOURCES = foo.c &hellip;
libfoo_la_LDFLAGS = -rpath '$(libdir)'
libbar_la_SOURCES = bar.c &hellip;
libbar_la_LDFLAGS = -rpath '$(libdir)'
</pre></div>

<p>Here is how the same <samp>Makefile.am</samp> would look using Automake
conditionals named <code>WANT_LIBFOO</code> and <code>WANT_LIBBAR</code>.  Now
Automake is able to compute the <samp>-rpath</samp> setting itself, because
it&rsquo;s clear that both libraries will end up in &lsquo;<samp>$(libdir)</samp>&rsquo; if they
are installed.
</p>
<div class="example">
<pre class="example">lib_LTLIBRARIES =
if WANT_LIBFOO
lib_LTLIBRARIES += libfoo.la
endif
if WANT_LIBBAR
lib_LTLIBRARIES += libbar.la
endif
libfoo_la_SOURCES = foo.c &hellip;
libbar_la_SOURCES = bar.c &hellip;
</pre></div>

<hr>
<a name="Conditional-Libtool-Sources"></a>
<div class="header">
<p>
Next: <a href="#Libtool-Convenience-Libraries" accesskey="n" rel="next">Libtool Convenience Libraries</a>, Previous: <a href="#Conditional-Libtool-Libraries" accesskey="p" rel="prev">Conditional Libtool Libraries</a>, Up: <a href="#A-Shared-Library" accesskey="u" rel="up">A Shared Library</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Libtool-Libraries-with-Conditional-Sources"></a>
<h4 class="subsection">8.3.4 Libtool Libraries with Conditional Sources</h4>

<p>Conditional compilation of sources in a library can be achieved in the
same way as conditional compilation of sources in a program
(see <a href="#Conditional-Sources">Conditional Sources</a>).  The only difference is that
<code>_LIBADD</code> should be used instead of <code>_LDADD</code> and that it
should mention libtool objects (<samp>.lo</samp> files).
</p>
<p>So, to mimic the <samp>hello</samp> example from <a href="#Conditional-Sources">Conditional Sources</a>,
we could build a <samp>libhello.la</samp> library using either
<samp>hello-linux.c</samp> or <samp>hello-generic.c</samp> with the following
<samp>Makefile.am</samp>.
</p>
<div class="example">
<pre class="example">lib_LTLIBRARIES = libhello.la
libhello_la_SOURCES = hello-common.c
EXTRA_libhello_la_SOURCES = hello-linux.c hello-generic.c
libhello_la_LIBADD = $(HELLO_SYSTEM)
libhello_la_DEPENDENCIES = $(HELLO_SYSTEM)
</pre></div>

<p>And make sure <code>configure</code> defines <code>HELLO_SYSTEM</code> as
either <samp>hello-linux.lo</samp> or <samp>hello-generic.lo</samp>.
</p>
<p>Or we could simply use an Automake conditional as follows.
</p>
<div class="example">
<pre class="example">lib_LTLIBRARIES = libhello.la
libhello_la_SOURCES = hello-common.c
if LINUX
libhello_la_SOURCES += hello-linux.c
else
libhello_la_SOURCES += hello-generic.c
endif
</pre></div>

<hr>
<a name="Libtool-Convenience-Libraries"></a>
<div class="header">
<p>
Next: <a href="#Libtool-Modules" accesskey="n" rel="next">Libtool Modules</a>, Previous: <a href="#Conditional-Libtool-Sources" accesskey="p" rel="prev">Conditional Libtool Sources</a>, Up: <a href="#A-Shared-Library" accesskey="u" rel="up">A Shared Library</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Libtool-Convenience-Libraries-1"></a>
<h4 class="subsection">8.3.5 Libtool Convenience Libraries</h4>
<a name="index-convenience-libraries_002c-libtool"></a>
<a name="index-libtool-convenience-libraries"></a>
<a name="index-noinst_005fLTLIBRARIES"></a>
<a name="index-check_005fLTLIBRARIES"></a>

<p>Sometimes you want to build libtool libraries that should not be
installed.  These are called <em>libtool convenience libraries</em> and
are typically used to encapsulate many sublibraries, later gathered
into one big installed library.
</p>
<p>Libtool convenience libraries are declared by directory-less variables
such as <code>noinst_LTLIBRARIES</code>, <code>check_LTLIBRARIES</code>, or even
<code>EXTRA_LTLIBRARIES</code>.  Unlike installed libtool libraries they do
not need an <samp>-rpath</samp> flag at link time (actually this is the only
difference).
</p>
<p>Convenience libraries listed in <code>noinst_LTLIBRARIES</code> are always
built.  Those listed in <code>check_LTLIBRARIES</code> are built only upon
&lsquo;<samp>make check</samp>&rsquo;.  Finally, libraries listed in
<code>EXTRA_LTLIBRARIES</code> are never built explicitly: Automake outputs
rules to build them, but if the library does not appear as a Makefile
dependency anywhere it won&rsquo;t be built (this is why
<code>EXTRA_LTLIBRARIES</code> is used for conditional compilation).
</p>
<p>Here is a sample setup merging libtool convenience libraries from
subdirectories into one main <samp>libtop.la</samp> library.
</p>
<div class="example">
<pre class="example"># -- Top-level Makefile.am --
SUBDIRS = sub1 sub2 &hellip;
lib_LTLIBRARIES = libtop.la
libtop_la_SOURCES =
libtop_la_LIBADD = \
  sub1/libsub1.la \
  sub2/libsub2.la \
  &hellip;

# -- sub1/Makefile.am --
noinst_LTLIBRARIES = libsub1.la
libsub1_la_SOURCES = &hellip;

# -- sub2/Makefile.am --
# showing nested convenience libraries
SUBDIRS = sub2.1 sub2.2 &hellip;
noinst_LTLIBRARIES = libsub2.la
libsub2_la_SOURCES =
libsub2_la_LIBADD = \
  sub21/libsub21.la \
  sub22/libsub22.la \
  &hellip;
</pre></div>

<p>When using such setup, beware that <code>automake</code> will assume
<samp>libtop.la</samp> is to be linked with the C linker.  This is because
<code>libtop_la_SOURCES</code> is empty, so <code>automake</code> picks C as
default language.  If <code>libtop_la_SOURCES</code> was not empty,
<code>automake</code> would select the linker as explained in <a href="#How-the-Linker-is-Chosen">How the Linker is Chosen</a>.
</p>
<p>If one of the sublibraries contains non-C source, it is important that
the appropriate linker be chosen.  One way to achieve this is to
pretend that there is such a non-C file among the sources of the
library, thus forcing <code>automake</code> to select the appropriate
linker.  Here is the top-level <samp>Makefile</samp> of our example updated
to force C++ linking.
</p>
<div class="example">
<pre class="example">SUBDIRS = sub1 sub2 &hellip;
lib_LTLIBRARIES = libtop.la
libtop_la_SOURCES =
# Dummy C++ source to cause C++ linking.
nodist_EXTRA_libtop_la_SOURCES = dummy.cxx
libtop_la_LIBADD = \
  sub1/libsub1.la \
  sub2/libsub2.la \
  &hellip;
</pre></div>

<p>&lsquo;<samp>EXTRA_*_SOURCES</samp>&rsquo; variables are used to keep track of source
files that might be compiled (this is mostly useful when doing
conditional compilation using <code>AC_SUBST</code>, see <a href="#Conditional-Libtool-Sources">Conditional Libtool Sources</a>), and the <code>nodist_</code> prefix means the listed
sources are not to be distributed (see <a href="#Program-and-Library-Variables">Program and Library Variables</a>).  In effect the file <samp>dummy.cxx</samp> does not need to
exist in the source tree.  Of course if you have some real source file
to list in <code>libtop_la_SOURCES</code> there is no point in cheating with
<code>nodist_EXTRA_libtop_la_SOURCES</code>.
</p>

<hr>
<a name="Libtool-Modules"></a>
<div class="header">
<p>
Next: <a href="#Libtool-Flags" accesskey="n" rel="next">Libtool Flags</a>, Previous: <a href="#Libtool-Convenience-Libraries" accesskey="p" rel="prev">Libtool Convenience Libraries</a>, Up: <a href="#A-Shared-Library" accesskey="u" rel="up">A Shared Library</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Libtool-Modules-1"></a>
<h4 class="subsection">8.3.6 Libtool Modules</h4>
<a name="index-modules_002c-libtool"></a>
<a name="index-libtool-modules"></a>
<a name="index-_002dmodule_002c-libtool"></a>

<p>These are libtool libraries meant to be dlopened.  They are
indicated to libtool by passing <samp>-module</samp> at link-time.
</p>
<div class="example">
<pre class="example">pkglib_LTLIBRARIES = mymodule.la
mymodule_la_SOURCES = doit.c
mymodule_la_LDFLAGS = -module
</pre></div>

<p>Ordinarily, Automake requires that a library&rsquo;s name start with
<code>lib</code>.  However, when building a dynamically loadable module you
might wish to use a &quot;nonstandard&quot; name.  Automake will not complain
about such nonstandard names if it knows the library being built is a
libtool module, i.e., if <samp>-module</samp> explicitly appears in the
library&rsquo;s <code>_LDFLAGS</code> variable (or in the common <code>AM_LDFLAGS</code>
variable when no per-library <code>_LDFLAGS</code> variable is defined).
</p>
<p>As always, <code>AC_SUBST</code> variables are black boxes to Automake since
their values are not yet known when <code>automake</code> is run.
Therefore if <samp>-module</samp> is set via such a variable, Automake
cannot notice it and will proceed as if the library was an ordinary
libtool library, with strict naming.
</p>
<p>If <code>mymodule_la_SOURCES</code> is not specified, then it defaults to
the single file <samp>mymodule.c</samp> (see <a href="#Default-_005fSOURCES">Default _SOURCES</a>).
</p>
<hr>
<a name="Libtool-Flags"></a>
<div class="header">
<p>
Next: <a href="#LTLIBOBJS" accesskey="n" rel="next">LTLIBOBJS</a>, Previous: <a href="#Libtool-Modules" accesskey="p" rel="prev">Libtool Modules</a>, Up: <a href="#A-Shared-Library" accesskey="u" rel="up">A Shared Library</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="g_t_005fLIBADD_002c-_005fLDFLAGS_002c-and-_005fLIBTOOLFLAGS"></a>
<h4 class="subsection">8.3.7 <code>_LIBADD</code>, <code>_LDFLAGS</code>, and <code>_LIBTOOLFLAGS</code></h4>
<a name="index-_005fLIBADD_002c-libtool"></a>
<a name="index-_005fLDFLAGS_002c-libtool"></a>
<a name="index-_005fLIBTOOLFLAGS_002c-libtool"></a>
<a name="index-AM_005fLIBTOOLFLAGS"></a>
<a name="index-LIBTOOLFLAGS"></a>
<a name="index-maude_005fLIBTOOLFLAGS"></a>

<p>As shown in previous sections, the &lsquo;<samp><var>library</var>_LIBADD</samp>&rsquo;
variable should be used to list extra libtool objects (<samp>.lo</samp>
files) or libtool libraries (<samp>.la</samp>) to add to <var>library</var>.
</p>
<p>The &lsquo;<samp><var>library</var>_LDFLAGS</samp>&rsquo; variable is the place to list
additional libtool linking flags, such as <samp>-version-info</samp>,
<samp>-static</samp>, and a lot more.  See <a href="http://www.gnu.org/software/libtool/manual/libtool.html#Link-mode">Link mode</a> in <cite>The Libtool Manual</cite>.
</p>
<p>The <code>libtool</code> command has two kinds of options: mode-specific
options and generic options.  Mode-specific options such as the
aforementioned linking flags should be lumped with the other flags
passed to the tool invoked by <code>libtool</code> (hence the use of
&lsquo;<samp><var>library</var>_LDFLAGS</samp>&rsquo; for libtool linking flags).  Generic
options include <samp>--tag=<var>tag</var></samp> and <samp>--silent</samp>
(see <a href="http://www.gnu.org/software/libtool/manual/libtool.html#Invoking-libtool">Invoking <code>libtool</code></a> in <cite>The
Libtool Manual</cite> for more options) should appear before the mode
selection on the command line; in <samp>Makefile.am</samp>s they should
be listed in the &lsquo;<samp><var>library</var>_LIBTOOLFLAGS</samp>&rsquo; variable.
</p>
<p>If &lsquo;<samp><var>library</var>_LIBTOOLFLAGS</samp>&rsquo; is not defined, then the variable
<code>AM_LIBTOOLFLAGS</code> is used instead.
</p>
<p>These flags are passed to libtool after the <samp>--tag=<var>tag</var></samp>
option computed by Automake (if any), so
&lsquo;<samp><var>library</var>_LIBTOOLFLAGS</samp>&rsquo; (or <code>AM_LIBTOOLFLAGS</code>) is a
good place to override or supplement the <samp>--tag=<var>tag</var></samp>
setting.
</p>
<p>The libtool rules also use a <code>LIBTOOLFLAGS</code> variable that should
not be set in <samp>Makefile.am</samp>: this is a user variable (see <a href="#Flag-Variables-Ordering">Flag Variables Ordering</a>.  It allows users to run &lsquo;<samp>make
LIBTOOLFLAGS=--silent</samp>&rsquo;, for instance.  Note that the verbosity of
<code>libtool</code> can also be influenced by the Automake support
for silent rules (see <a href="#Automake-Silent-Rules">Automake Silent Rules</a>).
</p>
<hr>
<a name="LTLIBOBJS"></a>
<div class="header">
<p>
Next: <a href="#Libtool-Issues" accesskey="n" rel="next">Libtool Issues</a>, Previous: <a href="#Libtool-Flags" accesskey="p" rel="prev">Libtool Flags</a>, Up: <a href="#A-Shared-Library" accesskey="u" rel="up">A Shared Library</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="LTLIBOBJS-and-LTALLOCA"></a>
<h4 class="subsection">8.3.8 <code>LTLIBOBJS</code> and <code>LTALLOCA</code></h4>
<a name="index-LTLIBOBJS_002c-special-handling"></a>
<a name="index-LIBOBJS_002c-and-Libtool"></a>
<a name="index-LTALLOCA_002c-special-handling"></a>
<a name="index-ALLOCA_002c-and-Libtool"></a>
<a name="index-LTLIBOBJS"></a>
<a name="index-LIBOBJS-1"></a>
<a name="index-LTALLOCA"></a>
<a name="index-ALLOCA"></a>
<a name="index-AC_005fLIBOBJ"></a>

<p>Where an ordinary library might include &lsquo;<samp>$(LIBOBJS)</samp>&rsquo; or
&lsquo;<samp>$(ALLOCA)</samp>&rsquo; (see <a href="#LIBOBJS">LIBOBJS</a>), a libtool library must use
&lsquo;<samp>$(LTLIBOBJS)</samp>&rsquo; or &lsquo;<samp>$(LTALLOCA)</samp>&rsquo;.  This is required because
the object files that libtool operates on do not necessarily end in
<samp>.o</samp>.
</p>
<p>Nowadays, the computation of <code>LTLIBOBJS</code> from <code>LIBOBJS</code> is
performed automatically by Autoconf (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#AC_005fLIBOBJ-vs-LIBOBJS"><code>AC_LIBOBJ</code> vs. <code>LIBOBJS</code></a> in <cite>The Autoconf Manual</cite>).
</p>
<hr>
<a name="Libtool-Issues"></a>
<div class="header">
<p>
Previous: <a href="#LTLIBOBJS" accesskey="p" rel="prev">LTLIBOBJS</a>, Up: <a href="#A-Shared-Library" accesskey="u" rel="up">A Shared Library</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Common-Issues-Related-to-Libtool_0027s-Use"></a>
<h4 class="subsection">8.3.9 Common Issues Related to Libtool&rsquo;s Use</h4>

<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Error-required-file-ltmain_002esh-not-found" accesskey="1">Error required file ltmain.sh not found</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The need to run libtoolize
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Objects-created-both-with-libtool-and-without" accesskey="2">Objects created both with libtool and without</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Avoid a specific build race
</td></tr>
</table>

<hr>
<a name="Error-required-file-ltmain_002esh-not-found"></a>
<div class="header">
<p>
Next: <a href="#Objects-created-both-with-libtool-and-without" accesskey="n" rel="next">Objects created both with libtool and without</a>, Up: <a href="#Libtool-Issues" accesskey="u" rel="up">Libtool Issues</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Error_003a-required-file-_0060_002e_002fltmain_002esh_0027-not-found"></a>
<h4 class="subsubsection">8.3.9.1 Error: &lsquo;<samp>required file `./ltmain.sh' not found</samp>&rsquo;</h4>
<a name="index-ltmain_002esh-not-found"></a>
<a name="index-libtoolize_002c-no-longer-run-by-automake"></a>
<a name="index-libtoolize-and-autoreconf"></a>
<a name="index-autoreconf-and-libtoolize"></a>
<a name="index-bootstrap_002esh-and-autoreconf"></a>
<a name="index-autogen_002esh-and-autoreconf"></a>

<p>Libtool comes with a tool called <code>libtoolize</code> that will
install libtool&rsquo;s supporting files into a package.  Running this
command will install <samp>ltmain.sh</samp>.  You should execute it before
<code>aclocal</code> and <code>automake</code>.
</p>
<p>People upgrading old packages to newer autotools are likely to face
this issue because older Automake versions used to call
<code>libtoolize</code>.  Therefore old build scripts do not call
<code>libtoolize</code>.
</p>
<p>Since Automake 1.6, it has been decided that running
<code>libtoolize</code> was none of Automake&rsquo;s business.  Instead, that
functionality has been moved into the <code>autoreconf</code> command
(see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#autoreconf-Invocation">Using <code>autoreconf</code></a> in <cite>The Autoconf Manual</cite>).  If you do not want to remember what to run and
when, just learn the <code>autoreconf</code> command.  Hopefully,
replacing existing <samp>bootstrap.sh</samp> or <samp>autogen.sh</samp> scripts by
a call to <code>autoreconf</code> should also free you from any similar
incompatible change in the future.
</p>
<hr>
<a name="Objects-created-both-with-libtool-and-without"></a>
<div class="header">
<p>
Previous: <a href="#Error-required-file-ltmain_002esh-not-found" accesskey="p" rel="prev">Error required file ltmain.sh not found</a>, Up: <a href="#Libtool-Issues" accesskey="u" rel="up">Libtool Issues</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Objects-created-with-both-libtool-and-without"></a>
<h4 class="subsubsection">8.3.9.2 Objects &lsquo;<samp>created with both libtool and without</samp>&rsquo;</h4>

<p>Sometimes, the same source file is used both to build a libtool
library and to build another non-libtool target (be it a program or
another library).
</p>
<p>Let&rsquo;s consider the following <samp>Makefile.am</samp>.
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = prog
prog_SOURCES = prog.c foo.c &hellip;

lib_LTLIBRARIES = libfoo.la
libfoo_la_SOURCES = foo.c &hellip;
</pre></div>

<p>(In this trivial case the issue could be avoided by linking
<samp>libfoo.la</samp> with <samp>prog</samp> instead of listing <samp>foo.c</samp> in
<code>prog_SOURCES</code>.  But let&rsquo;s assume we really want to keep
<samp>prog</samp> and <samp>libfoo.la</samp> separate.)
</p>
<p>Technically, it means that we should build <samp>foo.$(OBJEXT)</samp> for
<samp>prog</samp>, and <samp>foo.lo</samp> for <samp>libfoo.la</samp>.  The problem is
that in the course of creating <samp>foo.lo</samp>, libtool may erase (or
replace) <samp>foo.$(OBJEXT)</samp>, and this cannot be avoided.
</p>
<p>Therefore, when Automake detects this situation it will complain
with a message such as
</p><div class="example">
<pre class="example">object 'foo.$(OBJEXT)' created both with libtool and without
</pre></div>

<p>A workaround for this issue is to ensure that these two objects get
different basenames.  As explained in <a href="#Renamed-Objects">Renamed Objects</a>, this
happens automatically when per-targets flags are used.
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = prog
prog_SOURCES = prog.c foo.c &hellip;
prog_CFLAGS = $(AM_CFLAGS)

lib_LTLIBRARIES = libfoo.la
libfoo_la_SOURCES = foo.c &hellip;
</pre></div>

<p>Adding &lsquo;<samp>prog_CFLAGS = $(AM_CFLAGS)</samp>&rsquo; is almost a no-op, because
when the <code>prog_CFLAGS</code> is defined, it is used instead of
<code>AM_CFLAGS</code>.  However as a side effect it will cause
<samp>prog.c</samp> and <samp>foo.c</samp> to be compiled as
<samp>prog-prog.$(OBJEXT)</samp> and <samp>prog-foo.$(OBJEXT)</samp>, which solves
the issue.
</p>
<hr>
<a name="Program-and-Library-Variables"></a>
<div class="header">
<p>
Next: <a href="#Default-_005fSOURCES" accesskey="n" rel="next">Default _SOURCES</a>, Previous: <a href="#A-Shared-Library" accesskey="p" rel="prev">A Shared Library</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Program-and-Library-Variables-1"></a>
<h3 class="section">8.4 Program and Library Variables</h3>

<p>Associated with each program is a collection of variables that can be
used to modify how that program is built.  There is a similar list of
such variables for each library.  The canonical name of the program (or
library) is used as a base for naming these variables.
</p>
<p>In the list below, we use the name &ldquo;maude&rdquo; to refer to the program or
library.  In your <samp>Makefile.am</samp> you would replace this with the
canonical name of your program.  This list also refers to &ldquo;maude&rdquo; as a
program, but in general the same rules apply for both static and dynamic
libraries; the documentation below notes situations where programs and
libraries differ.
</p>
<dl compact="compact">
<dt><code>maude_SOURCES</code>
<a name="index-maude_005fSOURCES"></a>
</dt>
<dd><p>This variable, if it exists, lists all the source files that are
compiled to build the program.  These files are added to the
distribution by default.  When building the program, Automake will cause
each source file to be compiled to a single <samp>.o</samp> file (or
<samp>.lo</samp> when using libtool).  Normally these object files are named
after the source file, but other factors can change this.  If a file in
the <code>_SOURCES</code> variable has an unrecognized extension, Automake
will do one of two things with it.  If a suffix rule exists for turning
files with the unrecognized extension into <samp>.o</samp> files, then
<code>automake</code> will treat this file as it will any other source file
(see <a href="#Support-for-Other-Languages">Support for Other Languages</a>).  Otherwise, the file will be
ignored as though it were a header file.
</p>
<p>The prefixes <code>dist_</code> and <code>nodist_</code> can be used to control
whether files listed in a <code>_SOURCES</code> variable are distributed.
<code>dist_</code> is redundant, as sources are distributed by default, but it
can be specified for clarity if desired.
</p>
<p>It is possible to have both <code>dist_</code> and <code>nodist_</code> variants of
a given <code>_SOURCES</code> variable at once; this lets you easily
distribute some files and not others, for instance:
</p>
<div class="example">
<pre class="example">nodist_maude_SOURCES = nodist.c
dist_maude_SOURCES = dist-me.c
</pre></div>

<p>By default the output file (on Unix systems, the <samp>.o</samp> file) will
be put into the current build directory.  However, if the option
<samp>subdir-objects</samp> is in effect in the current directory then the
<samp>.o</samp> file will be put into the subdirectory named after the
source file.  For instance, with <samp>subdir-objects</samp> enabled,
<samp>sub/dir/file.c</samp> will be compiled to <samp>sub/dir/file.o</samp>.  Some
people prefer this mode of operation.  You can specify
<samp>subdir-objects</samp> in <code>AUTOMAKE_OPTIONS</code> (see <a href="#Options">Options</a>).
<a name="index-Subdirectory_002c-objects-in"></a>
<a name="index-Objects-in-subdirectory"></a>
</p>

</dd>
<dt><code>EXTRA_maude_SOURCES</code>
<a name="index-EXTRA_005fmaude_005fSOURCES"></a>
</dt>
<dd><p>Automake needs to know the list of files you intend to compile
<em>statically</em>.  For one thing, this is the only way Automake has of
knowing what sort of language support a given <samp>Makefile.in</samp>
requires.  <a name="DOCF3" href="#FOOT3"><sup>3</sup></a>  This means that, for example, you can&rsquo;t put a
configure substitution like &lsquo;<samp>@my_sources@</samp>&rsquo; into a &lsquo;<samp>_SOURCES</samp>&rsquo;
variable.  If you intend to conditionally compile source files and use
<samp>configure</samp> to substitute the appropriate object names into, e.g.,
<code>_LDADD</code> (see below), then you should list the corresponding source
files in the <code>EXTRA_</code> variable.
</p>
<p>This variable also supports <code>dist_</code> and <code>nodist_</code> prefixes.
For instance, <code>nodist_EXTRA_maude_SOURCES</code> would list extra
sources that may need to be built, but should not be distributed.
</p>
</dd>
<dt><code>maude_AR</code>
<a name="index-maude_005fAR"></a>
</dt>
<dd><p>A static library is created by default by invoking &lsquo;<samp>$(AR)
$(ARFLAGS)</samp>&rsquo; followed by the name of the library and then the objects
being put into the library.  You can override this by setting the
<code>_AR</code> variable.  This is usually used with C++; some C++
compilers require a special invocation in order to instantiate all the
templates that should go into a library.  For instance, the SGI C++
compiler likes this variable set like so:
</p><div class="example">
<pre class="example">libmaude_a_AR = $(CXX) -ar -o
</pre></div>

</dd>
<dt><code>maude_LIBADD</code>
<a name="index-maude_005fLIBADD-1"></a>
</dt>
<dd><p>Extra objects can be added to a <em>library</em> using the <code>_LIBADD</code>
variable.  For instance, this should be used for objects determined by
<code>configure</code> (see <a href="#A-Library">A Library</a>).
</p>
<p>In the case of libtool libraries, <code>maude_LIBADD</code> can also refer
to other libtool libraries.
</p>
</dd>
<dt><code>maude_LDADD</code>
<a name="index-maude_005fLDADD-1"></a>
</dt>
<dd><p>Extra objects (<samp>*.$(OBJEXT)</samp>) and libraries (<samp>*.a</samp>,
<samp>*.la</samp>) can be added to a <em>program</em> by listing them in the
<code>_LDADD</code> variable.  For instance, this should be used for objects
determined by <code>configure</code> (see <a href="#Linking">Linking</a>).
</p>
<p><code>_LDADD</code> and <code>_LIBADD</code> are inappropriate for passing
program-specific linker flags (except for <samp>-l</samp>, <samp>-L</samp>,
<samp>-dlopen</samp> and <samp>-dlpreopen</samp>).  Use the <code>_LDFLAGS</code> variable
for this purpose.
</p>
<p>For instance, if your <samp>configure.ac</samp> uses <code>AC_PATH_XTRA</code>, you
could link your program against the X libraries like so:
</p>
<div class="example">
<pre class="example">maude_LDADD = $(X_PRE_LIBS) $(X_LIBS) $(X_EXTRA_LIBS)
</pre></div>

<p>We recommend that you use <samp>-l</samp> and <samp>-L</samp> only when
referring to third-party libraries, and give the explicit file names
of any library built by your package.  Doing so will ensure that
<code>maude_DEPENDENCIES</code> (see below) is correctly defined by default.
</p>
</dd>
<dt><code>maude_LDFLAGS</code>
<a name="index-maude_005fLDFLAGS-1"></a>
</dt>
<dd><p>This variable is used to pass extra flags to the link step of a program
or a shared library.  It overrides the <code>AM_LDFLAGS</code> variable.
</p>
</dd>
<dt><code>maude_LIBTOOLFLAGS</code>
<a name="index-maude_005fLIBTOOLFLAGS-1"></a>
</dt>
<dd><p>This variable is used to pass extra options to <code>libtool</code>.
It overrides the <code>AM_LIBTOOLFLAGS</code> variable.
These options are output before <code>libtool</code>&rsquo;s <samp>--mode=<var>mode</var></samp>
option, so they should not be mode-specific options (those belong to
the compiler or linker flags).  See <a href="#Libtool-Flags">Libtool Flags</a>.
</p>
</dd>
<dt><code>maude_DEPENDENCIES</code>
<a name="index-maude_005fDEPENDENCIES-1"></a>
</dt>
<dt><code>EXTRA_maude_DEPENDENCIES</code>
<a name="index-EXTRA_005fmaude_005fDEPENDENCIES-1"></a>
</dt>
<dd><p>It is also occasionally useful to have a target (program or library)
depend on some other file that is not actually part of that target.
This can be done using the <code>_DEPENDENCIES</code> variable.  Each
target depends on the contents of such a variable, but no further
interpretation is done.
</p>
<p>Since these dependencies are associated to the link rule used to
create the programs they should normally list files used by the link
command.  That is <samp>*.$(OBJEXT)</samp>, <samp>*.a</samp>, or <samp>*.la</samp> files
for programs; <samp>*.lo</samp> and <samp>*.la</samp> files for Libtool libraries;
and <samp>*.$(OBJEXT)</samp> files for static libraries.  In rare cases you
may need to add other kinds of files such as linker scripts, but
<em>listing a source file in <code>_DEPENDENCIES</code> is wrong</em>.  If
some source file needs to be built before all the components of a
program are built, consider using the <code>BUILT_SOURCES</code> variable
(see <a href="#Sources">Sources</a>).
</p>
<p>If <code>_DEPENDENCIES</code> is not supplied, it is computed by Automake.
The automatically-assigned value is the contents of <code>_LDADD</code> or
<code>_LIBADD</code>, with most configure substitutions, <samp>-l</samp>, <samp>-L</samp>,
<samp>-dlopen</samp> and <samp>-dlpreopen</samp> options removed.  The configure
substitutions that are left in are only &lsquo;<samp>$(LIBOBJS)</samp>&rsquo; and
&lsquo;<samp>$(ALLOCA)</samp>&rsquo;; these are left because it is known that they will not
cause an invalid value for <code>_DEPENDENCIES</code> to be generated.
</p>
<p><code>_DEPENDENCIES</code> is more likely used to perform conditional
compilation using an <code>AC_SUBST</code> variable that contains a list of
objects.  See <a href="#Conditional-Sources">Conditional Sources</a>, and <a href="#Conditional-Libtool-Sources">Conditional Libtool Sources</a>.
</p>
<p>The <code>EXTRA_*_DEPENDENCIES</code> variable may be useful for cases where
you merely want to augment the <code>automake</code>-generated
<code>_DEPENDENCIES</code> variable rather than replacing it.
</p>
</dd>
<dt><code>maude_LINK</code>
<a name="index-maude_005fLINK"></a>
</dt>
<dd><p>You can override the linker on a per-program basis.  By default the
linker is chosen according to the languages used by the program.  For
instance, a program that includes C++ source code would use the C++
compiler to link.  The <code>_LINK</code> variable must hold the name of a
command that can be passed all the <samp>.o</samp> file names and libraries
to link against as arguments.  Note that the name of the underlying
program is <em>not</em> passed to <code>_LINK</code>; typically one uses
&lsquo;<samp>$@</samp>&rsquo;:
</p>
<div class="example">
<pre class="example">maude_LINK = $(CCLD) -magic -o $@
</pre></div>

<p>If a <code>_LINK</code> variable is not supplied, it may still be generated
and used by Automake due to the use of per-target link flags such as
<code>_CFLAGS</code>, <code>_LDFLAGS</code> or <code>_LIBTOOLFLAGS</code>, in cases where
they apply.
</p>
</dd>
<dt><code>maude_CCASFLAGS</code>
<a name="index-maude_005fCCASFLAGS"></a>
</dt>
<dt><code>maude_CFLAGS</code>
<a name="index-maude_005fCFLAGS"></a>
</dt>
<dt><code>maude_CPPFLAGS</code>
<a name="index-maude_005fCPPFLAGS"></a>
</dt>
<dt><code>maude_CXXFLAGS</code>
<a name="index-maude_005fCXXFLAGS"></a>
</dt>
<dt><code>maude_FFLAGS</code>
<a name="index-maude_005fFFLAGS"></a>
</dt>
<dt><code>maude_GCJFLAGS</code>
<a name="index-maude_005fGCJFLAGS"></a>
</dt>
<dt><code>maude_LFLAGS</code>
<a name="index-maude_005fLFLAGS"></a>
</dt>
<dt><code>maude_OBJCFLAGS</code>
<a name="index-maude_005fOBJCFLAGS"></a>
</dt>
<dt><code>maude_OBJCXXFLAGS</code>
<a name="index-maude_005fOBJCXXFLAGS"></a>
</dt>
<dt><code>maude_RFLAGS</code>
<a name="index-maude_005fRFLAGS"></a>
</dt>
<dt><code>maude_UPCFLAGS</code>
<a name="index-maude_005fUPCFLAGS"></a>
</dt>
<dt><code>maude_YFLAGS</code>
<a name="index-maude_005fYFLAGS"></a>
</dt>
<dd><a name="index-per_002dtarget-compilation-flags_002c-defined"></a>
<p>Automake allows you to set compilation flags on a per-program (or
per-library) basis.  A single source file can be included in several
programs, and it will potentially be compiled with different flags for
each program.  This works for any language directly supported by
Automake.  These <em>per-target compilation flags</em> are
&lsquo;<samp>_CCASFLAGS</samp>&rsquo;,
&lsquo;<samp>_CFLAGS</samp>&rsquo;,
&lsquo;<samp>_CPPFLAGS</samp>&rsquo;,
&lsquo;<samp>_CXXFLAGS</samp>&rsquo;,
&lsquo;<samp>_FFLAGS</samp>&rsquo;,
&lsquo;<samp>_GCJFLAGS</samp>&rsquo;,
&lsquo;<samp>_LFLAGS</samp>&rsquo;,
&lsquo;<samp>_OBJCFLAGS</samp>&rsquo;,
&lsquo;<samp>_OBJCXXFLAGS</samp>&rsquo;,
&lsquo;<samp>_RFLAGS</samp>&rsquo;,
&lsquo;<samp>_UPCFLAGS</samp>&rsquo;, and
&lsquo;<samp>_YFLAGS</samp>&rsquo;.
</p>
<p>When using a per-target compilation flag, Automake will choose a
different name for the intermediate object files.  Ordinarily a file
like <samp>sample.c</samp> will be compiled to produce <samp>sample.o</samp>.
However, if the program&rsquo;s <code>_CFLAGS</code> variable is set, then the
object file will be named, for instance, <samp>maude-sample.o</samp>.  (See
also <a href="#Renamed-Objects">Renamed Objects</a>).
</p>
<p>In compilations with per-target flags, the ordinary &lsquo;<samp>AM_</samp>&rsquo; form of
the flags variable is <em>not</em> automatically included in the
compilation (however, the user form of the variable <em>is</em> included).
So for instance, if you want the hypothetical <samp>maude</samp> compilations
to also use the value of <code>AM_CFLAGS</code>, you would need to write:
</p>
<div class="example">
<pre class="example">maude_CFLAGS = &hellip; your flags &hellip; $(AM_CFLAGS)
</pre></div>

<p>See <a href="#Flag-Variables-Ordering">Flag Variables Ordering</a>, for more discussion about the
interaction between user variables, &lsquo;<samp>AM_</samp>&rsquo; shadow variables, and
per-target variables.
</p>
</dd>
<dt><code>maude_SHORTNAME</code>
<a name="index-maude_005fSHORTNAME"></a>
</dt>
<dd><p>On some platforms the allowable file names are very short.  In order to
support these systems and per-target compilation flags at the same
time, Automake allows you to set a &ldquo;short name&rdquo; that will influence
how intermediate object files are named.  For instance, in the following
example,
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = maude
maude_CPPFLAGS = -DSOMEFLAG
maude_SHORTNAME = m
maude_SOURCES = sample.c &hellip;
</pre></div>

<p>the object file would be named <samp>m-sample.o</samp> rather than
<samp>maude-sample.o</samp>.
</p>
<p>This facility is rarely needed in practice,
and we recommend avoiding it until you find it is required.
</p></dd>
</dl>

<hr>
<a name="Default-_005fSOURCES"></a>
<div class="header">
<p>
Next: <a href="#LIBOBJS" accesskey="n" rel="next">LIBOBJS</a>, Previous: <a href="#Program-and-Library-Variables" accesskey="p" rel="prev">Program and Library Variables</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Default-_005fSOURCES-1"></a>
<h3 class="section">8.5 Default <code>_SOURCES</code></h3>

<a name="index-_005fSOURCES-2"></a>
<a name="index-SOURCES-1"></a>
<a name="index-_005fSOURCES_002c-default"></a>
<a name="index-default-_005fSOURCES"></a>
<a name="index-AM_005fDEFAULT_005fSOURCE_005fEXT"></a>

<p><code>_SOURCES</code> variables are used to specify source files of programs
(see <a href="#A-Program">A Program</a>), libraries (see <a href="#A-Library">A Library</a>), and Libtool
libraries (see <a href="#A-Shared-Library">A Shared Library</a>).
</p>
<p>When no such variable is specified for a target, Automake will define
one itself.  The default is to compile a single C file whose base name
is the name of the target itself, with any extension replaced by
<code>AM_DEFAULT_SOURCE_EXT</code>, which defaults to <samp>.c</samp>.
</p>
<p>For example if you have the following somewhere in your
<samp>Makefile.am</samp> with no corresponding <code>libfoo_a_SOURCES</code>:
</p>
<div class="example">
<pre class="example">lib_LIBRARIES = libfoo.a sub/libc++.a
</pre></div>

<p><samp>libfoo.a</samp> will be built using a default source file named
<samp>libfoo.c</samp>, and <samp>sub/libc++.a</samp> will be built from
<samp>sub/libc++.c</samp>.  (In older versions <samp>sub/libc++.a</samp>
would be built from <samp>sub_libc___a.c</samp>, i.e., the default source
was the canonized name of the target, with <samp>.c</samp> appended.
We believe the new behavior is more sensible, but for backward
compatibility <code>automake</code> will use the old name if a file or a rule
with that name exists and <code>AM_DEFAULT_SOURCE_EXT</code> is not used.)
</p>
<a name="index-check_005fPROGRAMS-example"></a>
<a name="index-check_005fPROGRAMS-1"></a>
<p>Default sources are mainly useful in test suites, when building many
test programs each from a single source.  For instance, in
</p>
<div class="example">
<pre class="example">check_PROGRAMS = test1 test2 test3
AM_DEFAULT_SOURCE_EXT = .cpp
</pre></div>

<p><samp>test1</samp>, <samp>test2</samp>, and <samp>test3</samp> will be built
from <samp>test1.cpp</samp>, <samp>test2.cpp</samp>, and <samp>test3.cpp</samp>.
Without the last line, they will be built from <samp>test1.c</samp>,
<samp>test2.c</samp>, and <samp>test3.c</samp>.
</p>
<a name="index-Libtool-modules_002c-default-source-example"></a>
<a name="index-default-source_002c-Libtool-modules-example"></a>
<p>Another case where this is convenient is building many Libtool modules
(<samp>module<var>n</var>.la</samp>), each defined in its own file
(<samp>module<var>n</var>.c</samp>).
</p>
<div class="example">
<pre class="example">AM_LDFLAGS = -module
lib_LTLIBRARIES = module1.la module2.la module3.la
</pre></div>

<a name="index-empty-_005fSOURCES"></a>
<a name="index-_005fSOURCES_002c-empty"></a>
<p>Finally, there is one situation where this default source computation
needs to be avoided: when a target should not be built from sources.
We already saw such an example in <a href="#true">true</a>; this happens when all
the constituents of a target have already been compiled and just need
to be combined using a <code>_LDADD</code> variable.  Then it is necessary
to define an empty <code>_SOURCES</code> variable, so that <code>automake</code>
does not compute a default.
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = target
target_SOURCES =
target_LDADD = libmain.a libmisc.a
</pre></div>

<hr>
<a name="LIBOBJS"></a>
<div class="header">
<p>
Next: <a href="#Program-Variables" accesskey="n" rel="next">Program Variables</a>, Previous: <a href="#Default-_005fSOURCES" accesskey="p" rel="prev">Default _SOURCES</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Special-handling-for-LIBOBJS-and-ALLOCA"></a>
<h3 class="section">8.6 Special handling for <code>LIBOBJS</code> and <code>ALLOCA</code></h3>

<a name="index-LIBOBJS_002c-example"></a>
<a name="index-ALLOCA_002c-example"></a>
<a name="index-LIBOBJS_002c-special-handling"></a>
<a name="index-ALLOCA_002c-special-handling"></a>
<a name="index-LTLIBOBJS-1"></a>
<a name="index-LIBOBJS-2"></a>
<a name="index-LTALLOCA-1"></a>
<a name="index-ALLOCA-1"></a>

<p>The &lsquo;<samp>$(LIBOBJS)</samp>&rsquo; and &lsquo;<samp>$(ALLOCA)</samp>&rsquo; variables list object
files that should be compiled into the project to provide an
implementation for functions that are missing or broken on the host
system.  They are substituted by <samp>configure</samp>.
</p>
<a name="index-AC_005fLIBOBJ-1"></a>

<p>These variables are defined by Autoconf macros such as
<code>AC_LIBOBJ</code>, <code>AC_REPLACE_FUNCS</code> (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Generic-Functions">Generic Function Checks</a> in <cite>The Autoconf Manual</cite>), or
<code>AC_FUNC_ALLOCA</code> (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Particular-Functions">Particular
Function Checks</a> in <cite>The Autoconf Manual</cite>).  Many other Autoconf
macros call <code>AC_LIBOBJ</code> or <code>AC_REPLACE_FUNCS</code> to
populate &lsquo;<samp>$(LIBOBJS)</samp>&rsquo;.
</p>
<a name="index-AC_005fLIBSOURCE"></a>

<p>Using these variables is very similar to doing conditional compilation
using <code>AC_SUBST</code> variables, as described in <a href="#Conditional-Sources">Conditional Sources</a>.  That is, when building a program, &lsquo;<samp>$(LIBOBJS)</samp>&rsquo; and
&lsquo;<samp>$(ALLOCA)</samp>&rsquo; should be added to the associated &lsquo;<samp>*_LDADD</samp>&rsquo;
variable, or to the &lsquo;<samp>*_LIBADD</samp>&rsquo; variable when building a library.
However there is no need to list the corresponding sources in
&lsquo;<samp>EXTRA_*_SOURCES</samp>&rsquo; nor to define &lsquo;<samp>*_DEPENDENCIES</samp>&rsquo;.  Automake
automatically adds &lsquo;<samp>$(LIBOBJS)</samp>&rsquo; and &lsquo;<samp>$(ALLOCA)</samp>&rsquo; to the
dependencies, and it will discover the list of corresponding source
files automatically (by tracing the invocations of the
<code>AC_LIBSOURCE</code> Autoconf macros).  If you have already defined
&lsquo;<samp>*_DEPENDENCIES</samp>&rsquo; explicitly for an unrelated reason, then you
either need to add these variables manually, or use
&lsquo;<samp>EXTRA_*_DEPENDENCIES</samp>&rsquo; instead of &lsquo;<samp>*_DEPENDENCIES</samp>&rsquo;.
</p>
<p>These variables are usually used to build a portability library that
is linked with all the programs of the project.  We now review a
sample setup.  First, <samp>configure.ac</samp> contains some checks that
affect either <code>LIBOBJS</code> or <code>ALLOCA</code>.
</p>
<div class="example">
<pre class="example"># configure.ac
&hellip;
AC_CONFIG_LIBOBJ_DIR([lib])
&hellip;
AC_FUNC_MALLOC             dnl May add malloc.$(OBJEXT) to LIBOBJS
AC_FUNC_MEMCMP             dnl May add memcmp.$(OBJEXT) to LIBOBJS
AC_REPLACE_FUNCS([strdup]) dnl May add strdup.$(OBJEXT) to LIBOBJS
AC_FUNC_ALLOCA             dnl May add alloca.$(OBJEXT) to ALLOCA
&hellip;
AC_CONFIG_FILES([
  lib/Makefile
  src/Makefile
])
AC_OUTPUT
</pre></div>

<a name="index-AC_005fCONFIG_005fLIBOBJ_005fDIR"></a>

<p>The <code>AC_CONFIG_LIBOBJ_DIR</code> tells Autoconf that the source files
of these object files are to be found in the <samp>lib/</samp> directory.
Automake can also use this information, otherwise it expects the
source files are to be in the directory where the &lsquo;<samp>$(LIBOBJS)</samp>&rsquo;
and &lsquo;<samp>$(ALLOCA)</samp>&rsquo; variables are used.
</p>
<p>The <samp>lib/</samp> directory should therefore contain <samp>malloc.c</samp>,
<samp>memcmp.c</samp>, <samp>strdup.c</samp>, <samp>alloca.c</samp>.  Here is its
<samp>Makefile.am</samp>:
</p>
<div class="example">
<pre class="example"># lib/Makefile.am

noinst_LIBRARIES = libcompat.a
libcompat_a_SOURCES =
libcompat_a_LIBADD = $(LIBOBJS) $(ALLOCA)
</pre></div>

<p>The library can have any name, of course, and anyway it is not going
to be installed: it just holds the replacement versions of the missing
or broken functions so we can later link them in.  Many projects
also include extra functions, specific to the project, in that
library: they are simply added on the <code>_SOURCES</code> line.
</p>
<a name="index-Empty-libraries-and-_0024_0028LIBOBJS_0029"></a>
<a name="index-_0024_0028LIBOBJS_0029-and-empty-libraries"></a>
<p>There is a small trap here, though: &lsquo;<samp>$(LIBOBJS)</samp>&rsquo; and
&lsquo;<samp>$(ALLOCA)</samp>&rsquo; might be empty, and building an empty library is not
portable.  You should ensure that there is always something to put in
<samp>libcompat.a</samp>.  Most projects will also add some utility
functions in that directory, and list them in
<code>libcompat_a_SOURCES</code>, so in practice <samp>libcompat.a</samp> cannot
be empty.
</p>
<p>Finally here is how this library could be used from the <samp>src/</samp>
directory.
</p>
<div class="example">
<pre class="example"># src/Makefile.am

# Link all programs in this directory with libcompat.a
LDADD = ../lib/libcompat.a

bin_PROGRAMS = tool1 tool2 &hellip;
tool1_SOURCES = &hellip;
tool2_SOURCES = &hellip;
</pre></div>

<p>When option <samp>subdir-objects</samp> is not used, as in the above
example, the variables &lsquo;<samp>$(LIBOBJS)</samp>&rsquo; or &lsquo;<samp>$(ALLOCA)</samp>&rsquo; can only
be used in the directory where their sources lie.  E.g., here it would
be wrong to use &lsquo;<samp>$(LIBOBJS)</samp>&rsquo; or &lsquo;<samp>$(ALLOCA)</samp>&rsquo; in
<samp>src/Makefile.am</samp>.  However if both <samp>subdir-objects</samp> and
<code>AC_CONFIG_LIBOBJ_DIR</code> are used, it is OK to use these variables
in other directories.  For instance <samp>src/Makefile.am</samp> could be
changed as follows.
</p>
<div class="example">
<pre class="example"># src/Makefile.am

AUTOMAKE_OPTIONS = subdir-objects
LDADD = $(LIBOBJS) $(ALLOCA)

bin_PROGRAMS = tool1 tool2 &hellip;
tool1_SOURCES = &hellip;
tool2_SOURCES = &hellip;
</pre></div>

<p>Because &lsquo;<samp>$(LIBOBJS)</samp>&rsquo; and &lsquo;<samp>$(ALLOCA)</samp>&rsquo; contain object
file names that end with &lsquo;<samp>.$(OBJEXT)</samp>&rsquo;, they are not suitable for
Libtool libraries (where the expected object extension is <samp>.lo</samp>):
<code>LTLIBOBJS</code> and <code>LTALLOCA</code> should be used instead.
</p>
<p><code>LTLIBOBJS</code> is defined automatically by Autoconf and should not
be defined by hand (as in the past), however at the time of writing
<code>LTALLOCA</code> still needs to be defined from <code>ALLOCA</code> manually.
See <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#AC_005fLIBOBJ-vs-LIBOBJS"><code>AC_LIBOBJ</code> vs. <code>LIBOBJS</code></a> in <cite>The Autoconf Manual</cite>.
</p>

<hr>
<a name="Program-Variables"></a>
<div class="header">
<p>
Next: <a href="#Yacc-and-Lex" accesskey="n" rel="next">Yacc and Lex</a>, Previous: <a href="#LIBOBJS" accesskey="p" rel="prev">LIBOBJS</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Variables-used-when-building-a-program"></a>
<h3 class="section">8.7 Variables used when building a program</h3>

<p>Occasionally it is useful to know which <samp>Makefile</samp> variables
Automake uses for compilations, and in which order (see <a href="#Flag-Variables-Ordering">Flag Variables Ordering</a>); for instance, you might need to do your own
compilation in some special cases.
</p>
<p>Some variables are inherited from Autoconf; these are <code>CC</code>,
<code>CFLAGS</code>, <code>CPPFLAGS</code>, <code>DEFS</code>, <code>LDFLAGS</code>, and
<code>LIBS</code>.
<a name="index-CC"></a>
<a name="index-CFLAGS"></a>
<a name="index-CPPFLAGS"></a>
<a name="index-DEFS"></a>
<a name="index-LDFLAGS"></a>
<a name="index-LIBS"></a>
</p>
<p>There are some additional variables that Automake defines on its own:
</p>
<dl compact="compact">
<dt><code>AM_CPPFLAGS</code>
<a name="index-AM_005fCPPFLAGS"></a>
</dt>
<dd><p>The contents of this variable are passed to every compilation that invokes
the C preprocessor; it is a list of arguments to the preprocessor.  For
instance, <samp>-I</samp> and <samp>-D</samp> options should be listed here.
</p>
<p>Automake already provides some <samp>-I</samp> options automatically, in a
separate variable that is also passed to every compilation that invokes
the C preprocessor.  In particular it generates &lsquo;<samp>-I.</samp>&rsquo;,
&lsquo;<samp>-I$(srcdir)</samp>&rsquo;, and a <samp>-I</samp> pointing to the directory holding
<samp>config.h</samp> (if you&rsquo;ve used <code>AC_CONFIG_HEADERS</code>).  You can
disable the default <samp>-I</samp> options using the <samp>nostdinc</samp>
option.
</p>
<p>When a file to be included is generated during the build and not part
of a distribution tarball, its location is under <code>$(builddir)</code>,
not under <code>$(srcdir)</code>.  This matters especially for packages that
use header files placed in sub-directories and want to allow builds
outside the source tree (see <a href="#VPATH-Builds">VPATH Builds</a>). In that case we
recommend to use a pair of <samp>-I</samp> options, such as, e.g.,
&lsquo;<samp>-Isome/subdir -I$(srcdir)/some/subdir</samp>&rsquo; or
&lsquo;<samp>-I$(top_builddir)/some/subdir -I$(top_srcdir)/some/subdir</samp>&rsquo;.
Note that the reference to the build tree should come before the
reference to the source tree, so that accidentally leftover generated
files in the source directory are ignored.
</p>
<p><code>AM_CPPFLAGS</code> is ignored in preference to a per-executable (or
per-library) <code>_CPPFLAGS</code> variable if it is defined.
</p>
</dd>
<dt><code>INCLUDES</code>
<a name="index-INCLUDES"></a>
</dt>
<dd><p>This does the same job as <code>AM_CPPFLAGS</code> (or any per-target
<code>_CPPFLAGS</code> variable if it is used).  It is an older name for the
same functionality.  This variable is deprecated; we suggest using
<code>AM_CPPFLAGS</code> and per-target <code>_CPPFLAGS</code> instead.
</p>
</dd>
<dt><code>AM_CFLAGS</code>
<a name="index-AM_005fCFLAGS"></a>
</dt>
<dd><p>This is the variable the <samp>Makefile.am</samp> author can use to pass
in additional C compiler flags.  In some situations, this is
not used, in preference to the per-executable (or per-library)
<code>_CFLAGS</code>.
</p>
</dd>
<dt><code>COMPILE</code>
<a name="index-COMPILE"></a>
</dt>
<dd><p>This is the command used to actually compile a C source file.  The
file name is appended to form the complete command line.
</p>
</dd>
<dt><code>AM_LDFLAGS</code>
<a name="index-AM_005fLDFLAGS-1"></a>
</dt>
<dd><p>This is the variable the <samp>Makefile.am</samp> author can use to pass
in additional linker flags.  In some situations, this is not used, in
preference to the per-executable (or per-library) <code>_LDFLAGS</code>.
</p>
</dd>
<dt><code>LINK</code>
<a name="index-LINK"></a>
</dt>
<dd><p>This is the command used to actually link a C program.  It already
includes &lsquo;<samp>-o $@</samp>&rsquo; and the usual variable references (for instance,
<code>CFLAGS</code>); it takes as &ldquo;arguments&rdquo; the names of the object files
and libraries to link in.  This variable is not used when the linker is
overridden with a per-target <code>_LINK</code> variable or per-target flags
cause Automake to define such a <code>_LINK</code> variable.
</p></dd>
</dl>


<hr>
<a name="Yacc-and-Lex"></a>
<div class="header">
<p>
Next: <a href="#C_002b_002b-Support" accesskey="n" rel="next">C++ Support</a>, Previous: <a href="#Program-Variables" accesskey="p" rel="prev">Program Variables</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Yacc-and-Lex-support"></a>
<h3 class="section">8.8 Yacc and Lex support</h3>

<p>Automake has somewhat idiosyncratic support for Yacc and Lex.
</p>
<p>Automake assumes that the <samp>.c</samp> file generated by <code>yacc</code>
(or <code>lex</code>) should be named using the basename of the input
file.  That is, for a yacc source file <samp>foo.y</samp>, Automake will
cause the intermediate file to be named <samp>foo.c</samp> (as opposed to
<samp>y.tab.c</samp>, which is more traditional).
</p>
<p>The extension of a yacc source file is used to determine the extension
of the resulting C or C++ source and header files.  Note that header
files are generated only when the <samp>-d</samp> Yacc option is used; see
below for more information about this flag, and how to specify it.
Files with the extension <samp>.y</samp> will thus be turned into <samp>.c</samp>
sources and <samp>.h</samp> headers; likewise, <samp>.yy</samp> will become
<samp>.cc</samp> and <samp>.hh</samp>, <samp>.y++</samp> will become <samp>c++</samp> and
<samp>h++</samp>, <samp>.yxx</samp> will become <samp>.cxx</samp> and <samp>.hxx</samp>,
and <samp>.ypp</samp> will become <samp>.cpp</samp> and <samp>.hpp</samp>.
</p>
<p>Similarly, lex source files can be used to generate C or C++; the
extensions <samp>.l</samp>, <samp>.ll</samp>, <samp>.l++</samp>, <samp>.lxx</samp>, and
<samp>.lpp</samp> are recognized.
</p>
<p>You should never explicitly mention the intermediate (C or C++) file
in any <code>SOURCES</code> variable; only list the source file.
</p>
<p>The intermediate files generated by <code>yacc</code> (or <code>lex</code>)
will be included in any distribution that is made.  That way the user
doesn&rsquo;t need to have <code>yacc</code> or <code>lex</code>.
</p>
<p>If a <code>yacc</code> source file is seen, then your <samp>configure.ac</samp> must
define the variable <code>YACC</code>.  This is most easily done by invoking
the macro <code>AC_PROG_YACC</code> (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Particular-Programs">Particular
Program Checks</a> in <cite>The Autoconf Manual</cite>).
</p>
<a name="index-YFLAGS"></a>
<a name="index-AM_005fYFLAGS"></a>
<p>When <code>yacc</code> is invoked, it is passed <code>AM_YFLAGS</code> and
<code>YFLAGS</code>.  The latter is a user variable and the former is
intended for the <samp>Makefile.am</samp> author.
</p>
<p><code>AM_YFLAGS</code> is usually used to pass the <samp>-d</samp> option to
<code>yacc</code>.  Automake knows what this means and will automatically
adjust its rules to update and distribute the header file built by
&lsquo;<samp>yacc -d</samp>&rsquo;<a name="DOCF4" href="#FOOT4"><sup>4</sup></a>.
What Automake cannot guess, though, is where this
header will be used: it is up to you to ensure the header gets built
before it is first used.  Typically this is necessary in order for
dependency tracking to work when the header is included by another
file.  The common solution is listing the header file in
<code>BUILT_SOURCES</code> (see <a href="#Sources">Sources</a>) as follows.
</p>
<div class="example">
<pre class="example">BUILT_SOURCES = parser.h
AM_YFLAGS = -d
bin_PROGRAMS = foo
foo_SOURCES = &hellip; parser.y &hellip;
</pre></div>

<p>If a <code>lex</code> source file is seen, then your <samp>configure.ac</samp>
must define the variable <code>LEX</code>.  You can use <code>AC_PROG_LEX</code>
to do this (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Particular-Programs">Particular Program Checks</a> in <cite>The Autoconf Manual</cite>), but using <code>AM_PROG_LEX</code> macro
(see <a href="#Macros">Macros</a>) is recommended.
</p>
<a name="index-LFLAGS"></a>
<a name="index-AM_005fLFLAGS"></a>
<p>When <code>lex</code> is invoked, it is passed <code>AM_LFLAGS</code> and
<code>LFLAGS</code>.  The latter is a user variable and the former is
intended for the <samp>Makefile.am</samp> author.
</p>
<p>When <code>AM_MAINTAINER_MODE</code> (see <a href="#maintainer_002dmode">maintainer-mode</a>) is used, the
rebuild rule for distributed Yacc and Lex sources are only used when
<code>maintainer-mode</code> is enabled, or when the files have been erased.
</p>
<a name="index-ylwrap"></a>
<a name="index-yacc_002c-multiple-parsers"></a>
<a name="index-Multiple-yacc-parsers"></a>
<a name="index-Multiple-lex-lexers"></a>
<a name="index-lex_002c-multiple-lexers"></a>

<p>When <code>lex</code> or <code>yacc</code> sources are used, <code>automake -a</code>
automatically installs an auxiliary program called <code>ylwrap</code> in
your package (see <a href="#Auxiliary-Programs">Auxiliary Programs</a>).
This program is used by the build rules to rename the output of these
tools, and makes it possible to include multiple <code>yacc</code> (or
<code>lex</code>) source files in a single directory.  (This is necessary
because yacc&rsquo;s output file name is fixed, and a parallel make could
conceivably invoke more than one instance of <code>yacc</code>
simultaneously.)
</p>
<p>For <code>yacc</code>, simply managing locking is insufficient.  The output of
<code>yacc</code> always uses the same symbol names internally, so it isn&rsquo;t
possible to link two <code>yacc</code> parsers into the same executable.
</p>
<p>We recommend using the following renaming hack used in <code>gdb</code>:
</p><div class="example">
<pre class="example">#define yymaxdepth c_maxdepth
#define yyparse c_parse
#define yylex   c_lex
#define yyerror c_error
#define yylval  c_lval
#define yychar  c_char
#define yydebug c_debug
#define yypact  c_pact
#define yyr1    c_r1
#define yyr2    c_r2
#define yydef   c_def
#define yychk   c_chk
#define yypgo   c_pgo
#define yyact   c_act
#define yyexca  c_exca
#define yyerrflag c_errflag
#define yynerrs c_nerrs
#define yyps    c_ps
#define yypv    c_pv
#define yys     c_s
#define yy_yys  c_yys
#define yystate c_state
#define yytmp   c_tmp
#define yyv     c_v
#define yy_yyv  c_yyv
#define yyval   c_val
#define yylloc  c_lloc
#define yyreds  c_reds
#define yytoks  c_toks
#define yylhs   c_yylhs
#define yylen   c_yylen
#define yydefred c_yydefred
#define yydgoto  c_yydgoto
#define yysindex c_yysindex
#define yyrindex c_yyrindex
#define yygindex c_yygindex
#define yytable  c_yytable
#define yycheck  c_yycheck
#define yyname   c_yyname
#define yyrule   c_yyrule
</pre></div>

<p>For each define, replace the &lsquo;<samp>c_</samp>&rsquo; prefix with whatever you like.
These defines work for <code>bison</code>, <code>byacc</code>, and
traditional <code>yacc</code>s.  If you find a parser generator that uses a
symbol not covered here, please report the new name so it can be added
to the list.
</p>

<hr>
<a name="C_002b_002b-Support"></a>
<div class="header">
<p>
Next: <a href="#Objective-C-Support" accesskey="n" rel="next">Objective C Support</a>, Previous: <a href="#Yacc-and-Lex" accesskey="p" rel="prev">Yacc and Lex</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="C_002b_002b-Support-1"></a>
<h3 class="section">8.9 C++ Support</h3>

<a name="index-C_002b_002b-support"></a>
<a name="index-Support-for-C_002b_002b"></a>

<p>Automake includes full support for C++.
</p>
<p>Any package including C++ code must define the output variable
<code>CXX</code> in <samp>configure.ac</samp>; the simplest way to do this is to use
the <code>AC_PROG_CXX</code> macro (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Particular-Programs">Particular
Program Checks</a> in <cite>The Autoconf Manual</cite>).
</p>
<p>A few additional variables are defined when a C++ source file is seen:
</p>
<dl compact="compact">
<dt><code>CXX</code>
<a name="index-CXX"></a>
</dt>
<dd><p>The name of the C++ compiler.
</p>
</dd>
<dt><code>CXXFLAGS</code>
<a name="index-CXXFLAGS"></a>
</dt>
<dd><p>Any flags to pass to the C++ compiler.
</p>
</dd>
<dt><code>AM_CXXFLAGS</code>
<a name="index-AM_005fCXXFLAGS"></a>
</dt>
<dd><p>The maintainer&rsquo;s variant of <code>CXXFLAGS</code>.
</p>
</dd>
<dt><code>CXXCOMPILE</code>
<a name="index-CXXCOMPILE"></a>
</dt>
<dd><p>The command used to actually compile a C++ source file.  The file name
is appended to form the complete command line.
</p>
</dd>
<dt><code>CXXLINK</code>
<a name="index-CXXLINK"></a>
</dt>
<dd><p>The command used to actually link a C++ program.
</p></dd>
</dl>


<hr>
<a name="Objective-C-Support"></a>
<div class="header">
<p>
Next: <a href="#Objective-C_002b_002b-Support" accesskey="n" rel="next">Objective C++ Support</a>, Previous: <a href="#C_002b_002b-Support" accesskey="p" rel="prev">C++ Support</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Objective-C-Support-1"></a>
<h3 class="section">8.10 Objective C Support</h3>

<a name="index-Objective-C-support"></a>
<a name="index-Support-for-Objective-C"></a>

<p>Automake includes some support for Objective C.
</p>
<p>Any package including Objective C code must define the output variable
<code>OBJC</code> in <samp>configure.ac</samp>; the simplest way to do this is to use
the <code>AC_PROG_OBJC</code> macro (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Particular-Programs">Particular
Program Checks</a> in <cite>The Autoconf Manual</cite>).
</p>
<p>A few additional variables are defined when an Objective C source file
is seen:
</p>
<dl compact="compact">
<dt><code>OBJC</code>
<a name="index-OBJC"></a>
</dt>
<dd><p>The name of the Objective C compiler.
</p>
</dd>
<dt><code>OBJCFLAGS</code>
<a name="index-OBJCFLAGS"></a>
</dt>
<dd><p>Any flags to pass to the Objective C compiler.
</p>
</dd>
<dt><code>AM_OBJCFLAGS</code>
<a name="index-AM_005fOBJCFLAGS"></a>
</dt>
<dd><p>The maintainer&rsquo;s variant of <code>OBJCFLAGS</code>.
</p>
</dd>
<dt><code>OBJCCOMPILE</code>
<a name="index-OBJCCOMPILE"></a>
</dt>
<dd><p>The command used to actually compile an Objective C source file.  The
file name is appended to form the complete command line.
</p>
</dd>
<dt><code>OBJCLINK</code>
<a name="index-OBJCLINK"></a>
</dt>
<dd><p>The command used to actually link an Objective C program.
</p></dd>
</dl>


<hr>
<a name="Objective-C_002b_002b-Support"></a>
<div class="header">
<p>
Next: <a href="#Unified-Parallel-C-Support" accesskey="n" rel="next">Unified Parallel C Support</a>, Previous: <a href="#Objective-C-Support" accesskey="p" rel="prev">Objective C Support</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Objective-C_002b_002b-Support-1"></a>
<h3 class="section">8.11 Objective C++ Support</h3>

<a name="index-Objective-C_002b_002b-support"></a>
<a name="index-Support-for-Objective-C_002b_002b"></a>

<p>Automake includes some support for Objective C++.
</p>
<p>Any package including Objective C++ code must define the output variable
<code>OBJCXX</code> in <samp>configure.ac</samp>; the simplest way to do this is to use
the <code>AC_PROG_OBJCXX</code> macro (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Particular-Programs">Particular
Program Checks</a> in <cite>The Autoconf Manual</cite>).
</p>
<p>A few additional variables are defined when an Objective C++ source file
is seen:
</p>
<dl compact="compact">
<dt><code>OBJCXX</code>
<a name="index-OBJCXX"></a>
</dt>
<dd><p>The name of the Objective C++ compiler.
</p>
</dd>
<dt><code>OBJCXXFLAGS</code>
<a name="index-OBJCXXFLAGS"></a>
</dt>
<dd><p>Any flags to pass to the Objective C++ compiler.
</p>
</dd>
<dt><code>AM_OBJCXXFLAGS</code>
<a name="index-AM_005fOBJCXXFLAGS"></a>
</dt>
<dd><p>The maintainer&rsquo;s variant of <code>OBJCXXFLAGS</code>.
</p>
</dd>
<dt><code>OBJCXXCOMPILE</code>
<a name="index-OBJCXXCOMPILE"></a>
</dt>
<dd><p>The command used to actually compile an Objective C++ source file.  The
file name is appended to form the complete command line.
</p>
</dd>
<dt><code>OBJCXXLINK</code>
<a name="index-OBJCXXLINK"></a>
</dt>
<dd><p>The command used to actually link an Objective C++ program.
</p></dd>
</dl>


<hr>
<a name="Unified-Parallel-C-Support"></a>
<div class="header">
<p>
Next: <a href="#Assembly-Support" accesskey="n" rel="next">Assembly Support</a>, Previous: <a href="#Objective-C_002b_002b-Support" accesskey="p" rel="prev">Objective C++ Support</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Unified-Parallel-C-Support-1"></a>
<h3 class="section">8.12 Unified Parallel C Support</h3>

<a name="index-Unified-Parallel-C-support"></a>
<a name="index-Support-for-Unified-Parallel-C"></a>

<p>Automake includes some support for Unified Parallel C.
</p>
<p>Any package including Unified Parallel C code must define the output
variable <code>UPC</code> in <samp>configure.ac</samp>; the simplest way to do
this is to use the <code>AM_PROG_UPC</code> macro (see <a href="#Public-Macros">Public Macros</a>).
</p>
<p>A few additional variables are defined when a Unified Parallel C
source file is seen:
</p>
<dl compact="compact">
<dt><code>UPC</code>
<a name="index-UPC-1"></a>
</dt>
<dd><p>The name of the Unified Parallel C compiler.
</p>
</dd>
<dt><code>UPCFLAGS</code>
<a name="index-UPCFLAGS"></a>
</dt>
<dd><p>Any flags to pass to the Unified Parallel C compiler.
</p>
</dd>
<dt><code>AM_UPCFLAGS</code>
<a name="index-AM_005fUPCFLAGS"></a>
</dt>
<dd><p>The maintainer&rsquo;s variant of <code>UPCFLAGS</code>.
</p>
</dd>
<dt><code>UPCCOMPILE</code>
<a name="index-UPCCOMPILE"></a>
</dt>
<dd><p>The command used to actually compile a Unified Parallel C source file.
The file name is appended to form the complete command line.
</p>
</dd>
<dt><code>UPCLINK</code>
<a name="index-UPCLINK"></a>
</dt>
<dd><p>The command used to actually link a Unified Parallel C program.
</p></dd>
</dl>


<hr>
<a name="Assembly-Support"></a>
<div class="header">
<p>
Next: <a href="#Fortran-77-Support" accesskey="n" rel="next">Fortran 77 Support</a>, Previous: <a href="#Unified-Parallel-C-Support" accesskey="p" rel="prev">Unified Parallel C Support</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Assembly-Support-1"></a>
<h3 class="section">8.13 Assembly Support</h3>

<p>Automake includes some support for assembly code.  There are two forms
of assembler files: normal (<samp>*.s</samp>) and preprocessed by <code>CPP</code>
(<samp>*.S</samp> or <samp>*.sx</samp>).
</p>
<a name="index-CCAS-1"></a>
<a name="index-CCASFLAGS-1"></a>
<a name="index-CPPFLAGS-1"></a>
<a name="index-AM_005fCCASFLAGS"></a>
<a name="index-AM_005fCPPFLAGS-1"></a>
<p>The variable <code>CCAS</code> holds the name of the compiler used to build
assembly code.  This compiler must work a bit like a C compiler; in
particular it must accept <samp>-c</samp> and <samp>-o</samp>.  The values of
<code>CCASFLAGS</code> and <code>AM_CCASFLAGS</code> (or its per-target
definition) is passed to the compilation.  For preprocessed files,
<code>DEFS</code>, <code>DEFAULT_INCLUDES</code>, <code>INCLUDES</code>, <code>CPPFLAGS</code>
and <code>AM_CPPFLAGS</code> are also used.
</p>
<p>The autoconf macro <code>AM_PROG_AS</code> will define <code>CCAS</code> and
<code>CCASFLAGS</code> for you (unless they are already set, it simply sets
<code>CCAS</code> to the C compiler and <code>CCASFLAGS</code> to the C compiler
flags), but you are free to define these variables by other means.
</p>
<p>Only the suffixes <samp>.s</samp>, <samp>.S</samp>, and <samp>.sx</samp> are recognized by
<code>automake</code> as being files containing assembly code.
</p>

<hr>
<a name="Fortran-77-Support"></a>
<div class="header">
<p>
Next: <a href="#Fortran-9x-Support" accesskey="n" rel="next">Fortran 9x Support</a>, Previous: <a href="#Assembly-Support" accesskey="p" rel="prev">Assembly Support</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Fortran-77-Support-1"></a>
<h3 class="section">8.14 Fortran 77 Support</h3>

<a name="index-Fortran-77-support"></a>
<a name="index-Support-for-Fortran-77"></a>

<p>Automake includes full support for Fortran 77.
</p>
<p>Any package including Fortran 77 code must define the output variable
<code>F77</code> in <samp>configure.ac</samp>; the simplest way to do this is to use
the <code>AC_PROG_F77</code> macro (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Particular-Programs">Particular
Program Checks</a> in <cite>The Autoconf Manual</cite>).
</p>
<p>A few additional variables are defined when a Fortran 77 source file is
seen:
</p>
<dl compact="compact">
<dt><code>F77</code>
<a name="index-F77"></a>
</dt>
<dd><p>The name of the Fortran 77 compiler.
</p>
</dd>
<dt><code>FFLAGS</code>
<a name="index-FFLAGS"></a>
</dt>
<dd><p>Any flags to pass to the Fortran 77 compiler.
</p>
</dd>
<dt><code>AM_FFLAGS</code>
<a name="index-AM_005fFFLAGS"></a>
</dt>
<dd><p>The maintainer&rsquo;s variant of <code>FFLAGS</code>.
</p>
</dd>
<dt><code>RFLAGS</code>
<a name="index-RFLAGS"></a>
</dt>
<dd><p>Any flags to pass to the Ratfor compiler.
</p>
</dd>
<dt><code>AM_RFLAGS</code>
<a name="index-AM_005fRFLAGS"></a>
</dt>
<dd><p>The maintainer&rsquo;s variant of <code>RFLAGS</code>.
</p>
</dd>
<dt><code>F77COMPILE</code>
<a name="index-F77COMPILE"></a>
</dt>
<dd><p>The command used to actually compile a Fortran 77 source file.  The file
name is appended to form the complete command line.
</p>
</dd>
<dt><code>FLINK</code>
<a name="index-FLINK"></a>
</dt>
<dd><p>The command used to actually link a pure Fortran 77 program or shared
library.
</p>
</dd>
</dl>

<p>Automake can handle preprocessing Fortran 77 and Ratfor source files in
addition to compiling them<a name="DOCF5" href="#FOOT5"><sup>5</sup></a>.  Automake
also contains some support for creating programs and shared libraries
that are a mixture of Fortran 77 and other languages (see <a href="#Mixing-Fortran-77-With-C-and-C_002b_002b">Mixing Fortran 77 With C and C++</a>).
</p>
<p>These issues are covered in the following sections.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Preprocessing-Fortran-77" accesskey="1">Preprocessing Fortran 77</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Preprocessing Fortran 77 sources
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Compiling-Fortran-77-Files" accesskey="2">Compiling Fortran 77 Files</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compiling Fortran 77 sources
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Mixing-Fortran-77-With-C-and-C_002b_002b" accesskey="3">Mixing Fortran 77 With C and C++</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Mixing Fortran 77 With C and C++
</td></tr>
</table>


<hr>
<a name="Preprocessing-Fortran-77"></a>
<div class="header">
<p>
Next: <a href="#Compiling-Fortran-77-Files" accesskey="n" rel="next">Compiling Fortran 77 Files</a>, Up: <a href="#Fortran-77-Support" accesskey="u" rel="up">Fortran 77 Support</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Preprocessing-Fortran-77-1"></a>
<h4 class="subsection">8.14.1 Preprocessing Fortran 77</h4>

<a name="index-Preprocessing-Fortran-77"></a>
<a name="index-Fortran-77_002c-Preprocessing"></a>
<a name="index-Ratfor-programs"></a>

<p><samp>N.f</samp> is made automatically from <samp>N.F</samp> or <samp>N.r</samp>.  This
rule runs just the preprocessor to convert a preprocessable Fortran 77
or Ratfor source file into a strict Fortran 77 source file.  The precise
command used is as follows:
</p>
<dl compact="compact">
<dt><samp>.F</samp></dt>
<dd><p><code>$(F77) -F $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS)<br>
$(AM_FFLAGS) $(FFLAGS)</code>
</p>
</dd>
<dt><samp>.r</samp></dt>
<dd><p><code>$(F77) -F $(AM_FFLAGS) $(FFLAGS) $(AM_RFLAGS) $(RFLAGS)</code>
</p>
</dd>
</dl>


<hr>
<a name="Compiling-Fortran-77-Files"></a>
<div class="header">
<p>
Next: <a href="#Mixing-Fortran-77-With-C-and-C_002b_002b" accesskey="n" rel="next">Mixing Fortran 77 With C and C++</a>, Previous: <a href="#Preprocessing-Fortran-77" accesskey="p" rel="prev">Preprocessing Fortran 77</a>, Up: <a href="#Fortran-77-Support" accesskey="u" rel="up">Fortran 77 Support</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Compiling-Fortran-77-Files-1"></a>
<h4 class="subsection">8.14.2 Compiling Fortran 77 Files</h4>

<p><samp>N.o</samp> is made automatically from <samp>N.f</samp>, <samp>N.F</samp> or
<samp>N.r</samp> by running the Fortran 77 compiler.  The precise command used
is as follows:
</p>
<dl compact="compact">
<dt><samp>.f</samp></dt>
<dd><p><code>$(F77) -c $(AM_FFLAGS) $(FFLAGS)</code>
</p>
</dd>
<dt><samp>.F</samp></dt>
<dd><p><code>$(F77) -c $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS)<br>
$(AM_FFLAGS) $(FFLAGS)</code>
</p>
</dd>
<dt><samp>.r</samp></dt>
<dd><p><code>$(F77) -c $(AM_FFLAGS) $(FFLAGS) $(AM_RFLAGS) $(RFLAGS)</code>
</p>
</dd>
</dl>


<hr>
<a name="Mixing-Fortran-77-With-C-and-C_002b_002b"></a>
<div class="header">
<p>
Previous: <a href="#Compiling-Fortran-77-Files" accesskey="p" rel="prev">Compiling Fortran 77 Files</a>, Up: <a href="#Fortran-77-Support" accesskey="u" rel="up">Fortran 77 Support</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Mixing-Fortran-77-With-C-and-C_002b_002b-1"></a>
<h4 class="subsection">8.14.3 Mixing Fortran 77 With C and C++</h4>

<a name="index-Fortran-77_002c-mixing-with-C-and-C_002b_002b"></a>
<a name="index-Mixing-Fortran-77-with-C-and-C_002b_002b"></a>
<a name="index-Linking-Fortran-77-with-C-and-C_002b_002b"></a>
<a name="index-cfortran"></a>
<a name="index-Mixing-Fortran-77-with-C-and_002for-C_002b_002b"></a>

<p>Automake currently provides <em>limited</em> support for creating programs
and shared libraries that are a mixture of Fortran 77 and C and/or C++.
However, there are many other issues related to mixing Fortran 77 with
other languages that are <em>not</em> (currently) handled by Automake, but
that are handled by other packages<a name="DOCF6" href="#FOOT6"><sup>6</sup></a>.
</p>
<p>Automake can help in two ways:
</p>
<ol>
<li> Automatic selection of the linker depending on which combinations of
source code.

</li><li> Automatic selection of the appropriate linker flags (e.g., <samp>-L</samp> and
<samp>-l</samp>) to pass to the automatically selected linker in order to link
in the appropriate Fortran 77 intrinsic and run-time libraries.

<a name="index-FLIBS_002c-defined"></a>
<a name="index-FLIBS"></a>
<p>These extra Fortran 77 linker flags are supplied in the output variable
<code>FLIBS</code> by the <code>AC_F77_LIBRARY_LDFLAGS</code> Autoconf macro.
See <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Fortran-Compiler">Fortran Compiler Characteristics</a> in <cite>The Autoconf Manual</cite>.
</p></li></ol>

<p>If Automake detects that a program or shared library (as mentioned in
some <code>_PROGRAMS</code> or <code>_LTLIBRARIES</code> primary) contains source
code that is a mixture of Fortran 77 and C and/or C++, then it requires
that the macro <code>AC_F77_LIBRARY_LDFLAGS</code> be called in
<samp>configure.ac</samp>, and that either <code>$(FLIBS)</code>
appear in the appropriate <code>_LDADD</code> (for programs) or <code>_LIBADD</code>
(for shared libraries) variables.  It is the responsibility of the
person writing the <samp>Makefile.am</samp> to make sure that &lsquo;<samp>$(FLIBS)</samp>&rsquo;
appears in the appropriate <code>_LDADD</code> or
<code>_LIBADD</code> variable.
</p>
<a name="index-Mixed-language-example"></a>
<a name="index-Example_002c-mixed-language"></a>

<p>For example, consider the following <samp>Makefile.am</samp>:
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = foo
foo_SOURCES  = main.cc foo.f
foo_LDADD    = libfoo.la $(FLIBS)

pkglib_LTLIBRARIES = libfoo.la
libfoo_la_SOURCES  = bar.f baz.c zardoz.cc
libfoo_la_LIBADD   = $(FLIBS)
</pre></div>

<p>In this case, Automake will insist that <code>AC_F77_LIBRARY_LDFLAGS</code>
is mentioned in <samp>configure.ac</samp>.  Also, if &lsquo;<samp>$(FLIBS)</samp>&rsquo; hadn&rsquo;t
been mentioned in <code>foo_LDADD</code> and <code>libfoo_la_LIBADD</code>, then
Automake would have issued a warning.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#How-the-Linker-is-Chosen" accesskey="1">How the Linker is Chosen</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Automatic linker selection
</td></tr>
</table>

<hr>
<a name="How-the-Linker-is-Chosen"></a>
<div class="header">
<p>
Up: <a href="#Mixing-Fortran-77-With-C-and-C_002b_002b" accesskey="u" rel="up">Mixing Fortran 77 With C and C++</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="How-the-Linker-is-Chosen-1"></a>
<h4 class="subsubsection">8.14.3.1 How the Linker is Chosen</h4>

<a name="index-Automatic-linker-selection"></a>
<a name="index-Selecting-the-linker-automatically"></a>

<p>When a program or library mixes several languages, Automake choose the
linker according to the following priorities.  (The names in
parentheses are the variables containing the link command.)
</p>
<ol>
<li> <a name="index-GCJLINK"></a>
Native Java (<code>GCJLINK</code>)
</li><li> <a name="index-OBJCXXLINK-1"></a>
Objective C++ (<code>OBJCXXLINK</code>)
</li><li> <a name="index-CXXLINK-1"></a>
C++ (<code>CXXLINK</code>)
</li><li> <a name="index-F77LINK"></a>
Fortran 77 (<code>F77LINK</code>)
</li><li> <a name="index-FCLINK"></a>
Fortran (<code>FCLINK</code>)
</li><li> <a name="index-OBJCLINK-1"></a>
Objective C (<code>OBJCLINK</code>)
</li><li> <a name="index-UPCLINK-1"></a>
Unified Parallel C (<code>UPCLINK</code>)
</li><li> <a name="index-LINK-1"></a>
C (<code>LINK</code>)
</li></ol>

<p>For example, if Fortran 77, C and C++ source code is compiled
into a program, then the C++ linker will be used.  In this case, if the
C or Fortran 77 linkers required any special libraries that weren&rsquo;t
included by the C++ linker, then they must be manually added to an
<code>_LDADD</code> or <code>_LIBADD</code> variable by the user writing the
<samp>Makefile.am</samp>.
</p>
<p>Automake only looks at the file names listed in <samp>_SOURCES</samp>
variables to choose the linker, and defaults to the C linker.
Sometimes this is inconvenient because you are linking against a
library written in another language and would like to set the linker
more appropriately.  See <a href="#Libtool-Convenience-Libraries">Libtool Convenience Libraries</a>, for a
trick with <code>nodist_EXTRA_&hellip;_SOURCES</code>.
</p>
<p>A per-target <code>_LINK</code> variable will override the above selection.
Per-target link flags will cause Automake to write a per-target
<code>_LINK</code> variable according to the language chosen as above.
</p>

<hr>
<a name="Fortran-9x-Support"></a>
<div class="header">
<p>
Next: <a href="#Java-Support-with-gcj" accesskey="n" rel="next">Java Support with gcj</a>, Previous: <a href="#Fortran-77-Support" accesskey="p" rel="prev">Fortran 77 Support</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Fortran-9x-Support-1"></a>
<h3 class="section">8.15 Fortran 9x Support</h3>

<a name="index-Fortran-9x-support"></a>
<a name="index-Support-for-Fortran-9x"></a>

<p>Automake includes support for Fortran 9x.
</p>
<p>Any package including Fortran 9x code must define the output variable
<code>FC</code> in <samp>configure.ac</samp>; the simplest way to do this is to use
the <code>AC_PROG_FC</code> macro (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Particular-Programs">Particular
Program Checks</a> in <cite>The Autoconf Manual</cite>).
</p>
<p>A few additional variables are defined when a Fortran 9x source file is
seen:
</p>
<dl compact="compact">
<dt><code>FC</code>
<a name="index-FC"></a>
</dt>
<dd><p>The name of the Fortran 9x compiler.
</p>
</dd>
<dt><code>FCFLAGS</code>
<a name="index-FCFLAGS"></a>
</dt>
<dd><p>Any flags to pass to the Fortran 9x compiler.
</p>
</dd>
<dt><code>AM_FCFLAGS</code>
<a name="index-AM_005fFCFLAGS"></a>
</dt>
<dd><p>The maintainer&rsquo;s variant of <code>FCFLAGS</code>.
</p>
</dd>
<dt><code>FCCOMPILE</code>
<a name="index-FCCOMPILE"></a>
</dt>
<dd><p>The command used to actually compile a Fortran 9x source file.  The file
name is appended to form the complete command line.
</p>
</dd>
<dt><code>FCLINK</code>
<a name="index-FCLINK-1"></a>
</dt>
<dd><p>The command used to actually link a pure Fortran 9x program or shared
library.
</p>
</dd>
</dl>

<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Compiling-Fortran-9x-Files" accesskey="1">Compiling Fortran 9x Files</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compiling Fortran 9x sources
</td></tr>
</table>

<hr>
<a name="Compiling-Fortran-9x-Files"></a>
<div class="header">
<p>
Up: <a href="#Fortran-9x-Support" accesskey="u" rel="up">Fortran 9x Support</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Compiling-Fortran-9x-Files-1"></a>
<h4 class="subsection">8.15.1 Compiling Fortran 9x Files</h4>

<p><samp><var>file</var>.o</samp> is made automatically from <samp><var>file</var>.f90</samp>,
<samp><var>file</var>.f95</samp>, <samp><var>file</var>.f03</samp>, or <samp><var>file</var>.f08</samp>
by running the Fortran 9x compiler.  The precise command used
is as follows:
</p>
<dl compact="compact">
<dt><samp>.f90</samp></dt>
<dd><p><code>$(FC) $(AM_FCFLAGS) $(FCFLAGS) -c $(FCFLAGS_f90) $&lt;</code>
</p>
</dd>
<dt><samp>.f95</samp></dt>
<dd><p><code>$(FC) $(AM_FCFLAGS) $(FCFLAGS) -c $(FCFLAGS_f95) $&lt;</code>
</p>
</dd>
<dt><samp>.f03</samp></dt>
<dd><p><code>$(FC) $(AM_FCFLAGS) $(FCFLAGS) -c $(FCFLAGS_f03) $&lt;</code>
</p>
</dd>
<dt><samp>.f08</samp></dt>
<dd><p><code>$(FC) $(AM_FCFLAGS) $(FCFLAGS) -c $(FCFLAGS_f08) $&lt;</code>
</p>
</dd>
</dl>

<hr>
<a name="Java-Support-with-gcj"></a>
<div class="header">
<p>
Next: <a href="#Vala-Support" accesskey="n" rel="next">Vala Support</a>, Previous: <a href="#Fortran-9x-Support" accesskey="p" rel="prev">Fortran 9x Support</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Compiling-Java-sources-using-gcj"></a>
<h3 class="section">8.16 Compiling Java sources using gcj</h3>

<a name="index-Java-support-with-gcj"></a>
<a name="index-Support-for-Java-with-gcj"></a>
<a name="index-Java-to-native-code_002c-compilation"></a>
<a name="index-Compilation-of-Java-to-native-code"></a>

<p>Automake includes support for natively compiled Java, using <code>gcj</code>,
the Java front end to the GNU Compiler Collection (rudimentary support
for compiling Java to bytecode using the <code>javac</code> compiler is
also present, <em>albeit deprecated</em>; see <a href="#Java">Java</a>).
</p>
<p>Any package including Java code to be compiled must define the output
variable <code>GCJ</code> in <samp>configure.ac</samp>; the variable <code>GCJFLAGS</code>
must also be defined somehow (either in <samp>configure.ac</samp> or
<samp>Makefile.am</samp>).  The simplest way to do this is to use the
<code>AM_PROG_GCJ</code> macro.
</p>
<a name="index-GCJFLAGS-1"></a>

<p>By default, programs including Java source files are linked with
<code>gcj</code>.
</p>
<p>As always, the contents of <code>AM_GCJFLAGS</code> are passed to every
compilation invoking <code>gcj</code> (in its role as an ahead-of-time
compiler, when invoking it to create <samp>.class</samp> files,
<code>AM_JAVACFLAGS</code> is used instead).  If it is necessary to pass
options to <code>gcj</code> from <samp>Makefile.am</samp>, this variable, and not
the user variable <code>GCJFLAGS</code>, should be used.
</p>
<a name="index-AM_005fGCJFLAGS"></a>

<p><code>gcj</code> can be used to compile <samp>.java</samp>, <samp>.class</samp>,
<samp>.zip</samp>, or <samp>.jar</samp> files.
</p>
<p>When linking, <code>gcj</code> requires that the main class be specified
using the <samp>--main=</samp> option.  The easiest way to do this is to use
the <code>_LDFLAGS</code> variable for the program.
</p>

<hr>
<a name="Vala-Support"></a>
<div class="header">
<p>
Next: <a href="#Support-for-Other-Languages" accesskey="n" rel="next">Support for Other Languages</a>, Previous: <a href="#Java-Support-with-gcj" accesskey="p" rel="prev">Java Support with gcj</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Vala-Support-1"></a>
<h3 class="section">8.17 Vala Support</h3>

<a name="index-Vala-Support"></a>
<a name="index-Support-for-Vala"></a>

<p>Automake provides initial support for Vala
(<a href="http://www.vala-project.org/">http://www.vala-project.org/</a>).
This requires valac version 0.7.0 or later, and currently requires
the user to use GNU <code>make</code>.
</p>
<div class="example">
<pre class="example">foo_SOURCES = foo.vala bar.vala zardoc.c
</pre></div>

<p>Any <samp>.vala</samp> file listed in a <code>_SOURCES</code> variable will be
compiled into C code by the Vala compiler. The generated <samp>.c</samp> files
are distributed. The end user does not need to have a Vala compiler installed.
</p>
<p>Automake ships with an Autoconf macro called <code>AM_PROG_VALAC</code>
that will locate the Vala compiler and optionally check its version
number.
</p>
<dl>
<dt><a name="index-AM_005fPROG_005fVALAC"></a>Macro: <strong>AM_PROG_VALAC</strong> <em>(<span class="roman">[</span><var>minimum-version</var><span class="roman">]</span>, <span class="roman">[</span><var>action-if-found</var><span class="roman">]</span>,</em></dt>
<dd><p><span class="roman">[</span><var>action-if-not-found</var><span class="roman">]</span>)
Search for a Vala compiler in <code>PATH</code>.  If it is found, the variable
<code>VALAC</code> is set to point to it (see below for more details).  This
macro takes three optional arguments.  The first argument, if present,
is the minimum version of the Vala compiler required to compile this
package.  If a compiler is found and satisfies <var>minimum-version</var>,
then <var>action-if-found</var> is run (this defaults to do nothing).
Otherwise, <var>action-if-not-found</var> is run.  If <var>action-if-not-found</var>
is not specified, the default value is to print a warning in case no
compiler is found, or if a too-old version of the compiler is found.
</p></dd></dl>

<p>There are a few variables that are used when compiling Vala sources:
</p>
<dl compact="compact">
<dt><code>VALAC</code>
<a name="index-VALAC"></a>
</dt>
<dd><p>Absolute path to the Vala compiler, or simply &lsquo;<samp>valac</samp>&rsquo; if no
suitable compiler Vala could be found at configure runtime.
</p>
</dd>
<dt><code>VALAFLAGS</code>
<a name="index-VALAFLAGS"></a>
</dt>
<dd><p>Additional arguments for the Vala compiler.
</p>
</dd>
<dt><code>AM_VALAFLAGS</code>
<a name="index-AM_005fVALAFLAGS"></a>
</dt>
<dd><p>The maintainer&rsquo;s variant of <code>VALAFLAGS</code>.
</p>
<div class="example">
<pre class="example">lib_LTLIBRARIES = libfoo.la
libfoo_la_SOURCES = foo.vala
</pre></div>
</dd>
</dl>

<p>Note that currently, you cannot use per-target <code>*_VALAFLAGS</code>
(see <a href="#Renamed-Objects">Renamed Objects</a>) to produce different C files from one Vala
source file.
</p>

<hr>
<a name="Support-for-Other-Languages"></a>
<div class="header">
<p>
Next: <a href="#Dependencies" accesskey="n" rel="next">Dependencies</a>, Previous: <a href="#Vala-Support" accesskey="p" rel="prev">Vala Support</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Support-for-Other-Languages-1"></a>
<h3 class="section">8.18 Support for Other Languages</h3>

<p>Automake currently only includes full support for C, C++ (see <a href="#C_002b_002b-Support">C++ Support</a>), Objective C (see <a href="#Objective-C-Support">Objective C Support</a>),
Objective C++ (see <a href="#Objective-C_002b_002b-Support">Objective C++ Support</a>),
Fortran 77
(see <a href="#Fortran-77-Support">Fortran 77 Support</a>), Fortran 9x (see <a href="#Fortran-9x-Support">Fortran 9x Support</a>),
and Java (see <a href="#Java-Support-with-gcj">Java Support with gcj</a>).  There is only rudimentary
support for other languages, support for which will be improved based
on user demand.
</p>
<p>Some limited support for adding your own languages is available via the
suffix rule handling (see <a href="#Suffixes">Suffixes</a>).
</p>
<hr>
<a name="Dependencies"></a>
<div class="header">
<p>
Next: <a href="#EXEEXT" accesskey="n" rel="next">EXEEXT</a>, Previous: <a href="#Support-for-Other-Languages" accesskey="p" rel="prev">Support for Other Languages</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Automatic-dependency-tracking"></a>
<h3 class="section">8.19 Automatic dependency tracking</h3>

<p>As a developer it is often painful to continually update the
<samp>Makefile.am</samp> whenever the include-file dependencies change in a
project.  Automake supplies a way to automatically track dependency
changes (see <a href="#Dependency-Tracking">Dependency Tracking</a>).
</p>
<a name="index-Dependency-tracking-1"></a>
<a name="index-Automatic-dependency-tracking"></a>

<p>Automake always uses complete dependencies for a compilation,
including system headers.  Automake&rsquo;s model is that dependency
computation should be a side effect of the build.  To this end,
dependencies are computed by running all compilations through a
special wrapper program called <code>depcomp</code>.  <code>depcomp</code>
understands how to coax many different C and C++ compilers into
generating dependency information in the format it requires.
&lsquo;<samp>automake -a</samp>&rsquo; will install <code>depcomp</code> into your source
tree for you.  If <code>depcomp</code> can&rsquo;t figure out how to properly
invoke your compiler, dependency tracking will simply be disabled for
your build.
</p>
<a name="index-depcomp"></a>

<p>Experience with earlier versions of Automake (see <a href="http://www.gnu.org/software/automake/history/automake-history.html#Dependency-Tracking-Evolution">Dependency Tracking Evolution</a> in <cite>Brief History
of Automake</cite>) taught us that it is not reliable to generate dependencies
only on the maintainer&rsquo;s system, as configurations vary too much.  So
instead Automake implements dependency tracking at build time.
</p>
<p>Automatic dependency tracking can be suppressed by putting
<samp>no-dependencies</samp> in the variable <code>AUTOMAKE_OPTIONS</code>, or
passing <samp>no-dependencies</samp> as an argument to <code>AM_INIT_AUTOMAKE</code>
(this should be the preferred way).  Or, you can invoke <code>automake</code>
with the <samp>-i</samp> option.  Dependency tracking is enabled by default.
</p>
<a name="index-AUTOMAKE_005fOPTIONS-1"></a>
<a name="index-no_002ddependencies"></a>

<p>The person building your package also can choose to disable dependency
tracking by configuring with <samp>--disable-dependency-tracking</samp>.
</p>
<a name="index-Disabling-dependency-tracking"></a>
<a name="index-Dependency-tracking_002c-disabling"></a>


<hr>
<a name="EXEEXT"></a>
<div class="header">
<p>
Previous: <a href="#Dependencies" accesskey="p" rel="prev">Dependencies</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Support-for-executable-extensions"></a>
<h3 class="section">8.20 Support for executable extensions</h3>

<a name="index-Executable-extension"></a>
<a name="index-Extension_002c-executable"></a>
<a name="index-Windows"></a>

<p>On some platforms, such as Windows, executables are expected to have an
extension such as <samp>.exe</samp>.  On these platforms, some compilers (GCC
among them) will automatically generate <samp>foo.exe</samp> when asked to
generate <samp>foo</samp>.
</p>
<p>Automake provides mostly-transparent support for this.  Unfortunately
<em>mostly</em> doesn&rsquo;t yet mean <em>fully</em>.  Until the English
dictionary is revised, you will have to assist Automake if your package
must support those platforms.
</p>
<p>One thing you must be aware of is that, internally, Automake rewrites
something like this:
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = liver
</pre></div>

<p>to this:
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = liver$(EXEEXT)
</pre></div>

<p>The targets Automake generates are likewise given the &lsquo;<samp>$(EXEEXT)</samp>&rsquo;
extension.
</p>
<p>The variables <code>TESTS</code> and <code>XFAIL_TESTS</code> (see <a href="#Simple-Tests">Simple Tests</a>)
are also rewritten if they contain filenames that have been declared as
programs in the same <samp>Makefile</samp>.  (This is mostly useful when some
programs from <code>check_PROGRAMS</code> are listed in <code>TESTS</code>.)
</p>
<p>However, Automake cannot apply this rewriting to <code>configure</code>
substitutions.  This means that if you are conditionally building a
program using such a substitution, then your <samp>configure.ac</samp> must
take care to add &lsquo;<samp>$(EXEEXT)</samp>&rsquo; when constructing the output variable.
</p>
<p>Sometimes maintainers like to write an explicit link rule for their
program.  Without executable extension support, this is easy&mdash;you
simply write a rule whose target is the name of the program.  However,
when executable extension support is enabled, you must instead add the
&lsquo;<samp>$(EXEEXT)</samp>&rsquo; suffix.
</p>
<p>This might be a nuisance for maintainers who know their package will
never run on a platform that has
executable extensions.  For those maintainers, the <samp>no-exeext</samp>
option (see <a href="#Options">Options</a>) will disable this feature.  This works in a
fairly ugly way; if <samp>no-exeext</samp> is seen, then the presence of a
rule for a target named <code>foo</code> in <samp>Makefile.am</samp> will override
an <code>automake</code>-generated rule for &lsquo;<samp>foo$(EXEEXT)</samp>&rsquo;.  Without
the <samp>no-exeext</samp> option, this use will give a diagnostic.
</p>

<hr>
<a name="Other-Objects"></a>
<div class="header">
<p>
Next: <a href="#Other-GNU-Tools" accesskey="n" rel="next">Other GNU Tools</a>, Previous: <a href="#Programs" accesskey="p" rel="prev">Programs</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Other-Derived-Objects"></a>
<h2 class="chapter">9 Other Derived Objects</h2>

<p>Automake can handle derived objects that are not C programs.  Sometimes
the support for actually building such objects must be explicitly
supplied, but Automake will still automatically handle installation and
distribution.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Scripts" accesskey="1">Scripts</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Executable scripts
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Headers" accesskey="2">Headers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Header files
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Data" accesskey="3">Data</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Architecture-independent data files
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Sources" accesskey="4">Sources</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Derived sources
</td></tr>
</table>


<hr>
<a name="Scripts"></a>
<div class="header">
<p>
Next: <a href="#Headers" accesskey="n" rel="next">Headers</a>, Up: <a href="#Other-Objects" accesskey="u" rel="up">Other Objects</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Executable-Scripts"></a>
<h3 class="section">9.1 Executable Scripts</h3>

<a name="index-_005fSCRIPTS-primary_002c-defined"></a>
<a name="index-SCRIPTS-primary_002c-defined"></a>
<a name="index-Primary-variable_002c-SCRIPTS"></a>
<a name="index-_005fSCRIPTS"></a>
<a name="index-Installing-scripts"></a>

<p>It is possible to define and install programs that are scripts.  Such
programs are listed using the <code>SCRIPTS</code> primary name.  When the
script is distributed in its final, installable form, the
<samp>Makefile</samp> usually looks as follows:
<a name="index-SCRIPTS-1"></a>
</p>
<div class="example">
<pre class="example"># Install my_script in $(bindir) and distribute it.
dist_bin_SCRIPTS = my_script
</pre></div>

<p>Scripts are not distributed by default; as we have just seen, those
that should be distributed can be specified using a <code>dist_</code>
prefix as with other primaries.
</p>
<a name="index-SCRIPTS_002c-installation-directories"></a>
<a name="index-bin_005fSCRIPTS"></a>
<a name="index-sbin_005fSCRIPTS"></a>
<a name="index-libexec_005fSCRIPTS"></a>
<a name="index-pkgdata_005fSCRIPTS"></a>
<a name="index-pkglibexec_005fSCRIPTS"></a>
<a name="index-noinst_005fSCRIPTS"></a>
<a name="index-check_005fSCRIPTS"></a>

<p>Scripts can be installed in <code>bindir</code>, <code>sbindir</code>,
<code>libexecdir</code>, <code>pkglibexecdir</code>, or <code>pkgdatadir</code>.
</p>
<p>Scripts that need not be installed can be listed in
<code>noinst_SCRIPTS</code>, and among them, those which are needed only by
&lsquo;<samp>make check</samp>&rsquo; should go in <code>check_SCRIPTS</code>.
</p>
<p>When a script needs to be built, the <samp>Makefile.am</samp> should include
the appropriate rules.  For instance the <code>automake</code> program
itself is a Perl script that is generated from <samp>automake.in</samp>.
Here is how this is handled:
</p>
<div class="example">
<pre class="example">bin_SCRIPTS = automake
CLEANFILES = $(bin_SCRIPTS)
EXTRA_DIST = automake.in

do_subst = sed -e 's,[@]datadir[@],$(datadir),g' \
            -e 's,[@]PERL[@],$(PERL),g' \
            -e 's,[@]PACKAGE[@],$(PACKAGE),g' \
            -e 's,[@]VERSION[@],$(VERSION),g' \
            &hellip;

automake: automake.in Makefile
        $(do_subst) &lt; $(srcdir)/automake.in &gt; automake
        chmod +x automake
</pre></div>

<p>Such scripts for which a build rule has been supplied need to be
deleted explicitly using <code>CLEANFILES</code> (see <a href="#Clean">Clean</a>), and their
sources have to be distributed, usually with <code>EXTRA_DIST</code>
(see <a href="#Basics-of-Distribution">Basics of Distribution</a>).
</p>
<p>Another common way to build scripts is to process them from
<samp>configure</samp> with <code>AC_CONFIG_FILES</code>.  In this situation
Automake knows which files should be cleaned and distributed, and what
the rebuild rules should look like.
</p>
<p>For instance if <samp>configure.ac</samp> contains
</p>
<div class="example">
<pre class="example">AC_CONFIG_FILES([src/my_script], [chmod +x src/my_script])
</pre></div>

<p>to build <samp>src/my_script</samp> from <samp>src/my_script.in</samp>, then a
<samp>src/Makefile.am</samp> to install this script in <code>$(bindir)</code> can
be as simple as
</p>
<div class="example">
<pre class="example">bin_SCRIPTS = my_script
CLEANFILES = $(bin_SCRIPTS)
</pre></div>

<p>There is no need for <code>EXTRA_DIST</code> or any build rule: Automake
infers them from <code>AC_CONFIG_FILES</code> (see <a href="#Requirements">Requirements</a>).
<code>CLEANFILES</code> is still useful, because by default Automake will
clean targets of <code>AC_CONFIG_FILES</code> in <code>distclean</code>, not
<code>clean</code>.
</p>
<p>Although this looks simpler, building scripts this way has one
drawback: directory variables such as <code>$(datadir)</code> are not fully
expanded and may refer to other directory variables.
</p>
<hr>
<a name="Headers"></a>
<div class="header">
<p>
Next: <a href="#Data" accesskey="n" rel="next">Data</a>, Previous: <a href="#Scripts" accesskey="p" rel="prev">Scripts</a>, Up: <a href="#Other-Objects" accesskey="u" rel="up">Other Objects</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Header-files"></a>
<h3 class="section">9.2 Header files</h3>

<a name="index-_005fHEADERS-primary_002c-defined"></a>
<a name="index-HEADERS-primary_002c-defined"></a>
<a name="index-Primary-variable_002c-HEADERS"></a>
<a name="index-_005fHEADERS"></a>
<a name="index-noinst_005fHEADERS"></a>
<a name="index-HEADERS_002c-installation-directories"></a>
<a name="index-Installing-headers"></a>
<a name="index-include_005fHEADERS"></a>
<a name="index-oldinclude_005fHEADERS"></a>
<a name="index-pkginclude_005fHEADERS"></a>


<p>Header files that must be installed are specified by the
<code>HEADERS</code> family of variables.  Headers can be installed in
<code>includedir</code>, <code>oldincludedir</code>, <code>pkgincludedir</code> or any
other directory you may have defined (see <a href="#Uniform">Uniform</a>).  For instance,
</p>
<div class="example">
<pre class="example">include_HEADERS = foo.h bar/bar.h
</pre></div>

<p>will install the two files as <samp>$(includedir)/foo.h</samp> and
<samp>$(includedir)/bar.h</samp>.
</p>
<p>The <code>nobase_</code> prefix is also supported,
</p>
<div class="example">
<pre class="example">nobase_include_HEADERS = foo.h bar/bar.h
</pre></div>

<p>will install the two files as <samp>$(includedir)/foo.h</samp> and
<samp>$(includedir)/bar/bar.h</samp> (see <a href="#Alternative">Alternative</a>).
</p>
<a name="index-noinst_005fHEADERS-1"></a>
<p>Usually, only header files that accompany installed libraries need to
be installed.  Headers used by programs or convenience libraries are
not installed.  The <code>noinst_HEADERS</code> variable can be used for
such headers.  However when the header actually belongs to a single
convenience library or program, we recommend listing it in the
program&rsquo;s or library&rsquo;s <code>_SOURCES</code> variable (see <a href="#Program-Sources">Program Sources</a>) instead of in <code>noinst_HEADERS</code>.  This is clearer for
the <samp>Makefile.am</samp> reader.  <code>noinst_HEADERS</code> would be the
right variable to use in a directory containing only headers and no
associated library or program.
</p>
<p>All header files must be listed somewhere; in a <code>_SOURCES</code>
variable or in a <code>_HEADERS</code> variable.  Missing ones will not
appear in the distribution.
</p>
<p>For header files that are built and must not be distributed, use the
<code>nodist_</code> prefix as in <code>nodist_include_HEADERS</code> or
<code>nodist_prog_SOURCES</code>.  If these generated headers are needed
during the build, you must also ensure they exist before they are
used (see <a href="#Sources">Sources</a>).
</p>

<hr>
<a name="Data"></a>
<div class="header">
<p>
Next: <a href="#Sources" accesskey="n" rel="next">Sources</a>, Previous: <a href="#Headers" accesskey="p" rel="prev">Headers</a>, Up: <a href="#Other-Objects" accesskey="u" rel="up">Other Objects</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Architecture_002dindependent-data-files"></a>
<h3 class="section">9.3 Architecture-independent data files</h3>

<a name="index-_005fDATA-primary_002c-defined"></a>
<a name="index-DATA-primary_002c-defined"></a>
<a name="index-Primary-variable_002c-DATA"></a>
<a name="index-_005fDATA"></a>

<p>Automake supports the installation of miscellaneous data files using the
<code>DATA</code> family of variables.
<a name="index-DATA-1"></a>
</p>
<a name="index-data_005fDATA"></a>
<a name="index-sysconf_005fDATA"></a>
<a name="index-sharedstate_005fDATA"></a>
<a name="index-localstate_005fDATA"></a>
<a name="index-pkgdata_005fDATA"></a>

<p>Such data can be installed in the directories <code>datadir</code>,
<code>sysconfdir</code>, <code>sharedstatedir</code>, <code>localstatedir</code>, or
<code>pkgdatadir</code>.
</p>
<p>By default, data files are <em>not</em> included in a distribution.  Of
course, you can use the <code>dist_</code> prefix to change this on a
per-variable basis.
</p>
<p>Here is how Automake declares its auxiliary data files:
</p>
<div class="example">
<pre class="example">dist_pkgdata_DATA = clean-kr.am clean.am &hellip;
</pre></div>


<hr>
<a name="Sources"></a>
<div class="header">
<p>
Previous: <a href="#Data" accesskey="p" rel="prev">Data</a>, Up: <a href="#Other-Objects" accesskey="u" rel="up">Other Objects</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Built-Sources"></a>
<h3 class="section">9.4 Built Sources</h3>

<p>Because Automake&rsquo;s automatic dependency tracking works as a side-effect
of compilation (see <a href="#Dependencies">Dependencies</a>) there is a bootstrap issue: a
target should not be compiled before its dependencies are made, but
these dependencies are unknown until the target is first compiled.
</p>
<p>Ordinarily this is not a problem, because dependencies are distributed
sources: they preexist and do not need to be built.  Suppose that
<samp>foo.c</samp> includes <samp>foo.h</samp>.  When it first compiles
<samp>foo.o</samp>, <code>make</code> only knows that <samp>foo.o</samp> depends on
<samp>foo.c</samp>.  As a side-effect of this compilation <code>depcomp</code>
records the <samp>foo.h</samp> dependency so that following invocations of
<code>make</code> will honor it.  In these conditions, it&rsquo;s clear there is
no problem: either <samp>foo.o</samp> doesn&rsquo;t exist and has to be built
(regardless of the dependencies), or accurate dependencies exist and
they can be used to decide whether <samp>foo.o</samp> should be rebuilt.
</p>
<p>It&rsquo;s a different story if <samp>foo.h</samp> doesn&rsquo;t exist by the first
<code>make</code> run.  For instance, there might be a rule to build
<samp>foo.h</samp>.  This time <samp>file.o</samp>&rsquo;s build will fail because the
compiler can&rsquo;t find <samp>foo.h</samp>.  <code>make</code> failed to trigger the
rule to build <samp>foo.h</samp> first by lack of dependency information.
</p>
<a name="index-BUILT_005fSOURCES"></a>
<a name="index-BUILT_005fSOURCES_002c-defined"></a>

<p>The <code>BUILT_SOURCES</code> variable is a workaround for this problem.  A
source file listed in <code>BUILT_SOURCES</code> is made on &lsquo;<samp>make all</samp>&rsquo;
or &lsquo;<samp>make check</samp>&rsquo; (or even &lsquo;<samp>make install</samp>&rsquo;) before other
targets are processed.  However, such a source file is not
<em>compiled</em> unless explicitly requested by mentioning it in some
other <code>_SOURCES</code> variable.
</p>
<p>So, to conclude our introductory example, we could use
&lsquo;<samp>BUILT_SOURCES = foo.h</samp>&rsquo; to ensure <samp>foo.h</samp> gets built before
any other target (including <samp>foo.o</samp>) during &lsquo;<samp>make all</samp>&rsquo; or
&lsquo;<samp>make check</samp>&rsquo;.
</p>
<p><code>BUILT_SOURCES</code> is actually a bit of a misnomer, as any file which
must be created early in the build process can be listed in this
variable.  Moreover, all built sources do not necessarily have to be
listed in <code>BUILT_SOURCES</code>.  For instance, a generated <samp>.c</samp> file
doesn&rsquo;t need to appear in <code>BUILT_SOURCES</code> (unless it is included by
another source), because it&rsquo;s a known dependency of the associated
object.
</p>
<p>It might be important to emphasize that <code>BUILT_SOURCES</code> is
honored only by &lsquo;<samp>make all</samp>&rsquo;, &lsquo;<samp>make check</samp>&rsquo; and &lsquo;<samp>make
install</samp>&rsquo;.  This means you cannot build a specific target (e.g.,
&lsquo;<samp>make foo</samp>&rsquo;) in a clean tree if it depends on a built source.
However it will succeed if you have run &lsquo;<samp>make all</samp>&rsquo; earlier,
because accurate dependencies are already available.
</p>
<p>The next section illustrates and discusses the handling of built sources
on a toy example.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Built-Sources-Example" accesskey="1">Built Sources Example</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Several ways to handle built sources.
</td></tr>
</table>

<hr>
<a name="Built-Sources-Example"></a>
<div class="header">
<p>
Up: <a href="#Sources" accesskey="u" rel="up">Sources</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Built-Sources-Example-1"></a>
<h4 class="subsection">9.4.1 Built Sources Example</h4>

<p>Suppose that <samp>foo.c</samp> includes <samp>bindir.h</samp>, which is
installation-dependent and not distributed: it needs to be built.  Here
<samp>bindir.h</samp> defines the preprocessor macro <code>bindir</code> to the
value of the <code>make</code> variable <code>bindir</code> (inherited from
<samp>configure</samp>).
</p>
<p>We suggest several implementations below.  It&rsquo;s not meant to be an
exhaustive listing of all ways to handle built sources, but it will give
you a few ideas if you encounter this issue.
</p>
<a name="First-Try"></a>
<h4 class="subsubheading">First Try</h4>

<p>This first implementation will illustrate the bootstrap issue mentioned
in the previous section (see <a href="#Sources">Sources</a>).
</p>
<p>Here is a tentative <samp>Makefile.am</samp>.
</p>
<div class="example">
<pre class="example"># This won't work.
bin_PROGRAMS = foo
foo_SOURCES = foo.c
nodist_foo_SOURCES = bindir.h
CLEANFILES = bindir.h
bindir.h: Makefile
        echo '#define bindir &quot;$(bindir)&quot;' &gt;$@
</pre></div>

<p>This setup doesn&rsquo;t work, because Automake doesn&rsquo;t know that <samp>foo.c</samp>
includes <samp>bindir.h</samp>.  Remember, automatic dependency tracking works
as a side-effect of compilation, so the dependencies of <samp>foo.o</samp> will
be known only after <samp>foo.o</samp> has been compiled (see <a href="#Dependencies">Dependencies</a>).
The symptom is as follows.
</p>
<div class="example">
<pre class="example">% make
source='foo.c' object='foo.o' libtool=no \
depfile='.deps/foo.Po' tmpdepfile='.deps/foo.TPo' \
depmode=gcc /bin/sh ./depcomp \
gcc -I. -I. -g -O2 -c `test -f 'foo.c' || echo './'`foo.c
foo.c:2: bindir.h: No such file or directory
make: *** [foo.o] Error 1
</pre></div>

<p>In this example <samp>bindir.h</samp> is not distributed nor installed, and
it is not even being built on-time.  One may wonder if the
&lsquo;<samp>nodist_foo_SOURCES = bindir.h</samp>&rsquo; line has any use at all.  This
line simply states that <samp>bindir.h</samp> is a source of <code>foo</code>, so
for instance, it should be inspected while generating tags
(see <a href="#Tags">Tags</a>).  In other words, it does not help our present problem,
and the build would fail identically without it.
</p>
<a name="Using-BUILT_005fSOURCES"></a>
<h4 class="subsubheading">Using <code>BUILT_SOURCES</code></h4>

<p>A solution is to require <samp>bindir.h</samp> to be built before anything
else.  This is what <code>BUILT_SOURCES</code> is meant for (see <a href="#Sources">Sources</a>).
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = foo
foo_SOURCES = foo.c
nodist_foo_SOURCES = bindir.h
BUILT_SOURCES = bindir.h
CLEANFILES = bindir.h
bindir.h: Makefile
        echo '#define bindir &quot;$(bindir)&quot;' &gt;$@
</pre></div>

<p>See how <samp>bindir.h</samp> gets built first:
</p>
<div class="example">
<pre class="example">% make
echo '#define bindir &quot;/usr/local/bin&quot;' &gt;bindir.h
make  all-am
make[1]: Entering directory `/home/adl/tmp'
source='foo.c' object='foo.o' libtool=no \
depfile='.deps/foo.Po' tmpdepfile='.deps/foo.TPo' \
depmode=gcc /bin/sh ./depcomp \
gcc -I. -I. -g -O2 -c `test -f 'foo.c' || echo './'`foo.c
gcc  -g -O2   -o foo  foo.o
make[1]: Leaving directory `/home/adl/tmp'
</pre></div>

<p>However, as said earlier, <code>BUILT_SOURCES</code> applies only to the
<code>all</code>, <code>check</code>, and <code>install</code> targets.  It still fails
if you try to run &lsquo;<samp>make foo</samp>&rsquo; explicitly:
</p>
<div class="example">
<pre class="example">% make clean
test -z &quot;bindir.h&quot; || rm -f bindir.h
test -z &quot;foo&quot; || rm -f foo
rm -f *.o
% : &gt; .deps/foo.Po # Suppress previously recorded dependencies
% make foo
source='foo.c' object='foo.o' libtool=no \
depfile='.deps/foo.Po' tmpdepfile='.deps/foo.TPo' \
depmode=gcc /bin/sh ./depcomp \
gcc -I. -I. -g -O2 -c `test -f 'foo.c' || echo './'`foo.c
foo.c:2: bindir.h: No such file or directory
make: *** [foo.o] Error 1
</pre></div>

<a name="Recording-Dependencies-manually"></a>
<h4 class="subsubheading">Recording Dependencies manually</h4>

<p>Usually people are happy enough with <code>BUILT_SOURCES</code> because they
never build targets such as &lsquo;<samp>make foo</samp>&rsquo; before &lsquo;<samp>make all</samp>&rsquo;, as
in the previous example.  However if this matters to you, you can
avoid <code>BUILT_SOURCES</code> and record such dependencies explicitly in
the <samp>Makefile.am</samp>.
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = foo
foo_SOURCES = foo.c
nodist_foo_SOURCES = bindir.h
foo.$(OBJEXT): bindir.h
CLEANFILES = bindir.h
bindir.h: Makefile
        echo '#define bindir &quot;$(bindir)&quot;' &gt;$@
</pre></div>

<p>You don&rsquo;t have to list <em>all</em> the dependencies of <samp>foo.o</samp>
explicitly, only those that might need to be built.  If a dependency
already exists, it will not hinder the first compilation and will be
recorded by the normal dependency tracking code.  (Note that after
this first compilation the dependency tracking code will also have
recorded the dependency between <samp>foo.o</samp> and
<samp>bindir.h</samp>; so our explicit dependency is really useful to
the first build only.)
</p>
<p>Adding explicit dependencies like this can be a bit dangerous if you are
not careful enough.  This is due to the way Automake tries not to
overwrite your rules (it assumes you know better than it).
&lsquo;<samp>foo.$(OBJEXT): bindir.h</samp>&rsquo; supersedes any rule Automake may want to
output to build &lsquo;<samp>foo.$(OBJEXT)</samp>&rsquo;.  It happens to work in this case
because Automake doesn&rsquo;t have to output any &lsquo;<samp>foo.$(OBJEXT):</samp>&rsquo;
target: it relies on a suffix rule instead (i.e., &lsquo;<samp>.c.$(OBJEXT):</samp>&rsquo;).
Always check the generated <samp>Makefile.in</samp> if you do this.
</p>
<a name="Build-bindir_002eh-from-configure"></a>
<h4 class="subsubheading">Build <samp>bindir.h</samp> from <samp>configure</samp></h4>

<p>It&rsquo;s possible to define this preprocessor macro from <samp>configure</samp>,
either in <samp>config.h</samp> (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Defining-Directories">Defining
Directories</a> in <cite>The Autoconf Manual</cite>), or by processing a
<samp>bindir.h.in</samp> file using <code>AC_CONFIG_FILES</code>
(see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Configuration-Actions">Configuration Actions</a> in <cite>The
Autoconf Manual</cite>).
</p>
<p>At this point it should be clear that building <samp>bindir.h</samp> from
<samp>configure</samp> works well for this example.  <samp>bindir.h</samp> will exist
before you build any target, hence will not cause any dependency issue.
</p>
<p>The Makefile can be shrunk as follows.  We do not even have to mention
<samp>bindir.h</samp>.
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = foo
foo_SOURCES = foo.c
</pre></div>

<p>However, it&rsquo;s not always possible to build sources from
<samp>configure</samp>, especially when these sources are generated by a tool
that needs to be built first.
</p>
<a name="Build-bindir_002ec_002c-not-bindir_002eh_002e"></a>
<h4 class="subsubheading">Build <samp>bindir.c</samp>, not <samp>bindir.h</samp>.</h4>

<p>Another attractive idea is to define <code>bindir</code> as a variable or
function exported from <samp>bindir.o</samp>, and build <samp>bindir.c</samp>
instead of <samp>bindir.h</samp>.
</p>
<div class="example">
<pre class="example">noinst_PROGRAMS = foo
foo_SOURCES = foo.c bindir.h
nodist_foo_SOURCES = bindir.c
CLEANFILES = bindir.c
bindir.c: Makefile
        echo 'const char bindir[] = &quot;$(bindir)&quot;;' &gt;$@
</pre></div>

<p><samp>bindir.h</samp> contains just the variable&rsquo;s declaration and doesn&rsquo;t
need to be built, so it won&rsquo;t cause any trouble.  <samp>bindir.o</samp> is
always dependent on <samp>bindir.c</samp>, so <samp>bindir.c</samp> will get built
first.
</p>
<a name="Which-is-best_003f"></a>
<h4 class="subsubheading">Which is best?</h4>

<p>There is no panacea, of course.  Each solution has its merits and
drawbacks.
</p>
<p>You cannot use <code>BUILT_SOURCES</code> if the ability to run &lsquo;<samp>make
foo</samp>&rsquo; on a clean tree is important to you.
</p>
<p>You won&rsquo;t add explicit dependencies if you are leery of overriding
an Automake rule by mistake.
</p>
<p>Building files from <samp>./configure</samp> is not always possible, neither
is converting <samp>.h</samp> files into <samp>.c</samp> files.
</p>

<hr>
<a name="Other-GNU-Tools"></a>
<div class="header">
<p>
Next: <a href="#Documentation" accesskey="n" rel="next">Documentation</a>, Previous: <a href="#Other-Objects" accesskey="p" rel="prev">Other Objects</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Other-GNU-Tools-1"></a>
<h2 class="chapter">10 Other GNU Tools</h2>

<p>Since Automake is primarily intended to generate <samp>Makefile.in</samp>s for
use in GNU programs, it tries hard to interoperate with other GNU tools.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Emacs-Lisp" accesskey="1">Emacs Lisp</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Emacs Lisp
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#gettext" accesskey="2">gettext</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Gettext
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Libtool" accesskey="3">Libtool</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Libtool
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Java" accesskey="4">Java</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Java bytecode compilation (deprecated)
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Python" accesskey="5">Python</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Python
</td></tr>
</table>


<hr>
<a name="Emacs-Lisp"></a>
<div class="header">
<p>
Next: <a href="#gettext" accesskey="n" rel="next">gettext</a>, Up: <a href="#Other-GNU-Tools" accesskey="u" rel="up">Other GNU Tools</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Emacs-Lisp-1"></a>
<h3 class="section">10.1 Emacs Lisp</h3>

<a name="index-_005fLISP-primary_002c-defined"></a>
<a name="index-LISP-primary_002c-defined"></a>
<a name="index-Primary-variable_002c-LISP"></a>

<a name="index-_005fLISP"></a>
<a name="index-lisp_005fLISP"></a>
<a name="index-noinst_005fLISP"></a>

<p>Automake provides some support for Emacs Lisp.  The <code>LISP</code> primary
is used to hold a list of <samp>.el</samp> files.  Possible prefixes for this
primary are <code>lisp_</code> and <code>noinst_</code>.  Note that if
<code>lisp_LISP</code> is defined, then <samp>configure.ac</samp> must run
<code>AM_PATH_LISPDIR</code> (see <a href="#Macros">Macros</a>).
</p>
<a name="index-dist_005flisp_005fLISP"></a>
<a name="index-dist_005fnoinst_005fLISP"></a>
<p>Lisp sources are not distributed by default.  You can prefix the
<code>LISP</code> primary with <code>dist_</code>, as in <code>dist_lisp_LISP</code> or
<code>dist_noinst_LISP</code>, to indicate that these files should be
distributed.
</p>
<p>Automake will byte-compile all Emacs Lisp source files using the Emacs
found by <code>AM_PATH_LISPDIR</code>, if any was found.  When performing such
byte-compilation, the flags specified in the (developer-reserved)
<code>AM_ELCFLAGS</code> and (user-reserved) <code>ELCFLAGS</code> make variables
will be passed to the Emacs invocation.
</p>
<p>Byte-compiled Emacs Lisp files are not portable among all versions of
Emacs, so it makes sense to turn this off if you expect sites to have
more than one version of Emacs installed.  Furthermore, many packages
don&rsquo;t actually benefit from byte-compilation.  Still, we recommend
that you byte-compile your Emacs Lisp sources.  It is probably better
for sites with strange setups to cope for themselves than to make the
installation less nice for everybody else.
</p>
<p>There are two ways to avoid byte-compiling.  Historically, we have
recommended the following construct.
</p>
<div class="example">
<pre class="example">lisp_LISP = file1.el file2.el
ELCFILES =
</pre></div>

<p><code>ELCFILES</code> is an internal Automake variable that normally lists
all <samp>.elc</samp> files that must be byte-compiled.  Automake defines
<code>ELCFILES</code> automatically from <code>lisp_LISP</code>.  Emptying this
variable explicitly prevents byte-compilation.
</p>
<p>Since Automake 1.8, we now recommend using <code>lisp_DATA</code> instead:
</p>
<div class="example">
<pre class="example">lisp_DATA = file1.el file2.el
</pre></div>

<p>Note that these two constructs are not equivalent.  <code>_LISP</code> will
not install a file if Emacs is not installed, while <code>_DATA</code> will
always install its files.
</p>
<hr>
<a name="gettext"></a>
<div class="header">
<p>
Next: <a href="#Libtool" accesskey="n" rel="next">Libtool</a>, Previous: <a href="#Emacs-Lisp" accesskey="p" rel="prev">Emacs Lisp</a>, Up: <a href="#Other-GNU-Tools" accesskey="u" rel="up">Other GNU Tools</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Gettext"></a>
<h3 class="section">10.2 Gettext</h3>

<a name="index-GNU-Gettext-support"></a>
<a name="index-Gettext-support"></a>
<a name="index-Support-for-GNU-Gettext"></a>

<p>If <code>AM_GNU_GETTEXT</code> is seen in <samp>configure.ac</samp>, then Automake
turns on support for GNU gettext, a message catalog system for
internationalization
(see <a href="http://www.gnu.org/software/gettext/manual/gettext.html#Top">Introduction</a> in <cite>GNU gettext utilities</cite>).
</p>
<p>The <code>gettext</code> support in Automake requires the addition of one or
two subdirectories to the package: <samp>po</samp> and possibly also <samp>intl</samp>.
The latter is needed if <code>AM_GNU_GETTEXT</code> is not invoked with the
&lsquo;<samp>external</samp>&rsquo; argument, or if <code>AM_GNU_GETTEXT_INTL_SUBDIR</code> is used.
Automake ensures that these directories exist and are mentioned in
<code>SUBDIRS</code>.
</p>
<hr>
<a name="Libtool"></a>
<div class="header">
<p>
Next: <a href="#Java" accesskey="n" rel="next">Java</a>, Previous: <a href="#gettext" accesskey="p" rel="prev">gettext</a>, Up: <a href="#Other-GNU-Tools" accesskey="u" rel="up">Other GNU Tools</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Libtool-1"></a>
<h3 class="section">10.3 Libtool</h3>

<p>Automake provides support for GNU Libtool (see <a href="http://www.gnu.org/software/libtool/manual/libtool.html#Top">Introduction</a> in <cite>The Libtool Manual</cite>) with the <code>LTLIBRARIES</code> primary.
See <a href="#A-Shared-Library">A Shared Library</a>.
</p>

<hr>
<a name="Java"></a>
<div class="header">
<p>
Next: <a href="#Python" accesskey="n" rel="next">Python</a>, Previous: <a href="#Libtool" accesskey="p" rel="prev">Libtool</a>, Up: <a href="#Other-GNU-Tools" accesskey="u" rel="up">Other GNU Tools</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Java-bytecode-compilation-_0028deprecated_0029"></a>
<h3 class="section">10.4 Java bytecode compilation (deprecated)</h3>

<a name="index-_005fJAVA-primary_002c-defined"></a>
<a name="index-JAVA-primary_002c-defined"></a>
<a name="index-Primary-variable_002c-JAVA"></a>
<a name="index-Java-to-bytecode_002c-compilation"></a>
<a name="index-Compilation-of-Java-to-bytecode"></a>

<p>Automake provides some minimal support for Java bytecode compilation with
the <code>JAVA</code> primary (in addition to the support for compiling Java to
native machine code; see <a href="#Java-Support-with-gcj">Java Support with gcj</a>).  Note however that
<em>the interface and most features described here are deprecated</em>.
Future Automake releases will strive to provide a better and cleaner
interface, which however <em>won&rsquo;t be backward-compatible</em>; the present
interface will probably be removed altogether some time after the
introduction of the new interface (if that ever materializes).  In any
case, the current <code>JAVA</code> primary features are frozen and will no
longer be developed, not even to take bug fixes.
</p>
<p>Any <samp>.java</samp> files listed in a <code>_JAVA</code> variable will be
compiled with <code>JAVAC</code> at build time.  By default, <samp>.java</samp>
files are not included in the distribution, you should use the
<code>dist_</code> prefix to distribute them.
</p>
<p>Here is a typical setup for distributing <samp>.java</samp> files and
installing the <samp>.class</samp> files resulting from their compilation.
</p>
<div class="example">
<pre class="example">javadir = $(datadir)/java
dist_java_JAVA = a.java b.java &hellip;
</pre></div>

<a name="index-JAVA-restrictions"></a>
<a name="index-Restrictions-for-JAVA"></a>

<p>Currently Automake enforces the restriction that only one <code>_JAVA</code>
primary can be used in a given <samp>Makefile.am</samp>.  The reason for this
restriction is that, in general, it isn&rsquo;t possible to know which
<samp>.class</samp> files were generated from which <samp>.java</samp> files, so
it would be impossible to know which files to install where.  For
instance, a <samp>.java</samp> file can define multiple classes; the resulting
<samp>.class</samp> file names cannot be predicted without parsing the
<samp>.java</samp> file.
</p>
<p>There are a few variables that are used when compiling Java sources:
</p>
<dl compact="compact">
<dt><code>JAVAC</code>
<a name="index-JAVAC"></a>
</dt>
<dd><p>The name of the Java compiler.  This defaults to &lsquo;<samp>javac</samp>&rsquo;.
</p>
</dd>
<dt><code>JAVACFLAGS</code>
<a name="index-JAVACFLAGS"></a>
</dt>
<dd><p>The flags to pass to the compiler.  This is considered to be a user
variable (see <a href="#User-Variables">User Variables</a>).
</p>
</dd>
<dt><code>AM_JAVACFLAGS</code>
<a name="index-AM_005fJAVACFLAGS"></a>
</dt>
<dd><p>More flags to pass to the Java compiler.  This, and not
<code>JAVACFLAGS</code>, should be used when it is necessary to put Java
compiler flags into <samp>Makefile.am</samp>.
</p>
</dd>
<dt><code>JAVAROOT</code>
<a name="index-JAVAROOT"></a>
</dt>
<dd><p>The value of this variable is passed to the <samp>-d</samp> option to
<code>javac</code>.  It defaults to &lsquo;<samp>$(top_builddir)</samp>&rsquo;.
</p>
</dd>
<dt><code>CLASSPATH_ENV</code>
<a name="index-CLASSPATH_005fENV"></a>
</dt>
<dd><p>This variable is a shell expression that is used to set the
<code>CLASSPATH</code> environment variable on the <code>javac</code> command line.
(In the future we will probably handle class path setting differently.)
</p></dd>
</dl>


<hr>
<a name="Python"></a>
<div class="header">
<p>
Previous: <a href="#Java" accesskey="p" rel="prev">Java</a>, Up: <a href="#Other-GNU-Tools" accesskey="u" rel="up">Other GNU Tools</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Python-1"></a>
<h3 class="section">10.5 Python</h3>

<a name="index-_005fPYTHON-primary_002c-defined"></a>
<a name="index-PYTHON-primary_002c-defined"></a>
<a name="index-Primary-variable_002c-PYTHON"></a>
<a name="index-_005fPYTHON"></a>

<p>Automake provides support for Python compilation with the
<code>PYTHON</code> primary.  A typical setup is to call
<code>AM_PATH_PYTHON</code> in <samp>configure.ac</samp> and use a line like the
following in <samp>Makefile.am</samp>:
</p>
<div class="example">
<pre class="example">python_PYTHON = tree.py leave.py
</pre></div>

<p>Any files listed in a <code>_PYTHON</code> variable will be byte-compiled
with <code>py-compile</code> at install time.  <code>py-compile</code>
actually creates both standard (<samp>.pyc</samp>) and optimized
(<samp>.pyo</samp>) byte-compiled versions of the source files.  Note that
because byte-compilation occurs at install time, any files listed in
<code>noinst_PYTHON</code> will not be compiled.  Python source files are
included in the distribution by default, prepend <code>nodist_</code> (as in
<code>nodist_python_PYTHON</code>) to omit them.
</p>
<p>Automake ships with an Autoconf macro called <code>AM_PATH_PYTHON</code>
that will determine some Python-related directory variables (see
below).  If you have called <code>AM_PATH_PYTHON</code> from
<samp>configure.ac</samp>, then you may use the variables
<code>python_PYTHON</code> or <code>pkgpython_PYTHON</code> to list Python source
files in your <samp>Makefile.am</samp>, depending on where you want your files
installed (see the definitions of <code>pythondir</code> and
<code>pkgpythondir</code> below).
</p>
<dl>
<dt><a name="index-AM_005fPATH_005fPYTHON"></a>Macro: <strong>AM_PATH_PYTHON</strong> <em>(<span class="roman">[</span><var>version</var><span class="roman">]</span>, <span class="roman">[</span><var>action-if-found</var><span class="roman">]</span>,</em></dt>
<dd><p><span class="roman">[</span><var>action-if-not-found</var><span class="roman">]</span>)
</p>
<p>Search for a Python interpreter on the system.  This macro takes three
optional arguments.  The first argument, if present, is the minimum
version of Python required for this package: <code>AM_PATH_PYTHON</code>
will skip any Python interpreter that is older than <var>version</var>.
If an interpreter is found and satisfies <var>version</var>, then
<var>action-if-found</var> is run.  Otherwise, <var>action-if-not-found</var> is
run.
</p>
<p>If <var>action-if-not-found</var> is not specified, as in the following
example, the default is to abort <code>configure</code>.
</p>
<div class="example">
<pre class="example">AM_PATH_PYTHON([2.2])
</pre></div>

<p>This is fine when Python is an absolute requirement for the package.
If Python &gt;= 2.5 was only <em>optional</em> to the package,
<code>AM_PATH_PYTHON</code> could be called as follows.
</p>
<div class="example">
<pre class="example">AM_PATH_PYTHON([2.5],, [:])
</pre></div>

<p>If the <code>PYTHON</code> variable is set when <code>AM_PATH_PYTHON</code> is
called, then that will be the only Python interpreter that is tried.
</p>
<p><code>AM_PATH_PYTHON</code> creates the following output variables based on
the Python installation found during configuration.
</p></dd></dl>

<dl compact="compact">
<dt><code>PYTHON</code>
<a name="index-PYTHON-1"></a>
</dt>
<dd><p>The name of the Python executable, or &lsquo;<samp>:</samp>&rsquo; if no suitable
interpreter could be found.
</p>
<p>Assuming <var>action-if-not-found</var> is used (otherwise <samp>./configure</samp>
will abort if Python is absent), the value of <code>PYTHON</code> can be used
to setup a conditional in order to disable the relevant part of a build
as follows.
</p>
<div class="example">
<pre class="example">AM_PATH_PYTHON(,, [:])
AM_CONDITIONAL([HAVE_PYTHON], [test &quot;$PYTHON&quot; != :])
</pre></div>

</dd>
<dt><code>PYTHON_VERSION</code>
<a name="index-PYTHON_005fVERSION"></a>
</dt>
<dd><p>The Python version number, in the form <var>major</var>.<var>minor</var>
(e.g., &lsquo;<samp>2.5</samp>&rsquo;).  This is currently the value of
&lsquo;<samp>sys.version[:3]</samp>&rsquo;.
</p>
</dd>
<dt><code>PYTHON_PREFIX</code>
<a name="index-PYTHON_005fPREFIX"></a>
</dt>
<dd><p>The string &lsquo;<samp>${prefix}</samp>&rsquo;.  This term may be used in future work
that needs the contents of Python&rsquo;s &lsquo;<samp>sys.prefix</samp>&rsquo;, but general
consensus is to always use the value from <code>configure</code>.
</p>
</dd>
<dt><code>PYTHON_EXEC_PREFIX</code>
<a name="index-PYTHON_005fEXEC_005fPREFIX"></a>
</dt>
<dd><p>The string &lsquo;<samp>${exec_prefix}</samp>&rsquo;.  This term may be used in future work
that needs the contents of Python&rsquo;s &lsquo;<samp>sys.exec_prefix</samp>&rsquo;, but general
consensus is to always use the value from <code>configure</code>.
</p>
</dd>
<dt><code>PYTHON_PLATFORM</code>
<a name="index-PYTHON_005fPLATFORM"></a>
</dt>
<dd><p>The canonical name used by Python to describe the operating system, as
given by &lsquo;<samp>sys.platform</samp>&rsquo;.  This value is sometimes needed when
building Python extensions.
</p>
</dd>
<dt><code>pythondir</code>
<a name="index-pythondir"></a>
</dt>
<dd><p>The directory name for the <samp>site-packages</samp> subdirectory of the
standard Python install tree.
</p>
</dd>
<dt><code>pkgpythondir</code>
<a name="index-pkgpythondir"></a>
</dt>
<dd><p>This is the directory under <code>pythondir</code> that is named after the
package.  That is, it is &lsquo;<samp>$(pythondir)/$(PACKAGE)</samp>&rsquo;.  It is provided
as a convenience.
</p>
</dd>
<dt><code>pyexecdir</code>
<a name="index-pyexecdir"></a>
</dt>
<dd><p>This is the directory where Python extension modules (shared libraries)
should be installed.  An extension module written in C could be declared
as follows to Automake:
</p>
<div class="example">
<pre class="example">pyexec_LTLIBRARIES = quaternion.la
quaternion_la_SOURCES = quaternion.c support.c support.h
quaternion_la_LDFLAGS = -avoid-version -module
</pre></div>

</dd>
<dt><code>pkgpyexecdir</code>
<a name="index-pkgpyexecdir"></a>
</dt>
<dd><p>This is a convenience variable that is defined as
&lsquo;<samp>$(pyexecdir)/$(PACKAGE)</samp>&rsquo;.
</p></dd>
</dl>

<p>All of these directory variables have values that start with either
&lsquo;<samp>${prefix}</samp>&rsquo; or &lsquo;<samp>${exec_prefix}</samp>&rsquo; unexpanded.  This works
fine in <samp>Makefiles</samp>, but it makes these variables hard to use in
<samp>configure</samp>.  This is mandated by the GNU coding standards, so
that the user can run &lsquo;<samp>make prefix=/foo install</samp>&rsquo;.  The Autoconf
manual has a section with more details on this topic
(see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Installation-Directory-Variables">Installation Directory
Variables</a> in <cite>The Autoconf Manual</cite>).  See also <a href="#Hard_002dCoded-Install-Paths">Hard-Coded Install Paths</a>.
</p>

<hr>
<a name="Documentation"></a>
<div class="header">
<p>
Next: <a href="#Install" accesskey="n" rel="next">Install</a>, Previous: <a href="#Other-GNU-Tools" accesskey="p" rel="prev">Other GNU Tools</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Building-documentation"></a>
<h2 class="chapter">11 Building documentation</h2>

<p>Currently Automake provides support for Texinfo and man pages.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Texinfo" accesskey="1">Texinfo</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Texinfo
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Man-Pages" accesskey="2">Man Pages</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Man pages
</td></tr>
</table>


<hr>
<a name="Texinfo"></a>
<div class="header">
<p>
Next: <a href="#Man-Pages" accesskey="n" rel="next">Man Pages</a>, Up: <a href="#Documentation" accesskey="u" rel="up">Documentation</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Texinfo-1"></a>
<h3 class="section">11.1 Texinfo</h3>

<a name="index-_005fTEXINFOS-primary_002c-defined"></a>
<a name="index-TEXINFOS-primary_002c-defined"></a>
<a name="index-Primary-variable_002c-TEXINFOS"></a>
<a name="index-HTML-output-using-Texinfo"></a>
<a name="index-PDF-output-using-Texinfo"></a>
<a name="index-PS-output-using-Texinfo"></a>
<a name="index-DVI-output-using-Texinfo"></a>
<a name="index-_005fTEXINFOS"></a>
<a name="index-info_005fTEXINFOS"></a>

<p>If the current directory contains Texinfo source, you must declare it
with the <code>TEXINFOS</code> primary.  Generally Texinfo files are converted
into info, and thus the <code>info_TEXINFOS</code> variable is most commonly used
here.  Any Texinfo source file should have the <samp>.texi</samp> extension.
Automake also accepts <samp>.txi</samp> or <samp>.texinfo</samp> extensions, but their
use is discouraged now, and will elicit runtime warnings.
</p>
<p>Automake generates rules to build <samp>.info</samp>, <samp>.dvi</samp>,
<samp>.ps</samp>, <samp>.pdf</samp> and <samp>.html</samp> files from your Texinfo
sources.  Following the GNU Coding Standards, only the <samp>.info</samp>
files are built by &lsquo;<samp>make all</samp>&rsquo; and installed by &lsquo;<samp>make
install</samp>&rsquo; (unless you use <samp>no-installinfo</samp>, see below).
Furthermore, <samp>.info</samp> files are automatically distributed so that
Texinfo is not a prerequisite for installing your package.
</p>
<p>It is worth noting that, contrary to what happens with the other formats,
the generated <samp>.info</samp> files are by default placed in <code>srcdir</code>
rather than in the <code>builddir</code>.  This can be changed with the
<samp>info-in-builddir</samp> option.
</p>
<a name="index-dvi"></a>
<a name="index-html"></a>
<a name="index-pdf"></a>
<a name="index-ps"></a>
<a name="index-install_002ddvi"></a>
<a name="index-install_002dhtml"></a>
<a name="index-install_002dpdf"></a>
<a name="index-install_002dps"></a>
<p>Other documentation formats can be built on request by &lsquo;<samp>make
dvi</samp>&rsquo;, &lsquo;<samp>make ps</samp>&rsquo;, &lsquo;<samp>make pdf</samp>&rsquo; and &lsquo;<samp>make html</samp>&rsquo;, and they
can be installed with &lsquo;<samp>make install-dvi</samp>&rsquo;, &lsquo;<samp>make install-ps</samp>&rsquo;,
&lsquo;<samp>make install-pdf</samp>&rsquo; and &lsquo;<samp>make install-html</samp>&rsquo; explicitly.
&lsquo;<samp>make uninstall</samp>&rsquo; will remove everything: the Texinfo
documentation installed by default as well as all the above optional
formats.
</p>
<p>All of these targets can be extended using &lsquo;<samp>-local</samp>&rsquo; rules
(see <a href="#Extending">Extending</a>).
</p>
<a name="index-Texinfo-flag_002c-VERSION"></a>
<a name="index-Texinfo-flag_002c-UPDATED"></a>
<a name="index-Texinfo-flag_002c-EDITION"></a>
<a name="index-Texinfo-flag_002c-UPDATED_002dMONTH"></a>

<a name="index-VERSION-Texinfo-flag"></a>
<a name="index-UPDATED-Texinfo-flag"></a>
<a name="index-EDITION-Texinfo-flag"></a>
<a name="index-UPDATED_002dMONTH-Texinfo-flag"></a>

<a name="index-mdate_002dsh"></a>

<p>If the <samp>.texi</samp> file <code>@include</code>s <samp>version.texi</samp>, then
that file will be automatically generated.  The file <samp>version.texi</samp>
defines four Texinfo flags you can reference using
<code>@value{EDITION}</code>, <code>@value{VERSION}</code>,
<code>@value{UPDATED}</code>, and <code>@value{UPDATED-MONTH}</code>.
</p>
<dl compact="compact">
<dt><code>EDITION</code></dt>
<dt><code>VERSION</code></dt>
<dd><p>Both of these flags hold the version number of your program.  They are
kept separate for clarity.
</p>
</dd>
<dt><code>UPDATED</code></dt>
<dd><p>This holds the date the primary <samp>.texi</samp> file was last modified.
</p>
</dd>
<dt><code>UPDATED-MONTH</code></dt>
<dd><p>This holds the name of the month in which the primary <samp>.texi</samp> file
was last modified.
</p></dd>
</dl>

<p>The <samp>version.texi</samp> support requires the <code>mdate-sh</code>
script; this script is supplied with Automake and automatically
included when <code>automake</code> is invoked with the
<samp>--add-missing</samp> option.
</p>
<p>If you have multiple Texinfo files, and you want to use the
<samp>version.texi</samp> feature, then you have to have a separate version
file for each Texinfo file.  Automake will treat any include in a
Texinfo file that matches <samp>vers*.texi</samp> just as an automatically
generated version file.
</p>
<p>Sometimes an info file actually depends on more than one <samp>.texi</samp>
file.  For instance, in GNU Hello, <samp>hello.texi</samp> includes the file
<samp>fdl.texi</samp>.  You can tell Automake about these dependencies using
the <code><var>texi</var>_TEXINFOS</code> variable.  Here is how GNU Hello does it:
<a name="index-TEXINFOS-1"></a>
<a name="index-_005fTEXINFOS-1"></a>
</p>
<div class="example">
<pre class="example">info_TEXINFOS = hello.texi
hello_TEXINFOS = fdl.texi
</pre></div>

<a name="index-texinfo_002etex"></a>

<p>By default, Automake requires the file <samp>texinfo.tex</samp> to appear in
the same directory as the <samp>Makefile.am</samp> file that lists the
<samp>.texi</samp> files.  If you used <code>AC_CONFIG_AUX_DIR</code> in
<samp>configure.ac</samp> (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Input">Finding &lsquo;configure&rsquo; Input</a> in <cite>The Autoconf Manual</cite>), then <samp>texinfo.tex</samp> is looked for
there.  In both cases, <code>automake</code> then supplies <samp>texinfo.tex</samp> if
<samp>--add-missing</samp> is given, and takes care of its distribution.
However, if you set the <code>TEXINFO_TEX</code> variable (see below),
it overrides the location of the file and turns off its installation
into the source as well as its distribution.
</p>
<p>The option <samp>no-texinfo.tex</samp> can be used to eliminate the
requirement for the file <samp>texinfo.tex</samp>.  Use of the variable
<code>TEXINFO_TEX</code> is preferable, however, because that allows the
<code>dvi</code>, <code>ps</code>, and <code>pdf</code> targets to still work.
</p>
<a name="index-Option_002c-no_002dinstallinfo"></a>
<a name="index-Target_002c-install_002dinfo"></a>
<a name="index-install_002dinfo-target"></a>
<a name="index-no_002dinstallinfo-option"></a>

<a name="index-no_002dinstallinfo"></a>
<a name="index-install_002dinfo"></a>

<p>Automake generates an <code>install-info</code> rule; some people apparently
use this.  By default, info pages are installed by &lsquo;<samp>make
install</samp>&rsquo;, so running <code>make install-info</code> is pointless.  This can
be prevented via the <code>no-installinfo</code> option.  In this case,
<samp>.info</samp> files are not installed by default, and user must
request this explicitly using &lsquo;<samp>make install-info</samp>&rsquo;.
</p>
<a name="index-AM_005fUPDATE_005fINFO_005fDIR"></a>
<p>By default, <code>make install-info</code> and <code>make uninstall-info</code>
will try to run the <code>install-info</code> program (if available) to
update (or create/remove) the <samp><code>${infodir}</code>/dir</samp> index.
If this is undesired, it can be prevented by exporting the
<code>AM_UPDATE_INFO_DIR</code> variable to &quot;<code>no</code>&quot;.
</p>
<p>The following variables are used by the Texinfo build rules.
</p>
<dl compact="compact">
<dt><code>MAKEINFO</code>
<a name="index-MAKEINFO"></a>
</dt>
<dd><p>The name of the program invoked to build <samp>.info</samp> files.  This
variable is defined by Automake.  If the <code>makeinfo</code> program is
found on the system then it will be used by default; otherwise
<code>missing</code> will be used instead.
</p>
</dd>
<dt><code>MAKEINFOHTML</code>
<a name="index-MAKEINFOHTML"></a>
</dt>
<dd><p>The command invoked to build <samp>.html</samp> files.  Automake
defines this to &lsquo;<samp>$(MAKEINFO) --html</samp>&rsquo;.
</p>
</dd>
<dt><code>MAKEINFOFLAGS</code>
<a name="index-MAKEINFOFLAGS"></a>
</dt>
<dd><p>User flags passed to each invocation of &lsquo;<samp>$(MAKEINFO)</samp>&rsquo; and
&lsquo;<samp>$(MAKEINFOHTML)</samp>&rsquo;.  This user variable (see <a href="#User-Variables">User Variables</a>) is
not expected to be defined in any <samp>Makefile</samp>; it can be used by
users to pass extra flags to suit their needs.
</p>
</dd>
<dt><code>AM_MAKEINFOFLAGS</code>
<a name="index-AM_005fMAKEINFOFLAGS"></a>
</dt>
<dt><code>AM_MAKEINFOHTMLFLAGS</code>
<a name="index-AM_005fMAKEINFOHTMLFLAGS"></a>
</dt>
<dd><p>Maintainer flags passed to each <code>makeinfo</code> invocation.  Unlike
<code>MAKEINFOFLAGS</code>, these variables are meant to be defined by
maintainers in <samp>Makefile.am</samp>.  &lsquo;<samp>$(AM_MAKEINFOFLAGS)</samp>&rsquo; is
passed to <code>makeinfo</code> when building <samp>.info</samp> files; and
&lsquo;<samp>$(AM_MAKEINFOHTMLFLAGS)</samp>&rsquo; is used when building <samp>.html</samp>
files.
</p>
<p>For instance, the following setting can be used to obtain one single
<samp>.html</samp> file per manual, without node separators.
</p><div class="example">
<pre class="example">AM_MAKEINFOHTMLFLAGS = --no-headers --no-split
</pre></div>

<p><code>AM_MAKEINFOHTMLFLAGS</code> defaults to &lsquo;<samp>$(AM_MAKEINFOFLAGS)</samp>&rsquo;.
This means that defining <code>AM_MAKEINFOFLAGS</code> without defining
<code>AM_MAKEINFOHTMLFLAGS</code> will impact builds of both <samp>.info</samp>
and <samp>.html</samp> files.
</p>
</dd>
<dt><code>TEXI2DVI</code>
<a name="index-TEXI2DVI"></a>
</dt>
<dd><p>The name of the command that converts a <samp>.texi</samp> file into a
<samp>.dvi</samp> file.  This defaults to &lsquo;<samp>texi2dvi</samp>&rsquo;, a script that ships
with the Texinfo package.
</p>
</dd>
<dt><code>TEXI2PDF</code>
<a name="index-TEXI2PDF"></a>
</dt>
<dd><p>The name of the command that translates a <samp>.texi</samp> file into a
<samp>.pdf</samp> file.  This defaults to &lsquo;<samp>$(TEXI2DVI) --pdf --batch</samp>&rsquo;.
</p>
</dd>
<dt><code>DVIPS</code>
<a name="index-DVIPS"></a>
</dt>
<dd><p>The name of the command that builds a <samp>.ps</samp> file out of a
<samp>.dvi</samp> file.  This defaults to &lsquo;<samp>dvips</samp>&rsquo;.
</p>
</dd>
<dt><code>TEXINFO_TEX</code>
<a name="index-TEXINFO_005fTEX"></a>
</dt>
<dd>
<p>If your package has Texinfo files in many directories, you can use the
variable <code>TEXINFO_TEX</code> to tell Automake where to find the canonical
<samp>texinfo.tex</samp> for your package.  The value of this variable should
be the relative path from the current <samp>Makefile.am</samp> to
<samp>texinfo.tex</samp>:
</p>
<div class="example">
<pre class="example">TEXINFO_TEX = ../doc/texinfo.tex
</pre></div>
</dd>
</dl>


<hr>
<a name="Man-Pages"></a>
<div class="header">
<p>
Previous: <a href="#Texinfo" accesskey="p" rel="prev">Texinfo</a>, Up: <a href="#Documentation" accesskey="u" rel="up">Documentation</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Man-Pages-1"></a>
<h3 class="section">11.2 Man Pages</h3>

<a name="index-_005fMANS-primary_002c-defined"></a>
<a name="index-MANS-primary_002c-defined"></a>
<a name="index-Primary-variable_002c-MANS"></a>

<a name="index-_005fMANS"></a>
<a name="index-man_005fMANS"></a>
<p>A package can also include man pages (but see the GNU standards on this
matter, <a href="http://www.gnu.org/prep/standards/standards.html#Man-Pages">Man Pages</a> in <cite>The GNU Coding Standards</cite>.)  Man
pages are declared using the <code>MANS</code> primary.  Generally the
<code>man_MANS</code> variable is used.  Man pages are automatically installed in
the correct subdirectory of <code>mandir</code>, based on the file extension.
</p>
<p>File extensions such as <samp>.1c</samp> are handled by looking for the valid
part of the extension and using that to determine the correct
subdirectory of <code>mandir</code>.  Valid section names are the digits
&lsquo;<samp>0</samp>&rsquo; through &lsquo;<samp>9</samp>&rsquo;, and the letters &lsquo;<samp>l</samp>&rsquo; and &lsquo;<samp>n</samp>&rsquo;.
</p>
<p>Sometimes developers prefer to name a man page something like
<samp>foo.man</samp> in the source, and then rename it to have the correct
suffix, for example <samp>foo.1</samp>, when installing the file.  Automake
also supports this mode.  For a valid section named <var>section</var>,
there is a corresponding directory named &lsquo;<samp>man<var>section</var>dir</samp>&rsquo;,
and a corresponding <code>_MANS</code> variable.  Files listed in such a
variable are installed in the indicated section.  If the file already
has a valid suffix, then it is installed as-is; otherwise the file
suffix is changed to match the section.
</p>
<p>For instance, consider this example:
</p><div class="example">
<pre class="example">man1_MANS = rename.man thesame.1 alsothesame.1c
</pre></div>

<p>In this case, <samp>rename.man</samp> will be renamed to <samp>rename.1</samp> when
installed, but the other files will keep their names.
</p>
<a name="index-Target_002c-install_002dman"></a>
<a name="index-Option_002c-no_002dinstallman"></a>
<a name="index-install_002dman-target"></a>
<a name="index-no_002dinstallman-option"></a>
<a name="index-no_002dinstallman"></a>
<a name="index-install_002dman"></a>

<p>By default, man pages are installed by &lsquo;<samp>make install</samp>&rsquo;.  However,
since the GNU project does not require man pages, many maintainers do
not expend effort to keep the man pages up to date.  In these cases, the
<samp>no-installman</samp> option will prevent the man pages from being
installed by default.  The user can still explicitly install them via
&lsquo;<samp>make install-man</samp>&rsquo;.
</p>
<p>For fast installation, with many files it is preferable to use
&lsquo;<samp>man<var>section</var>_MANS</samp>&rsquo; over &lsquo;<samp>man_MANS</samp>&rsquo; as well as files that
do not need to be renamed.
</p>
<p>Man pages are not currently considered to be source, because it is not
uncommon for man pages to be automatically generated.  Therefore they
are not automatically included in the distribution.  However, this can
be changed by use of the <code>dist_</code> prefix.  For instance here is
how to distribute and install the two man pages of GNU <code>cpio</code>
(which includes both Texinfo documentation and man pages):
</p>
<div class="example">
<pre class="example">dist_man_MANS = cpio.1 mt.1
</pre></div>

<p>The <code>nobase_</code> prefix is meaningless for man pages and is
disallowed.
</p>
<a name="index-notrans_005f"></a>
<a name="index-notrans_005f-prefix"></a>
<a name="index-Man-page-renaming_002c-avoiding"></a>
<a name="index-Avoiding-man-page-renaming"></a>

<p>Executables and manpages may be renamed upon installation
(see <a href="#Renaming">Renaming</a>).  For manpages this can be avoided by use of the
<code>notrans_</code> prefix.  For instance, suppose an executable &lsquo;<samp>foo</samp>&rsquo;
allowing to access a library function &lsquo;<samp>foo</samp>&rsquo; from the command line.
The way to avoid renaming of the <samp>foo.3</samp> manpage is:
</p>
<div class="example">
<pre class="example">man_MANS = foo.1
notrans_man_MANS = foo.3
</pre></div>

<a name="index-notrans_005f-and-dist_005f-or-nodist_005f"></a>
<a name="index-dist_005f-and-notrans_005f"></a>
<a name="index-nodist_005f-and-notrans_005f"></a>

<p>&lsquo;<samp>notrans_</samp>&rsquo; must be specified first when used in conjunction with
either &lsquo;<samp>dist_</samp>&rsquo; or &lsquo;<samp>nodist_</samp>&rsquo; (see <a href="#Fine_002dgrained-Distribution-Control">Fine-grained Distribution Control</a>).  For instance:
</p>
<div class="example">
<pre class="example">notrans_dist_man3_MANS = bar.3
</pre></div>

<hr>
<a name="Install"></a>
<div class="header">
<p>
Next: <a href="#Clean" accesskey="n" rel="next">Clean</a>, Previous: <a href="#Documentation" accesskey="p" rel="prev">Documentation</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="What-Gets-Installed"></a>
<h2 class="chapter">12 What Gets Installed</h2>

<a name="index-Installation-support"></a>
<a name="index-make-install-support"></a>

<p>Naturally, Automake handles the details of actually installing your
program once it has been built.  All files named by the various
primaries are automatically installed in the appropriate places when the
user runs &lsquo;<samp>make install</samp>&rsquo;.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Basics-of-Installation" accesskey="1">Basics of Installation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">What gets installed where
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#The-Two-Parts-of-Install" accesskey="2">The Two Parts of Install</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Installing data and programs separately
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Extending-Installation" accesskey="3">Extending Installation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Adding your own rules for installation
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Staged-Installs" accesskey="4">Staged Installs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Installation in a temporary location
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Install-Rules-for-the-User" accesskey="5">Install Rules for the User</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Useful additional rules
</td></tr>
</table>

<hr>
<a name="Basics-of-Installation"></a>
<div class="header">
<p>
Next: <a href="#The-Two-Parts-of-Install" accesskey="n" rel="next">The Two Parts of Install</a>, Up: <a href="#Install" accesskey="u" rel="up">Install</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Basics-of-Installation-1"></a>
<h3 class="section">12.1 Basics of Installation</h3>

<p>A file named in a primary is installed by copying the built file into
the appropriate directory.  The base name of the file is used when
installing.
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = hello subdir/goodbye
</pre></div>

<p>In this example, both &lsquo;<samp>hello</samp>&rsquo; and &lsquo;<samp>goodbye</samp>&rsquo; will be installed
in &lsquo;<samp>$(bindir)</samp>&rsquo;.
</p>
<p>Sometimes it is useful to avoid the basename step at install time.  For
instance, you might have a number of header files in subdirectories of
the source tree that are laid out precisely how you want to install
them.  In this situation you can use the <code>nobase_</code> prefix to
suppress the base name step.  For example:
</p>
<div class="example">
<pre class="example">nobase_include_HEADERS = stdio.h sys/types.h
</pre></div>

<p>will install <samp>stdio.h</samp> in &lsquo;<samp>$(includedir)</samp>&rsquo; and <samp>types.h</samp>
in &lsquo;<samp>$(includedir)/sys</samp>&rsquo;.
</p>
<p>For most file types, Automake will install multiple files at once, while
avoiding command line length issues (see <a href="#Length-Limitations">Length Limitations</a>).  Since
some <code>install</code> programs will not install the same file twice in
one invocation, you may need to ensure that file lists are unique within
one variable such as &lsquo;<samp>nobase_include_HEADERS</samp>&rsquo; above.
</p>
<p>You should not rely on the order in which files listed in one variable
are installed.  Likewise, to cater for parallel make, you should not
rely on any particular file installation order even among different
file types (library dependencies are an exception here).
</p>

<hr>
<a name="The-Two-Parts-of-Install"></a>
<div class="header">
<p>
Next: <a href="#Extending-Installation" accesskey="n" rel="next">Extending Installation</a>, Previous: <a href="#Basics-of-Installation" accesskey="p" rel="prev">Basics of Installation</a>, Up: <a href="#Install" accesskey="u" rel="up">Install</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="The-Two-Parts-of-Install-1"></a>
<h3 class="section">12.2 The Two Parts of Install</h3>

<p>Automake generates separate <code>install-data</code> and <code>install-exec</code>
rules, in case the installer is installing on multiple machines that
share directory structure&mdash;these targets allow the machine-independent
parts to be installed only once.  <code>install-exec</code> installs
platform-dependent files, and <code>install-data</code> installs
platform-independent files.  The <code>install</code> target depends on both
of these targets.  While Automake tries to automatically segregate
objects into the correct category, the <samp>Makefile.am</samp> author is, in
the end, responsible for making sure this is done correctly.
<a name="index-install_002ddata-1"></a>
<a name="index-install_002dexec-1"></a>
<a name="index-install-1"></a>
<a name="index-Install_002c-two-parts-of"></a>
</p>
<p>Variables using the standard directory prefixes &lsquo;<samp>data</samp>&rsquo;,
&lsquo;<samp>info</samp>&rsquo;, &lsquo;<samp>man</samp>&rsquo;, &lsquo;<samp>include</samp>&rsquo;, &lsquo;<samp>oldinclude</samp>&rsquo;,
&lsquo;<samp>pkgdata</samp>&rsquo;, or &lsquo;<samp>pkginclude</samp>&rsquo; are installed by
<code>install-data</code>.
</p>
<p>Variables using the standard directory prefixes &lsquo;<samp>bin</samp>&rsquo;,
&lsquo;<samp>sbin</samp>&rsquo;, &lsquo;<samp>libexec</samp>&rsquo;, &lsquo;<samp>sysconf</samp>&rsquo;, &lsquo;<samp>localstate</samp>&rsquo;,
&lsquo;<samp>lib</samp>&rsquo;, or &lsquo;<samp>pkglib</samp>&rsquo; are installed by <code>install-exec</code>.
</p>
<p>For instance, <code>data_DATA</code> files are installed by <code>install-data</code>,
while <code>bin_PROGRAMS</code> files are installed by <code>install-exec</code>.
</p>
<p>Any variable using a user-defined directory prefix with
&lsquo;<samp>exec</samp>&rsquo; in the name (e.g.,
<code>myexecbin_PROGRAMS</code>) is installed by <code>install-exec</code>.  All
other user-defined prefixes are installed by <code>install-data</code>.
</p>
<hr>
<a name="Extending-Installation"></a>
<div class="header">
<p>
Next: <a href="#Staged-Installs" accesskey="n" rel="next">Staged Installs</a>, Previous: <a href="#The-Two-Parts-of-Install" accesskey="p" rel="prev">The Two Parts of Install</a>, Up: <a href="#Install" accesskey="u" rel="up">Install</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Extending-Installation-1"></a>
<h3 class="section">12.3 Extending Installation</h3>

<p>It is possible to extend this mechanism by defining an
<code>install-exec-local</code> or <code>install-data-local</code> rule.  If these
rules exist, they will be run at &lsquo;<samp>make install</samp>&rsquo; time.  These
rules can do almost anything; care is required.
<a name="index-install_002dexec_002dlocal"></a>
<a name="index-install_002ddata_002dlocal"></a>
</p>
<p>Automake also supports two install hooks, <code>install-exec-hook</code> and
<code>install-data-hook</code>.  These hooks are run after all other install
rules of the appropriate type, exec or data, have completed.  So, for
instance, it is possible to perform post-installation modifications
using an install hook.  See <a href="#Extending">Extending</a>, for some examples.
<a name="index-Install-hook"></a>
</p>
<hr>
<a name="Staged-Installs"></a>
<div class="header">
<p>
Next: <a href="#Install-Rules-for-the-User" accesskey="n" rel="next">Install Rules for the User</a>, Previous: <a href="#Extending-Installation" accesskey="p" rel="prev">Extending Installation</a>, Up: <a href="#Install" accesskey="u" rel="up">Install</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Staged-Installs-1"></a>
<h3 class="section">12.4 Staged Installs</h3>

<a name="index-DESTDIR-1"></a>
<p>Automake generates support for the <code>DESTDIR</code> variable in all
install rules.  <code>DESTDIR</code> is used during the &lsquo;<samp>make install</samp>&rsquo;
step to relocate install objects into a staging area.  Each object and
path is prefixed with the value of <code>DESTDIR</code> before being copied
into the install area.  Here is an example of typical DESTDIR usage:
</p>
<div class="example">
<pre class="example">mkdir /tmp/staging &amp;&amp;
make DESTDIR=/tmp/staging install
</pre></div>

<p>The <code>mkdir</code> command avoids a security problem if the attacker
creates a symbolic link from <samp>/tmp/staging</samp> to a victim area;
then <code>make</code> places install objects in a directory tree built under
<samp>/tmp/staging</samp>.  If <samp>/gnu/bin/foo</samp> and
<samp>/gnu/share/aclocal/foo.m4</samp> are to be installed, the above command
would install <samp>/tmp/staging/gnu/bin/foo</samp> and
<samp>/tmp/staging/gnu/share/aclocal/foo.m4</samp>.
</p>
<p>This feature is commonly used to build install images and packages
(see <a href="#DESTDIR">DESTDIR</a>).
</p>
<p>Support for <code>DESTDIR</code> is implemented by coding it directly into
the install rules.  If your <samp>Makefile.am</samp> uses a local install
rule (e.g., <code>install-exec-local</code>) or an install hook, then you
must write that code to respect <code>DESTDIR</code>.
</p>
<p>See <a href="http://www.gnu.org/prep/standards/standards.html#Makefile-Conventions">Makefile Conventions</a> in <cite>The GNU Coding Standards</cite>,
for another usage example.
</p>
<hr>
<a name="Install-Rules-for-the-User"></a>
<div class="header">
<p>
Previous: <a href="#Staged-Installs" accesskey="p" rel="prev">Staged Installs</a>, Up: <a href="#Install" accesskey="u" rel="up">Install</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Install-Rules-for-the-User-1"></a>
<h3 class="section">12.5 Install Rules for the User</h3>

<p>Automake also generates rules for targets <code>uninstall</code>,
<code>installdirs</code>, and <code>install-strip</code>.
<a name="index-uninstall-1"></a>
<a name="index-installdirs"></a>
<a name="index-install_002dstrip-1"></a>
</p>
<p>Automake supports <code>uninstall-local</code> and <code>uninstall-hook</code>.
There is no notion of separate uninstalls for &ldquo;exec&rdquo; and &ldquo;data&rdquo;, as
these features would not provide additional functionality.
</p>
<p>Note that <code>uninstall</code> is not meant as a replacement for a real
packaging tool.
</p>

<hr>
<a name="Clean"></a>
<div class="header">
<p>
Next: <a href="#Dist" accesskey="n" rel="next">Dist</a>, Previous: <a href="#Install" accesskey="p" rel="prev">Install</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="What-Gets-Cleaned"></a>
<h2 class="chapter">13 What Gets Cleaned</h2>

<a name="index-make-clean-support"></a>

<p>The GNU Makefile Standards specify a number of different clean rules.
See <a href="http://www.gnu.org/prep/standards/standards.html#Standard-Targets">Standard Targets for Users</a> in <cite>The GNU Coding Standards</cite>.
</p>
<p>Generally the files that can be cleaned are determined automatically by
Automake.  Of course, Automake also recognizes some variables that can
be defined to specify additional files to clean.  These variables are
<code>MOSTLYCLEANFILES</code>, <code>CLEANFILES</code>, <code>DISTCLEANFILES</code>, and
<code>MAINTAINERCLEANFILES</code>.
<a name="index-MOSTLYCLEANFILES"></a>
<a name="index-CLEANFILES"></a>
<a name="index-DISTCLEANFILES"></a>
<a name="index-MAINTAINERCLEANFILES"></a>
</p>
<a name="index-mostlyclean_002dlocal"></a>
<a name="index-clean_002dlocal"></a>
<a name="index-distclean_002dlocal"></a>
<a name="index-maintainer_002dclean_002dlocal"></a>
<p>When cleaning involves more than deleting some hard-coded list of
files, it is also possible to supplement the cleaning rules with your
own commands.  Simply define a rule for any of the
<code>mostlyclean-local</code>, <code>clean-local</code>, <code>distclean-local</code>,
or <code>maintainer-clean-local</code> targets (see <a href="#Extending">Extending</a>).  A common
case is deleting a directory, for instance, a directory created by the
test suite:
</p>
<div class="example">
<pre class="example">clean-local:
        -rm -rf testSubDir
</pre></div>

<p>Since <code>make</code> allows only one set of rules for a given target,
a more extensible way of writing this is to use a separate target
listed as a dependency:
</p>
<div class="example">
<pre class="example">clean-local: clean-local-check
.PHONY: clean-local-check
clean-local-check:
        -rm -rf testSubDir
</pre></div>

<p>As the GNU Standards aren&rsquo;t always explicit as to which files should
be removed by which rule, we&rsquo;ve adopted a heuristic that we believe
was first formulated by Fran&ccedil;ois Pinard:
</p>
<ul>
<li> If <code>make</code> built it, and it is commonly something that one would
want to rebuild (for instance, a <samp>.o</samp> file), then
<code>mostlyclean</code> should delete it.

</li><li> Otherwise, if <code>make</code> built it, then <code>clean</code> should delete it.

</li><li> If <code>configure</code> built it, then <code>distclean</code> should delete it.

</li><li> If the maintainer built it (for instance, a <samp>.info</samp> file), then
<code>maintainer-clean</code> should delete it.  However
<code>maintainer-clean</code> should not delete anything that needs to exist
in order to run &lsquo;<samp>./configure &amp;&amp; make</samp>&rsquo;.
</li></ul>

<p>We recommend that you follow this same set of heuristics in your
<samp>Makefile.am</samp>.
</p>

<hr>
<a name="Dist"></a>
<div class="header">
<p>
Next: <a href="#Tests" accesskey="n" rel="next">Tests</a>, Previous: <a href="#Clean" accesskey="p" rel="prev">Clean</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="What-Goes-in-a-Distribution"></a>
<h2 class="chapter">14 What Goes in a Distribution</h2>

<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Basics-of-Distribution" accesskey="1">Basics of Distribution</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Files distributed by default
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Fine_002dgrained-Distribution-Control" accesskey="2">Fine-grained Distribution Control</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top"><code>dist_</code> and <code>nodist_</code> prefixes
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#The-dist-Hook" accesskey="3">The dist Hook</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">A target for last-minute distribution changes
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Checking-the-Distribution" accesskey="4">Checking the Distribution</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">&lsquo;<samp>make distcheck</samp>&rsquo; explained
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#The-Types-of-Distributions" accesskey="5">The Types of Distributions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">A variety of formats and compression methods
</td></tr>
</table>

<hr>
<a name="Basics-of-Distribution"></a>
<div class="header">
<p>
Next: <a href="#Fine_002dgrained-Distribution-Control" accesskey="n" rel="next">Fine-grained Distribution Control</a>, Up: <a href="#Dist" accesskey="u" rel="up">Dist</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Basics-of-Distribution-1"></a>
<h3 class="section">14.1 Basics of Distribution</h3>

<a name="index-make-dist"></a>

<a name="index-PACKAGE"></a>
<a name="index-VERSION"></a>
<a name="index-dist-1"></a>
<p>The <code>dist</code> rule in the generated <samp>Makefile.in</samp> can be used
to generate a gzipped <code>tar</code> file and other flavors of archive for
distribution.  The file is named based on the <code>PACKAGE</code> and
<code>VERSION</code> variables automatically defined by either the
<code>AC_INIT</code> invocation or by a <em>deprecated</em> two-arguments
invocation of the <code>AM_INIT_AUTOMAKE</code> macro (see <a href="#Public-Macros">Public Macros</a>
for how these variables get their values, from either defaults or explicit
values &ndash; it&rsquo;s slightly trickier than one would expect).
More precisely the gzipped <code>tar</code> file is named
&lsquo;<samp>${PACKAGE}-${VERSION}.tar.gz</samp>&rsquo;.
<a name="index-GZIP_005fENV"></a>
You can use the <code>make</code> variable <code>GZIP_ENV</code> to control how gzip
is run.  The default setting is <samp>--best</samp>.
</p>
<a name="index-m4_005finclude_002c-distribution"></a>
<a name="index-include_002c-distribution"></a>
<a name="index-m4_005finclude"></a>
<a name="index-include"></a>
<p>For the most part, the files to distribute are automatically found by
Automake: all source files are automatically included in a distribution,
as are all <samp>Makefile.am</samp> and <samp>Makefile.in</samp> files.  Automake also
has a built-in list of commonly used files that are automatically
included if they are found in the current directory (either physically,
or as the target of a <samp>Makefile.am</samp> rule); this list is printed by
&lsquo;<samp>automake --help</samp>&rsquo;.  Note that some files in this list are actually
distributed only if other certain conditions hold (for example,
the <samp>config.h.top</samp> and <samp>config.h.bot</samp> files are automatically
distributed only if, e.g., &lsquo;<samp>AC_CONFIG_HEADERS([config.h])</samp>&rsquo; is used
in <samp>configure.ac</samp>).  Also, files that are read by <code>configure</code>
(i.e. the source files corresponding to the files specified in various
Autoconf macros such as <code>AC_CONFIG_FILES</code> and siblings) are
automatically distributed.  Files included in a <samp>Makefile.am</samp> (using
<code>include</code>) or in <samp>configure.ac</samp> (using <code>m4_include</code>), and
helper scripts installed with &lsquo;<samp>automake --add-missing</samp>&rsquo; are also
distributed.
</p>
<a name="index-EXTRA_005fDIST"></a>
<p>Still, sometimes there are files that must be distributed, but which
are not covered in the automatic rules.  These files should be listed in
the <code>EXTRA_DIST</code> variable.  You can mention files from
subdirectories in <code>EXTRA_DIST</code>.
</p>
<p>You can also mention a directory in <code>EXTRA_DIST</code>; in this case the
entire directory will be recursively copied into the distribution.
Please note that this will also copy <em>everything</em> in the directory,
including, e.g., Subversion&rsquo;s <samp>.svn</samp> private directories or CVS/RCS
version control files; thus we recommend against using this feature
as-is.  However, you can use the <code>dist-hook</code> feature to
ameliorate the problem; see <a href="#The-dist-Hook">The dist Hook</a>.
</p>
<a name="index-SUBDIRS-1"></a>
<a name="index-DIST_005fSUBDIRS-1"></a>
<p>If you define <code>SUBDIRS</code>, Automake will recursively include the
subdirectories in the distribution.  If <code>SUBDIRS</code> is defined
conditionally (see <a href="#Conditionals">Conditionals</a>), Automake will normally include
all directories that could possibly appear in <code>SUBDIRS</code> in the
distribution.  If you need to specify the set of directories
conditionally, you can set the variable <code>DIST_SUBDIRS</code> to the
exact list of subdirectories to include in the distribution
(see <a href="#Conditional-Subdirectories">Conditional Subdirectories</a>).
</p>

<hr>
<a name="Fine_002dgrained-Distribution-Control"></a>
<div class="header">
<p>
Next: <a href="#The-dist-Hook" accesskey="n" rel="next">The dist Hook</a>, Previous: <a href="#Basics-of-Distribution" accesskey="p" rel="prev">Basics of Distribution</a>, Up: <a href="#Dist" accesskey="u" rel="up">Dist</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Fine_002dgrained-Distribution-Control-1"></a>
<h3 class="section">14.2 Fine-grained Distribution Control</h3>

<a name="index-dist_005f-1"></a>
<a name="index-nodist_005f-1"></a>
<p>Sometimes you need tighter control over what does <em>not</em> go into the
distribution; for instance, you might have source files that are
generated and that you do not want to distribute.  In this case
Automake gives fine-grained control using the <code>dist</code> and
<code>nodist</code> prefixes.  Any primary or <code>_SOURCES</code> variable can be
prefixed with <code>dist_</code> to add the listed files to the distribution.
Similarly, <code>nodist_</code> can be used to omit the files from the
distribution.
</p>
<p>As an example, here is how you would cause some data to be distributed
while leaving some source code out of the distribution:
</p>
<div class="example">
<pre class="example">dist_data_DATA = distribute-this
bin_PROGRAMS = foo
nodist_foo_SOURCES = do-not-distribute.c
</pre></div>

<hr>
<a name="The-dist-Hook"></a>
<div class="header">
<p>
Next: <a href="#Checking-the-Distribution" accesskey="n" rel="next">Checking the Distribution</a>, Previous: <a href="#Fine_002dgrained-Distribution-Control" accesskey="p" rel="prev">Fine-grained Distribution Control</a>, Up: <a href="#Dist" accesskey="u" rel="up">Dist</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="The-dist-Hook-1"></a>
<h3 class="section">14.3 The dist Hook</h3>

<a name="index-dist_002dhook"></a>

<p>Occasionally it is useful to be able to change the distribution before
it is packaged up.  If the <code>dist-hook</code> rule exists, it is run
after the distribution directory is filled, but before the actual
distribution archives are created.  One way to use this is for
removing unnecessary files that get recursively included by specifying
a directory in <code>EXTRA_DIST</code>:
</p>
<div class="example">
<pre class="example">EXTRA_DIST = doc
dist-hook:
        rm -rf `find $(distdir)/doc -type d -name .svn`
</pre></div>

<p>Note that the <code>dist-hook</code> recipe shouldn&rsquo;t assume that the regular
files in the distribution directory are writable; this might not be the
case if one is packaging from a read-only source tree, or when a
<code>make distcheck</code> is being done.  For similar reasons, the recipe
shouldn&rsquo;t assume that the subdirectories put into the distribution
directory as effect of having them listed in <code>EXTRA_DIST</code> are
writable.  So, if the <code>dist-hook</code> recipe wants to modify the
content of an existing file (or <code>EXTRA_DIST</code> subdirectory) in the
distribution directory, it should explicitly to make it writable first:
</p>
<div class="example">
<pre class="example">EXTRA_DIST = README doc
dist-hook:
        chmod u+w $(distdir)/README $(distdir)/doc
        echo &quot;Distribution date: `date`&quot; &gt;&gt; README
        rm -f $(distdir)/doc/HACKING
</pre></div>

<a name="index-distdir-1"></a>
<a name="index-top_005fdistdir"></a>
<p>Two variables that come handy when writing <code>dist-hook</code> rules are
&lsquo;<samp>$(distdir)</samp>&rsquo; and &lsquo;<samp>$(top_distdir)</samp>&rsquo;.
</p>
<p>&lsquo;<samp>$(distdir)</samp>&rsquo; points to the directory where the <code>dist</code> rule
will copy files from the current directory before creating the
tarball.  If you are at the top-level directory, then &lsquo;<samp>distdir =
$(PACKAGE)-$(VERSION)</samp>&rsquo;.  When used from subdirectory named
<samp>foo/</samp>, then &lsquo;<samp>distdir = ../$(PACKAGE)-$(VERSION)/foo</samp>&rsquo;.
&lsquo;<samp>$(distdir)</samp>&rsquo; can be a relative or absolute path, do not assume
any form.
</p>
<p>&lsquo;<samp>$(top_distdir)</samp>&rsquo; always points to the root directory of the
distributed tree.  At the top-level it&rsquo;s equal to &lsquo;<samp>$(distdir)</samp>&rsquo;.
In the <samp>foo/</samp> subdirectory
&lsquo;<samp>top_distdir = ../$(PACKAGE)-$(VERSION)</samp>&rsquo;.
&lsquo;<samp>$(top_distdir)</samp>&rsquo; too can be a relative or absolute path.
</p>
<p>Note that when packages are nested using <code>AC_CONFIG_SUBDIRS</code>
(see <a href="#Subpackages">Subpackages</a>), then &lsquo;<samp>$(distdir)</samp>&rsquo; and
&lsquo;<samp>$(top_distdir)</samp>&rsquo; are relative to the package where &lsquo;<samp>make
dist</samp>&rsquo; was run, not to any sub-packages involved.
</p>
<hr>
<a name="Checking-the-Distribution"></a>
<div class="header">
<p>
Next: <a href="#The-Types-of-Distributions" accesskey="n" rel="next">The Types of Distributions</a>, Previous: <a href="#The-dist-Hook" accesskey="p" rel="prev">The dist Hook</a>, Up: <a href="#Dist" accesskey="u" rel="up">Dist</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Checking-the-Distribution-1"></a>
<h3 class="section">14.4 Checking the Distribution</h3>

<a name="index-make-distcheck"></a>
<a name="index-distcheck-1"></a>
<p>Automake also generates a <code>distcheck</code> rule that can be of help
to ensure that a given distribution will actually work.  Simplifying
a bit, we can say this rule first makes a distribution, and then,
<em>operating from it</em>, takes the following steps:
</p><ul>
<li> tries to do a <code>VPATH</code> build (see <a href="#VPATH-Builds">VPATH Builds</a>), with the
<code>srcdir</code> and all its content made <em>read-only</em>;
</li><li> runs the test suite (with <code>make check</code>) on this fresh build;
</li><li> installs the package in a temporary directory (with <code>make
install</code>), and tries runs the test suite on the resulting installation
(with <code>make installcheck</code>);
</li><li> checks that the package can be correctly uninstalled (by <code>make
uninstall</code>) and cleaned (by <code>make distclean</code>);
</li><li> finally, makes another tarball to ensure the distribution is
self-contained.
</li></ul>

<p>All of these actions are performed in a temporary directory.  Please
note that the exact location and the exact structure of such a directory
(where the read-only sources are placed, how the temporary build and
install directories are named and how deeply they are nested, etc.) is
to be considered an implementation detail, which can change at any time;
so do not reply on it.
</p>
<a name="index-AM_005fDISTCHECK_005fCONFIGURE_005fFLAGS"></a>
<a name="index-DISTCHECK_005fCONFIGURE_005fFLAGS"></a>
<a name="DISTCHECK_005fCONFIGURE_005fFLAGS"></a>
<h4 class="subheading">DISTCHECK_CONFIGURE_FLAGS</h4>
<p>Building the package involves running &lsquo;<samp>./configure</samp>&rsquo;.  If you need
to supply additional flags to <code>configure</code>, define them in the
<code>AM_DISTCHECK_CONFIGURE_FLAGS</code> variable in your top-level
<samp>Makefile.am</samp>.  The user can still extend or override the flags
provided there by defining the <code>DISTCHECK_CONFIGURE_FLAGS</code> variable,
on the command line when invoking <code>make</code>.
It&rsquo;s worth nothing that <code>make distcheck</code> needs complete control
over the <code>configure</code> options <samp>--srcdir</samp> and
<samp>--prefix</samp>, so those options cannot be overridden by
<code>AM_DISTCHECK_CONFIGURE_FLAGS</code> nor by
<code>DISTCHECK_CONFIGURE_FLAGS</code>.
</p>
<p>Also note that developers are encouraged to strive to make their code
buildable without requiring any special configure option; thus, in
general, you shouldn&rsquo;t define <code>AM_DISTCHECK_CONFIGURE_FLAGS</code>.
However, there might be few scenarios in which the use of this variable
is justified.
GNU <code>m4</code> offers an example.  GNU <code>m4</code> configures by
default with its experimental and seldom used &quot;changeword&quot; feature
disabled; so in its case it is useful to have <code>make distcheck</code>
run configure with the <samp>--with-changeword</samp> option, to ensure that
the code for changeword support still compiles correctly.
GNU <code>m4</code> also employs the <code>AM_DISTCHECK_CONFIGURE_FLAGS</code>
variable to stress-test the use of <samp>--program-prefix=g</samp>, since at
one point the <code>m4</code> build system had a bug where <code>make
installcheck</code> was wrongly assuming it could blindly test &quot;<code>m4</code>&quot;,
rather than the just-installed &quot;<code>gm4</code>&quot;.
</p>
<a name="index-distcheck_002dhook"></a>
<a name="distcheck_002dhook"></a>
<h4 class="subheading">distcheck-hook</h4>
<p>If the <code>distcheck-hook</code> rule is defined in your top-level
<samp>Makefile.am</samp>, then it will be invoked by <code>distcheck</code> after
the new distribution has been unpacked, but before the unpacked copy
is configured and built.  Your <code>distcheck-hook</code> can do almost
anything, though as always caution is advised.  Generally this hook is
used to check for potential distribution errors not caught by the
standard mechanism.  Note that <code>distcheck-hook</code> as well as
<code>AM_DISTCHECK_CONFIGURE_FLAGS</code> and <code>DISTCHECK_CONFIGURE_FLAGS</code>
are not honored in a subpackage <samp>Makefile.am</samp>, but the flags from
<code>AM_DISTCHECK_CONFIGURE_FLAGS</code> and <code>DISTCHECK_CONFIGURE_FLAGS</code>
are passed down to the <code>configure</code> script of the subpackage.
</p>
<a name="index-make-distcleancheck"></a>
<a name="index-distcleancheck"></a>
<a name="index-DISTCLEANFILES-1"></a>
<a name="index-distcleancheck_005flistfiles"></a>

<a name="distcleancheck"></a>
<h4 class="subheading">distcleancheck</h4>
<p>Speaking of potential distribution errors, <code>distcheck</code> also
ensures that the <code>distclean</code> rule actually removes all built
files.  This is done by running &lsquo;<samp>make distcleancheck</samp>&rsquo; at the end of
the <code>VPATH</code> build.  By default, <code>distcleancheck</code> will run
<code>distclean</code> and then make sure the build tree has been emptied by
running &lsquo;<samp>$(distcleancheck_listfiles)</samp>&rsquo;.  Usually this check will
find generated files that you forgot to add to the <code>DISTCLEANFILES</code>
variable (see <a href="#Clean">Clean</a>).
</p>
<p>The <code>distcleancheck</code> behavior should be OK for most packages,
otherwise you have the possibility to override the definition of
either the <code>distcleancheck</code> rule, or the
&lsquo;<samp>$(distcleancheck_listfiles)</samp>&rsquo; variable.  For instance, to disable
<code>distcleancheck</code> completely, add the following rule to your
top-level <samp>Makefile.am</samp>:
</p>
<div class="example">
<pre class="example">distcleancheck:
        @:
</pre></div>

<p>If you want <code>distcleancheck</code> to ignore built files that have not
been cleaned because they are also part of the distribution, add the
following definition instead:
</p>
<div class="example">
<pre class="example">distcleancheck_listfiles = \
  find . -type f -exec sh -c 'test -f $(srcdir)/$$1 || echo $$1' \
       sh '{}' ';'
</pre></div>

<p>The above definition is not the default because it&rsquo;s usually an error if
your Makefiles cause some distributed files to be rebuilt when the user
build the package.  (Think about the user missing the tool required to
build the file; or if the required tool is built by your package,
consider the cross-compilation case where it can&rsquo;t be run.)  There is
an entry in the FAQ about this (see <a href="#Errors-with-distclean">Errors with distclean</a>), make
sure you read it before playing with <code>distcleancheck_listfiles</code>.
</p>
<a name="index-make-distuninstallcheck"></a>
<a name="index-distuninstallcheck"></a>
<a name="index-distuninstallcheck_005flistfiles"></a>

<a name="distuninstallcheck"></a>
<h4 class="subheading">distuninstallcheck</h4>
<p><code>distcheck</code> also checks that the <code>uninstall</code> rule works
properly, both for ordinary and <code>DESTDIR</code> builds.  It does this
by invoking &lsquo;<samp>make uninstall</samp>&rsquo;, and then it checks the install tree
to see if any files are left over.  This check will make sure that you
correctly coded your <code>uninstall</code>-related rules.
</p>
<p>By default, the checking is done by the <code>distuninstallcheck</code> rule,
and the list of files in the install tree is generated by
&lsquo;<samp>$(distuninstallcheck_listfiles)</samp>&rsquo; (this is a variable whose value is
a shell command to run that prints the list of files to stdout).
</p>
<p>Either of these can be overridden to modify the behavior of
<code>distcheck</code>.  For instance, to disable this check completely, you
would write:
</p>
<div class="example">
<pre class="example">distuninstallcheck:
        @:
</pre></div>

<hr>
<a name="The-Types-of-Distributions"></a>
<div class="header">
<p>
Previous: <a href="#Checking-the-Distribution" accesskey="p" rel="prev">Checking the Distribution</a>, Up: <a href="#Dist" accesskey="u" rel="up">Dist</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="The-Types-of-Distributions-1"></a>
<h3 class="section">14.5 The Types of Distributions</h3>

<p>Automake generates rules to provide archives of the project for
distributions in various formats.  Their targets are:
</p>
<dl compact="compact">
<dt><code>dist-gzip</code></dt>
<dd><p>Generate a &lsquo;<samp>gzip</samp>&rsquo; tar archive of the distribution.  This is the
only format enabled by default.
<a name="index-dist_002dgzip"></a>
</p>
<a name="index-BZIP2"></a>
</dd>
<dt><code>dist-bzip2</code></dt>
<dd><p>Generate a &lsquo;<samp>bzip2</samp>&rsquo; tar archive of the distribution.  bzip2 archives
are frequently smaller than gzipped archives.
By default, this rule makes &lsquo;<samp>bzip2</samp>&rsquo; use a compression option of <samp>-9</samp>.
To make it use a different one, set the <code>BZIP2</code> environment variable.
For example, &lsquo;<samp>make dist-bzip2 BZIP2=-7</samp>&rsquo;.
<a name="index-dist_002dbzip2-1"></a>
</p>
</dd>
<dt><code>dist-lzip</code></dt>
<dd><p>Generate an &lsquo;<samp>lzip</samp>&rsquo; tar archive of the distribution.  <code>lzip</code>
archives are frequently smaller than <code>bzip2</code>-compressed archives.
<a name="index-dist_002dlzip-1"></a>
</p>
<a name="index-XZ_005fOPT"></a>
</dd>
<dt><code>dist-xz</code></dt>
<dd><p>Generate an &lsquo;<samp>xz</samp>&rsquo; tar archive of the distribution.  <code>xz</code>
archives are frequently smaller than <code>bzip2</code>-compressed archives.
By default, this rule makes &lsquo;<samp>xz</samp>&rsquo; use a compression option of
<samp>-e</samp>.  To make it use a different one, set the <code>XZ_OPT</code>
environment variable.  For example, run this command to use the
default compression ratio, but with a progress indicator:
&lsquo;<samp>make dist-xz XZ_OPT=-ve</samp>&rsquo;.
<a name="index-dist_002dxz-1"></a>
</p>
</dd>
<dt><code>dist-zip</code></dt>
<dd><p>Generate a &lsquo;<samp>zip</samp>&rsquo; archive of the distribution.
<a name="index-dist_002dzip-1"></a>
</p>
</dd>
<dt><code>dist-tarZ</code></dt>
<dd><p>Generate a tar archive of the distribution, compressed with the
historical (and obsolescent) program <code>compress</code>.  This
option is deprecated, and it and the corresponding functionality
will be removed altogether in Automake 2.0.
<a name="index-dist_002dtarZ-1"></a>
</p>
</dd>
<dt><code>dist-shar</code></dt>
<dd><p>Generate a &lsquo;<samp>shar</samp>&rsquo; archive of the distribution.  This format
archive is obsolescent, and use of this option is deprecated.
It and the corresponding functionality will be removed altogether
in Automake 2.0.
<a name="index-dist_002dshar-1"></a>
</p>
</dd>
</dl>

<p>The rule <code>dist</code> (and its historical synonym <code>dist-all</code>)
will create archives in all the enabled formats (see <a href="#List-of-Automake-options">List of Automake options</a> for how to change this list).  By default, only
the <code>dist-gzip</code> target is hooked to <code>dist</code>.
</p>

<hr>
<a name="Tests"></a>
<div class="header">
<p>
Next: <a href="#Rebuilding" accesskey="n" rel="next">Rebuilding</a>, Previous: <a href="#Dist" accesskey="p" rel="prev">Dist</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Support-for-test-suites"></a>
<h2 class="chapter">15 Support for test suites</h2>

<a name="index-Test-suites"></a>
<a name="index-make-check"></a>
<a name="index-check-1"></a>

<p>Automake can generate code to handle two kinds of test suites.  One is
based on integration with the <code>dejagnu</code> framework.  The other
(and most used) form is based on the use of generic test scripts, and
its activation is triggered by the definition of the special <code>TESTS</code>
variable.  This second form allows for various degrees of sophistication
and customization; in particular, it allows for concurrent execution
of test scripts, use of established test protocols such as TAP, and
definition of custom test drivers and test runners.
</p>
<p>In either case, the testsuite is invoked via &lsquo;<samp>make check</samp>&rsquo;.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Generalities-about-Testing" accesskey="1">Generalities about Testing</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Concepts and terminology about testing
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Simple-Tests" accesskey="2">Simple Tests</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Listing test scripts in <code>TESTS</code>
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Custom-Test-Drivers" accesskey="3">Custom Test Drivers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Writing and using custom test drivers
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Using-the-TAP-test-protocol" accesskey="4">Using the TAP test protocol</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Integrating test scripts that use the TAP protocol
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#DejaGnu-Tests" accesskey="5">DejaGnu Tests</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Interfacing with the <code>dejagnu</code> testing framework
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Install-Tests" accesskey="6">Install Tests</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Running tests on installed packages
</td></tr>
</table>

<hr>
<a name="Generalities-about-Testing"></a>
<div class="header">
<p>
Next: <a href="#Simple-Tests" accesskey="n" rel="next">Simple Tests</a>, Up: <a href="#Tests" accesskey="u" rel="up">Tests</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Generalities-about-Testing-1"></a>
<h3 class="section">15.1 Generalities about Testing</h3>

<p>The purpose of testing is to determine whether a program or system behaves
as expected (e.g., known inputs produce the expected outputs, error
conditions are correctly handled or reported, and older bugs do not
resurface).
</p>
<a name="index-test-case"></a>
<p>The minimal unit of testing is usually called <em>test case</em>, or simply
<em>test</em>.  How a test case is defined or delimited, and even what
exactly <em>constitutes</em> a test case, depends heavily on the testing
paradigm and/or framework in use, so we won&rsquo;t attempt any more precise
definition.  The set of the test cases for a given program or system
constitutes its <em>testsuite</em>.
</p>
<a name="index-test-harness"></a>
<a name="index-testsuite-harness"></a>
<p>A <em>test harness</em> (also <em>testsuite harness</em>) is a program or
software component that executes all (or part of) the defined test cases,
analyzes their outcomes, and report or register these outcomes
appropriately.  Again, the details of how this is accomplished (and how
the developer and user can influence it or interface with it) varies
wildly, and we&rsquo;ll attempt no precise definition.
</p>
<a name="index-test-pass"></a>
<a name="index-test-failure"></a>
<p>A test is said to <em>pass</em> when it can determine that the condition or
behaviour it means to verify holds, and is said to <em>fail</em> when it can
determine that such condition of behaviour does <em>not</em> hold.
</p>
<a name="index-test-skip"></a>
<p>Sometimes, tests can rely on non-portable tools or prerequisites, or
simply make no sense on a given system (for example, a test checking a
Windows-specific feature makes no sense on a GNU/Linux system).  In this
case, accordingly to the definition above, the tests can neither be
considered passed nor failed; instead, they are <em>skipped</em> &ndash; i.e.,
they are not run, or their result is anyway ignored for what concerns
the count of failures an successes.  Skips are usually explicitly
reported though, so that the user will be aware that not all of the
testsuite has really run.
</p>
<a name="index-xfail"></a>
<a name="index-expected-failure"></a>
<a name="index-expected-test-failure"></a>
<a name="index-xpass"></a>
<a name="index-unexpected-pass"></a>
<a name="index-unexpected-test-pass"></a>
<p>It&rsquo;s not uncommon, especially during early development stages, that some
tests fail for known reasons, and that the developer doesn&rsquo;t want to
tackle these failures immediately (this is especially true when the
failing tests deal with corner cases).  In this situation, the better
policy is to declare that each of those failures is an <em>expected
failure</em> (or <em>xfail</em>).  In case a test that is expected to fail ends
up passing instead, many testing environments will flag the result as a
special kind of failure called <em>unexpected pass</em> (or <em>xpass</em>).
</p>
<a name="index-hard-error"></a>
<a name="index-Distinction-between-errors-and-failures-in-testsuites"></a>
<p>Many testing environments and frameworks distinguish between test failures
and hard errors.  As we&rsquo;ve seen, a test failure happens when some invariant
or expected behaviour of the software under test is not met.  An <em>hard
error</em> happens when e.g., the set-up of a test case scenario fails, or when
some other unexpected or highly undesirable condition is encountered (for
example, the program under test experiences a segmentation fault).
</p>
<hr>
<a name="Simple-Tests"></a>
<div class="header">
<p>
Next: <a href="#Custom-Test-Drivers" accesskey="n" rel="next">Custom Test Drivers</a>, Previous: <a href="#Generalities-about-Testing" accesskey="p" rel="prev">Generalities about Testing</a>, Up: <a href="#Tests" accesskey="u" rel="up">Tests</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Simple-Tests-1"></a>
<h3 class="section">15.2 Simple Tests</h3>

<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Scripts_002dbased-Testsuites" accesskey="1">Scripts-based Testsuites</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Automake-specific concepts and terminology
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Serial-Test-Harness" accesskey="2">Serial Test Harness</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Older (and discouraged) serial test harness
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Parallel-Test-Harness" accesskey="3">Parallel Test Harness</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Generic concurrent test harness
</td></tr>
</table>

<hr>
<a name="Scripts_002dbased-Testsuites"></a>
<div class="header">
<p>
Next: <a href="#Serial-Test-Harness" accesskey="n" rel="next">Serial Test Harness</a>, Up: <a href="#Simple-Tests" accesskey="u" rel="up">Simple Tests</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Scripts_002dbased-Testsuites-1"></a>
<h4 class="subsection">15.2.1 Scripts-based Testsuites</h4>

<p>If the special variable <code>TESTS</code> is defined, its value is taken to be
a list of programs or scripts to run in order to do the testing.  Under
the appropriate circumstances, it&rsquo;s possible for <code>TESTS</code> to list
also data files to be passed to one or more test scripts defined by
different means (the so-called &ldquo;log compilers&rdquo;, see <a href="#Parallel-Test-Harness">Parallel Test Harness</a>).
</p>
<p>Test scripts can be executed serially or concurrently.  Automake supports
both these kinds of test execution, with the parallel test harness being
the default.  The concurrent test harness relies on the concurrence
capabilities (if any) offered by the underlying <code>make</code>
implementation, and can thus only be as good as those are.
</p>
<p>By default, only the exit statuses of the test scripts are considered when
determining the testsuite outcome.  But Automake allows also the use of
more complex test protocols, either standard (see <a href="#Using-the-TAP-test-protocol">Using the TAP test protocol</a>) or custom (see <a href="#Custom-Test-Drivers">Custom Test Drivers</a>).  Note that you can&rsquo;t
enable such protocols when the serial harness is used, though.
In the rest of this section we are going to concentrate mostly on
protocol-less tests, since we cover test protocols in a later section
(again, see <a href="#Custom-Test-Drivers">Custom Test Drivers</a>).
</p>
<a name="index-Exit-status-77_002c-special-interpretation"></a>
<a name="index-Exit-status-99_002c-special-interpretation"></a>
<p>When no test protocol is in use, an exit status of 0 from a test script will
denote a success, an exit status of 77 a skipped test, an exit status of 99
an hard error, and any other exit status will denote a failure.
</p>
<a name="index-Tests_002c-expected-failure"></a>
<a name="index-Expected-test-failure"></a>
<a name="index-XFAIL_005fTESTS"></a>
<a name="index-DISABLE_005fHARD_005fERRORS"></a>
<a name="index-Disabling-hard-errors"></a>
<p>You may define the variable <code>XFAIL_TESTS</code> to a list of tests
(usually a subset of <code>TESTS</code>) that are expected to fail; this will
effectively reverse the result of those tests (with the provision that
skips and hard errors remain untouched).  You may also instruct the
testsuite harness to treat hard errors like simple failures, by defining
the <code>DISABLE_HARD_ERRORS</code> make variable to a nonempty value.
</p>
<p>Note however that, for tests based on more complex test protocols,
the exact effects of <code>XFAIL_TESTS</code> and <code>DISABLE_HARD_ERRORS</code>
might change, or they might even have no effect at all (for example,
in tests using TAP, there is not way to disable hard errors, and the
<code>DISABLE_HARD_ERRORS</code> variable has no effect on them).
</p>
<a name="Testsuite-progress-on-console"></a><a name="index-Testsuite-progress-on-console"></a>
<p>The result of each test case run by the scripts in <code>TESTS</code> will be
printed on standard output, along with the test name.  For test protocols
that allow more test cases per test script (such as TAP), a number,
identifier and/or brief description specific for the single test case is
expected to be printed in addition to the name of the test script.  The
possible results (whose meanings should be clear from the previous
<a href="#Generalities-about-Testing">Generalities about Testing</a>) are <code>PASS</code>, <code>FAIL</code>,
<code>SKIP</code>, <code>XFAIL</code>, <code>XPASS</code> and <code>ERROR</code>.  Here is an
example of output from an hypothetical testsuite that uses both plain
and TAP tests:
</p><div class="example">
<pre class="example">PASS: foo.sh
PASS: zardoz.tap 1 - Daemon started
PASS: zardoz.tap 2 - Daemon responding
SKIP: zardoz.tap 3 - Daemon uses /proc # SKIP /proc is not mounted
PASS: zardoz.tap 4 - Daemon stopped
SKIP: bar.sh
PASS: mu.tap 1
XFAIL: mu.tap 2 # TODO frobnication not yet implemented
</pre></div>

<p>A testsuite summary (expected to report at least the number of run,
skipped and failed tests) will be printed at the end of the testsuite
run.
</p>
<a name="Simple-tests-and-color_002dtests"></a><a name="index-AM_005fCOLOR_005fTESTS"></a>
<a name="index-Colorized-testsuite-output"></a>
<p>If the standard output is connected to a capable terminal, then the test
results and the summary are colored appropriately.  The developer and the
user can disable colored output by setting the <code>make</code> variable
&lsquo;<samp>AM_COLOR_TESTS=no</samp>&rsquo;; the user can in addition force colored output
even without a connecting terminal with &lsquo;<samp>AM_COLOR_TESTS=always</samp>&rsquo;.
It&rsquo;s also worth noting that some <code>make</code> implementations,
when used in parallel mode, have slightly different semantics
(see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Parallel-make">Parallel make</a> in <cite>The Autoconf Manual</cite>), which can
break the automatic detection of a connection to a capable terminal.
If this is the case, the user will have to resort to the use of
&lsquo;<samp>AM_COLOR_TESTS=always</samp>&rsquo; in order to have the testsuite output
colorized.
</p>
<p>Test programs that need data files should look for them in <code>srcdir</code>
(which is both a make variable and an environment variable made available
to the tests), so that they work when building in a separate directory
(see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Build-Directories">Build Directories</a> in <cite>The Autoconf Manual</cite>), and in particular for the <code>distcheck</code> rule
(see <a href="#Checking-the-Distribution">Checking the Distribution</a>).
</p>
<a name="index-TESTS"></a>
<a name="index-TESTS_005fENVIRONMENT"></a>
<a name="index-AM_005fTESTS_005fENVIRONMENT"></a>
<p>The <code>AM_TESTS_ENVIRONMENT</code> and <code>TESTS_ENVIRONMENT</code> variables can
be used to run initialization code and set environment variables for the
test scripts.  The former variable is developer-reserved, and can be
defined in the <samp>Makefile.am</samp>, while the latter is reserved for the
user, which can employ it to extend or override the settings in the
former; for this to work portably, however, the contents of a non-empty
<code>AM_TESTS_ENVIRONMENT</code> <em>must</em> be terminated by a semicolon.
</p>
<a name="index-AM_005fTESTS_005fFD_005fREDIRECT"></a>
<p>The <code>AM_TESTS_FD_REDIRECT</code> variable can be used to define file
descriptor redirections for the test scripts.  One might think that
<code>AM_TESTS_ENVIRONMENT</code> could be used for this purpose, but experience
has shown that doing so portably is practically impossible.  The main
hurdle is constituted by Korn shells, which usually set the close-on-exec
flag on file descriptors opened with the <code>exec</code> builtin, thus
rendering an idiom like <code>AM_TESTS_ENVIRONMENT = exec 9&gt;&amp;2;</code>
ineffectual.  This issue also affects some Bourne shells, such as the
HP-UX&rsquo;s <code>/bin/sh</code>,
</p>
<div class="example">
<pre class="example">AM_TESTS_ENVIRONMENT = \
## Some environment initializations are kept in a separate shell
## file 'tests-env.sh', which can make it easier to also run tests
## from the command line.
  . $(srcdir)/tests-env.sh; \
## On Solaris, prefer more POSIX-compliant versions of the standard
## tools by default.
  if test -d /usr/xpg4/bin; then \
    PATH=/usr/xpg4/bin:$$PATH; export PATH; \
  fi;
## With this, the test scripts will be able to print diagnostic
## messages to the original standard error stream, even if the test
## driver redirects the stderr of the test scripts to a log file
## before executing them.
AM_TESTS_FD_REDIRECT = 9&gt;&amp;2
</pre></div>

<p>Note however that <code>AM_TESTS_ENVIRONMENT</code> is, for historical and
implementation reasons, <em>not</em> supported by the serial harness
(see <a href="#Serial-Test-Harness">Serial Test Harness</a>).
</p>
<p>Automake ensures that each file listed in <code>TESTS</code> is built before
it is run; you can list both source and derived programs (or scripts)
in <code>TESTS</code>; the generated rule will look both in <code>srcdir</code> and
<samp>.</samp>.  For instance, you might want to run a C program as a test.
To do this you would list its name in <code>TESTS</code> and also in
<code>check_PROGRAMS</code>, and then specify it as you would any other
program.
</p>
<p>Programs listed in <code>check_PROGRAMS</code> (and <code>check_LIBRARIES</code>,
<code>check_LTLIBRARIES</code>...) are only built during <code>make check</code>,
not during <code>make all</code>.  You should list there any program needed
by your tests that does not need to be built by <code>make all</code>.  Note
that <code>check_PROGRAMS</code> are <em>not</em> automatically added to
<code>TESTS</code> because <code>check_PROGRAMS</code> usually lists programs used
by the tests, not the tests themselves.  Of course you can set
<code>TESTS = $(check_PROGRAMS)</code> if all your programs are test cases.
</p>
<hr>
<a name="Serial-Test-Harness"></a>
<div class="header">
<p>
Next: <a href="#Parallel-Test-Harness" accesskey="n" rel="next">Parallel Test Harness</a>, Previous: <a href="#Scripts_002dbased-Testsuites" accesskey="p" rel="prev">Scripts-based Testsuites</a>, Up: <a href="#Simple-Tests" accesskey="u" rel="up">Simple Tests</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Older-_0028and-discouraged_0029-serial-test-harness"></a>
<h4 class="subsection">15.2.2 Older (and discouraged) serial test harness</h4>
<a name="index-serial_002dtests_002c-Using"></a>

<p>First, note that today the use of this harness is strongly discouraged in
favour of the parallel test harness (see <a href="#Parallel-Test-Harness">Parallel Test Harness</a>).
Still, there are <em>few</em> situations when the advantages offered by
the parallel harness are irrelevant, and when test concurrency can
even cause tricky problems.  In those cases, it might make sense to
still use the serial harness, for simplicity and reliability (we still
suggest trying to give the parallel harness a shot though).
</p>
<p>The serial test harness is enabled by the Automake option
<samp>serial-tests</samp>. It operates by simply running the tests serially,
one at the time, without any I/O redirection.  It&rsquo;s up to the user to
implement logging of tests&rsquo; output, if that&rsquo;s requited or desired.
</p>
<p>For historical and implementation reasons, the <code>AM_TESTS_ENVIRONMENT</code>
variable is <em>not</em> supported by this harness (it will be silently
ignored if defined); only <code>TESTS_ENVIRONMENT</code> is, and it is to be
considered a developer-reserved variable.  This is done so that, when
using the serial harness, <code>TESTS_ENVIRONMENT</code> can be defined to an
invocation of an interpreter through which the tests are to be run.
For instance, the following setup may be used to run tests with Perl:
</p>
<div class="example">
<pre class="example">TESTS_ENVIRONMENT = $(PERL) -Mstrict -w
TESTS = foo.pl bar.pl baz.pl
</pre></div>

<p>It&rsquo;s important to note that the use of <code>TESTS_ENVIRONMENT</code> endorsed
here would be <em>invalid</em> with the parallel harness.  That harness
provides a more elegant way to achieve the same effect, with the further
benefit of freeing the <code>TESTS_ENVIRONMENT</code> variable for the user
(see <a href="#Parallel-Test-Harness">Parallel Test Harness</a>).
</p>
<p>Another, less serious limit of the serial harness is that it doesn&rsquo;t
really distinguish between simple failures and hard errors; this is
due to historical reasons only, and might be fixed in future Automake
versions.
</p>
<hr>
<a name="Parallel-Test-Harness"></a>
<div class="header">
<p>
Previous: <a href="#Serial-Test-Harness" accesskey="p" rel="prev">Serial Test Harness</a>, Up: <a href="#Simple-Tests" accesskey="u" rel="up">Simple Tests</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Parallel-Test-Harness-1"></a>
<h4 class="subsection">15.2.3 Parallel Test Harness</h4>

<p>By default, Automake generated a parallel (concurrent) test harness.  It
features automatic collection of the test scripts output in <samp>.log</samp>
files, concurrent execution of tests with <code>make -j</code>, specification
of inter-test dependencies, lazy reruns of tests that have not completed
in a prior run, and hard errors for exceptional failures.
</p>
<a name="Basics-of-test-metadata"></a><a name="index-TEST_005fSUITE_005fLOG"></a>
<a name="index-TESTS-1"></a>
<a name="index-_002elog-files"></a>
<a name="index-_002etrs-files"></a>
<a name="index-test-metadata"></a>
<p>The parallel test harness operates by defining a set of <code>make</code>
rules that run the test scripts listed in <code>TESTS</code>, and, for each
such script, save its output in a corresponding <samp>.log</samp> file and
its results (and other &ldquo;metadata&rdquo;, see <a href="#API-for-Custom-Test-Drivers">API for Custom Test Drivers</a>)
in a corresponding <samp>.trs</samp> (as in <b>T</b>est <b>R</b>e<b>S</b>ults) file.
The <samp>.log</samp> file will contain all the output emitted by the test on
its standard output and its standard error.  The <samp>.trs</samp> file will
contain, among the other things, the results of the test cases run by
the script.
</p>
<p>The parallel test harness will also create a summary log file,
<code>TEST_SUITE_LOG</code>, which defaults to <samp>test-suite.log</samp> and requires
a <samp>.log</samp> suffix.  This file depends upon all the <samp>.log</samp> and
<samp>.trs</samp> files created for the test scripts listed in <code>TESTS</code>.
</p>
<a name="index-VERBOSE"></a>
<p>As with the serial harness above, by default one status line is printed
per completed test, and a short summary after the suite has completed.
However, standard output and standard error of the test are redirected
to a per-test log file, so that parallel execution does not produce
intermingled output.  The output from failed tests is collected in the
<samp>test-suite.log</samp> file.  If the variable &lsquo;<samp>VERBOSE</samp>&rsquo; is set, this
file is output after the summary.
</p>
<a name="index-TEST_005fEXTENSIONS"></a>
<a name="index-TEST_005fLOGS"></a>
<p>Each couple of <samp>.log</samp> and <samp>.trs</samp> files is created when the
corresponding test has completed.  The set of log files is listed in
the read-only variable <code>TEST_LOGS</code>, and defaults to <code>TESTS</code>,
with the executable extension if any (see <a href="#EXEEXT">EXEEXT</a>), as well as any
suffix listed in <code>TEST_EXTENSIONS</code> removed, and <samp>.log</samp> appended.
Results are undefined if a test file name ends in several concatenated
suffixes.  <code>TEST_EXTENSIONS</code> defaults to <samp>.test</samp>; it can be
overridden by the user, in which case any extension listed in it must be
constituted by a dot, followed by a non-digit alphabetic character,
followed by any number of alphabetic characters.
For example, &lsquo;<samp>.sh</samp>&rsquo;, &lsquo;<samp>.T</samp>&rsquo; and &lsquo;<samp>.t1</samp>&rsquo; are valid extensions,
while &lsquo;<samp>.x-y</samp>&rsquo;, &lsquo;<samp>.6c</samp>&rsquo; and &lsquo;<samp>.t.1</samp>&rsquo; are not.
</p>
<a name="index-Configure-substitutions-in-TESTS"></a>
<p>It is important to note that, due to current limitations (unlikely to be
lifted), configure substitutions in the definition of <code>TESTS</code> can
only work if they will expand to a list of tests that have a suffix listed
in <code>TEST_EXTENSIONS</code>.
</p>
<a name="index-_005fLOG_005fCOMPILE"></a>
<a name="index-_005fLOG_005fCOMPILER"></a>
<a name="index-_005fLOG_005fFLAGS"></a>
<a name="index-LOG_005fCOMPILE"></a>
<a name="index-LOG_005fCOMPILER"></a>
<a name="index-LOG_005fFLAGS"></a>
<a name="index-ext_005fLOG_005fCOMPILE"></a>
<a name="index-ext_005fLOG_005fCOMPILER"></a>
<a name="index-ext_005fLOG_005fFLAGS"></a>
<a name="index-AM_005fext_005fLOG_005fFLAGS"></a>
<a name="index-AM_005fLOG_005fFLAGS"></a>
<p>For tests that match an extension <code>.<var>ext</var></code> listed in
<code>TEST_EXTENSIONS</code>, you can provide a custom &ldquo;test runner&rdquo; using
the variable <code><var>ext</var>_LOG_COMPILER</code> (note the upper-case
extension) and pass options in <code>AM_<var>ext</var>_LOG_FLAGS</code> and allow
the user to pass options in <code><var>ext</var>_LOG_FLAGS</code>.  It will cause
all tests with this extension to be called with this runner.  For all
tests without a registered extension, the variables <code>LOG_COMPILER</code>,
<code>AM_LOG_FLAGS</code>, and <code>LOG_FLAGS</code> may be used.  For example,
</p>
<div class="example">
<pre class="example">TESTS = foo.pl bar.py baz
TEST_EXTENSIONS = .pl .py
PL_LOG_COMPILER = $(PERL)
AM_PL_LOG_FLAGS = -w
PY_LOG_COMPILER = $(PYTHON)
AM_PY_LOG_FLAGS = -v
LOG_COMPILER = ./wrapper-script
AM_LOG_FLAGS = -d
</pre></div>

<p>will invoke &lsquo;<samp>$(PERL) -w foo.pl</samp>&rsquo;, &lsquo;<samp>$(PYTHON) -v bar.py</samp>&rsquo;,
and &lsquo;<samp>./wrapper-script -d baz</samp>&rsquo; to produce <samp>foo.log</samp>,
<samp>bar.log</samp>, and <samp>baz.log</samp>, respectively.  The <samp>foo.trs</samp>,
<samp>bar.trs</samp> and <samp>baz.trs</samp> files will be automatically produced
as a side-effect.
</p>
<p>It&rsquo;s important to note that, differently from what we&rsquo;ve seen for the
serial test harness (see <a href="#Serial-Test-Harness">Serial Test Harness</a>), the
<code>AM_TESTS_ENVIRONMENT</code> and <code>TESTS_ENVIRONMENT</code> variables
<em>cannot</em> be use to define a custom test runner; the
<code>LOG_COMPILER</code> and <code>LOG_FLAGS</code> (or their extension-specific
counterparts) should be used instead:
</p>
<div class="example">
<pre class="example">## This is WRONG!
AM_TESTS_ENVIRONMENT = PERL5LIB='$(srcdir)/lib' $(PERL) -Mstrict -w
</pre></div>

<div class="example">
<pre class="example">## Do this instead.
AM_TESTS_ENVIRONMENT = PERL5LIB='$(srcdir)/lib'; export PERL5LIB;
LOG_COMPILER = $(PERL)
AM_LOG_FLAGS = -Mstrict -w
</pre></div>

<p>By default, the test suite harness will run all tests, but there are
several ways to limit the set of tests that are run:
</p>
<ul>
<li> You can set the <code>TESTS</code> variable.  For example, you can use a
command like this to run only a subset of the tests:

<div class="example">
<pre class="example">env TESTS=&quot;foo.test bar.test&quot; make -e check
</pre></div>

<p>Note however that the command above will unconditionally overwrite the
<samp>test-suite.log</samp> file, thus clobbering the recorded results
of any previous testsuite run.  This might be undesirable for packages
whose testsuite takes long time to execute.  Luckily, this problem can
easily be avoided by overriding also <code>TEST_SUITE_LOG</code> at runtime;
for example,
</p>
<div class="example">
<pre class="example">env TEST_SUITE_LOG=partial.log TESTS=&quot;...&quot; make -e check
</pre></div>

<p>will write the result of the partial testsuite runs to the
<samp>partial.log</samp>, without touching <samp>test-suite.log</samp>.
</p>
</li><li> You can set the <code>TEST_LOGS</code> variable.  By default, this variable is
computed at <code>make</code> run time from the value of <code>TESTS</code> as
described above.  For example, you can use the following:

<div class="example">
<pre class="example">set x subset*.log; shift
env TEST_LOGS=&quot;foo.log $*&quot; make -e check
</pre></div>

<p>The comments made above about <code>TEST_SUITE_LOG</code> overriding applies
here too.
</p>
</li><li> <a name="index-RECHECK_005fLOGS"></a>
<a name="index-lazy-test-execution"></a>
By default, the test harness removes all old per-test <samp>.log</samp> and
<samp>.trs</samp> files before it starts running tests to regenerate them.  The
variable <code>RECHECK_LOGS</code> contains the set of <samp>.log</samp> (and, by
implication, <samp>.trs</samp>) files which are removed.  <code>RECHECK_LOGS</code>
defaults to <code>TEST_LOGS</code>, which means all tests need to be rechecked.
By overriding this variable, you can choose which tests need to be
reconsidered.  For example, you can lazily rerun only those tests which
are outdated, i.e., older than their prerequisite test files, by setting
this variable to the empty value:

<div class="example">
<pre class="example">env RECHECK_LOGS= make -e check
</pre></div>

</li><li> <a name="index-recheck"></a>
You can ensure that all tests are rerun which have failed or passed
unexpectedly, by running <code>make recheck</code> in the test directory.
This convenience target will set <code>RECHECK_LOGS</code> appropriately
before invoking the main test harness.
</li></ul>

<p>In order to guarantee an ordering between tests even with <code>make
-j<var>N</var></code>, dependencies between the corresponding <samp>.log</samp> files
may be specified through usual <code>make</code> dependencies.  For example,
the following snippet lets the test named <samp>foo-execute.test</samp> depend
upon completion of the test <samp>foo-compile.test</samp>:
</p>
<div class="example">
<pre class="example">TESTS = foo-compile.test foo-execute.test
foo-execute.log: foo-compile.log
</pre></div>

<p>Please note that this ordering ignores the <em>results</em> of required
tests, thus the test <samp>foo-execute.test</samp> is run even if the test
<samp>foo-compile.test</samp> failed or was skipped beforehand.  Further,
please note that specifying such dependencies currently works only for
tests that end in one of the suffixes listed in <code>TEST_EXTENSIONS</code>.
</p>
<p>Tests without such specified dependencies may be run concurrently with
parallel <code>make -j<var>N</var></code>, so be sure they are prepared for
concurrent execution.
</p>
<a name="index-Unit-tests"></a>
<p>The combination of lazy test execution and correct dependencies between
tests and their sources may be exploited for efficient unit testing
during development.  To further speed up the edit-compile-test cycle, it
may even be useful to specify compiled programs in <code>EXTRA_PROGRAMS</code>
instead of with <code>check_PROGRAMS</code>, as the former allows intertwined
compilation and test execution (but note that <code>EXTRA_PROGRAMS</code> are
not cleaned automatically, see <a href="#Uniform">Uniform</a>).
</p>
<p>The variables <code>TESTS</code> and <code>XFAIL_TESTS</code> may contain
conditional parts as well as configure substitutions.  In the latter
case, however, certain restrictions apply: substituted test names
must end with a nonempty test suffix like <samp>.test</samp>, so that one of
the inference rules generated by <code>automake</code> can apply.  For
literal test names, <code>automake</code> can generate per-target rules
to avoid this limitation.
</p>
<p>Please note that it is currently not possible to use <code>$(srcdir)/</code>
or <code>$(top_srcdir)/</code> in the <code>TESTS</code> variable.  This technical
limitation is necessary to avoid generating test logs in the source tree
and has the unfortunate consequence that it is not possible to specify
distributed tests that are themselves generated by means of explicit
rules, in a way that is portable to all <code>make</code> implementations
(see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Make-Target-Lookup">Make Target Lookup</a> in <cite>The Autoconf Manual</cite>, the
semantics of FreeBSD and OpenBSD <code>make</code> conflict with this).
In case of doubt you may want to require to use GNU <code>make</code>,
or work around the issue with inference rules to generate the tests.
</p>
<hr>
<a name="Custom-Test-Drivers"></a>
<div class="header">
<p>
Next: <a href="#Using-the-TAP-test-protocol" accesskey="n" rel="next">Using the TAP test protocol</a>, Previous: <a href="#Simple-Tests" accesskey="p" rel="prev">Simple Tests</a>, Up: <a href="#Tests" accesskey="u" rel="up">Tests</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Custom-Test-Drivers-1"></a>
<h3 class="section">15.3 Custom Test Drivers</h3>

<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Overview-of-Custom-Test-Drivers-Support" accesskey="1">Overview of Custom Test Drivers Support</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Declaring-Custom-Test-Drivers" accesskey="2">Declaring Custom Test Drivers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#API-for-Custom-Test-Drivers" accesskey="3">API for Custom Test Drivers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Overview-of-Custom-Test-Drivers-Support"></a>
<div class="header">
<p>
Next: <a href="#Declaring-Custom-Test-Drivers" accesskey="n" rel="next">Declaring Custom Test Drivers</a>, Up: <a href="#Custom-Test-Drivers" accesskey="u" rel="up">Custom Test Drivers</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Overview-of-Custom-Test-Drivers-Support-1"></a>
<h4 class="subsection">15.3.1 Overview of Custom Test Drivers Support</h4>

<p>Starting from Automake version 1.12, the parallel test harness allows
the package authors to use third-party custom test drivers, in case the
default ones are inadequate for their purposes, or do not support their
testing protocol of choice.
</p>
<p>A custom test driver is expected to properly run the test programs passed
to it (including the command-line arguments passed to those programs, if
any), to analyze their execution and outcome, to create the <samp>.log</samp>
and <samp>.trs</samp> files associated to these test runs, and to display the test
results on the console. It is responsibility of the author of the test
driver to ensure that it implements all the above steps meaningfully and
correctly; Automake isn&rsquo;t and can&rsquo;t be of any help here.  On the other
hand, the Automake-provided code for testsuite summary generation offers
support for test drivers allowing several test results per test script,
if they take care to register such results properly (see <a href="#Log-files-generation-and-test-results-recording">Log files generation and test results recording</a>).
</p>
<p>The exact details of how test scripts&rsquo; results are to be determined and
analyzed is left to the individual drivers.  Some drivers might only
consider the test script exit status (this is done for example by the
default test driver used by the parallel test harness, described
in the previous section).  Other drivers might implement more complex and
advanced test protocols, which might require them to parse and interpreter
the output emitted by the test script they&rsquo;re running (examples of such
protocols are TAP and SubUnit).
</p>
<p>It&rsquo;s very important to note that, even when using custom test drivers,
most of the infrastructure described in the previous section about the
parallel harness remains in place; this includes:
</p>
<ul>
<li> list of test scripts defined in <code>TESTS</code>, and overridable at
runtime through the redefinition of <code>TESTS</code> or <code>TEST_LOGS</code>;
</li><li> concurrency through the use of <code>make</code>&rsquo;s option <samp>-j</samp>;
</li><li> per-test <samp>.log</samp> and <samp>.trs</samp> files, and generation of a summary
<samp>.log</samp> file from them;
</li><li> <code>recheck</code> target, <code>RECHECK_LOGS</code> variable, and lazy reruns
of tests;
</li><li> inter-test dependencies;
</li><li> support for <code>check_*</code> variables (<code>check_PROGRAMS</code>,
<code>check_LIBRARIES</code>, ...);
</li><li> use of <code>VERBOSE</code> environment variable to get verbose output on
testsuite failures;
</li><li> definition and honoring of <code>TESTS_ENVIRONMENT</code>,
<code>AM_TESTS_ENVIRONMENT</code> and <code>AM_TESTS_FD_REDIRECT</code>
variables;
</li><li> definition of generic and extension-specific <code>LOG_COMPILER</code> and
<code>LOG_FLAGS</code> variables.
</li></ul>

<p>On the other hand, the exact semantics of how (and if) testsuite output
colorization, <code>XFAIL_TESTS</code>, and hard errors are supported and
handled is left to the individual test drivers.
</p>

<hr>
<a name="Declaring-Custom-Test-Drivers"></a>
<div class="header">
<p>
Next: <a href="#API-for-Custom-Test-Drivers" accesskey="n" rel="next">API for Custom Test Drivers</a>, Previous: <a href="#Overview-of-Custom-Test-Drivers-Support" accesskey="p" rel="prev">Overview of Custom Test Drivers Support</a>, Up: <a href="#Custom-Test-Drivers" accesskey="u" rel="up">Custom Test Drivers</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Declaring-Custom-Test-Drivers-1"></a>
<h4 class="subsection">15.3.2 Declaring Custom Test Drivers</h4>

<a name="index-_005fLOG_005fDRIVER"></a>
<a name="index-_005fLOG_005fDRIVER_005fFLAGS"></a>
<a name="index-LOG_005fDRIVER"></a>
<a name="index-LOG_005fDRIVER_005fFLAGS"></a>
<a name="index-ext_005fLOG_005fDRIVER"></a>
<a name="index-ext_005fLOG_005fDRIVER_005fFLAGS"></a>
<a name="index-AM_005fext_005fLOG_005fDRIVER_005fFLAGS"></a>
<a name="index-AM_005fLOG_005fDRIVER_005fFLAGS"></a>
<p>Custom testsuite drivers are declared by defining the make variables
<code>LOG_DRIVER</code> or <code><var>ext</var>_LOG_DRIVER</code> (where <var>ext</var> must
be declared in <code>TEST_EXTENSIONS</code>).  They must be defined to
programs or scripts that will be used to drive the execution, logging,
and outcome report of the tests with corresponding extensions (or of
those with no registered extension in the case of <code>LOG_DRIVER</code>).
Clearly, multiple distinct test drivers can be declared in the same
<samp>Makefile.am</samp>.  Note moreover that the <code>LOG_DRIVER</code> variables
are <em>not</em> a substitute for the <code>LOG_COMPILER</code> variables: the
two sets of variables can, and often do, usefully and legitimately
coexist.
</p>

<p>The developer-reserved variable <code>AM_LOG_DRIVER_FLAGS</code> and the
user-reserved variable <code>LOG_DRIVER_FLAGS</code> can be used to define
flags that will be passed to each invocation of <code>LOG_DRIVER</code>,
with the user-defined flags obviously taking precedence over the
developer-reserved ones.  Similarly, for each extension <var>ext</var>
declared in <code>TEST_EXTENSIONS</code>, flags listed in
<code>AM_<var>ext</var>_LOG_DRIVER_FLAGS</code> and
<code><var>ext</var>_LOG_DRIVER_FLAGS</code> will be passed to
invocations of <code><var>ext</var>_LOG_DRIVER</code>.
</p>
<hr>
<a name="API-for-Custom-Test-Drivers"></a>
<div class="header">
<p>
Previous: <a href="#Declaring-Custom-Test-Drivers" accesskey="p" rel="prev">Declaring Custom Test Drivers</a>, Up: <a href="#Custom-Test-Drivers" accesskey="u" rel="up">Custom Test Drivers</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="API-for-Custom-Test-Drivers-1"></a>
<h4 class="subsection">15.3.3 API for Custom Test Drivers</h4>

<p>Note that <em>the APIs described here are still highly experimental</em>,
and will very likely undergo tightenings and likely also extensive changes
in the future, to accommodate for new features or to satisfy additional
portability requirements.
</p>
<p>The main characteristic of these APIs is that they are designed to share
as much infrastructure, semantics, and implementation details as possible
with the parallel test harness and its default driver.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Command_002dline-arguments-for-test-drivers" accesskey="1">Command-line arguments for test drivers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Log-files-generation-and-test-results-recording" accesskey="2">Log files generation and test results recording</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Testsuite-progress-output" accesskey="3">Testsuite progress output</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Command_002dline-arguments-for-test-drivers"></a>
<div class="header">
<p>
Next: <a href="#Log-files-generation-and-test-results-recording" accesskey="n" rel="next">Log files generation and test results recording</a>, Up: <a href="#API-for-Custom-Test-Drivers" accesskey="u" rel="up">API for Custom Test Drivers</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Command_002dline-arguments-for-test-drivers-1"></a>
<h4 class="subsubsection">15.3.3.1 Command-line arguments for test drivers</h4>

<p>A custom driver can rely on various command-line options and arguments
being passed to it automatically by the Automake-generated test harness.
It is <em>mandatory</em> that it understands all of them (even if the exact
interpretation of the associated semantics can legitimately change
between a test driver and another, and even be a no-op in some drivers).
</p>
<p>Here is the list of options:
</p>
<dl compact="compact">
<dt><samp>--test-name=<var>NAME</var></samp></dt>
<dd><p>The name of the test, with VPATH prefix (if any) removed.  This can have a
suffix and a directory component (as in e.g., <samp>sub/foo.test</samp>), and is
mostly meant to be used in console reports about testsuite advancements and
results (see <a href="#Testsuite-progress-output">Testsuite progress output</a>).
</p></dd>
<dt><samp>--log-file=<samp><var>PATH</var>.log</samp></samp></dt>
<dd><p>The <samp>.log</samp> file the test driver must create (see <a href="#Basics-of-test-metadata">Basics of test metadata</a>).  If it has a directory component (as in e.g.,
<samp>sub/foo.log</samp>), the test harness will ensure that such directory
exists <em>before</em> the test driver is called.
</p></dd>
<dt><samp>--trs-file=<samp><var>PATH</var>.trs</samp></samp></dt>
<dd><p>The <samp>.trs</samp> file the test driver must create (see <a href="#Basics-of-test-metadata">Basics of test metadata</a>).  If it has a directory component (as in e.g.,
<samp>sub/foo.trs</samp>), the test harness will ensure that such directory
exists <em>before</em> the test driver is called.
</p></dd>
<dt><samp>--color-tests={yes|no}</samp></dt>
<dd><p>Whether the console output should be colorized or not (see <a href="#Simple-tests-and-color_002dtests">Simple tests and color-tests</a>, to learn when this option gets activated and
when it doesn&rsquo;t).
</p></dd>
<dt><samp>--expect-failure={yes|no}</samp></dt>
<dd><p>Whether the tested program is expected to fail.
</p></dd>
<dt><samp>--enable-hard-errors={yes|no}</samp></dt>
<dd><p>Whether &ldquo;hard errors&rdquo; in the tested program should be treated differently
from normal failures or not (the default should be <code>yes</code>).  The exact
meaning of &ldquo;hard error&rdquo; is highly dependent from the test protocols or
conventions in use.
</p></dd>
<dt><samp>--</samp></dt>
<dd><p>Explicitly terminate the list of options.
</p></dd>
</dl>

<p>The first non-option argument passed to the test driver is the program to
be run, and all the following ones are command-line options and arguments
for this program.
</p>
<p>Note that the exact semantics attached to the <samp>--color-tests</samp>,
<samp>--expect-failure</samp> and <samp>--enable-hard-errors</samp> options are
left up to the individual test drivers.  Still, having a behaviour
compatible or at least similar to that provided by the default driver
is advised, as that would offer a better consistency and a more pleasant
user experience.
</p>
<hr>
<a name="Log-files-generation-and-test-results-recording"></a>
<div class="header">
<p>
Next: <a href="#Testsuite-progress-output" accesskey="n" rel="next">Testsuite progress output</a>, Previous: <a href="#Command_002dline-arguments-for-test-drivers" accesskey="p" rel="prev">Command-line arguments for test drivers</a>, Up: <a href="#API-for-Custom-Test-Drivers" accesskey="u" rel="up">API for Custom Test Drivers</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Log-files-generation-and-test-results-recording-1"></a>
<h4 class="subsubsection">15.3.3.2 Log files generation and test results recording</h4>

<p>The test driver must correctly generate the files specified by the
<samp>--log-file</samp> and <samp>--trs-file</samp> option (even when the tested
program fails or crashes).
</p>
<p>The <samp>.log</samp> file should ideally contain all the output produced by the
tested program, plus optionally other information that might facilitate
debugging or analysis of bug reports.  Apart from that, its format is
basically free.
</p>
<p>The <samp>.trs</samp> file is used to register some metadata through the use
of custom reStructuredText fields.  This metadata is expected to be
employed in various ways by the parallel test harness; for example, to
count the test results when printing the testsuite summary, or to decide
which tests to re-run upon <code>make recheck</code>.  Unrecognized metadata
in a <samp>.trs</samp> file is currently ignored by the harness, but this might
change in the future. The list of currently recognized metadata follows.
</p>
<dl compact="compact">
<dt><code>:test-result:</code></dt>
<dd><a name="index-Register-test-result"></a>
<a name="index-Register-test-case-result"></a>
<a name="index-Test-result_002c-registering"></a>
<a name="index-Test-case-result_002c-registering"></a>
<a name="index-_003atest_002dresult_003a"></a>
<a name="index-reStructuredText-field_002c-_003atest_002dresult_003a"></a>
<p>The test driver must use this field to register the results of <em>each</em>
test case run by a test script file.  Several <code>:test-result:</code> fields
can be present in the same <samp>.trs</samp> file; this is done in order to
support test protocols that allow a single test script to run more test
cases.
</p>
<p>The only recognized test results are currently <code>PASS</code>, <code>XFAIL</code>,
<code>SKIP</code>, <code>FAIL</code>, <code>XPASS</code> and <code>ERROR</code>.  These results,
when declared with <code>:test-result:</code>, can be optionally followed by
text holding the name and/or a brief description of the corresponding
test; the harness will ignore such extra text when generating
<samp>test-suite.log</samp> and preparing the testsuite summary.
</p>
</dd>
<dt><code><code>:recheck:</code></code></dt>
<dd><a name="index-_003arecheck_003a"></a>
<a name="index-reStructuredText-field_002c-_003arecheck_003a"></a>
<p>If this field is present and defined to <code>no</code>, then the corresponding
test script will <em>not</em> be run upon a <code>make recheck</code>.  What
happens when two or more <code>:recheck:</code> fields are present in the same
<samp>.trs</samp> file is undefined behaviour.
</p>
</dd>
<dt><code><code>:copy-in-global-log:</code></code></dt>
<dd><a name="index-_003acopy_002din_002dglobal_002dlog_003a"></a>
<a name="index-reStructuredText-field_002c-_003acopy_002din_002dglobal_002dlog_003a"></a>
<p>If this field is present and defined to <code>no</code>, then the content
of the <samp>.log</samp> file will <em>not</em> be copied into the global
<samp>test-suite.log</samp>.  We allow to forsake such copying because, while
it can be useful in debugging and analysis of bug report, it can also be
just a waste of space in normal situations, e.g., when a test script is
successful.  What happens when two or more <code>:copy-in-global-log:</code>
fields are present in the same <samp>.trs</samp> file is undefined behaviour.
</p>
</dd>
<dt><code><code>:test-global-result:</code></code></dt>
<dd><a name="index-_003atest_002dglobal_002dresult_003a"></a>
<a name="index-reStructuredText-field_002c-_003atest_002dglobal_002dresult_003a"></a>
<p>This is used to declare the &quot;global result&quot; of the script.  Currently,
the value of this field is needed only to be reported (more or less
verbatim) in the generated global log file <code>$(TEST_SUITE_LOG)</code>,
so it&rsquo;s quite free-form.  For example, a test script which run 10 test
cases, 6 of which pass and 4 of which are skipped, could reasonably have
a <code>PASS/SKIP</code> value for this field, while a test script which run
19 successful tests and one failed test could have an <code>ALMOST
PASSED</code> value.  What happens when two or more <code>:test-global-result:</code>
fields are present in the same <samp>.trs</samp> file is undefined behaviour.
</p></dd>
</dl>

<p>Let&rsquo;s see a small example.  Assume a <samp>.trs</samp> file contains the
following lines:
</p>
<div class="example">
<pre class="example">:test-result: PASS server starts
:global-log-copy: no
:test-result: PASS HTTP/1.1 request
:test-result: FAIL HTTP/1.0 request
:recheck: yes
:test-result: SKIP HTTPS request (TLS library wasn't available)
:test-result: PASS server stops
</pre></div>

<p>Then the corresponding test script will be re-run by <code>make check</code>,
will contribute with <em>five</em> test results to the testsuite summary
(three of these tests being successful, one failed, and one skipped), and
the content of the corresponding <samp>.log</samp> file will <em>not</em> be
copied in the global log file <samp>test-suite.log</samp>.
</p>
<hr>
<a name="Testsuite-progress-output"></a>
<div class="header">
<p>
Previous: <a href="#Log-files-generation-and-test-results-recording" accesskey="p" rel="prev">Log files generation and test results recording</a>, Up: <a href="#API-for-Custom-Test-Drivers" accesskey="u" rel="up">API for Custom Test Drivers</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Testsuite-progress-output-1"></a>
<h4 class="subsubsection">15.3.3.3 Testsuite progress output</h4>

<p>A custom test driver also has the task of displaying, on the standard
output, the test results as soon as they become available.  Depending on
the protocol in use, it can also display the reasons for failures and
skips, and, more generally, any useful diagnostic output (but remember
that each line on the screen is precious, so that cluttering the screen
with overly verbose information is bad idea).  The exact format of this
progress output is left up to the test driver; in fact, a custom test
driver might <em>theoretically</em> even decide not to do any such report,
leaving it all to the testsuite summary (that would be a very lousy idea,
of course, and serves only to illustrate the flexibility that is
granted here).
</p>
<p>Remember that consistency is good; so, if possible, try to be consistent
with the output of the built-in Automake test drivers, providing a similar
&ldquo;look &amp; feel&rdquo;.  In particular, the testsuite progress output should be
colorized when the <samp>--color-tests</samp> is passed to the driver.  On the
other end, if you are using a known and widespread test protocol with
well-established implementations, being consistent with those
implementations&rsquo; output might be a good idea too.
</p>
<hr>
<a name="Using-the-TAP-test-protocol"></a>
<div class="header">
<p>
Next: <a href="#DejaGnu-Tests" accesskey="n" rel="next">DejaGnu Tests</a>, Previous: <a href="#Custom-Test-Drivers" accesskey="p" rel="prev">Custom Test Drivers</a>, Up: <a href="#Tests" accesskey="u" rel="up">Tests</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Using-the-TAP-test-protocol-1"></a>
<h3 class="section">15.4 Using the TAP test protocol</h3>

<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Introduction-to-TAP" accesskey="1">Introduction to TAP</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Use-TAP-with-the-Automake-test-harness" accesskey="2">Use TAP with the Automake test harness</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Incompatibilities-with-other-TAP-parsers-and-drivers" accesskey="3">Incompatibilities with other TAP parsers and drivers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Links-and-external-resources-on-TAP" accesskey="4">Links and external resources on TAP</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</table>

<hr>
<a name="Introduction-to-TAP"></a>
<div class="header">
<p>
Next: <a href="#Use-TAP-with-the-Automake-test-harness" accesskey="n" rel="next">Use TAP with the Automake test harness</a>, Up: <a href="#Using-the-TAP-test-protocol" accesskey="u" rel="up">Using the TAP test protocol</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Introduction-to-TAP-1"></a>
<h4 class="subsection">15.4.1 Introduction to TAP</h4>

<p>TAP, the Test Anything Protocol, is a simple text-based interface between
testing modules or programs and a test harness.  The tests (also called
&ldquo;TAP producers&rdquo; in this context) write test results in a simple format
on standard output; a test harness (also called &ldquo;TAP consumer&rdquo;) will
parse and interpret these results, and properly present them to the user,
and/or register them for later analysis.  The exact details of how this
is accomplished can vary among different test harnesses.  The Automake
harness will present the results on the console in the usual
fashion (see <a href="#Testsuite-progress-on-console">Testsuite progress on console</a>), and will use the
<samp>.trs</samp> files (see <a href="#Basics-of-test-metadata">Basics of test metadata</a>) to store the test
results and related metadata.  Apart from that, it will try to remain
as much compatible as possible with pre-existing and widespread utilities,
such as the <a href="http://search.cpan.org/~andya/Test-Harness/bin/prove"><code>prove</code> utility</a>, at least for the simpler usages.
</p>
<p>TAP started its life as part of the test harness for Perl, but today
it has been (mostly) standardized, and has various independent
implementations in different languages; among them, C, C++, Perl,
Python, PHP, and Java.  For a semi-official specification of the
TAP protocol, please refer to the documentation of
<a href="http://search.cpan.org/~petdance/Test-Harness/lib/Test/Harness/TAP.pod">      &lsquo;<samp>Test::Harness::TAP</samp>&rsquo;</a>.
</p>
<p>The most relevant real-world usages of TAP are obviously in the testsuites
of <code>perl</code> and of many perl modules.  Still, also other important
third-party packages, such as <a href="http://git-scm.com/"><code>git</code></a>,
use TAP in their testsuite.
</p>
<hr>
<a name="Use-TAP-with-the-Automake-test-harness"></a>
<div class="header">
<p>
Next: <a href="#Incompatibilities-with-other-TAP-parsers-and-drivers" accesskey="n" rel="next">Incompatibilities with other TAP parsers and drivers</a>, Previous: <a href="#Introduction-to-TAP" accesskey="p" rel="prev">Introduction to TAP</a>, Up: <a href="#Using-the-TAP-test-protocol" accesskey="u" rel="up">Using the TAP test protocol</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Use-TAP-with-the-Automake-test-harness-1"></a>
<h4 class="subsection">15.4.2 Use TAP with the Automake test harness</h4>

<p>Currently, the TAP driver that comes with Automake requires some by-hand
steps on the developer&rsquo;s part (this situation should hopefully be improved
in future Automake versions).  You&rsquo;ll have to grab the <samp>tap-driver.sh</samp>
script from the Automake distribution by hand, copy it in your source tree,
and use the Automake support for third-party test drivers to instruct the
harness to use the <samp>tap-driver.sh</samp> script and the awk program found
by <code>AM_INIT_AUTOMAKE</code> to run your TAP-producing tests.  See the example
below for clarification.
</p>
<p>Apart from the options common to all the Automake test drivers
(see <a href="#Command_002dline-arguments-for-test-drivers">Command-line arguments for test drivers</a>), the <samp>tap-driver.sh</samp>
supports the following options, whose names are chosen for enhanced
compatibility with the <code>prove</code> utility.
</p>
<dl compact="compact">
<dt><samp>--ignore-exit</samp></dt>
<dd><p>Causes the test driver to ignore the exit status of the test scripts;
by default, the driver will report an error if the script exits with a
non-zero status.  This option has effect also on non-zero exit statuses
due to termination by a signal.
</p></dd>
<dt><samp>--comments</samp></dt>
<dd><p>Instruct the test driver to display TAP diagnostic (i.e., lines beginning
with the &lsquo;<samp>#</samp>&rsquo; character) in the testsuite progress output too; by
default, TAP diagnostic is only copied to the <samp>.log</samp> file.
</p></dd>
<dt><samp>--no-comments</samp></dt>
<dd><p>Revert the effects of <samp>--comments</samp>.
</p></dd>
<dt><samp>--merge</samp></dt>
<dd><p>Instruct the test driver to merge the test scripts&rsquo; standard error into
their standard output.  This is necessary if you want to ensure that
diagnostics from the test scripts are displayed in the correct order
relative to test results; this can be of great help in debugging
(especially if your test scripts are shell scripts run with shell
tracing active).  As a downside, this option might cause the test
harness to get confused if anything that appears on standard error
looks like a test result.
</p></dd>
<dt><samp>--no-merge</samp></dt>
<dd><p>Revert the effects of <samp>--merge</samp>.
</p></dd>
<dt><samp>--diagnostic-string=<var>STRING</var></samp></dt>
<dd><p>Change the string that introduces TAP diagnostic from the default value
of &ldquo;<code>#</code>&rdquo; to <code><var>STRING</var></code>.  This can be useful if your
TAP-based test scripts produce verbose output on which they have limited
control (because, say, the output comes from other tools invoked in the
scripts), and it might contain text that gets spuriously interpreted as
TAP diagnostic: such an issue can be solved by redefining the string that
activates TAP diagnostic to a value you know won&rsquo;t appear by chance in
the tests&rsquo; output.  Note however that this feature is non-standard, as
the &ldquo;official&rdquo; TAP protocol does not allow for such a customization; so
don&rsquo;t use it if you can avoid it.
</p></dd>
</dl>

<p>Here is an example of how the TAP driver can be set up and used.
</p>
<div class="example">
<pre class="example">% <kbd>cat configure.ac</kbd>
AC_INIT([GNU Try Tap], [1.0], [bug-automake@gnu.org])
AC_CONFIG_AUX_DIR([build-aux])
AM_INIT_AUTOMAKE([foreign -Wall -Werror])
AC_CONFIG_FILES([Makefile])
AC_REQUIRE_AUX_FILE([tap-driver.sh])
AC_OUTPUT

% <kbd>cat Makefile.am</kbd>
TEST_LOG_DRIVER = env AM_TAP_AWK='$(AWK)' $(SHELL) \
                  $(top_srcdir)/build-aux/tap-driver.sh
TESTS = foo.test bar.test baz.test
EXTRA_DIST = $(TESTS)

% <kbd>cat foo.test</kbd>
#!/bin/sh
echo 1..4 # Number of tests to be executed.
echo 'ok 1 - Swallows fly'
echo 'not ok 2 - Caterpillars fly # TODO metamorphosis in progress'
echo 'ok 3 - Pigs fly # SKIP not enough acid'
echo '# I just love word plays ...'
echo 'ok 4 - Flies fly too :-)'

% <kbd>cat bar.test</kbd>
#!/bin/sh
echo 1..3
echo 'not ok 1 - Bummer, this test has failed.'
echo 'ok 2 - This passed though.'
echo 'Bail out! Ennui kicking in, sorry...'
echo 'ok 3 - This will not be seen.'

% <kbd>cat baz.test</kbd>
#!/bin/sh
echo 1..1
echo ok 1
# Exit with error, even if all the tests have been successful.
exit 7

% <kbd>cp <var>PREFIX</var>/share/automake-<var>APIVERSION</var>/tap-driver.sh .</kbd>
% <kbd>autoreconf -vi &amp;&amp; ./configure &amp;&amp; make check</kbd>
...
PASS: foo.test 1 - Swallows fly
XFAIL: foo.test 2 - Caterpillars fly # TODO metamorphosis in progress
SKIP: foo.test 3 - Pigs fly # SKIP not enough acid
PASS: foo.test 4 - Flies fly too :-)
FAIL: bar.test 1 - Bummer, this test has failed.
PASS: bar.test 2 - This passed though.
ERROR: bar.test - Bail out! Ennui kicking in, sorry...
PASS: baz.test 1
ERROR: baz.test - exited with status 7
...
Please report to bug-automake@gnu.org
...
% <kbd>echo exit status: $?</kbd>
exit status: 1

% <kbd>env TEST_LOG_DRIVER_FLAGS='--comments --ignore-exit' \
      TESTS='foo.test baz.test' make -e check</kbd>
...
PASS: foo.test 1 - Swallows fly
XFAIL: foo.test 2 - Caterpillars fly # TODO metamorphosis in progress
SKIP: foo.test 3 - Pigs fly # SKIP not enough acid
# foo.test: I just love word plays...
PASS: foo.test 4 - Flies fly too :-)
PASS: baz.test 1
...
% <kbd>echo exit status: $?</kbd>
exit status: 0
</pre></div>

<hr>
<a name="Incompatibilities-with-other-TAP-parsers-and-drivers"></a>
<div class="header">
<p>
Next: <a href="#Links-and-external-resources-on-TAP" accesskey="n" rel="next">Links and external resources on TAP</a>, Previous: <a href="#Use-TAP-with-the-Automake-test-harness" accesskey="p" rel="prev">Use TAP with the Automake test harness</a>, Up: <a href="#Using-the-TAP-test-protocol" accesskey="u" rel="up">Using the TAP test protocol</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Incompatibilities-with-other-TAP-parsers-and-drivers-1"></a>
<h4 class="subsection">15.4.3 Incompatibilities with other TAP parsers and drivers</h4>

<p>For implementation or historical reasons, the TAP driver and harness as
implemented by Automake have some minors incompatibilities with the
mainstream versions, which you should be aware of.
</p>
<ul>
<li> A <code>Bail out!</code> directive doesn&rsquo;t stop the whole testsuite, but only
the test script it occurs in.  This doesn&rsquo;t follow TAP specifications,
but on the other hand it maximizes compatibility (and code sharing) with
the &ldquo;hard error&rdquo; concept of the default testsuite driver.
</li><li> The <code>version</code> and <code>pragma</code> directives are not supported.
</li><li> The <samp>--diagnostic-string</samp> option of our driver allows to modify
the string that introduces TAP diagnostic from the default value
of &ldquo;<code>#</code>&rdquo;.  The standard TAP protocol has currently no way to
allow this, so if you use it your diagnostic will be lost to more
compliant tools like <code>prove</code> and <code>Test::Harness</code>
</li><li> And there are probably some other small and yet undiscovered
incompatibilities, especially in corner cases or with rare usages.
</li></ul>

<hr>
<a name="Links-and-external-resources-on-TAP"></a>
<div class="header">
<p>
Previous: <a href="#Incompatibilities-with-other-TAP-parsers-and-drivers" accesskey="p" rel="prev">Incompatibilities with other TAP parsers and drivers</a>, Up: <a href="#Using-the-TAP-test-protocol" accesskey="u" rel="up">Using the TAP test protocol</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Links-and-external-resources-on-TAP-1"></a>
<h4 class="subsection">15.4.4 Links and external resources on TAP</h4>

<p>Here are some links to more extensive official or third-party
documentation and resources about the TAP protocol and related
tools and libraries.
</p><ul>
<li> <a href="http://search.cpan.org/~petdance/Test-Harness/lib/Test/Harness/TAP.pod">      &lsquo;<samp>Test::Harness::TAP</samp>&rsquo;</a>,
the (mostly) official documentation about the TAP format and protocol.
</li><li> <a href="http://search.cpan.org/~andya/Test-Harness/bin/prove">      <code>prove</code></a>,
the most famous command-line TAP test driver, included in the distribution
of <code>perl</code> and
<a href="http://search.cpan.org/~andya/Test-Harness/lib/Test/Harness.pm">      &lsquo;<samp>Test::Harness</samp>&rsquo;</a>.
</li><li> The <a href="http://testanything.org/wiki/index.php/Main_Page">TAP wiki</a>.
</li><li> A &ldquo;gentle introduction&rdquo; to testing for perl coders:
<a href="http://search.cpan.org/dist/Test-Simple/lib/Test/Tutorial.pod">      &lsquo;<samp>Test::Tutorial</samp>&rsquo;</a>.
</li><li> <a href="http://search.cpan.org/~mschwern/Test-Simple/lib/Test/Simple.pm">      &lsquo;<samp>Test::Simple</samp>&rsquo;</a>
and
<a href="http://search.cpan.org/~mschwern/Test-Simple/lib/Test/More.pm">      &lsquo;<samp>Test::More</samp>&rsquo;</a>,
the standard perl testing libraries, which are based on TAP.
</li><li> <a href="http://www.eyrie.org/~eagle/software/c-tap-harness/">C TAP Harness</a>,
a C-based project implementing both a TAP producer and a TAP consumer.
</li><li> <a href="http://www.tap4j.org/">tap4j</a>,
a Java-based project implementing both a TAP producer and a TAP consumer.
</li></ul>

<hr>
<a name="DejaGnu-Tests"></a>
<div class="header">
<p>
Next: <a href="#Install-Tests" accesskey="n" rel="next">Install Tests</a>, Previous: <a href="#Using-the-TAP-test-protocol" accesskey="p" rel="prev">Using the TAP test protocol</a>, Up: <a href="#Tests" accesskey="u" rel="up">Tests</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="DejaGnu-Tests-1"></a>
<h3 class="section">15.5 DejaGnu Tests</h3>

<p>If <a href="ftp://ftp.gnu.org/gnu/dejagnu/"><code>dejagnu</code></a> appears in
<code>AUTOMAKE_OPTIONS</code>, then a <code>dejagnu</code>-based test suite is
assumed.  The variable <code>DEJATOOL</code> is a list of names that are
passed, one at a time, as the <samp>--tool</samp> argument to
<code>runtest</code> invocations; it defaults to the name of the package.
</p>
<p>The variable <code>RUNTESTDEFAULTFLAGS</code> holds the <samp>--tool</samp> and
<samp>--srcdir</samp> flags that are passed to dejagnu by default; this can be
overridden if necessary.
<a name="index-RUNTESTDEFAULTFLAGS"></a>
</p>
<p>The variables <code>EXPECT</code> and <code>RUNTEST</code> can
also be overridden to provide project-specific values.  For instance,
you will need to do this if you are testing a compiler toolchain,
because the default values do not take into account host and target
names.
<a name="index-dejagnu"></a>
<a name="index-DEJATOOL"></a>
<a name="index-EXPECT"></a>
<a name="index-RUNTEST"></a>
</p>
<p>The contents of the variable <code>RUNTESTFLAGS</code> are passed to the
<code>runtest</code> invocation.  This is considered a &ldquo;user variable&rdquo;
(see <a href="#User-Variables">User Variables</a>).  If you need to set <code>runtest</code> flags in
<samp>Makefile.am</samp>, you can use <code>AM_RUNTESTFLAGS</code> instead.
<a name="index-RUNTESTFLAGS"></a>
<a name="index-AM_005fRUNTESTFLAGS"></a>
</p>
<a name="index-site_002eexp"></a>
<p>Automake will generate rules to create a local <samp>site.exp</samp> file,
defining various variables detected by <code>configure</code>.  This file
is automatically read by DejaGnu.  It is OK for the user of a package
to edit this file in order to tune the test suite.  However this is
not the place where the test suite author should define new variables:
this should be done elsewhere in the real test suite code.
Especially, <samp>site.exp</samp> should not be distributed.
</p>
<p>Still, if the package author has legitimate reasons to extend
<samp>site.exp</samp> at <code>make</code> time, he can do so by defining
the variable <code>EXTRA_DEJAGNU_SITE_CONFIG</code>; the files listed
there will be considered <samp>site.exp</samp> prerequisites, and their
content will be appended to it (in the same order in which they
appear in <code>EXTRA_DEJAGNU_SITE_CONFIG</code>).  Note that files are
<em>not</em> distributed by default.
</p>
<p>For more information regarding DejaGnu test suites, see <cite><a href="dejagnu.html#Top">The DejaGnu Manual</a></cite>.
</p>
<hr>
<a name="Install-Tests"></a>
<div class="header">
<p>
Previous: <a href="#DejaGnu-Tests" accesskey="p" rel="prev">DejaGnu Tests</a>, Up: <a href="#Tests" accesskey="u" rel="up">Tests</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Install-Tests-1"></a>
<h3 class="section">15.6 Install Tests</h3>

<p>The <code>installcheck</code> target is available to the user as a way to
run any tests after the package has been installed.  You can add tests
to this by writing an <code>installcheck-local</code> rule.
</p>

<hr>
<a name="Rebuilding"></a>
<div class="header">
<p>
Next: <a href="#Options" accesskey="n" rel="next">Options</a>, Previous: <a href="#Tests" accesskey="p" rel="prev">Tests</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Rebuilding-Makefiles"></a>
<h2 class="chapter">16 Rebuilding Makefiles</h2>
<a name="index-rebuild-rules"></a>

<p>Automake generates rules to automatically rebuild <samp>Makefile</samp>s,
<samp>configure</samp>, and other derived files like <samp>Makefile.in</samp>.
</p>
<a name="index-AM_005fMAINTAINER_005fMODE"></a>
<p>If you are using <code>AM_MAINTAINER_MODE</code> in <samp>configure.ac</samp>, then
these automatic rebuilding rules are only enabled in maintainer mode.
</p>
<a name="index-CONFIG_005fSTATUS_005fDEPENDENCIES"></a>
<a name="index-CONFIGURE_005fDEPENDENCIES"></a>
<a name="index-version_002esh_002c-example"></a>
<a name="index-version_002em4_002c-example"></a>

<p>Sometimes it is convenient to supplement the rebuild rules for
<samp>configure</samp> or <samp>config.status</samp> with additional dependencies.
The variables <code>CONFIGURE_DEPENDENCIES</code> and
<code>CONFIG_STATUS_DEPENDENCIES</code> can be used to list these extra
dependencies.  These variables should be defined in all
<samp>Makefile</samp>s of the tree (because these two rebuild rules are
output in all them), so it is safer and easier to <code>AC_SUBST</code> them
from <samp>configure.ac</samp>.  For instance, the following statement will
cause <samp>configure</samp> to be rerun each time <samp>version.sh</samp> is
changed.
</p>
<div class="example">
<pre class="example">AC_SUBST([CONFIG_STATUS_DEPENDENCIES], ['$(top_srcdir)/version.sh'])
</pre></div>

<p>Note the &lsquo;<samp>$(top_srcdir)/</samp>&rsquo; in the file name.  Since this variable
is to be used in all <samp>Makefile</samp>s, its value must be sensible at
any level in the build hierarchy.
</p>
<p>Beware not to mistake <code>CONFIGURE_DEPENDENCIES</code> for
<code>CONFIG_STATUS_DEPENDENCIES</code>.
</p>
<p><code>CONFIGURE_DEPENDENCIES</code> adds dependencies to the
<samp>configure</samp> rule, whose effect is to run <code>autoconf</code>.  This
variable should be seldom used, because <code>automake</code> already tracks
<code>m4_include</code>d files.  However it can be useful when playing
tricky games with <code>m4_esyscmd</code> or similar non-recommendable
macros with side effects.  Be also aware that interactions of this
variable with the <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Autom4te-Cache">autom4te cache</a> in <cite>The Autoconf Manual</cite> are quite problematic and can cause subtle
breakage, so you might want to disable the cache if you want to use
<code>CONFIGURE_DEPENDENCIES</code>.
</p>
<p><code>CONFIG_STATUS_DEPENDENCIES</code> adds dependencies to the
<samp>config.status</samp> rule, whose effect is to run <samp>configure</samp>.
This variable should therefore carry any non-standard source that may
be read as a side effect of running <code>configure</code>, like <samp>version.sh</samp>
in the example above.
</p>
<p>Speaking of <samp>version.sh</samp> scripts, we recommend against them
today.  They are mainly used when the version of a package is updated
automatically by a script (e.g., in daily builds).  Here is what some
old-style <samp>configure.ac</samp>s may look like:
</p>
<div class="example">
<pre class="example">AC_INIT
. $srcdir/version.sh
AM_INIT_AUTOMAKE([name], $VERSION_NUMBER)
&hellip;
</pre></div>

<p>Here, <samp>version.sh</samp> is a shell fragment that sets
<code>VERSION_NUMBER</code>.  The problem with this example is that
<code>automake</code> cannot track dependencies (listing <samp>version.sh</samp>
in <code>CONFIG_STATUS_DEPENDENCIES</code>, and distributing this file is up
to the user), and that it uses the obsolete form of <code>AC_INIT</code> and
<code>AM_INIT_AUTOMAKE</code>.  Upgrading to the new syntax is not
straightforward, because shell variables are not allowed in
<code>AC_INIT</code>&rsquo;s arguments.  We recommend that <samp>version.sh</samp> be
replaced by an M4 file that is included by <samp>configure.ac</samp>:
</p>
<div class="example">
<pre class="example">m4_include([version.m4])
AC_INIT([name], VERSION_NUMBER)
AM_INIT_AUTOMAKE
&hellip;
</pre></div>

<p>Here <samp>version.m4</samp> could contain something like
&lsquo;<samp>m4_define([VERSION_NUMBER], [1.2])</samp>&rsquo;.  The advantage of this
second form is that <code>automake</code> will take care of the
dependencies when defining the rebuild rule, and will also distribute
the file automatically.  An inconvenience is that <code>autoconf</code>
will now be rerun each time the version number is bumped, when only
<samp>configure</samp> had to be rerun in the previous setup.
</p>

<hr>
<a name="Options"></a>
<div class="header">
<p>
Next: <a href="#Miscellaneous" accesskey="n" rel="next">Miscellaneous</a>, Previous: <a href="#Rebuilding" accesskey="p" rel="prev">Rebuilding</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Changing-Automake_0027s-Behavior"></a>
<h2 class="chapter">17 Changing Automake&rsquo;s Behavior</h2>

<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Options-generalities" accesskey="1">Options generalities</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Semantics of Automake option
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#List-of-Automake-options" accesskey="2">List of Automake options</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">A comprehensive list of Automake options
</td></tr>
</table>

<hr>
<a name="Options-generalities"></a>
<div class="header">
<p>
Next: <a href="#List-of-Automake-options" accesskey="n" rel="next">List of Automake options</a>, Up: <a href="#Options" accesskey="u" rel="up">Options</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Options-generalities-1"></a>
<h3 class="section">17.1 Options generalities</h3>

<p>Various features of Automake can be controlled by options.  Except where
noted otherwise, options can be specified in one of several ways.  Most
options can be applied on a per-<samp>Makefile</samp> basis when listed in a
special <samp>Makefile</samp> variable named <code>AUTOMAKE_OPTIONS</code>.  Some
of these options only make sense when specified in the toplevel
<samp>Makefile.am</samp> file.  Options are applied globally to all processed
<samp>Makefile</samp> files when listed in the first argument of
<code>AM_INIT_AUTOMAKE</code> in <samp>configure.ac</samp>, and some options which
require changes to the <code>configure</code> script can only be specified
there.  These are annotated below.
</p>
<p>As a general rule, options specified in <code>AUTOMAKE_OPTIONS</code> take
precedence over those specified in <code>AM_INIT_AUTOMAKE</code>, which in
turn take precedence over those specified on the command line.
</p>
<p>Also, some care must be taken about the interactions among strictness
level and warning categories.  As a general rule, strictness-implied
warnings are overridden by those specified by explicit options.  For
example, even if &lsquo;<samp>portability</samp>&rsquo; warnings are disabled by default
in <samp>foreign</samp> strictness, an usage like this will end up enabling
them:
</p>
<div class="example">
<pre class="example">AUTOMAKE_OPTIONS = -Wportability foreign
</pre></div>

<p>However, a strictness level specified in a higher-priority context
will override all the explicit warnings specified in a lower-priority
context.  For example, if <samp>configure.ac</samp> contains:
</p>
<div class="example">
<pre class="example">AM_INIT_AUTOMAKE([-Wportability])
</pre></div>

<p>and <samp>Makefile.am</samp> contains:
</p>
<div class="example">
<pre class="example">AUTOMAKE_OPTIONS = foreign
</pre></div>

<p>then &lsquo;<samp>portability</samp>&rsquo; warnings will be <em>disabled</em> in
<samp>Makefile.am</samp>.
</p>
<hr>
<a name="List-of-Automake-options"></a>
<div class="header">
<p>
Previous: <a href="#Options-generalities" accesskey="p" rel="prev">Options generalities</a>, Up: <a href="#Options" accesskey="u" rel="up">Options</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="List-of-Automake-options-1"></a>
<h3 class="section">17.2 List of Automake options</h3>

<a name="index-AUTOMAKE_005fOPTIONS-2"></a>

<dl compact="compact">
<dt><samp>gnits</samp></dt>
<dt><samp>gnu</samp></dt>
<dt><samp>foreign</samp></dt>
<dd><a name="index-Option_002c-gnits"></a>
<a name="index-Option_002c-gnu"></a>
<a name="index-Option_002c-foreign"></a>
<a name="index-gnits"></a>
<a name="index-gnu"></a>
<a name="index-foreign-1"></a>

<p>Set the strictness as appropriate.  The <samp>gnits</samp> option also
implies options <samp>readme-alpha</samp> and <samp>check-news</samp>.
</p>
</dd>
<dt><samp>check-news</samp></dt>
<dd><a name="index-Option_002c-check_002dnews"></a>
<a name="index-check_002dnews"></a>
<p>Cause &lsquo;<samp>make dist</samp>&rsquo; to fail unless the current version number appears
in the first few lines of the <samp>NEWS</samp> file.
</p>
</dd>
<dt><samp>dejagnu</samp></dt>
<dd><a name="index-Option_002c-dejagnu"></a>
<a name="index-dejagnu-1"></a>
<p>Cause <code>dejagnu</code>-specific rules to be generated.  See <a href="#DejaGnu-Tests">DejaGnu Tests</a>.
</p>
</dd>
<dt><samp>dist-bzip2</samp></dt>
<dd><a name="index-Option_002c-dist_002dbzip2"></a>
<a name="index-dist_002dbzip2"></a>
<p>Hook <code>dist-bzip2</code> to <code>dist</code>.
<a name="index-dist_002dbzip2-2"></a>
</p>
</dd>
<dt><samp>dist-lzip</samp></dt>
<dd><a name="index-Option_002c-dist_002dlzip"></a>
<a name="index-dist_002dlzip"></a>
<p>Hook <code>dist-lzip</code> to <code>dist</code>.
<a name="index-dist_002dlzip-2"></a>
</p>
</dd>
<dt><samp>dist-xz</samp></dt>
<dd><a name="index-Option_002c-dist_002dxz"></a>
<a name="index-dist_002dxz"></a>
<p>Hook <code>dist-xz</code> to <code>dist</code>.
<a name="index-dist_002dxz-2"></a>
</p>
</dd>
<dt><samp>dist-zip</samp></dt>
<dd><a name="index-Option_002c-dist_002dzip"></a>
<a name="index-dist_002dzip"></a>
<p>Hook <code>dist-zip</code> to <code>dist</code>.
<a name="index-dist_002dzip-2"></a>
</p>
</dd>
<dt><samp>dist-shar</samp></dt>
<dd><a name="index-Option_002c-dist_002dshar"></a>
<a name="index-dist_002dshar"></a>
<p>Hook <code>dist-shar</code> to <code>dist</code>.  Use of this option
is deprecated, as the &lsquo;<samp>shar</samp>&rsquo; format is obsolescent and
problematic.  Support for it will be removed altogether in
Automake 2.0.
<a name="index-dist_002dshar-2"></a>
</p>
</dd>
<dt><samp>dist-tarZ</samp></dt>
<dd><a name="index-Option_002c-dist_002dtarZ"></a>
<a name="index-dist_002dtarZ"></a>
<p>Hook <code>dist-tarZ</code> to <code>dist</code>.  Use of this option
is deprecated, as the &lsquo;<samp>compress</samp>&rsquo; program is obsolete.
Support for it will be removed altogether in Automake 2.0.
<a name="index-dist_002dtarZ-2"></a>
</p>
</dd>
<dt><samp>filename-length-max=99</samp></dt>
<dd><a name="index-Option_002c-filename_002dlength_002dmax_003d99"></a>
<a name="index-filename_002dlength_002dmax_003d99"></a>
<p>Abort if file names longer than 99 characters are found during
&lsquo;<samp>make dist</samp>&rsquo;.  Such long file names are generally considered not to
be portable in tarballs.  See the <samp>tar-v7</samp> and <samp>tar-ustar</samp>
options below.  This option should be used in the top-level
<samp>Makefile.am</samp> or as an argument of <code>AM_INIT_AUTOMAKE</code> in
<samp>configure.ac</samp>, it will be ignored otherwise.  It will also be
ignored in sub-packages of nested packages (see <a href="#Subpackages">Subpackages</a>).
</p>
</dd>
<dt><samp>info-in-builddir</samp></dt>
<dd><a name="index-Option_002c-info_002din_002dbuilddir"></a>
<a name="index-info_002din_002dbuilddir"></a>
<p>Instruct Automake to place the generated <samp>.info</samp> files in the
<code>builddir</code> rather than in the <code>srcdir</code>.  Note that this
might make VPATH builds with some non-GNU make implementations more
brittle.
</p>
</dd>
<dt><samp>no-define</samp></dt>
<dd><a name="index-Option_002c-no_002ddefine"></a>
<a name="index-no_002ddefine-1"></a>
<p>This option is meaningful only when passed as an argument to
<code>AM_INIT_AUTOMAKE</code>.  It will prevent the <code>PACKAGE</code> and
<code>VERSION</code> variables from being <code>AC_DEFINE</code>d.  But notice
that they will remain defined as shell variables in the generated
<code>configure</code>, and as make variables in the generated
<code>Makefile</code>; this is deliberate, and required for backward
compatibility.
</p>
</dd>
<dt><samp>no-dependencies</samp></dt>
<dd><a name="index-Option_002c-no_002ddependencies"></a>
<a name="index-no_002ddependencies-1"></a>
<p>This is similar to using <samp>--ignore-deps</samp> on the command line,
but is useful for those situations where you don&rsquo;t have the necessary
bits to make automatic dependency tracking work
(see <a href="#Dependencies">Dependencies</a>).  In this case the effect is to effectively
disable automatic dependency tracking.
</p>
</dd>
<dt><samp>no-dist</samp></dt>
<dd><a name="index-Option_002c-no_002ddist"></a>
<a name="index-no_002ddist"></a>
<p>Don&rsquo;t emit any code related to <code>dist</code> target.  This is useful
when a package has its own method for making distributions.
</p>
</dd>
<dt><samp>no-dist-gzip</samp></dt>
<dd><a name="index-Option_002c-no_002ddist_002dgzip"></a>
<a name="index-no_002ddist_002dgzip"></a>
<p>Do not hook <code>dist-gzip</code> to <code>dist</code>.
<a name="index-no_002ddist_002dgzip-1"></a>
</p>
</dd>
<dt><samp>no-exeext</samp></dt>
<dd><a name="index-Option_002c-no_002dexeext"></a>
<a name="index-no_002dexeext"></a>
<p>If your <samp>Makefile.am</samp> defines a rule for target <code>foo</code>, it
will override a rule for a target named &lsquo;<samp>foo$(EXEEXT)</samp>&rsquo;.  This is
necessary when <code>EXEEXT</code> is found to be empty.  However, by
default <code>automake</code> will generate an error for this use.  The
<samp>no-exeext</samp> option will disable this error.  This is intended for
use only where it is known in advance that the package will not be
ported to Windows, or any other operating system using extensions on
executables.
</p>
</dd>
<dt><samp>no-installinfo</samp></dt>
<dd><a name="index-Option_002c-no_002dinstallinfo-1"></a>
<a name="index-no_002dinstallinfo-1"></a>
<p>The generated <samp>Makefile.in</samp> will not cause info pages to be built
or installed by default.  However, <code>info</code> and <code>install-info</code>
targets will still be available.  This option is disallowed at
<samp>gnu</samp> strictness and above.
<a name="index-info"></a>
<a name="index-install_002dinfo-1"></a>
</p>
</dd>
<dt><samp>no-installman</samp></dt>
<dd><a name="index-Option_002c-no_002dinstallman-1"></a>
<a name="index-no_002dinstallman-1"></a>
<p>The generated <samp>Makefile.in</samp> will not cause man pages to be
installed by default.  However, an <code>install-man</code> target will still
be available for optional installation.  This option is disallowed at
<samp>gnu</samp> strictness and above.
<a name="index-install_002dman-1"></a>
</p>
</dd>
<dt><samp>nostdinc</samp></dt>
<dd><a name="index-Option_002c-nostdinc"></a>
<a name="index-nostdinc"></a>
<p>This option can be used to disable the standard <samp>-I</samp> options that
are ordinarily automatically provided by Automake.
</p>
</dd>
<dt><samp>no-texinfo.tex</samp></dt>
<dd><a name="index-Option_002c-no_002dtexinfo_002etex"></a>
<a name="index-no_002dtexinfo_002etex"></a>
<p>Don&rsquo;t require <samp>texinfo.tex</samp>, even if there are texinfo files in
this directory.
</p>
</dd>
<dt><samp>serial-tests</samp></dt>
<dd><a name="index-Option_002c-serial_002dtests"></a>
<a name="index-serial_002dtests"></a>
<p>Enable the older serial test suite harness for <code>TESTS</code> (see <a href="#Serial-Test-Harness">Serial Test Harness</a>, for more information).
</p>
</dd>
<dt><samp>parallel-tests</samp></dt>
<dd><a name="index-Option_002c-parallel_002dtests"></a>
<a name="index-parallel_002dtests"></a>
<p>Enable test suite harness for <code>TESTS</code> that can run tests in parallel
(see <a href="#Parallel-Test-Harness">Parallel Test Harness</a>, for more information).  This option is
only kept for backward-compatibility, since the parallel test harness is
the default now.
</p>
</dd>
<dt><samp>readme-alpha</samp></dt>
<dd><a name="index-Option_002c-readme_002dalpha"></a>
<a name="index-readme_002dalpha"></a>
<p>If this release is an alpha release, and the file <samp>README-alpha</samp>
exists, then it will be added to the distribution.  If this option is
given, version numbers are expected to follow one of two forms.  The
first form is &lsquo;<samp><var>major</var>.<var>minor</var>.<var>alpha</var></samp>&rsquo;, where each
element is a number; the final period and number should be left off for
non-alpha releases.  The second form is
&lsquo;<samp><var>major</var>.<var>minor</var><var>alpha</var></samp>&rsquo;, where <var>alpha</var> is a
letter; it should be omitted for non-alpha releases.
</p>
</dd>
<dt><samp>std-options</samp></dt>
<dd><a name="index-Options_002c-std_002doptions"></a>
<a name="index-make-installcheck_002c-testing-_002d_002dhelp-and-_002d_002dversion"></a>
<a name="index-_002d_002dhelp-check"></a>
<a name="index-_002d_002dversion-check"></a>
<a name="index-std_002doptions"></a>

<p>Make the <code>installcheck</code> rule check that installed scripts and
programs support the <samp>--help</samp> and <samp>--version</samp> options.
This also provides a basic check that the program&rsquo;s
run-time dependencies are satisfied after installation.
</p>
<a name="index-AM_005fINSTALLCHECK_005fSTD_005fOPTIONS_005fEXEMPT"></a>
<p>In a few situations, programs (or scripts) have to be exempted from this
test.  For instance, <code>false</code> (from GNU coreutils) is never
successful, even for <samp>--help</samp> or <samp>--version</samp>.  You can list
such programs in the variable <code>AM_INSTALLCHECK_STD_OPTIONS_EXEMPT</code>.
Programs (not scripts) listed in this variable should be suffixed by
&lsquo;<samp>$(EXEEXT)</samp>&rsquo; for the sake of Windows or OS/2.  For instance, suppose we
build <samp>false</samp> as a program but <samp>true.sh</samp> as a script, and that
neither of them support <samp>--help</samp> or <samp>--version</samp>:
</p>
<div class="example">
<pre class="example">AUTOMAKE_OPTIONS = std-options
bin_PROGRAMS = false ...
bin_SCRIPTS = true.sh ...
AM_INSTALLCHECK_STD_OPTIONS_EXEMPT = false$(EXEEXT) true.sh
</pre></div>

</dd>
<dt><samp>subdir-objects</samp></dt>
<dd><a name="index-Options_002c-subdir_002dobjects"></a>
<a name="index-subdir_002dobjects"></a>
<p>If this option is specified, then objects are placed into the
subdirectory of the build directory corresponding to the subdirectory of
the source file.  For instance, if the source file is
<samp>subdir/file.cxx</samp>, then the output file would be
<samp>subdir/file.o</samp>.
</p>
<a name="tar_002dformats"></a></dd>
<dt><samp>tar-v7</samp></dt>
<dt><samp>tar-ustar</samp></dt>
<dt><samp>tar-pax</samp></dt>
<dd><a name="index-Option_002c-tar_002dv7"></a>
<a name="index-Option_002c-tar_002dustar"></a>
<a name="index-Option_002c-tar_002dpax"></a>
<a name="index-tar-formats"></a>
<a name="index-v7-tar-format"></a>
<a name="index-ustar-format"></a>
<a name="index-pax-format"></a>
<a name="index-tar_002dv7"></a>
<a name="index-tar_002dustar"></a>
<a name="index-tar_002dpax"></a>

<p>These three mutually exclusive options select the tar format to use
when generating tarballs with &lsquo;<samp>make dist</samp>&rsquo;.  (The tar file created
is then compressed according to the set of <samp>no-dist-gzip</samp>,
<samp>dist-bzip2</samp>, <samp>dist-lzip</samp>, <samp>dist-xz</samp> and
<samp>dist-tarZ</samp> options in use.)
</p>
<p>These options must be passed as arguments to <code>AM_INIT_AUTOMAKE</code>
(see <a href="#Macros">Macros</a>) because they can require additional configure checks.
Automake will complain if it sees such options in an
<code>AUTOMAKE_OPTIONS</code> variable.
</p>
<p><samp>tar-v7</samp> selects the old V7 tar format.  This is the historical
default.  This antiquated format is understood by all tar
implementations and supports file names with up to 99 characters.  When
given longer file names some tar implementations will diagnose the
problem while other will generate broken tarballs or use non-portable
extensions.  Furthermore, the V7 format cannot store empty
directories.  When using this format, consider using the
<samp>filename-length-max=99</samp> option to catch file names too long.
</p>
<p><samp>tar-ustar</samp> selects the ustar format defined by POSIX
1003.1-1988.  This format is believed to be old enough to be portable.
It fully supports empty directories.  It can store file names with up
to 256 characters, provided that the file name can be split at
directory separator in two parts, first of them being at most 155
bytes long.  So, in most cases the maximum file name length will be
shorter than 256 characters.  However you may run against broken tar
implementations that incorrectly handle file names longer than 99
characters (please report them to <a href="mailto:bug-automake@gnu.org">bug-automake@gnu.org</a> so we
can document this accurately).
</p>
<p><samp>tar-pax</samp> selects the new pax interchange format defined by POSIX
1003.1-2001.  It does not limit the length of file names.  However,
this format is very young and should probably be restricted to
packages that target only very modern platforms.  There are moves to
change the pax format in an upward-compatible way, so this option may
refer to a more recent version in the future.
</p>
<p>See <a href="http://www.gnu.org/software/tar/manual/tar.html#Formats">Controlling the Archive Format</a> in <cite>GNU Tar</cite>, for
further discussion about tar formats.
</p>
<p><code>configure</code> knows several ways to construct these formats.  It
will not abort if it cannot find a tool up to the task (so that the
package can still be built), but &lsquo;<samp>make dist</samp>&rsquo; will fail.
</p>
</dd>
<dt><var>version</var></dt>
<dd><a name="index-Option_002c-version"></a>
<p>A version number (e.g., &lsquo;<samp>0.30</samp>&rsquo;) can be specified.  If Automake is not
newer than the version specified, creation of the <samp>Makefile.in</samp>
will be suppressed.
</p>
</dd>
<dt><samp>-W<var>category</var></samp> or <samp>--warnings=<var>category</var></samp></dt>
<dd><a name="index-Option_002c-warnings"></a>
<a name="index-Option_002c-_002dWcategory"></a>
<a name="index-Option_002c-_002d_002dwarnings_003dcategory"></a>
<p>These options behave exactly like their command-line counterpart
(see <a href="#automake-Invocation">automake Invocation</a>).  This allows you to enable or disable some
warning categories on a per-file basis.  You can also setup some warnings
for your entire project; for instance, try &lsquo;<samp>AM_INIT_AUTOMAKE([-Wall])</samp>&rsquo;
in your <samp>configure.ac</samp>.
</p>
</dd>
</dl>

<p>Unrecognized options are diagnosed by <code>automake</code>.
</p>
<p>If you want an option to apply to all the files in the tree, you can use
the <code>AM_INIT_AUTOMAKE</code> macro in <samp>configure.ac</samp>.
See <a href="#Macros">Macros</a>.
</p>

<hr>
<a name="Miscellaneous"></a>
<div class="header">
<p>
Next: <a href="#Include" accesskey="n" rel="next">Include</a>, Previous: <a href="#Options" accesskey="p" rel="prev">Options</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Miscellaneous-Rules"></a>
<h2 class="chapter">18 Miscellaneous Rules</h2>

<p>There are a few rules and variables that didn&rsquo;t fit anywhere else.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Tags" accesskey="1">Tags</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Interfacing to cscope, etags and mkid
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Suffixes" accesskey="2">Suffixes</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Handling new file extensions
</td></tr>
</table>


<hr>
<a name="Tags"></a>
<div class="header">
<p>
Next: <a href="#Suffixes" accesskey="n" rel="next">Suffixes</a>, Up: <a href="#Miscellaneous" accesskey="u" rel="up">Miscellaneous</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Interfacing-to-etags"></a>
<h3 class="section">18.1 Interfacing to <code>etags</code></h3>

<a name="index-TAGS-support"></a>

<p>Automake will generate rules to generate <samp>TAGS</samp> files for use with
GNU Emacs under some circumstances.
</p>
<a name="index-tags"></a>
<p>If any C, C++ or Fortran 77 source code or headers are present, then
<code>tags</code> and <code>TAGS</code> rules will be generated for the directory.
All files listed using the <code>_SOURCES</code>, <code>_HEADERS</code>, and
<code>_LISP</code> primaries will be used to generate tags.  Note that
generated source files that are not distributed must be declared in
variables like <code>nodist_noinst_HEADERS</code> or
<code>nodist_<var>prog</var>_SOURCES</code> or they will be ignored.
</p>
<p>A <code>tags</code> rule will be output at the topmost directory of a
multi-directory package.  When run from this topmost directory,
&lsquo;<samp>make tags</samp>&rsquo; will generate a <samp>TAGS</samp> file that includes by
reference all <samp>TAGS</samp> files from subdirectories.
</p>
<p>The <code>tags</code> rule will also be generated if the variable
<code>ETAGS_ARGS</code> is defined.  This variable is intended for use in
directories that contain taggable source that <code>etags</code> does
not understand.  The user can use the <code>ETAGSFLAGS</code> to pass
additional flags to <code>etags</code>; <code>AM_ETAGSFLAGS</code> is also
available for use in <samp>Makefile.am</samp>.
<a name="index-ETAGS_005fARGS"></a>
<a name="index-ETAGSFLAGS"></a>
<a name="index-AM_005fETAGSFLAGS"></a>
</p>
<p>Here is how Automake generates tags for its source, and for nodes in its
Texinfo file:
</p>
<div class="example">
<pre class="example">ETAGS_ARGS = automake.in --lang=none \
 --regex='/^@node[ \t]+\([^,]+\)/\1/' automake.texi
</pre></div>

<p>If you add file names to <code>ETAGS_ARGS</code>, you will probably also
want to define <code>TAGS_DEPENDENCIES</code>.  The contents of this variable
are added directly to the dependencies for the <code>tags</code> rule.
<a name="index-TAGS_005fDEPENDENCIES"></a>
</p>
<p>Automake also generates a <code>ctags</code> rule that can be used to
build <code>vi</code>-style <samp>tags</samp> files.  The variable <code>CTAGS</code>
is the name of the program to invoke (by default <code>ctags</code>);
<code>CTAGSFLAGS</code> can be used by the user to pass additional flags,
and <code>AM_CTAGSFLAGS</code> can be used by the <samp>Makefile.am</samp>.
</p>
<a name="index-id"></a>
<p>Automake will also generate an <code>ID</code> rule that will run
<code>mkid</code> on the source.  This is only supported on a
directory-by-directory basis.
</p>
<p>Similarly, the <code>cscope</code> rule will create a list of all the source
files in the tree and run <code>cscope</code> to build an inverted index
database.  The variable <code>CSCOPE</code> is the name of the program to invoke
(by default <code>cscope</code>); <code>CSCOPEFLAGS</code> and
<code>CSCOPE_ARGS</code> can be used by the user to pass additional flags and
file names respectively, while <code>AM_CSCOPEFLAGS</code> can be used by the
<samp>Makefile.am</samp>.  Note that, currently, the Automake-provided
<code>cscope</code> support, when used in a VPATH build, might not work well
with non-GNU make implementations (especially with make implementations
performing <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Automatic-Rule-Rewriting">VPATH rewrites</a> in <cite>The Autoconf Manual</cite>).
</p>
<p>Finally, Automake also emits rules to support the
<a href="http://www.gnu.org/software/global/">GNU Global Tags program</a>.
The <code>GTAGS</code> rule runs Global Tags and puts the
result in the top build directory.  The variable <code>GTAGS_ARGS</code>
holds arguments that are passed to <code>gtags</code>.
<a name="index-GTAGS_005fARGS"></a>
</p>

<hr>
<a name="Suffixes"></a>
<div class="header">
<p>
Previous: <a href="#Tags" accesskey="p" rel="prev">Tags</a>, Up: <a href="#Miscellaneous" accesskey="u" rel="up">Miscellaneous</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Handling-new-file-extensions"></a>
<h3 class="section">18.2 Handling new file extensions</h3>

<a name="index-Adding-new-SUFFIXES"></a>
<a name="index-SUFFIXES_002c-adding"></a>
<a name="index-SUFFIXES"></a>

<p>It is sometimes useful to introduce a new implicit rule to handle a file
type that Automake does not know about.
</p>
<p>For instance, suppose you had a compiler that could compile <samp>.foo</samp>
files to <samp>.o</samp> files.  You would simply define a suffix rule for
your language:
</p>
<div class="example">
<pre class="example">.foo.o:
        foocc -c -o $@ $&lt;
</pre></div>

<p>Then you could directly use a <samp>.foo</samp> file in a <code>_SOURCES</code>
variable and expect the correct results:
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = doit
doit_SOURCES = doit.foo
</pre></div>

<p>This was the simpler and more common case.  In other cases, you will
have to help Automake to figure out which extensions you are defining your
suffix rule for.  This usually happens when your extension does not
start with a dot.  Then, all you have to do is to put a list of new
suffixes in the <code>SUFFIXES</code> variable <strong>before</strong> you define your
implicit rule.
</p>
<p>For instance, the following definition prevents Automake from misinterpreting
the &lsquo;<samp>.idlC.cpp:</samp>&rsquo; rule as an attempt to transform <samp>.idlC</samp> files into
<samp>.cpp</samp> files.
</p>
<div class="example">
<pre class="example">SUFFIXES = .idl C.cpp
.idlC.cpp:
        # whatever
</pre></div>

<p>As you may have noted, the <code>SUFFIXES</code> variable behaves like the
<code>.SUFFIXES</code> special target of <code>make</code>.  You should not touch
<code>.SUFFIXES</code> yourself, but use <code>SUFFIXES</code> instead and let
Automake generate the suffix list for <code>.SUFFIXES</code>.  Any given
<code>SUFFIXES</code> go at the start of the generated suffixes list, followed
by Automake generated suffixes not already in the list.
</p>
<hr>
<a name="Include"></a>
<div class="header">
<p>
Next: <a href="#Conditionals" accesskey="n" rel="next">Conditionals</a>, Previous: <a href="#Miscellaneous" accesskey="p" rel="prev">Miscellaneous</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Include-1"></a>
<h2 class="chapter">19 Include</h2>

<a name="index-include-1"></a>
<a name="index-Including-Makefile-fragment"></a>
<a name="index-Makefile-fragment_002c-including"></a>

<p>Automake supports an <code>include</code> directive that  can be used to
include other <samp>Makefile</samp> fragments when <code>automake</code> is run.
Note that these fragments are read and interpreted by <code>automake</code>,
not by <code>make</code>.  As with conditionals, <code>make</code> has no idea that
<code>include</code> is in use.
</p>
<p>There are two forms of <code>include</code>:
</p>
<dl compact="compact">
<dt><code>include $(srcdir)/file</code></dt>
<dd><p>Include a fragment that is found relative to the current source
directory.
</p>
</dd>
<dt><code>include $(top_srcdir)/file</code></dt>
<dd><p>Include a fragment that is found relative to the top source directory.
</p></dd>
</dl>

<p>Note that if a fragment is included inside a conditional, then the
condition applies to the entire contents of that fragment.
</p>
<p>Makefile fragments included this way are always distributed because
they are needed to rebuild <samp>Makefile.in</samp>.
</p>
<p>Inside a fragment, the construct <code>%reldir%</code> is replaced with the
directory of the fragment relative to the base <samp>Makefile.am</samp>.
Similarly, <code>%canon_reldir%</code> is replaced with the canonicalized
(see <a href="#Canonicalization">Canonicalization</a>) form of <code>%reldir%</code>.  As a convenience,
<code>%D%</code> is a synonym for <code>%reldir%</code>, and <code>%C%</code>
is a synonym for <code>%canon_reldir%</code>.
</p>
<p>A special feature is that if the fragment is in the same directory as
the base <samp>Makefile.am</samp> (i.e., <code>%reldir%</code> is <code>.</code>), then
<code>%reldir%</code> and <code>%canon_reldir%</code> will expand to the empty
string as well as eat, if present, a following slash or underscore
respectively.
</p>
<p>Thus, a makefile fragment might look like this:
</p>
<div class="example">
<pre class="example">bin_PROGRAMS += %reldir%/mumble
%canon_reldir%_mumble_SOURCES = %reldir%/one.c
</pre></div>

<hr>
<a name="Conditionals"></a>
<div class="header">
<p>
Next: <a href="#Silencing-Make" accesskey="n" rel="next">Silencing Make</a>, Previous: <a href="#Include" accesskey="p" rel="prev">Include</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Conditionals-1"></a>
<h2 class="chapter">20 Conditionals</h2>

<a name="index-Conditionals"></a>

<p>Automake supports a simple type of conditionals.
</p>
<p>These conditionals are not the same as conditionals in
GNU Make.  Automake conditionals are checked at configure time by the
<samp>configure</samp> script, and affect the translation from
<samp>Makefile.in</samp> to <samp>Makefile</samp>.  They are based on options passed
to <samp>configure</samp> and on results that <samp>configure</samp> has discovered
about the host system.  GNU Make conditionals are checked at <code>make</code>
time, and are based on variables passed to the make program or defined
in the <samp>Makefile</samp>.
</p>
<p>Automake conditionals will work with any make program.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Usage-of-Conditionals" accesskey="1">Usage of Conditionals</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Declaring conditional content
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Limits-of-Conditionals" accesskey="2">Limits of Conditionals</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Enclosing complete statements
</td></tr>
</table>

<hr>
<a name="Usage-of-Conditionals"></a>
<div class="header">
<p>
Next: <a href="#Limits-of-Conditionals" accesskey="n" rel="next">Limits of Conditionals</a>, Up: <a href="#Conditionals" accesskey="u" rel="up">Conditionals</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Usage-of-Conditionals-1"></a>
<h3 class="section">20.1 Usage of Conditionals</h3>

<a name="index-AM_005fCONDITIONAL"></a>
<p>Before using a conditional, you must define it by using
<code>AM_CONDITIONAL</code> in the <samp>configure.ac</samp> file (see <a href="#Macros">Macros</a>).
</p>
<dl>
<dt><a name="index-AM_005fCONDITIONAL-2"></a>Macro: <strong>AM_CONDITIONAL</strong> <em>(<var>conditional</var>, <var>condition</var>)</em></dt>
<dd><p>The conditional name, <var>conditional</var>, should be a simple string
starting with a letter and containing only letters, digits, and
underscores.  It must be different from &lsquo;<samp>TRUE</samp>&rsquo; and &lsquo;<samp>FALSE</samp>&rsquo;
that are reserved by Automake.
</p>
<p>The shell <var>condition</var> (suitable for use in a shell <code>if</code>
statement) is evaluated when <code>configure</code> is run.  Note that you
must arrange for <em>every</em> <code>AM_CONDITIONAL</code> to be invoked every
time <code>configure</code> is run.  If <code>AM_CONDITIONAL</code> is run
conditionally (e.g., in a shell <code>if</code> statement), then the result
will confuse <code>automake</code>.
</p></dd></dl>

<a name="index-_002d_002denable_002ddebug_002c-example"></a>
<a name="index-Example-conditional-_002d_002denable_002ddebug"></a>
<a name="index-Conditional-example_002c-_002d_002denable_002ddebug"></a>

<p>Conditionals typically depend upon options that the user provides to
the <code>configure</code> script.  Here is an example of how to write a
conditional that is true if the user uses the <samp>--enable-debug</samp>
option.
</p>
<div class="example">
<pre class="example">AC_ARG_ENABLE([debug],
[  --enable-debug    Turn on debugging],
[case &quot;${enableval}&quot; in
  yes) debug=true ;;
  no)  debug=false ;;
  *) AC_MSG_ERROR([bad value ${enableval} for --enable-debug]) ;;
esac],[debug=false])
AM_CONDITIONAL([DEBUG], [test x$debug = xtrue])
</pre></div>

<p>Here is an example of how to use that conditional in <samp>Makefile.am</samp>:
</p>
<a name="index-if"></a>
<a name="index-endif"></a>
<a name="index-else"></a>

<div class="example">
<pre class="example">if DEBUG
DBG = debug
else
DBG =
endif
noinst_PROGRAMS = $(DBG)
</pre></div>

<p>This trivial example could also be handled using <code>EXTRA_PROGRAMS</code>
(see <a href="#Conditional-Programs">Conditional Programs</a>).
</p>
<p>You may only test a single variable in an <code>if</code> statement, possibly
negated using &lsquo;<samp>!</samp>&rsquo;.  The <code>else</code> statement may be omitted.
Conditionals may be nested to any depth.  You may specify an argument to
<code>else</code> in which case it must be the negation of the condition used
for the current <code>if</code>.  Similarly you may specify the condition
that is closed on the <code>endif</code> line:
</p>
<div class="example">
<pre class="example">if DEBUG
DBG = debug
else !DEBUG
DBG =
endif !DEBUG
</pre></div>

<p>Unbalanced conditions are errors.  The <code>if</code>, <code>else</code>, and
<code>endif</code> statements should not be indented, i.e., start on column
one.
</p>
<p>The <code>else</code> branch of the above two examples could be omitted,
since assigning the empty string to an otherwise undefined variable
makes no difference.
</p>
<a name="index-AM_005fCOND_005fIF"></a>
<p>In order to allow access to the condition registered by
<code>AM_CONDITIONAL</code> inside <samp>configure.ac</samp>, and to allow
conditional <code>AC_CONFIG_FILES</code>, <code>AM_COND_IF</code> may be used:
</p>
<dl>
<dt><a name="index-AM_005fCOND_005fIF-2"></a>Macro: <strong>AM_COND_IF</strong> <em>(<var>conditional</var>, <span class="roman">[</span><var>if-true</var><span class="roman">]</span>, <span class="roman">[</span><var>if-false</var><span class="roman">]</span>)</em></dt>
<dd><p>If <var>conditional</var> is fulfilled, execute <var>if-true</var>, otherwise
execute <var>if-false</var>.  If either branch contains <code>AC_CONFIG_FILES</code>,
it will cause <code>automake</code> to output the rules for the respective
files only for the given condition.
</p></dd></dl>

<p><code>AM_COND_IF</code> macros may be nested when m4 quotation is used
properly (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#M4-Quotation">M4 Quotation</a> in <cite>The Autoconf Manual</cite>).
</p>
<a name="index-Example-conditional-AC_005fCONFIG_005fFILES"></a>
<a name="index-AC_005fCONFIG_005fFILES_002c-conditional"></a>

<p>Here is an example of how to define a conditional config file:
</p>
<div class="example">
<pre class="example">AM_CONDITIONAL([SHELL_WRAPPER], [test &quot;x$with_wrapper&quot; = xtrue])
AM_COND_IF([SHELL_WRAPPER],
           [AC_CONFIG_FILES([wrapper:wrapper.in])])
</pre></div>

<hr>
<a name="Limits-of-Conditionals"></a>
<div class="header">
<p>
Previous: <a href="#Usage-of-Conditionals" accesskey="p" rel="prev">Usage of Conditionals</a>, Up: <a href="#Conditionals" accesskey="u" rel="up">Conditionals</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Limits-of-Conditionals-1"></a>
<h3 class="section">20.2 Limits of Conditionals</h3>

<p>Conditionals should enclose complete statements like variables or
rules definitions.  Automake cannot deal with conditionals used inside
a variable definition, for instance, and is not even able to diagnose
this situation.  The following example would not work:
</p>
<div class="example">
<pre class="example"># This syntax is not understood by Automake
AM_CPPFLAGS = \
  -DFEATURE_A \
if WANT_DEBUG
  -DDEBUG \
endif
  -DFEATURE_B
</pre></div>

<p>However the intended definition of <code>AM_CPPFLAGS</code> can be achieved
with
</p>
<div class="example">
<pre class="example">if WANT_DEBUG
  DEBUGFLAGS = -DDEBUG
endif
AM_CPPFLAGS = -DFEATURE_A $(DEBUGFLAGS) -DFEATURE_B
</pre></div>

<p>or
</p>
<div class="example">
<pre class="example">AM_CPPFLAGS = -DFEATURE_A
if WANT_DEBUG
AM_CPPFLAGS += -DDEBUG
endif
AM_CPPFLAGS += -DFEATURE_B
</pre></div>

<p>More details and examples of conditionals are described alongside
various Automake features in this manual (see <a href="#Conditional-Subdirectories">Conditional Subdirectories</a>, see <a href="#Conditional-Sources">Conditional Sources</a>, see <a href="#Conditional-Programs">Conditional Programs</a>, see <a href="#Conditional-Libtool-Libraries">Conditional Libtool Libraries</a>, see <a href="#Conditional-Libtool-Sources">Conditional Libtool Sources</a>).
</p>
<hr>
<a name="Silencing-Make"></a>
<div class="header">
<p>
Next: <a href="#Gnits" accesskey="n" rel="next">Gnits</a>, Previous: <a href="#Conditionals" accesskey="p" rel="prev">Conditionals</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Silencing-make"></a>
<h2 class="chapter">21 Silencing <code>make</code></h2>

<a name="index-Silent-make"></a>
<a name="index-Silencing-make"></a>
<a name="index-Silent-rules"></a>
<a name="index-Silent-make-rules"></a>

<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Make-verbosity" accesskey="1">Make verbosity</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Make is verbose by default
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Tricks-For-Silencing-Make" accesskey="2">Tricks For Silencing Make</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Standard and generic ways to silence make
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Automake-Silent-Rules" accesskey="3">Automake Silent Rules</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How Automake can help in silencing make
</td></tr>
</table>

<hr>
<a name="Make-verbosity"></a>
<div class="header">
<p>
Next: <a href="#Tricks-For-Silencing-Make" accesskey="n" rel="next">Tricks For Silencing Make</a>, Up: <a href="#Silencing-Make" accesskey="u" rel="up">Silencing Make</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Make-is-verbose-by-default"></a>
<h3 class="section">21.1 Make is verbose by default</h3>

<p>Normally, when executing the set of rules associated with a target,
<code>make</code> prints each rule before it is executed.  This behaviour,
while having been in place for a long time, and being even mandated by
the POSIX standard, starkly violates the &ldquo;silence is golden&rdquo; UNIX
principle<a name="DOCF7" href="#FOOT7"><sup>7</sup></a>:
</p>
<blockquote>
<p>When a program has nothing interesting or surprising to say, it should
say nothing.  Well-behaved Unix programs do their jobs unobtrusively,
with a minimum of fuss and bother.  Silence is golden.
</p></blockquote>

<p>In fact, while such verbosity of <code>make</code> can theoretically be
useful to track bugs and understand reasons of failures right away, it
can also hide warning and error messages from <code>make</code>-invoked
tools, drowning them in a flood of uninteresting and seldom useful
messages, and thus allowing them to go easily undetected.
</p>
<p>This problem can be very annoying, especially for developers, who usually
know quite well what&rsquo;s going on behind the scenes, and for whom the
verbose output from <code>make</code> ends up being mostly noise that hampers
the easy detection of potentially important warning messages.
</p>
<hr>
<a name="Tricks-For-Silencing-Make"></a>
<div class="header">
<p>
Next: <a href="#Automake-Silent-Rules" accesskey="n" rel="next">Automake Silent Rules</a>, Previous: <a href="#Make-verbosity" accesskey="p" rel="prev">Make verbosity</a>, Up: <a href="#Silencing-Make" accesskey="u" rel="up">Silencing Make</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Standard-and-generic-ways-to-silence-make"></a>
<h3 class="section">21.2 Standard and generic ways to silence make</h3>

<p>Here we describe some common idioms/tricks to obtain a quieter make
output, with their relative advantages and drawbacks.  In the next
section (<a href="#Automake-Silent-Rules">Automake Silent Rules</a>) we&rsquo;ll see how Automake can help
in this respect, providing more elaborate and flexible idioms.
</p>
<ul>
<li> <code>make -s</code>

<p>This simply causes <code>make</code> not to print <em>any</em> rule before
executing it.
</p>
<p>The <samp>-s</samp> flag is mandated by POSIX, universally supported, and
its purpose and function are easy to understand.
</p>
<p>But it also has its serious limitations too.  First of all, it embodies
an &ldquo;all or nothing&rdquo; strategy, i.e., either everything is silenced, or
nothing is; this lack of granularity can sometimes be a fatal flaw.
Moreover, when the <samp>-s</samp> flag is used, the <code>make</code> output
might turn out to be too much terse; in case of errors, the user won&rsquo;t
be able to easily see what rule or command have caused them, or even,
in case of tools with poor error reporting, what the errors were!
</p>
</li><li> <code>make &gt;/dev/null || make</code>

<p>Apparently, this perfectly obeys the &ldquo;silence is golden&rdquo; rule: warnings
from stderr are passed through, output reporting is done only in case of
error, and in that case it should provide a verbose-enough report to allow
an easy determination of the error location and causes.
</p>
<p>However, calling <code>make</code> two times in a row might hide errors
(especially intermittent ones), or subtly change the expected semantic
of the <code>make</code> calls &mdash; things these which can clearly make
debugging and error assessment very difficult.
</p>
</li><li> <code>make --no-print-directory</code>

<p>This is GNU <code>make</code> specific.  When called with the
<samp>--no-print-directory</samp> option, GNU <code>make</code> will disable
printing of the working directory by invoked sub-<code>make</code>s (the
well-known &ldquo;<i>Entering/Leaving directory ...</i>&rdquo; messages).  This helps
to decrease the verbosity of the output, but experience has shown that
it can also often render debugging considerably harder in projects using
deeply-nested <code>make</code> recursion.
</p>
<p>As an aside, notice that the <samp>--no-print-directory</samp> option is
automatically activated if the <samp>-s</samp> flag is used.
</p>

</li></ul>

<hr>
<a name="Automake-Silent-Rules"></a>
<div class="header">
<p>
Previous: <a href="#Tricks-For-Silencing-Make" accesskey="p" rel="prev">Tricks For Silencing Make</a>, Up: <a href="#Silencing-Make" accesskey="u" rel="up">Silencing Make</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="How-Automake-can-help-in-silencing-make"></a>
<h3 class="section">21.3 How Automake can help in silencing make</h3>

<p>The tricks and idioms for silencing <code>make</code> described in the
previous section can be useful from time to time, but we&rsquo;ve seen that
they all have their serious drawbacks and limitations.  That&rsquo;s why
automake provides support for a more advanced and flexible way of
obtaining quieter output from <code>make</code> (for most rules at least).
</p>
<p>To give the gist of what Automake can do in this respect, here is a simple
comparison between a typical <code>make</code> output (where silent rules
are disabled) and one with silent rules enabled:
</p>
<div class="example">
<pre class="example">% <kbd>cat Makefile.am</kbd>
bin_PROGRAMS = foo
foo_SOURCES = main.c func.c
% <kbd>cat main.c</kbd>
int main (void) { return func (); }  /* func used undeclared */
% <kbd>cat func.c</kbd>
int func (void) { int i; return i; } /* i used uninitialized */

<i>The make output is by default very verbose.  This causes warnings
from the compiler to be somewhat hidden, and not immediate to spot.</i>
% <kbd>make CFLAGS=-Wall</kbd>
gcc -DPACKAGE_NAME=\&quot;foo\&quot; -DPACKAGE_TARNAME=\&quot;foo\&quot; ...
-DPACKAGE_STRING=\&quot;foo\ 1.0\&quot; -DPACKAGE_BUGREPORT=\&quot;\&quot; ...
-DPACKAGE=\&quot;foo\&quot; -DVERSION=\&quot;1.0\&quot; -I. -Wall -MT main.o
-MD -MP -MF .deps/main.Tpo -c -o main.o main.c
main.c: In function ‘main’:
main.c:3:3: warning: implicit declaration of function ‘func’
mv -f .deps/main.Tpo .deps/main.Po
gcc -DPACKAGE_NAME=\&quot;foo\&quot; -DPACKAGE_TARNAME=\&quot;foo\&quot; ...
-DPACKAGE_STRING=\&quot;foo\ 1.0\&quot; -DPACKAGE_BUGREPORT=\&quot;\&quot; ...
-DPACKAGE=\&quot;foo\&quot; -DVERSION=\&quot;1.0\&quot; -I. -Wall -MT func.o
-MD -MP -MF .deps/func.Tpo -c -o func.o func.c
func.c: In function ‘func’:
func.c:4:3: warning: ‘i’ used uninitialized in this function
mv -f .deps/func.Tpo .deps/func.Po
gcc -Wall -o foo main.o func.o

<i>Clean up, so that we we can rebuild everything from scratch.</i>
% <kbd>make clean</kbd>
test -z &quot;foo&quot; || rm -f foo
rm -f *.o

<i>Silent rules enabled: the output is minimal but informative.  In
particular, the warnings from the compiler stick out very clearly.</i>
% <kbd>make V=0 CFLAGS=-Wall</kbd>
  CC     main.o
main.c: In function ‘main’:
main.c:3:3: warning: implicit declaration of function ‘func’
  CC     func.o
func.c: In function ‘func’:
func.c:4:3: warning: ‘i’ used uninitialized in this function
  CCLD   foo
</pre></div>

<a name="index-silent-rules-and-libtool"></a>
<p>Also, in projects using <code>libtool</code>, the use of silent rules can
automatically enable the <code>libtool</code>&rsquo;s <samp>--silent</samp> option:
</p>
<div class="example">
<pre class="example">% <kbd>cat Makefile.am</kbd>
lib_LTLIBRARIES = libx.la

% <kbd>make # Both make and libtool are verbose by default.</kbd>
...
libtool: compile: gcc -DPACKAGE_NAME=\&quot;foo\&quot; ... -DLT_OBJDIR=\&quot;.libs/\&quot;
  -I. -g -O2 -MT libx.lo -MD -MP -MF .deps/libx.Tpo -c libx.c -fPIC
  -DPIC -o .libs/libx.o
mv -f .deps/libx.Tpo .deps/libx.Plo
/bin/sh ./libtool --tag=CC --mode=link gcc -g -O2 -o libx.la -rpath
  /usr/local/lib libx.lo
libtool: link: gcc -shared .libs/libx.o -Wl,-soname -Wl,libx.so.0
  -o .libs/libx.so.0.0.0
libtool: link: cd .libs &amp;&amp; rm -f libx.so &amp;&amp; ln -s libx.so.0.0.0 libx.so
...

% <kbd>make V=0</kbd>
  CC     libx.lo
  CCLD   libx.la
</pre></div>

<p>For Automake-generated <samp>Makefile</samp>s, the user may influence the
verbosity at <code>configure</code> run time as well as at <code>make</code>
run time:
</p>
<ul>
<li> <a name="index-_002d_002denable_002dsilent_002drules"></a>
<a name="index-_002d_002ddisable_002dsilent_002drules"></a>
Passing <samp>--enable-silent-rules</samp> to <code>configure</code> will cause
build rules to be less verbose; the option <samp>--disable-silent-rules</samp>
will cause normal verbose output.
</li><li> <a name="index-V"></a>
At <code>make</code> run time, the default chosen at <code>configure</code>
time may be overridden: <code>make V=1</code> will produce verbose output,
<code>make V=0</code> less verbose output.
</li></ul>

<a name="index-default-verbosity-for-silent-rules"></a>
<p>Note that silent rules are <em>disabled</em> by default; the user must
enable them explicitly at either <code>configure</code> run time or at
<code>make</code> run time.  We think that this is a good policy, since
it provides the casual user with enough information to prepare a good
bug report in case anything breaks.
</p>
<p>Still, notwithstanding the rationales above, a developer who really
wants to make silent rules enabled by default in his own package can
do so by calling <code>AM_SILENT_RULES([yes])</code> in <samp>configure.ac</samp>.
</p>
<p>Users who prefer to have silent rules enabled by default can edit their
<samp>config.site</samp> file to make the variable <code>enable_silent_rules</code>
default to &lsquo;<samp>yes</samp>&rsquo;.  This should still allow disabling silent rules
at <code>configure</code> time and at <code>make</code> time.
</p>
<p>For portability to different <code>make</code> implementations, package authors
are advised to not set the variable <code>V</code> inside the <samp>Makefile.am</samp>
file, to allow the user to override the value for subdirectories as well.
</p>
<p>To work at its best, the current implementation of this feature normally
uses nested variable expansion &lsquo;<samp>$(<var>var1</var>$(V))</samp>&rsquo;, a <samp>Makefile</samp>
feature that is not required by POSIX 2008 but is widely supported in
practice.  On the rare <code>make</code> implementations that do not support
nested variable expansion, whether rules are silent is always determined at
configure time, and cannot be overridden at make time.  Future versions of
POSIX are likely to require nested variable expansion, so this minor
limitation should go away with time.
</p>
<a name="index-AM_005fV_005fGEN"></a>
<a name="index-AM_005fV_005fat"></a>
<a name="index-AM_005fDEFAULT_005fVERBOSITY"></a>
<a name="index-AM_005fV"></a>
<a name="index-AM_005fDEFAULT_005fV"></a>
<p>To extend the silent mode to your own rules, you have few choices:
</p>
<ul>
<li> You can use the predefined variable <code>AM_V_GEN</code> as a prefix to
commands that should output a status line in silent mode, and
<code>AM_V_at</code> as a prefix to commands that should not output anything
in silent mode.  When output is to be verbose, both of these variables
will expand to the empty string.

</li><li> You can silence a recipe unconditionally with <code>@</code>, and then use
the predefined variable <code>AM_V_P</code> to know whether make is being run
in silent or verbose mode, adjust the verbose information your recipe
displays accordingly:

<div class="example">
<pre class="example">generate-headers:
                ... [commands defining a shell variable '$headers'] ...; \
        if $(AM_V_P); then set -x; else echo &quot; GEN   [headers]&quot;; fi; \
        rm -f $$headers &amp;&amp; generate-header --flags $$headers
</pre></div>

</li><li> You can add your own variables, so strings of your own choice are shown.
The following snippet shows how you would define your own equivalent of
<code>AM_V_GEN</code>:

<div class="example">
<pre class="example">pkg_verbose = $(pkg_verbose_@AM_V@)
pkg_verbose_ = $(pkg_verbose_@AM_DEFAULT_V@)
pkg_verbose_0 = @echo PKG-GEN $@;

foo: foo.in
        $(pkg_verbose)cp $(srcdir)/foo.in $@
</pre></div>

</li></ul>

<p>As a final note, observe that, even when silent rules are enabled,
the <samp>--no-print-directory</samp> option is still required with GNU
<code>make</code> if the &ldquo;<i>Entering/Leaving directory ...</i>&rdquo; messages
are to be disabled.
</p>
<hr>
<a name="Gnits"></a>
<div class="header">
<p>
Next: <a href="#Not-Enough" accesskey="n" rel="next">Not Enough</a>, Previous: <a href="#Silencing-Make" accesskey="p" rel="prev">Silencing Make</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="The-effect-of-_002d_002dgnu-and-_002d_002dgnits"></a>
<h2 class="chapter">22 The effect of <samp>--gnu</samp> and <samp>--gnits</samp></h2>

<a name="index-_002d_002dgnu_002c-required-files"></a>
<a name="index-_002d_002dgnu_002c-complete-description"></a>

<p>The <samp>--gnu</samp> option (or <samp>gnu</samp> in the
<code>AUTOMAKE_OPTIONS</code> variable) causes <code>automake</code> to check
the following:
</p>
<ul>
<li> The files <samp>INSTALL</samp>, <samp>NEWS</samp>, <samp>README</samp>, <samp>AUTHORS</samp>,
and <samp>ChangeLog</samp>, plus one of <samp>COPYING.LIB</samp>, <samp>COPYING.LESSER</samp>
or <samp>COPYING</samp>, are required at the topmost directory of the package.

<p>If the <samp>--add-missing</samp> option is given, <code>automake</code> will
add a generic version of the <samp>INSTALL</samp> file as well as the
<samp>COPYING</samp> file containing the text of the current version of the
GNU General Public License existing at the time of this Automake release
(version 3 as this is written, <a href="http://www.gnu.org/copyleft/gpl.html">http://www.gnu.org/copyleft/gpl.html</a>).
However, an existing <samp>COPYING</samp> file will never be overwritten by
<code>automake</code>.
</p>
</li><li> The options <samp>no-installman</samp> and <samp>no-installinfo</samp> are
prohibited.
</li></ul>

<p>Note that this option will be extended in the future to do even more
checking; it is advisable to be familiar with the precise requirements
of the GNU standards.  Also, <samp>--gnu</samp> can require certain
non-standard GNU programs to exist for use by various maintainer-only
rules; for instance, in the future <code>pathchk</code> might be required for
&lsquo;<samp>make dist</samp>&rsquo;.
</p>
<a name="index-_002d_002dgnits_002c-complete-description"></a>

<p>The <samp>--gnits</samp> option does everything that <samp>--gnu</samp> does, and
checks the following as well:
</p>
<ul>
<li> &lsquo;<samp>make installcheck</samp>&rsquo; will check to make sure that the <samp>--help</samp>
and <samp>--version</samp> really print a usage message and a version string,
respectively.  This is the <samp>std-options</samp> option (see <a href="#Options">Options</a>).

</li><li> &lsquo;<samp>make dist</samp>&rsquo; will check to make sure the <samp>NEWS</samp> file has been
updated to the current version.

</li><li> <code>VERSION</code> is checked to make sure its format complies with Gnits
standards.

</li><li> <a name="index-README_002dalpha"></a>
If <code>VERSION</code> indicates that this is an alpha release, and the file
<samp>README-alpha</samp> appears in the topmost directory of a package, then
it is included in the distribution.  This is done in <samp>--gnits</samp>
mode, and no other, because this mode is the only one where version
number formats are constrained, and hence the only mode where Automake
can automatically determine whether <samp>README-alpha</samp> should be
included.

</li><li> The file <samp>THANKS</samp> is required.
</li></ul>


<hr>
<a name="Not-Enough"></a>
<div class="header">
<p>
Next: <a href="#Distributing" accesskey="n" rel="next">Distributing</a>, Previous: <a href="#Gnits" accesskey="p" rel="prev">Gnits</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="When-Automake-Isn_0027t-Enough"></a>
<h2 class="chapter">23 When Automake Isn&rsquo;t Enough</h2>

<p>In some situations, where Automake is not up to one task, one has to
resort to handwritten rules or even handwritten <samp>Makefile</samp>s.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Extending" accesskey="1">Extending</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Adding new rules or overriding existing ones.
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Third_002dParty-Makefiles" accesskey="2">Third-Party Makefiles</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Integrating Non-Automake <samp>Makefile</samp>s.
</td></tr>
</table>

<hr>
<a name="Extending"></a>
<div class="header">
<p>
Next: <a href="#Third_002dParty-Makefiles" accesskey="n" rel="next">Third-Party Makefiles</a>, Up: <a href="#Not-Enough" accesskey="u" rel="up">Not Enough</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Extending-Automake-Rules"></a>
<h3 class="section">23.1 Extending Automake Rules</h3>

<p>With some minor exceptions (for example <code>_PROGRAMS</code> variables,
<code>TESTS</code>, or <code>XFAIL_TESTS</code>) being rewritten to append
&lsquo;<samp>$(EXEEXT)</samp>&rsquo;), the contents of a <samp>Makefile.am</samp> is copied to
<samp>Makefile.in</samp> verbatim.
</p>
<a name="index-copying-semantics"></a>

<p>These copying semantics mean that many problems can be worked around
by simply adding some <code>make</code> variables and rules to
<samp>Makefile.am</samp>.  Automake will ignore these additions.
</p>
<a name="index-conflicting-definitions"></a>
<a name="index-rules_002c-conflicting"></a>
<a name="index-variables_002c-conflicting"></a>
<a name="index-definitions_002c-conflicts"></a>

<p>Since a <samp>Makefile.in</samp> is built from data gathered from three
different places (<samp>Makefile.am</samp>, <samp>configure.ac</samp>, and
<code>automake</code> itself), it is possible to have conflicting
definitions of rules or variables.  When building <samp>Makefile.in</samp>
the following priorities are respected by <code>automake</code> to ensure
the user always has the last word:
</p>
<ul>
<li> User defined variables in <samp>Makefile.am</samp> have priority over
variables <code>AC_SUBST</code>ed from <samp>configure.ac</samp>, and
<code>AC_SUBST</code>ed variables have priority over
<code>automake</code>-defined variables.
</li><li> As far as rules are concerned, a user-defined rule overrides any
<code>automake</code>-defined rule for the same target.
</li></ul>

<a name="index-overriding-rules"></a>
<a name="index-overriding-semantics"></a>
<a name="index-rules_002c-overriding"></a>

<p>These overriding semantics make it possible to fine tune some default
settings of Automake, or replace some of its rules.  Overriding
Automake rules is often inadvisable, particularly in the topmost
directory of a package with subdirectories.  The <samp>-Woverride</samp>
option (see <a href="#automake-Invocation">automake Invocation</a>) comes in handy to catch overridden
definitions.
</p>
<p>Note that Automake does not make any distinction between rules with
commands and rules that only specify dependencies.  So it is not
possible to append new dependencies to an <code>automake</code>-defined
target without redefining the entire rule.
</p>
<a name="index-_002dlocal-targets"></a>
<a name="index-local-targets"></a>

<p>However, various useful targets have a &lsquo;<samp>-local</samp>&rsquo; version you can
specify in your <samp>Makefile.am</samp>.  Automake will supplement the
standard target with these user-supplied targets.
</p>
<a name="index-all-1"></a>
<a name="index-all_002dlocal"></a>
<a name="index-info-1"></a>
<a name="index-info_002dlocal"></a>
<a name="index-dvi-1"></a>
<a name="index-dvi_002dlocal"></a>
<a name="index-ps-1"></a>
<a name="index-ps_002dlocal"></a>
<a name="index-pdf-1"></a>
<a name="index-pdf_002dlocal"></a>
<a name="index-html-1"></a>
<a name="index-html_002dlocal"></a>
<a name="index-check-2"></a>
<a name="index-check_002dlocal"></a>
<a name="index-install-2"></a>
<a name="index-install_002ddata-2"></a>
<a name="index-install_002ddata_002dlocal-1"></a>
<a name="index-install_002ddvi-1"></a>
<a name="index-install_002ddvi_002dlocal"></a>
<a name="index-install_002dexec-2"></a>
<a name="index-install_002dexec_002dlocal-1"></a>
<a name="index-install_002dhtml-1"></a>
<a name="index-install_002dhtml_002dlocal"></a>
<a name="index-install_002dinfo-2"></a>
<a name="index-install_002dinfo_002dlocal"></a>
<a name="index-install_002dpdf-1"></a>
<a name="index-install_002dpdf_002dlocal"></a>
<a name="index-install_002dps-1"></a>
<a name="index-install_002dps_002dlocal"></a>
<a name="index-uninstall-2"></a>
<a name="index-uninstall_002dlocal"></a>
<a name="index-mostlyclean"></a>
<a name="index-mostlyclean_002dlocal-1"></a>
<a name="index-clean-1"></a>
<a name="index-clean_002dlocal-1"></a>
<a name="index-distclean-1"></a>
<a name="index-distclean_002dlocal-1"></a>
<a name="index-installdirs-1"></a>
<a name="index-installdirs_002dlocal"></a>
<a name="index-installcheck-1"></a>
<a name="index-installcheck_002dlocal"></a>

<p>The targets that support a local version are <code>all</code>, <code>info</code>,
<code>dvi</code>, <code>ps</code>, <code>pdf</code>, <code>html</code>, <code>check</code>,
<code>install-data</code>, <code>install-dvi</code>, <code>install-exec</code>,
<code>install-html</code>, <code>install-info</code>, <code>install-pdf</code>,
<code>install-ps</code>, <code>uninstall</code>, <code>installdirs</code>,
<code>installcheck</code> and the various <code>clean</code> targets
(<code>mostlyclean</code>, <code>clean</code>, <code>distclean</code>, and
<code>maintainer-clean</code>).
</p>
<p>Note that there are no <code>uninstall-exec-local</code> or
<code>uninstall-data-local</code> targets; just use <code>uninstall-local</code>.
It doesn&rsquo;t make sense to uninstall just data or just executables.
</p>
<p>For instance, here is one way to erase a subdirectory during
&lsquo;<samp>make clean</samp>&rsquo; (see <a href="#Clean">Clean</a>).
</p>
<div class="example">
<pre class="example">clean-local:
        -rm -rf testSubDir
</pre></div>

<p>You may be tempted to use <code>install-data-local</code> to install a file
to some hard-coded location, but you should avoid this
(see <a href="#Hard_002dCoded-Install-Paths">Hard-Coded Install Paths</a>).
</p>
<p>With the <code>-local</code> targets, there is no particular guarantee of
execution order; typically, they are run early, but with parallel
make, there is no way to be sure of that.
</p>
<a name="index-_002dhook-targets"></a>
<a name="index-hook-targets"></a>
<a name="index-install_002ddata_002dhook"></a>
<a name="index-install_002dexec_002dhook"></a>
<a name="index-uninstall_002dhook"></a>
<a name="index-dist_002dhook-1"></a>

<p>In contrast, some rules also have a way to run another rule, called a
<em>hook</em>; hooks are always executed after the main rule&rsquo;s work is done.
The hook is named after the principal target, with &lsquo;<samp>-hook</samp>&rsquo; appended.
The targets allowing hooks are <code>install-data</code>,
<code>install-exec</code>, <code>uninstall</code>, <code>dist</code>, and
<code>distcheck</code>.
</p>
<p>For instance, here is how to create a hard link to an installed program:
</p>
<div class="example">
<pre class="example">install-exec-hook:
        ln $(DESTDIR)$(bindir)/program$(EXEEXT) \
           $(DESTDIR)$(bindir)/proglink$(EXEEXT)
</pre></div>

<p>Although cheaper and more portable than symbolic links, hard links
will not work everywhere (for instance, OS/2 does not have
<code>ln</code>).  Ideally you should fall back to &lsquo;<samp>cp -p</samp>&rsquo; when
<code>ln</code> does not work.  An easy way, if symbolic links are
acceptable to you, is to add <code>AC_PROG_LN_S</code> to
<samp>configure.ac</samp> (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Particular-Programs">Particular Program
Checks</a> in <cite>The Autoconf Manual</cite>) and use &lsquo;<samp>$(LN_S)</samp>&rsquo; in
<samp>Makefile.am</samp>.
</p>
<a name="index-versioned-binaries_002c-installing"></a>
<a name="index-installing-versioned-binaries"></a>
<a name="index-LN_005fS-example"></a>
<p>For instance, here is how you could install a versioned copy of a
program using &lsquo;<samp>$(LN_S)</samp>&rsquo;:
</p>
<div class="example">
<pre class="example">install-exec-hook:
        cd $(DESTDIR)$(bindir) &amp;&amp; \
          mv -f prog$(EXEEXT) prog-$(VERSION)$(EXEEXT) &amp;&amp; \
          $(LN_S) prog-$(VERSION)$(EXEEXT) prog$(EXEEXT)
</pre></div>

<p>Note that we rename the program so that a new version will erase the
symbolic link, not the real binary.  Also we <code>cd</code> into the
destination directory in order to create relative links.
</p>
<p>When writing <code>install-exec-hook</code> or <code>install-data-hook</code>,
please bear in mind that the exec/data distinction is based on the
installation directory, not on the primary used (see <a href="#The-Two-Parts-of-Install">The Two Parts of Install</a>).
So a <code>foo_SCRIPTS</code> will be installed by
<code>install-data</code>, and a <code>barexec_SCRIPTS</code> will be installed by
<code>install-exec</code>.  You should define your hooks consequently.
</p>

<hr>
<a name="Third_002dParty-Makefiles"></a>
<div class="header">
<p>
Previous: <a href="#Extending" accesskey="p" rel="prev">Extending</a>, Up: <a href="#Not-Enough" accesskey="u" rel="up">Not Enough</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Third_002dParty-Makefiles-1"></a>
<h3 class="section">23.2 Third-Party <samp>Makefile</samp>s</h3>

<a name="index-Third_002dparty-packages_002c-interfacing-with"></a>
<a name="index-Interfacing-with-third_002dparty-packages"></a>

<p>In most projects all <samp>Makefile</samp>s are generated by Automake.  In
some cases, however, projects need to embed subdirectories with
handwritten <samp>Makefile</samp>s.  For instance, one subdirectory could be
a third-party project with its own build system, not using Automake.
</p>
<p>It is possible to list arbitrary directories in <code>SUBDIRS</code> or
<code>DIST_SUBDIRS</code> provided each of these directories has a
<samp>Makefile</samp> that recognizes all the following recursive targets.
</p>
<a name="index-recursive-targets-and-third_002dparty-Makefiles"></a>
<p>When a user runs one of these targets, that target is run recursively
in all subdirectories.  This is why it is important that even
third-party <samp>Makefile</samp>s support them.
</p>
<dl compact="compact">
<dt><code>all</code></dt>
<dd><p>Compile the entire package.  This is the default target in
Automake-generated <samp>Makefile</samp>s, but it does not need to be the
default in third-party <samp>Makefile</samp>s.
</p>
</dd>
<dt><code>distdir</code></dt>
<dd><a name="index-distdir"></a>
<a name="index-distdir-2"></a>
<a name="index-top_005fdistdir-1"></a>
<p>Copy files to distribute into &lsquo;<samp>$(distdir)</samp>&rsquo;, before a tarball is
constructed.  Of course this target is not required if the
<samp>no-dist</samp> option (see <a href="#Options">Options</a>) is used.
</p>
<p>The variables &lsquo;<samp>$(top_distdir)</samp>&rsquo; and &lsquo;<samp>$(distdir)</samp>&rsquo;
(see <a href="#The-dist-Hook">The dist Hook</a>) will be passed from the outer package to the subpackage
when the <code>distdir</code> target is invoked.  These two variables have
been adjusted for the directory that is being recursed into, so they
are ready to use.
</p>
</dd>
<dt><code>install</code></dt>
<dt><code>install-data</code></dt>
<dt><code>install-exec</code></dt>
<dt><code>uninstall</code></dt>
<dd><p>Install or uninstall files (see <a href="#Install">Install</a>).
</p>
</dd>
<dt><code>install-dvi</code></dt>
<dt><code>install-html</code></dt>
<dt><code>install-info</code></dt>
<dt><code>install-ps</code></dt>
<dt><code>install-pdf</code></dt>
<dd><p>Install only some specific documentation format (see <a href="#Texinfo">Texinfo</a>).
</p>
</dd>
<dt><code>installdirs</code></dt>
<dd><p>Create install directories, but do not install any files.
</p>
</dd>
<dt><code>check</code></dt>
<dt><code>installcheck</code></dt>
<dd><p>Check the package (see <a href="#Tests">Tests</a>).
</p>
</dd>
<dt><code>mostlyclean</code></dt>
<dt><code>clean</code></dt>
<dt><code>distclean</code></dt>
<dt><code>maintainer-clean</code></dt>
<dd><p>Cleaning rules (see <a href="#Clean">Clean</a>).
</p>
</dd>
<dt><code>dvi</code></dt>
<dt><code>pdf</code></dt>
<dt><code>ps</code></dt>
<dt><code>info</code></dt>
<dt><code>html</code></dt>
<dd><p>Build the documentation in various formats (see <a href="#Texinfo">Texinfo</a>).
</p>
</dd>
<dt><code>tags</code></dt>
<dt><code>ctags</code></dt>
<dd><p>Build <samp>TAGS</samp> and <samp>CTAGS</samp> (see <a href="#Tags">Tags</a>).
</p></dd>
</dl>

<p>If you have ever used Gettext in a project, this is a good example of
how third-party <samp>Makefile</samp>s can be used with Automake.  The
<samp>Makefile</samp>s <code>gettextize</code> puts in the <samp>po/</samp> and
<samp>intl/</samp> directories are handwritten <samp>Makefile</samp>s that
implement all of these targets.  That way they can be added to
<code>SUBDIRS</code> in Automake packages.
</p>
<p>Directories that are only listed in <code>DIST_SUBDIRS</code> but not in
<code>SUBDIRS</code> need only the <code>distclean</code>,
<code>maintainer-clean</code>, and <code>distdir</code> rules (see <a href="#Conditional-Subdirectories">Conditional Subdirectories</a>).
</p>
<p>Usually, many of these rules are irrelevant to the third-party
subproject, but they are required for the whole package to work.  It&rsquo;s
OK to have a rule that does nothing, so if you are integrating a
third-party project with no documentation or tag support, you could
simply augment its <samp>Makefile</samp> as follows:
</p>
<div class="example">
<pre class="example">EMPTY_AUTOMAKE_TARGETS = dvi pdf ps info html tags ctags
.PHONY: $(EMPTY_AUTOMAKE_TARGETS)
$(EMPTY_AUTOMAKE_TARGETS):
</pre></div>

<p>Another aspect of integrating third-party build systems is whether
they support VPATH builds (see <a href="#VPATH-Builds">VPATH Builds</a>).  Obviously if the
subpackage does not support VPATH builds the whole package will not
support VPATH builds.  This in turns means that &lsquo;<samp>make distcheck</samp>&rsquo;
will not work, because it relies on VPATH builds.  Some people can
live without this (actually, many Automake users have never heard of
&lsquo;<samp>make distcheck</samp>&rsquo;).  Other people may prefer to revamp the
existing <samp>Makefile</samp>s to support VPATH.  Doing so does not
necessarily require Automake, only Autoconf is needed (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Build-Directories">Build Directories</a> in <cite>The Autoconf Manual</cite>).
The necessary substitutions: &lsquo;<samp>@srcdir@</samp>&rsquo;, &lsquo;<samp>@top_srcdir@</samp>&rsquo;,
and &lsquo;<samp>@top_builddir@</samp>&rsquo; are defined by <samp>configure</samp> when it
processes a <samp>Makefile</samp> (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Preset-Output-Variables">Preset
Output Variables</a> in <cite>The Autoconf Manual</cite>), they are not
computed by the Makefile like the aforementioned &lsquo;<samp>$(distdir)</samp>&rsquo; and
&lsquo;<samp>$(top_distdir)</samp>&rsquo; variables.
</p>
<p>It is sometimes inconvenient to modify a third-party <samp>Makefile</samp>
to introduce the above required targets.  For instance, one may want to
keep the third-party sources untouched to ease upgrades to new
versions.
</p>
<a name="index-GNUmakefile-including-Makefile"></a>
<p>Here are two other ideas.  If GNU make is assumed, one possibility is
to add to that subdirectory a <samp>GNUmakefile</samp> that defines the
required targets and includes the third-party <samp>Makefile</samp>.  For
this to work in VPATH builds, <samp>GNUmakefile</samp> must lie in the build
directory; the easiest way to do this is to write a
<samp>GNUmakefile.in</samp> instead, and have it processed with
<code>AC_CONFIG_FILES</code> from the outer package.  For example if we
assume <samp>Makefile</samp> defines all targets except the documentation
targets, and that the <code>check</code> target is actually called
<code>test</code>, we could write <samp>GNUmakefile</samp> (or
<samp>GNUmakefile.in</samp>) like this:
</p>
<div class="example">
<pre class="example"># First, include the real Makefile
include Makefile
# Then, define the other targets needed by Automake Makefiles.
.PHONY: dvi pdf ps info html check
dvi pdf ps info html:
check: test
</pre></div>

<a name="index-Proxy-Makefile-for-third_002dparty-packages"></a>
<p>A similar idea that does not use <code>include</code> is to write a proxy
<samp>Makefile</samp> that dispatches rules to the real <samp>Makefile</samp>,
either with &lsquo;<samp>$(MAKE) -f Makefile.real $(AM_MAKEFLAGS) target</samp>&rsquo; (if
it&rsquo;s OK to rename the original <samp>Makefile</samp>) or with &lsquo;<samp>cd
subdir &amp;&amp; $(MAKE) $(AM_MAKEFLAGS) target</samp>&rsquo; (if it&rsquo;s OK to store the
subdirectory project one directory deeper).  The good news is that
this proxy <samp>Makefile</samp> can be generated with Automake.  All we
need are <samp>-local</samp> targets (see <a href="#Extending">Extending</a>) that perform the
dispatch.  Of course the other Automake features are available, so you
could decide to let Automake perform distribution or installation.
Here is a possible <samp>Makefile.am</samp>:
</p>
<div class="example">
<pre class="example">all-local:
        cd subdir &amp;&amp; $(MAKE) $(AM_MAKEFLAGS) all
check-local:
        cd subdir &amp;&amp; $(MAKE) $(AM_MAKEFLAGS) test
clean-local:
        cd subdir &amp;&amp; $(MAKE) $(AM_MAKEFLAGS) clean

# Assuming the package knows how to install itself
install-data-local:
        cd subdir &amp;&amp; $(MAKE) $(AM_MAKEFLAGS) install-data
install-exec-local:
        cd subdir &amp;&amp; $(MAKE) $(AM_MAKEFLAGS) install-exec
uninstall-local:
        cd subdir &amp;&amp; $(MAKE) $(AM_MAKEFLAGS) uninstall

# Distribute files from here.
EXTRA_DIST = subdir/Makefile subdir/program.c ...
</pre></div>

<p>Pushing this idea to the extreme, it is also possible to ignore the
subproject build system and build everything from this proxy
<samp>Makefile.am</samp>.  This might sound very sensible if you need VPATH
builds but the subproject does not support them.
</p>
<hr>
<a name="Distributing"></a>
<div class="header">
<p>
Next: <a href="#API-Versioning" accesskey="n" rel="next">API Versioning</a>, Previous: <a href="#Not-Enough" accesskey="p" rel="prev">Not Enough</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Distributing-Makefile_002eins"></a>
<h2 class="chapter">24 Distributing <samp>Makefile.in</samp>s</h2>

<p>Automake places no restrictions on the distribution of the resulting
<samp>Makefile.in</samp>s.  We still encourage software authors to
distribute their work under terms like those of the GPL, but doing so
is not required to use Automake.
</p>
<p>Some of the files that can be automatically installed via the
<samp>--add-missing</samp> switch do fall under the GPL.  However, these also
have a special exception allowing you to distribute them with your
package, regardless of the licensing you choose.
</p>

<hr>
<a name="API-Versioning"></a>
<div class="header">
<p>
Next: <a href="#Upgrading" accesskey="n" rel="next">Upgrading</a>, Previous: <a href="#Distributing" accesskey="p" rel="prev">Distributing</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Automake-API-Versioning"></a>
<h2 class="chapter">25 Automake API Versioning</h2>

<p>New Automake releases usually include bug fixes and new features.
Unfortunately they may also introduce new bugs and incompatibilities.
This makes four reasons why a package may require a particular Automake
version.
</p>
<p>Things get worse when maintaining a large tree of packages, each one
requiring a different version of Automake.  In the past, this meant that
any developer (and sometimes users) had to install several versions of
Automake in different places, and switch &lsquo;<samp>$PATH</samp>&rsquo; appropriately for
each package.
</p>
<p>Starting with version 1.6, Automake installs versioned binaries.  This
means you can install several versions of Automake in the same
&lsquo;<samp>$prefix</samp>&rsquo;, and can select an arbitrary Automake version by running
<code>automake-1.6</code> or <code>automake-1.7</code> without juggling with
&lsquo;<samp>$PATH</samp>&rsquo;.  Furthermore, <samp>Makefile</samp>&rsquo;s generated by Automake 1.6
will use <code>automake-1.6</code> explicitly in their rebuild rules.
</p>
<p>The number &lsquo;<samp>1.6</samp>&rsquo; in <code>automake-1.6</code> is Automake&rsquo;s API version,
not Automake&rsquo;s version.  If a bug fix release is made, for instance
Automake 1.6.1, the API version will remain 1.6.  This means that a
package that works with Automake 1.6 should also work with 1.6.1; after
all, this is what people expect from bug fix releases.
</p>
<p>If your package relies on a feature or a bug fix introduced in
a release, you can pass this version as an option to Automake to ensure
older releases will not be used.  For instance, use this in your
<samp>configure.ac</samp>:
</p>
<div class="example">
<pre class="example">  AM_INIT_AUTOMAKE([1.6.1])    dnl Require Automake 1.6.1 or better.
</pre></div>

<p>or, in a particular <samp>Makefile.am</samp>:
</p>
<div class="example">
<pre class="example">  AUTOMAKE_OPTIONS = 1.6.1   # Require Automake 1.6.1 or better.
</pre></div>

<p>Automake will print an error message if its version is
older than the requested version.
</p>

<a name="What-is-in-the-API"></a>
<h3 class="heading">What is in the API</h3>

<p>Automake&rsquo;s programming interface is not easy to define.  Basically it
should include at least all <strong>documented</strong> variables and targets
that a <samp>Makefile.am</samp> author can use, any behavior associated with
them (e.g., the places where &lsquo;<samp>-hook</samp>&rsquo;&rsquo;s are run), the command line
interface of <code>automake</code> and <code>aclocal</code>, &hellip;
</p>
<a name="What-is-not-in-the-API"></a>
<h3 class="heading">What is not in the API</h3>

<p>Every undocumented variable, target, or command line option, is not part
of the API.  You should avoid using them, as they could change from one
version to the other (even in bug fix releases, if this helps to fix a
bug).
</p>
<p>If it turns out you need to use such an undocumented feature, contact
<a href="mailto:automake@gnu.org">automake@gnu.org</a> and try to get it documented and exercised by
the test-suite.
</p>
<hr>
<a name="Upgrading"></a>
<div class="header">
<p>
Next: <a href="#FAQ" accesskey="n" rel="next">FAQ</a>, Previous: <a href="#API-Versioning" accesskey="p" rel="prev">API Versioning</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Upgrading-a-Package-to-a-Newer-Automake-Version"></a>
<h2 class="chapter">26 Upgrading a Package to a Newer Automake Version</h2>

<p>Automake maintains three kind of files in a package.
</p>
<ul>
<li> <samp>aclocal.m4</samp>
</li><li> <samp>Makefile.in</samp>s
</li><li> auxiliary tools like <samp>install-sh</samp> or <samp>py-compile</samp>
</li></ul>

<p><samp>aclocal.m4</samp> is generated by <code>aclocal</code> and contains some
Automake-supplied M4 macros.  Auxiliary tools are installed by
&lsquo;<samp>automake --add-missing</samp>&rsquo; when needed.  <samp>Makefile.in</samp>s are
built from <samp>Makefile.am</samp> by <code>automake</code>, and rely on the
definitions of the M4 macros put in <samp>aclocal.m4</samp> as well as the
behavior of the auxiliary tools installed.
</p>
<p>Because all of these files are closely related, it is important to
regenerate all of them when upgrading to a newer Automake release.
The usual way to do that is
</p>
<div class="example">
<pre class="example">aclocal # with any option needed (such a -I m4)
autoconf
automake --add-missing --force-missing
</pre></div>

<p>or more conveniently:
</p>
<div class="example">
<pre class="example">autoreconf -vfi
</pre></div>

<p>The use of <samp>--force-missing</samp> ensures that auxiliary tools will be
overridden by new versions (see <a href="#automake-Invocation">automake Invocation</a>).
</p>
<p>It is important to regenerate all of these files each time Automake is
upgraded, even between bug fixes releases.  For instance, it is not
unusual for a bug fix to involve changes to both the rules generated
in <samp>Makefile.in</samp> and the supporting M4 macros copied to
<samp>aclocal.m4</samp>.
</p>
<p>Presently <code>automake</code> is able to diagnose situations where
<samp>aclocal.m4</samp> has been generated with another version of
<code>aclocal</code>.  However it never checks whether auxiliary scripts
are up-to-date.  In other words, <code>automake</code> will tell you when
<code>aclocal</code> needs to be rerun, but it will never diagnose a
missing <samp>--force-missing</samp>.
</p>
<p>Before upgrading to a new major release, it is a good idea to read the
file <samp>NEWS</samp>.  This file lists all changes between releases: new
features, obsolete constructs, known incompatibilities, and
workarounds.
</p>
<hr>
<a name="FAQ"></a>
<div class="header">
<p>
Next: <a href="#Copying-This-Manual" accesskey="n" rel="next">Copying This Manual</a>, Previous: <a href="#Upgrading" accesskey="p" rel="prev">Upgrading</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Frequently-Asked-Questions-about-Automake"></a>
<h2 class="chapter">27 Frequently Asked Questions about Automake</h2>

<p>This chapter covers some questions that often come up on the mailing
lists.
</p>
<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#CVS" accesskey="1">CVS</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">CVS and generated files
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#maintainer_002dmode" accesskey="2">maintainer-mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">missing and AM_MAINTAINER_MODE
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Wildcards" accesskey="3">Wildcards</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Why doesn&rsquo;t Automake support wildcards?
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Limitations-on-File-Names" accesskey="4">Limitations on File Names</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Limitations on source and installed file names
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Errors-with-distclean" accesskey="5">Errors with distclean</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Files left in build directory after distclean
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Flag-Variables-Ordering" accesskey="6">Flag Variables Ordering</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">CFLAGS vs. AM_CFLAGS vs. mumble_CFLAGS
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Renamed-Objects" accesskey="7">Renamed Objects</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Why are object files sometimes renamed?
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Per_002dObject-Flags" accesskey="8">Per-Object Flags</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to simulate per-object flags?
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Multiple-Outputs" accesskey="9">Multiple Outputs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Writing rules for tools with many output files
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Hard_002dCoded-Install-Paths">Hard-Coded Install Paths</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Installing to hard-coded locations
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Debugging-Make-Rules">Debugging Make Rules</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Strategies when things don&rsquo;t work as expected
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Reporting-Bugs">Reporting Bugs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Feedback on bugs and feature requests
</td></tr>
</table>

<hr>
<a name="CVS"></a>
<div class="header">
<p>
Next: <a href="#maintainer_002dmode" accesskey="n" rel="next">maintainer-mode</a>, Up: <a href="#FAQ" accesskey="u" rel="up">FAQ</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="CVS-and-generated-files"></a>
<h3 class="section">27.1 CVS and generated files</h3>

<a name="Background_003a-distributed-generated-Files"></a>
<h4 class="subheading">Background: distributed generated Files</h4>
<a name="index-generated-files_002c-distributed"></a>
<a name="index-rebuild-rules-1"></a>

<p>Packages made with Autoconf and Automake ship with some generated
files like <samp>configure</samp> or <samp>Makefile.in</samp>.  These files were
generated on the developer&rsquo;s machine and are distributed so that
end-users do not have to install the maintainer tools required to
rebuild them.  Other generated files like Lex scanners, Yacc parsers,
or Info documentation, are usually distributed on similar grounds.
</p>
<p>Automake output rules in <samp>Makefile</samp>s to rebuild these files.  For
instance, <code>make</code> will run <code>autoconf</code> to rebuild
<samp>configure</samp> whenever <samp>configure.ac</samp> is changed.  This makes
development safer by ensuring a <samp>configure</samp> is never out-of-date
with respect to <samp>configure.ac</samp>.
</p>
<p>As generated files shipped in packages are up-to-date, and because
<code>tar</code> preserves times-tamps, these rebuild rules are not
triggered when a user unpacks and builds a package.
</p>
<a name="Background_003a-CVS-and-Timestamps"></a>
<h4 class="subheading">Background: CVS and Timestamps</h4>
<a name="index-timestamps-and-CVS"></a>
<a name="index-CVS-and-timestamps"></a>

<p>Unless you use CVS keywords (in which case files must be updated at
commit time), CVS preserves timestamp during &lsquo;<samp>cvs commit</samp>&rsquo; and
&lsquo;<samp>cvs import -d</samp>&rsquo; operations.
</p>
<p>When you check out a file using &lsquo;<samp>cvs checkout</samp>&rsquo; its timestamp is
set to that of the revision that is being checked out.
</p>
<p>However, during <code>cvs update</code>, files will have the date of the
update, not the original timestamp of this revision.  This is meant to
make sure that <code>make</code> notices sources files have been updated.
</p>
<p>This timestamp shift is troublesome when both sources and generated
files are kept under CVS.  Because CVS processes files in lexical
order, <samp>configure.ac</samp> will appear newer than <samp>configure</samp>
after a <code>cvs update</code> that updates both files, even if
<samp>configure</samp> was newer than <samp>configure.ac</samp> when it was
checked in.  Calling <code>make</code> will then trigger a spurious rebuild
of <samp>configure</samp>.
</p>
<a name="Living-with-CVS-in-Autoconfiscated-Projects"></a>
<h4 class="subheading">Living with CVS in Autoconfiscated Projects</h4>
<a name="index-CVS-and-generated-files"></a>
<a name="index-generated-files-and-CVS"></a>

<p>There are basically two clans amongst maintainers: those who keep all
distributed files under CVS, including generated files, and those who
keep generated files <em>out</em> of CVS.
</p>
<a name="All-Files-in-CVS"></a>
<h4 class="subsubheading">All Files in CVS</h4>

<ul>
<li> The CVS repository contains all distributed files so you know exactly
what is distributed, and you can checkout any prior version entirely.

</li><li> Maintainers can see how generated files evolve (for instance, you can
see what happens to your <samp>Makefile.in</samp>s when you upgrade Automake
and make sure they look OK).

</li><li> Users do not need the autotools to build a checkout of the project, it
works just like a released tarball.

</li><li> If users use <code>cvs update</code> to update their copy, instead of
<code>cvs checkout</code> to fetch a fresh one, timestamps will be
inaccurate.  Some rebuild rules will be triggered and attempt to
run developer tools such as <code>autoconf</code> or <code>automake</code>.

<p>Calls to such tools are all wrapped into a call to the <code>missing</code>
script discussed later (see <a href="#maintainer_002dmode">maintainer-mode</a>), so that the user will
see more descriptive warnings about missing or out-of-date tools, and
possible suggestions about how to obtain them, rather than just some
&ldquo;command not found&rdquo; error, or (worse) some obscure message from some
older version of the required tool they happen to have installed.
</p>
<p>Maintainers interested in keeping their package buildable from a CVS
checkout even for those users that lack maintainer-specific tools might
want to provide an helper script (or to enhance their existing bootstrap
script) to fix the timestamps after a
<code>cvs update</code> or a <code>git checkout</code>, to prevent spurious
rebuilds.  In case of a project committing the Autotools-generated
files, as well as the generated <samp>.info</samp> files, such script might
look something like this:
</p>
<div class="smallexample">
<pre class="smallexample">#!/bin/sh
# fix-timestamp.sh: prevents useless rebuilds after &quot;cvs update&quot;
sleep 1
# aclocal-generated aclocal.m4 depends on locally-installed
# '.m4' macro files, as well as on 'configure.ac'
touch aclocal.m4
sleep 1
# autoconf-generated configure depends on aclocal.m4 and on
# configure.ac
touch configure
# so does autoheader-generated config.h.in
touch config.h.in
# and all the automake-generated Makefile.in files
touch `find . -name Makefile.in -print`
# finally, the makeinfo-generated '.info' files depend on the
# corresponding '.texi' files
touch doc/*.info
</pre></div>

</li><li> In distributed development, developers are likely to have different
version of the maintainer tools installed.  In this case rebuilds
triggered by timestamp lossage will lead to spurious changes
to generated files.  There are several solutions to this:

<ul>
<li> All developers should use the same versions, so that the rebuilt files
are identical to files in CVS.  (This starts to be difficult when each
project you work on uses different versions.)
</li><li> Or people use a script to fix the timestamp after a checkout (the GCC
folks have such a script).
</li><li> Or <samp>configure.ac</samp> uses <code>AM_MAINTAINER_MODE</code>, which will
disable all of these rebuild rules by default.  This is further discussed
in <a href="#maintainer_002dmode">maintainer-mode</a>.
</li></ul>

</li><li> Although we focused on spurious rebuilds, the converse can also
happen.  CVS&rsquo;s timestamp handling can also let you think an
out-of-date file is up-to-date.

<p>For instance, suppose a developer has modified <samp>Makefile.am</samp> and
has rebuilt <samp>Makefile.in</samp>, and then decides to do a last-minute
change to <samp>Makefile.am</samp> right before checking in both files
(without rebuilding <samp>Makefile.in</samp> to account for the change).
</p>
<p>This last change to <samp>Makefile.am</samp> makes the copy of
<samp>Makefile.in</samp> out-of-date.  Since CVS processes files
alphabetically, when another developer &lsquo;<samp>cvs update</samp>&rsquo;s his or her
tree, <samp>Makefile.in</samp> will happen to be newer than
<samp>Makefile.am</samp>.  This other developer will not see that
<samp>Makefile.in</samp> is out-of-date.
</p>
</li></ul>

<a name="Generated-Files-out-of-CVS"></a>
<h4 class="subsubheading">Generated Files out of CVS</h4>

<p>One way to get CVS and <code>make</code> working peacefully is to never
store generated files in CVS, i.e., do not CVS-control files that
are <samp>Makefile</samp> targets (also called <em>derived</em> files).
</p>
<p>This way developers are not annoyed by changes to generated files.  It
does not matter if they all have different versions (assuming they are
compatible, of course).  And finally, timestamps are not lost, changes
to sources files can&rsquo;t be missed as in the
<samp>Makefile.am</samp>/<samp>Makefile.in</samp> example discussed earlier.
</p>
<p>The drawback is that the CVS repository is not an exact copy of what
is distributed and that users now need to install various development
tools (maybe even specific versions) before they can build a checkout.
But, after all, CVS&rsquo;s job is versioning, not distribution.
</p>
<p>Allowing developers to use different versions of their tools can also
hide bugs during distributed development.  Indeed, developers will be
using (hence testing) their own generated files, instead of the
generated files that will be released actually.  The developer who
prepares the tarball might be using a version of the tool that
produces bogus output (for instance a non-portable C file), something
other developers could have noticed if they weren&rsquo;t using their own
versions of this tool.
</p>
<a name="Third_002dparty-Files"></a>
<h4 class="subheading">Third-party Files</h4>
<a name="index-CVS-and-third_002dparty-files"></a>
<a name="index-third_002dparty-files-and-CVS"></a>

<p>Another class of files not discussed here (because they do not cause
timestamp issues) are files that are shipped with a package, but
maintained elsewhere.  For instance, tools like <code>gettextize</code>
and <code>autopoint</code> (from Gettext) or <code>libtoolize</code> (from
Libtool), will install or update files in your package.
</p>
<p>These files, whether they are kept under CVS or not, raise similar
concerns about version mismatch between developers&rsquo; tools.  The
Gettext manual has a section about this, see <a href="http://www.gnu.org/software/gettext/manual/gettext.html#CVS-Issues">Integrating with CVS</a> in <cite>GNU gettext tools</cite>.
</p>
<hr>
<a name="maintainer_002dmode"></a>
<div class="header">
<p>
Next: <a href="#Wildcards" accesskey="n" rel="next">Wildcards</a>, Previous: <a href="#CVS" accesskey="p" rel="prev">CVS</a>, Up: <a href="#FAQ" accesskey="u" rel="up">FAQ</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="missing-and-AM_005fMAINTAINER_005fMODE"></a>
<h3 class="section">27.2 <code>missing</code> and <code>AM_MAINTAINER_MODE</code></h3>

<a name="missing"></a>
<h4 class="subheading"><code>missing</code></h4>
<a name="index-missing_002c-purpose"></a>

<p>The <code>missing</code> script is a wrapper around several maintainer
tools, designed to warn users if a maintainer tool is required but
missing.  Typical maintainer tools are <code>autoconf</code>,
<code>automake</code>, <code>bison</code>, etc.  Because file generated by
these tools are shipped with the other sources of a package, these
tools shouldn&rsquo;t be required during a user build and they are not
checked for in <samp>configure</samp>.
</p>
<p>However, if for some reason a rebuild rule is triggered and involves a
missing tool, <code>missing</code> will notice it and warn the user, even
suggesting how to obtain such a tool (at least in case it is a well-known
one, like <code>makeinfo</code> or <code>bison</code>).  This is more helpful
and user-friendly than just having the rebuild rules spewing out a terse
error message like &lsquo;<samp>sh: <var>tool</var>: command not found</samp>&rsquo;.  Similarly,
<code>missing</code> will warn the user if it detects that a maintainer
tool it attempted to use seems too old (be warned that diagnosing this
correctly is typically more difficult that detecting missing tools, and
requires cooperation from the tool itself, so it won&rsquo;t always work).
</p>
<p>If the required tool is installed, <code>missing</code> will run it and
won&rsquo;t attempt to continue after failures.  This is correct during
development: developers love fixing failures.  However, users with
missing or too old maintainer tools may get an error when the rebuild
rule is spuriously triggered, halting the build.  This failure to let
the build continue is one of the arguments of the
<code>AM_MAINTAINER_MODE</code> advocates.
</p>
<a name="AM_005fMAINTAINER_005fMODE"></a>
<h4 class="subheading"><code>AM_MAINTAINER_MODE</code></h4>
<a name="index-AM_005fMAINTAINER_005fMODE_002c-purpose"></a>
<a name="index-AM_005fMAINTAINER_005fMODE-1"></a>

<p><code>AM_MAINTAINER_MODE</code> allows you to choose whether the so called
&quot;rebuild rules&quot; should be enabled or disabled.  With
<code>AM_MAINTAINER_MODE([enable])</code>, they are enabled by default,
otherwise they are disabled by default.  In the latter case, if
you have <code>AM_MAINTAINER_MODE</code> in <samp>configure.ac</samp>, and run
&lsquo;<samp>./configure &amp;&amp; make</samp>&rsquo;, then <code>make</code> will *never* attempt to
rebuild <samp>configure</samp>, <samp>Makefile.in</samp>s, Lex or Yacc outputs, etc.
I.e., this disables build rules for files that are usually distributed
and that users should normally not have to update.
</p>
<p>The user can override the default setting by passing either
&lsquo;<samp>--enable-maintainer-mode</samp>&rsquo; or &lsquo;<samp>--disable-maintainer-mode</samp>&rsquo;
to <code>configure</code>.
</p>
<p>People use <code>AM_MAINTAINER_MODE</code> either because they do not want their
users (or themselves) annoyed by timestamps lossage (see <a href="#CVS">CVS</a>), or
because they simply can&rsquo;t stand the rebuild rules and prefer running
maintainer tools explicitly.
</p>
<p><code>AM_MAINTAINER_MODE</code> also allows you to disable some custom build
rules conditionally.  Some developers use this feature to disable
rules that need exotic tools that users may not have available.
</p>
<p>Several years ago Fran&ccedil;ois Pinard pointed out several arguments
against this <code>AM_MAINTAINER_MODE</code> macro.  Most of them relate to
insecurity.  By removing dependencies you get non-dependable builds:
changes to sources files can have no effect on generated files and this
can be very confusing when unnoticed.  He adds that security shouldn&rsquo;t
be reserved to maintainers (what <samp>--enable-maintainer-mode</samp>
suggests), on the contrary.  If one user has to modify a
<samp>Makefile.am</samp>, then either <samp>Makefile.in</samp> should be updated
or a warning should be output (this is what Automake uses
<code>missing</code> for) but the last thing you want is that nothing
happens and the user doesn&rsquo;t notice it (this is what happens when
rebuild rules are disabled by <code>AM_MAINTAINER_MODE</code>).
</p>
<p>Jim Meyering, the inventor of the <code>AM_MAINTAINER_MODE</code> macro was
swayed by Fran&ccedil;ois&rsquo;s arguments, and got rid of
<code>AM_MAINTAINER_MODE</code> in all of his packages.
</p>
<p>Still many people continue to use <code>AM_MAINTAINER_MODE</code>, because
it helps them working on projects where all files are kept under version
control, and because <code>missing</code> isn&rsquo;t enough if you have the
wrong version of the tools.
</p>

<hr>
<a name="Wildcards"></a>
<div class="header">
<p>
Next: <a href="#Limitations-on-File-Names" accesskey="n" rel="next">Limitations on File Names</a>, Previous: <a href="#maintainer_002dmode" accesskey="p" rel="prev">maintainer-mode</a>, Up: <a href="#FAQ" accesskey="u" rel="up">FAQ</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Why-doesn_0027t-Automake-support-wildcards_003f"></a>
<h3 class="section">27.3 Why doesn&rsquo;t Automake support wildcards?</h3>
<a name="index-wildcards"></a>

<p>Developers are lazy.  They would often like to use wildcards in
<samp>Makefile.am</samp>s, so that they would not need to remember to
update <samp>Makefile.am</samp>s every time they add, delete, or rename
a file.
</p>
<p>There are several objections to this:
</p><ul>
<li> When using CVS (or similar) developers need to remember they have to
run &lsquo;<samp>cvs add</samp>&rsquo; or &lsquo;<samp>cvs rm</samp>&rsquo; anyway.  Updating
<samp>Makefile.am</samp> accordingly quickly becomes a reflex.

<p>Conversely, if your application doesn&rsquo;t compile
because you forgot to add a file in <samp>Makefile.am</samp>, it will help
you remember to &lsquo;<samp>cvs add</samp>&rsquo; it.
</p>
</li><li> Using wildcards makes it easy to distribute files by mistake.  For
instance, some code a developer is experimenting with (a test case,
say) that should not be part of the distribution.

</li><li> Using wildcards it&rsquo;s easy to omit some files by mistake.  For
instance, one developer creates a new file, uses it in many places,
but forgets to commit it.  Another developer then checks out the
incomplete project and is able to run &lsquo;<samp>make dist</samp>&rsquo; successfully,
even though a file is missing. By listing files, &lsquo;<samp>make dist</samp>&rsquo;
<em>will</em> complain.

</li><li> Wildcards are not portable to some non-GNU <code>make</code> implementations,
e.g., NetBSD <code>make</code> will not expand globs such as &lsquo;<samp>*</samp>&rsquo; in
prerequisites of a target.

</li><li> Finally, it&rsquo;s really hard to <em>forget</em> to add a file to
<samp>Makefile.am</samp>: files that are not listed in <samp>Makefile.am</samp> are
not compiled or installed, so you can&rsquo;t even test them.
</li></ul>

<p>Still, these are philosophical objections, and as such you may disagree,
or find enough value in wildcards to dismiss all of them.  Before you
start writing a patch against Automake to teach it about wildcards,
let&rsquo;s see the main technical issue: portability.
</p>
<p>Although &lsquo;<samp>$(wildcard ...)</samp>&rsquo; works with GNU <code>make</code>, it is
not portable to other <code>make</code> implementations.
</p>
<p>The only way Automake could support <code>$(wildcard ...)</code> is by
expanding <code>$(wildcard ...)</code> when <code>automake</code> is run.
The resulting <samp>Makefile.in</samp>s would be portable since they would
list all files and not use &lsquo;<samp>$(wildcard ...)</samp>&rsquo;.  However that
means developers would need to remember to run <code>automake</code> each
time they add, delete, or rename files.
</p>
<p>Compared to editing <samp>Makefile.am</samp>, this is a very small gain.  Sure,
it&rsquo;s easier and faster to type &lsquo;<samp>automake; make</samp>&rsquo; than to type
&lsquo;<samp>emacs Makefile.am; make</samp>&rsquo;.  But nobody bothered enough to write a
patch to add support for this syntax.  Some people use scripts to
generate file lists in <samp>Makefile.am</samp> or in separate
<samp>Makefile</samp> fragments.
</p>
<p>Even if you don&rsquo;t care about portability, and are tempted to use
&lsquo;<samp>$(wildcard ...)</samp>&rsquo; anyway because you target only GNU Make, you
should know there are many places where Automake needs to know exactly
which files should be processed.  As Automake doesn&rsquo;t know how to
expand &lsquo;<samp>$(wildcard ...)</samp>&rsquo;, you cannot use it in these places.
&lsquo;<samp>$(wildcard ...)</samp>&rsquo; is a black box comparable to <code>AC_SUBST</code>ed
variables as far Automake is concerned.
</p>
<p>You can get warnings about &lsquo;<samp>$(wildcard ...</samp>&rsquo;) constructs using the
<samp>-Wportability</samp> flag.
</p>
<hr>
<a name="Limitations-on-File-Names"></a>
<div class="header">
<p>
Next: <a href="#Errors-with-distclean" accesskey="n" rel="next">Errors with distclean</a>, Previous: <a href="#Wildcards" accesskey="p" rel="prev">Wildcards</a>, Up: <a href="#FAQ" accesskey="u" rel="up">FAQ</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Limitations-on-File-Names-1"></a>
<h3 class="section">27.4 Limitations on File Names</h3>
<a name="index-file-names_002c-limitations-on"></a>

<p>Automake attempts to support all kinds of file names, even those that
contain unusual characters or are unusually long.  However, some
limitations are imposed by the underlying operating system and tools.
</p>
<p>Most operating systems prohibit the use of the null byte in file
names, and reserve &lsquo;<samp>/</samp>&rsquo; as a directory separator.  Also, they
require that file names are properly encoded for the user&rsquo;s locale.
Automake is subject to these limits.
</p>
<p>Portable packages should limit themselves to POSIX file
names.  These can contain ASCII letters and digits,
&lsquo;<samp>_</samp>&rsquo;, &lsquo;<samp>.</samp>&rsquo;, and &lsquo;<samp>-</samp>&rsquo;.  File names consist of components
separated by &lsquo;<samp>/</samp>&rsquo;.  File name components cannot begin with
&lsquo;<samp>-</samp>&rsquo;.
</p>
<p>Portable POSIX file names cannot contain components that exceed a
14-byte limit, but nowadays it&rsquo;s normally safe to assume the
more-generous XOPEN limit of 255 bytes.  POSIX
limits file names to 255 bytes (XOPEN allows 1023 bytes),
but you may want to limit a source tarball to file names of 99 bytes
to avoid interoperability problems with old versions of <code>tar</code>.
</p>
<p>If you depart from these rules (e.g., by using non-ASCII
characters in file names, or by using lengthy file names), your
installers may have problems for reasons unrelated to Automake.
However, if this does not concern you, you should know about the
limitations imposed by Automake itself.  These limitations are
undesirable, but some of them seem to be inherent to underlying tools
like Autoconf, Make, M4, and the shell.  They fall into three
categories: install directories, build directories, and file names.
</p>
<p>The following characters:
</p>
<div class="example">
<pre class="example"><span class="roman">newline</span> &quot; # $ ' `
</pre></div>

<p>should not appear in the names of install directories.  For example,
the operand of <code>configure</code>&rsquo;s <samp>--prefix</samp> option should
not contain these characters.
</p>
<p>Build directories suffer the same limitations as install directories,
and in addition should not contain the following characters:
</p>
<div class="example">
<pre class="example">&amp; @ \
</pre></div>

<p>For example, the full name of the directory containing the source
files should not contain these characters.
</p>
<p>Source and installation file names like <samp>main.c</samp> are limited even
further: they should conform to the POSIX/XOPEN
rules described above.  In addition, if you plan to port to
non-POSIX environments, you should avoid file names that
differ only in case (e.g., <samp>makefile</samp> and <samp>Makefile</samp>).
Nowadays it is no longer worth worrying about the 8.3 limits of
DOS file systems.
</p>
<hr>
<a name="Errors-with-distclean"></a>
<div class="header">
<p>
Next: <a href="#Flag-Variables-Ordering" accesskey="n" rel="next">Flag Variables Ordering</a>, Previous: <a href="#Limitations-on-File-Names" accesskey="p" rel="prev">Limitations on File Names</a>, Up: <a href="#FAQ" accesskey="u" rel="up">FAQ</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Errors-with-distclean-1"></a>
<h3 class="section">27.5 Errors with distclean</h3>
<a name="index-distclean_002c-diagnostic"></a>
<a name="index-make-distclean_002c-diagnostic"></a>
<a name="index-dependencies-and-distributed-files"></a>
<a name="index-distclean-2"></a>

<p>This is a diagnostic you might encounter while running &lsquo;<samp>make
distcheck</samp>&rsquo;.
</p>
<p>As explained in <a href="#Checking-the-Distribution">Checking the Distribution</a>, &lsquo;<samp>make distcheck</samp>&rsquo;
attempts to build and check your package for errors like this one.
</p>
<p>&lsquo;<samp>make distcheck</samp>&rsquo; will perform a <code>VPATH</code> build of your
package (see <a href="#VPATH-Builds">VPATH Builds</a>), and then call &lsquo;<samp>make distclean</samp>&rsquo;.
Files left in the build directory after &lsquo;<samp>make distclean</samp>&rsquo; has run
are listed after this error.
</p>
<p>This diagnostic really covers two kinds of errors:
</p>
<ul>
<li> files that are forgotten by distclean;
</li><li> distributed files that are erroneously rebuilt.
</li></ul>

<p>The former left-over files are not distributed, so the fix is to mark
them for cleaning (see <a href="#Clean">Clean</a>), this is obvious and doesn&rsquo;t deserve
more explanations.
</p>
<p>The latter bug is not always easy to understand and fix, so let&rsquo;s
proceed with an example.  Suppose our package contains a program for
which we want to build a man page using <code>help2man</code>.  GNU
<code>help2man</code> produces simple manual pages from the <samp>--help</samp>
and <samp>--version</samp> output of other commands (see <a href="http://www.gnu.org/software/help2man/help2man.html#Top">Overview</a> in <cite>The Help2man Manual</cite>).  Because we don&rsquo;t want to force our
users to install <code>help2man</code>, we decide to distribute the
generated man page using the following setup.
</p>
<div class="example">
<pre class="example"># This Makefile.am is bogus.
bin_PROGRAMS = foo
foo_SOURCES = foo.c
dist_man_MANS = foo.1

foo.1: foo$(EXEEXT)
        help2man --output=foo.1 ./foo$(EXEEXT)
</pre></div>

<p>This will effectively distribute the man page.  However,
&lsquo;<samp>make distcheck</samp>&rsquo; will fail with:
</p>
<div class="example">
<pre class="example">ERROR: files left in build directory after distclean:
./foo.1
</pre></div>

<p>Why was <samp>foo.1</samp> rebuilt?  Because although distributed,
<samp>foo.1</samp> depends on a non-distributed built file:
<samp>foo$(EXEEXT)</samp>.  <samp>foo$(EXEEXT)</samp> is built by the user, so it
will always appear to be newer than the distributed <samp>foo.1</samp>.
</p>
<p>&lsquo;<samp>make distcheck</samp>&rsquo; caught an inconsistency in our package.  Our
intent was to distribute <samp>foo.1</samp> so users do not need to install
<code>help2man</code>, however since this rule causes this file to be
always rebuilt, users <em>do</em> need <code>help2man</code>.  Either we
should ensure that <samp>foo.1</samp> is not rebuilt by users, or there is
no point in distributing <samp>foo.1</samp>.
</p>
<p>More generally, the rule is that distributed files should never depend
on non-distributed built files.  If you distribute something
generated, distribute its sources.
</p>
<p>One way to fix the above example, while still distributing
<samp>foo.1</samp> is to not depend on <samp>foo$(EXEEXT)</samp>.  For instance,
assuming <code>foo --version</code> and <code>foo --help</code> do not
change unless <samp>foo.c</samp> or <samp>configure.ac</samp> change, we could
write the following <samp>Makefile.am</samp>:
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = foo
foo_SOURCES = foo.c
dist_man_MANS = foo.1

foo.1: foo.c $(top_srcdir)/configure.ac
        $(MAKE) $(AM_MAKEFLAGS) foo$(EXEEXT)
        help2man --output=foo.1 ./foo$(EXEEXT)
</pre></div>

<p>This way, <samp>foo.1</samp> will not get rebuilt every time
<samp>foo$(EXEEXT)</samp> changes.  The <code>make</code> call makes sure
<samp>foo$(EXEEXT)</samp> is up-to-date before <code>help2man</code>.  Another
way to ensure this would be to use separate directories for binaries
and man pages, and set <code>SUBDIRS</code> so that binaries are built
before man pages.
</p>
<p>We could also decide not to distribute <samp>foo.1</samp>.  In
this case it&rsquo;s fine to have <samp>foo.1</samp> dependent upon
<samp>foo$(EXEEXT)</samp>, since both will have to be rebuilt.
However it would be impossible to build the package in a
cross-compilation, because building <samp>foo.1</samp> involves
an <em>execution</em> of <samp>foo$(EXEEXT)</samp>.
</p>
<p>Another context where such errors are common is when distributed files
are built by tools that are built by the package.  The pattern is
similar:
</p>
<div class="example">
<pre class="example">distributed-file: built-tools distributed-sources
        build-command
</pre></div>

<p>should be changed to
</p>
<div class="example">
<pre class="example">distributed-file: distributed-sources
        $(MAKE) $(AM_MAKEFLAGS) built-tools
        build-command
</pre></div>

<p>or you could choose not to distribute <samp>distributed-file</samp>, if
cross-compilation does not matter.
</p>
<p>The points made through these examples are worth a summary:
</p>
<table class="cartouche" border="1"><tr><td>
<ul>
<li> Distributed files should never depend upon non-distributed built
files.
</li><li> Distributed files should be distributed with all their dependencies.
</li><li> If a file is <em>intended</em> to be rebuilt by users, then there is no point
in distributing it.
</li></ul>
</td></tr></table>

<a name="index-distcleancheck_005flistfiles-1"></a>
<p>For desperate cases, it&rsquo;s always possible to disable this check by
setting <code>distcleancheck_listfiles</code> as documented in <a href="#Checking-the-Distribution">Checking the Distribution</a>.
Make sure you do understand the reason why &lsquo;<samp>make distcheck</samp>&rsquo;
complains before you do this.  <code>distcleancheck_listfiles</code> is a
way to <em>hide</em> errors, not to fix them.  You can always do better.
</p>
<hr>
<a name="Flag-Variables-Ordering"></a>
<div class="header">
<p>
Next: <a href="#Renamed-Objects" accesskey="n" rel="next">Renamed Objects</a>, Previous: <a href="#Errors-with-distclean" accesskey="p" rel="prev">Errors with distclean</a>, Up: <a href="#FAQ" accesskey="u" rel="up">FAQ</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Flag-Variables-Ordering-1"></a>
<h3 class="section">27.6 Flag Variables Ordering</h3>
<a name="index-Ordering-flag-variables"></a>
<a name="index-Flag-variables_002c-ordering"></a>

<div class="display">
<pre class="display">What is the difference between <code>AM_CFLAGS</code>, <code>CFLAGS</code>, and
<code>mumble_CFLAGS</code>?
</pre></div>

<div class="display">
<pre class="display">Why does <code>automake</code> output <code>CPPFLAGS</code> after
<code>AM_CPPFLAGS</code> on compile lines?  Shouldn&rsquo;t it be the converse?
</pre></div>

<div class="display">
<pre class="display">My <samp>configure</samp> adds some warning flags into <code>CXXFLAGS</code>.  In
one <samp>Makefile.am</samp> I would like to append a new flag, however if I
put the flag into <code>AM_CXXFLAGS</code> it is prepended to the other
flags, not appended.
</pre></div>

<a name="Compile-Flag-Variables"></a>
<h4 class="subheading">Compile Flag Variables</h4>
<a name="index-Flag-Variables_002c-Ordering"></a>
<a name="index-Compile-Flag-Variables"></a>
<a name="index-AM_005fCCASFLAGS-and-CCASFLAGS"></a>
<a name="index-AM_005fCFLAGS-and-CFLAGS"></a>
<a name="index-AM_005fCPPFLAGS-and-CPPFLAGS"></a>
<a name="index-AM_005fCXXFLAGS-and-CXXFLAGS"></a>
<a name="index-AM_005fFCFLAGS-and-FCFLAGS"></a>
<a name="index-AM_005fFFLAGS-and-FFLAGS"></a>
<a name="index-AM_005fGCJFLAGS-and-GCJFLAGS"></a>
<a name="index-AM_005fLDFLAGS-and-LDFLAGS"></a>
<a name="index-AM_005fLFLAGS-and-LFLAGS"></a>
<a name="index-AM_005fLIBTOOLFLAGS-and-LIBTOOLFLAGS"></a>
<a name="index-AM_005fOBJCFLAGS-and-OBJCFLAGS"></a>
<a name="index-AM_005fOBJCXXFLAGS-and-OBJXXCFLAGS"></a>
<a name="index-AM_005fRFLAGS-and-RFLAGS"></a>
<a name="index-AM_005fUPCFLAGS-and-UPCFLAGS"></a>
<a name="index-AM_005fYFLAGS-and-YFLAGS"></a>
<a name="index-CCASFLAGS-and-AM_005fCCASFLAGS"></a>
<a name="index-CFLAGS-and-AM_005fCFLAGS"></a>
<a name="index-CPPFLAGS-and-AM_005fCPPFLAGS"></a>
<a name="index-CXXFLAGS-and-AM_005fCXXFLAGS"></a>
<a name="index-FCFLAGS-and-AM_005fFCFLAGS"></a>
<a name="index-FFLAGS-and-AM_005fFFLAGS"></a>
<a name="index-GCJFLAGS-and-AM_005fGCJFLAGS"></a>
<a name="index-LDFLAGS-and-AM_005fLDFLAGS"></a>
<a name="index-LFLAGS-and-AM_005fLFLAGS"></a>
<a name="index-LIBTOOLFLAGS-and-AM_005fLIBTOOLFLAGS"></a>
<a name="index-OBJCFLAGS-and-AM_005fOBJCFLAGS"></a>
<a name="index-OBJCXXFLAGS-and-AM_005fOBJCXXFLAGS"></a>
<a name="index-RFLAGS-and-AM_005fRFLAGS"></a>
<a name="index-UPCFLAGS-and-AM_005fUPCFLAGS"></a>
<a name="index-YFLAGS-and-AM_005fYFLAGS"></a>

<p>This section attempts to answer all the above questions.  We will
mostly discuss <code>CPPFLAGS</code> in our examples, but actually the
answer holds for all the compile flags used in Automake:
<code>CCASFLAGS</code>, <code>CFLAGS</code>, <code>CPPFLAGS</code>, <code>CXXFLAGS</code>,
<code>FCFLAGS</code>, <code>FFLAGS</code>, <code>GCJFLAGS</code>, <code>LDFLAGS</code>,
<code>LFLAGS</code>, <code>LIBTOOLFLAGS</code>, <code>OBJCFLAGS</code>, <code>OBJCXXFLAGS</code>,
<code>RFLAGS</code>, <code>UPCFLAGS</code>, and <code>YFLAGS</code>.
</p>
<p><code>CPPFLAGS</code>, <code>AM_CPPFLAGS</code>, and <code>mumble_CPPFLAGS</code> are
three variables that can be used to pass flags to the C preprocessor
(actually these variables are also used for other languages like C++
or preprocessed Fortran).  <code>CPPFLAGS</code> is the user variable
(see <a href="#User-Variables">User Variables</a>), <code>AM_CPPFLAGS</code> is the Automake variable,
and <code>mumble_CPPFLAGS</code> is the variable specific to the
<code>mumble</code> target (we call this a per-target variable,
see <a href="#Program-and-Library-Variables">Program and Library Variables</a>).
</p>
<p>Automake always uses two of these variables when compiling C sources
files.  When compiling an object file for the <code>mumble</code> target,
the first variable will be <code>mumble_CPPFLAGS</code> if it is defined, or
<code>AM_CPPFLAGS</code> otherwise.  The second variable is always
<code>CPPFLAGS</code>.
</p>
<p>In the following example,
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = foo bar
foo_SOURCES = xyz.c
bar_SOURCES = main.c
foo_CPPFLAGS = -DFOO
AM_CPPFLAGS = -DBAZ
</pre></div>

<p><samp>xyz.o</samp> will be compiled with &lsquo;<samp>$(foo_CPPFLAGS) $(CPPFLAGS)</samp>&rsquo;,
(because <samp>xyz.o</samp> is part of the <code>foo</code> target), while
<samp>main.o</samp> will be compiled with &lsquo;<samp>$(AM_CPPFLAGS) $(CPPFLAGS)</samp>&rsquo;
(because there is no per-target variable for target <code>bar</code>).
</p>
<p>The difference between <code>mumble_CPPFLAGS</code> and <code>AM_CPPFLAGS</code>
being clear enough, let&rsquo;s focus on <code>CPPFLAGS</code>.  <code>CPPFLAGS</code>
is a user variable, i.e., a variable that users are entitled to modify
in order to compile the package.  This variable, like many others,
is documented at the end of the output of &lsquo;<samp>configure --help</samp>&rsquo;.
</p>
<p>For instance, someone who needs to add <samp>/home/my/usr/include</samp> to
the C compiler&rsquo;s search path would configure a package with
</p>
<div class="example">
<pre class="example">./configure CPPFLAGS='-I /home/my/usr/include'
</pre></div>

<p>and this flag would be propagated to the compile rules of all
<samp>Makefile</samp>s.
</p>
<p>It is also not uncommon to override a user variable at
<code>make</code>-time.  Many installers do this with <code>prefix</code>, but
this can be useful with compiler flags too.  For instance, if, while
debugging a C++ project, you need to disable optimization in one
specific object file, you can run something like
</p>
<div class="example">
<pre class="example">rm file.o
make CXXFLAGS=-O0 file.o
make
</pre></div>

<p>The reason &lsquo;<samp>$(CPPFLAGS)</samp>&rsquo; appears after &lsquo;<samp>$(AM_CPPFLAGS)</samp>&rsquo; or
&lsquo;<samp>$(mumble_CPPFLAGS)</samp>&rsquo; in the compile command is that users
should always have the last say.  It probably makes more sense if you
think about it while looking at the &lsquo;<samp>CXXFLAGS=-O0</samp>&rsquo; above, which
should supersede any other switch from <code>AM_CXXFLAGS</code> or
<code>mumble_CXXFLAGS</code> (and this of course replaces the previous value
of <code>CXXFLAGS</code>).
</p>
<p>You should never redefine a user variable such as <code>CPPFLAGS</code> in
<samp>Makefile.am</samp>.  Use &lsquo;<samp>automake -Woverride</samp>&rsquo; to diagnose such
mistakes.  Even something like
</p>
<div class="example">
<pre class="example">CPPFLAGS = -DDATADIR=\&quot;$(datadir)\&quot; @CPPFLAGS@
</pre></div>

<p>is erroneous.  Although this preserves <samp>configure</samp>&rsquo;s value of
<code>CPPFLAGS</code>, the definition of <code>DATADIR</code> will disappear if a
user attempts to override <code>CPPFLAGS</code> from the <code>make</code>
command line.
</p>
<div class="example">
<pre class="example">AM_CPPFLAGS = -DDATADIR=\&quot;$(datadir)\&quot;
</pre></div>

<p>is all that is needed here if no per-target flags are used.
</p>
<p>You should not add options to these user variables within
<samp>configure</samp> either, for the same reason.  Occasionally you need
to modify these variables to perform a test, but you should reset
their values afterwards.  In contrast, it is OK to modify the
&lsquo;<samp>AM_</samp>&rsquo; variables within <samp>configure</samp> if you <code>AC_SUBST</code>
them, but it is rather rare that you need to do this, unless you
really want to change the default definitions of the &lsquo;<samp>AM_</samp>&rsquo;
variables in all <samp>Makefile</samp>s.
</p>
<p>What we recommend is that you define extra flags in separate
variables.  For instance, you may write an Autoconf macro that computes
a set of warning options for the C compiler, and <code>AC_SUBST</code> them
in <code>WARNINGCFLAGS</code>; you may also have an Autoconf macro that
determines which compiler and which linker flags should be used to
link with library <samp>libfoo</samp>, and <code>AC_SUBST</code> these in
<code>LIBFOOCFLAGS</code> and <code>LIBFOOLDFLAGS</code>.  Then, a
<samp>Makefile.am</samp> could use these variables as follows:
</p>
<div class="example">
<pre class="example">AM_CFLAGS = $(WARNINGCFLAGS)
bin_PROGRAMS = prog1 prog2
prog1_SOURCES = &hellip;
prog2_SOURCES = &hellip;
prog2_CFLAGS = $(LIBFOOCFLAGS) $(AM_CFLAGS)
prog2_LDFLAGS = $(LIBFOOLDFLAGS)
</pre></div>

<p>In this example both programs will be compiled with the flags
substituted into &lsquo;<samp>$(WARNINGCFLAGS)</samp>&rsquo;, and <code>prog2</code> will
additionally be compiled with the flags required to link with
<samp>libfoo</samp>.
</p>
<p>Note that listing <code>AM_CFLAGS</code> in a per-target <code>CFLAGS</code>
variable is a common idiom to ensure that <code>AM_CFLAGS</code> applies to
every target in a <samp>Makefile.in</samp>.
</p>
<p>Using variables like this gives you full control over the ordering of
the flags.  For instance, if there is a flag in $(WARNINGCFLAGS) that
you want to negate for a particular target, you can use something like
&lsquo;<samp>prog1_CFLAGS = $(AM_CFLAGS) -no-flag</samp>&rsquo;.  If all of these flags had
been forcefully appended to <code>CFLAGS</code>, there would be no way to
disable one flag.  Yet another reason to leave user variables to
users.
</p>
<p>Finally, we have avoided naming the variable of the example
<code>LIBFOO_LDFLAGS</code> (with an underscore) because that would cause
Automake to think that this is actually a per-target variable (like
<code>mumble_LDFLAGS</code>) for some non-declared <code>LIBFOO</code> target.
</p>
<a name="Other-Variables"></a>
<h4 class="subheading">Other Variables</h4>

<p>There are other variables in Automake that follow similar principles
to allow user options.  For instance, Texinfo rules (see <a href="#Texinfo">Texinfo</a>)
use <code>MAKEINFOFLAGS</code> and <code>AM_MAKEINFOFLAGS</code>.  Similarly,
DejaGnu tests (see <a href="#DejaGnu-Tests">DejaGnu Tests</a>) use <code>RUNTESTDEFAULTFLAGS</code> and
<code>AM_RUNTESTDEFAULTFLAGS</code>.  The tags and ctags rules
(see <a href="#Tags">Tags</a>) use <code>ETAGSFLAGS</code>, <code>AM_ETAGSFLAGS</code>,
<code>CTAGSFLAGS</code>, and <code>AM_CTAGSFLAGS</code>.  Java rules
(see <a href="#Java">Java</a>) use <code>JAVACFLAGS</code> and <code>AM_JAVACFLAGS</code>.  None
of these rules support per-target flags (yet).
</p>
<p>To some extent, even <code>AM_MAKEFLAGS</code> (see <a href="#Subdirectories">Subdirectories</a>)
obeys this naming scheme.  The slight difference is that
<code>MAKEFLAGS</code> is passed to sub-<code>make</code>s implicitly by
<code>make</code> itself.
</p>
<p><code>ARFLAGS</code> (see <a href="#A-Library">A Library</a>) is usually defined by Automake and
has neither <code>AM_</code> nor per-target cousin.
</p>
<p>Finally you should not think that the existence of a per-target
variable implies the existence of an <code>AM_</code> variable or of a user
variable.  For instance, the <code>mumble_LDADD</code> per-target variable
overrides the makefile-wide <code>LDADD</code> variable (which is not a user
variable), and <code>mumble_LIBADD</code> exists only as a per-target
variable.  See <a href="#Program-and-Library-Variables">Program and Library Variables</a>.
</p>

<hr>
<a name="Renamed-Objects"></a>
<div class="header">
<p>
Next: <a href="#Per_002dObject-Flags" accesskey="n" rel="next">Per-Object Flags</a>, Previous: <a href="#Flag-Variables-Ordering" accesskey="p" rel="prev">Flag Variables Ordering</a>, Up: <a href="#FAQ" accesskey="u" rel="up">FAQ</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Why-are-object-files-sometimes-renamed_003f"></a>
<h3 class="section">27.7 Why are object files sometimes renamed?</h3>

<p>This happens when per-target compilation flags are used.  Object
files need to be renamed just in case they would clash with object
files compiled from the same sources, but with different flags.
Consider the following example.
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = true false
true_SOURCES = generic.c
true_CPPFLAGS = -DEXIT_CODE=0
false_SOURCES = generic.c
false_CPPFLAGS = -DEXIT_CODE=1
</pre></div>

<p>Obviously the two programs are built from the same source, but it
would be bad if they shared the same object, because <samp>generic.o</samp>
cannot be built with both &lsquo;<samp>-DEXIT_CODE=0</samp>&rsquo; <em>and</em>
&lsquo;<samp>-DEXIT_CODE=1</samp>&rsquo;.  Therefore <code>automake</code> outputs rules to
build two different objects: <samp>true-generic.o</samp> and
<samp>false-generic.o</samp>.
</p>
<p><code>automake</code> doesn&rsquo;t actually look whether source files are
shared to decide if it must rename objects.  It will just rename all
objects of a target as soon as it sees per-target compilation flags
used.
</p>
<p>It&rsquo;s OK to share object files when per-target compilation flags are not
used.  For instance, <samp>true</samp> and <samp>false</samp> will both use
<samp>version.o</samp> in the following example.
</p>
<div class="example">
<pre class="example">AM_CPPFLAGS = -DVERSION=1.0
bin_PROGRAMS = true false
true_SOURCES = true.c version.c
false_SOURCES = false.c version.c
</pre></div>

<p>Note that the renaming of objects is also affected by the
<code>_SHORTNAME</code> variable (see <a href="#Program-and-Library-Variables">Program and Library Variables</a>).
</p>

<hr>
<a name="Per_002dObject-Flags"></a>
<div class="header">
<p>
Next: <a href="#Multiple-Outputs" accesskey="n" rel="next">Multiple Outputs</a>, Previous: <a href="#Renamed-Objects" accesskey="p" rel="prev">Renamed Objects</a>, Up: <a href="#FAQ" accesskey="u" rel="up">FAQ</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Per_002dObject-Flags-Emulation"></a>
<h3 class="section">27.8 Per-Object Flags Emulation</h3>
<a name="index-Per_002dobject-flags_002c-emulated"></a>

<div class="display">
<pre class="display">One of my source files needs to be compiled with different flags.  How
do I do?
</pre></div>

<p>Automake supports per-program and per-library compilation flags (see
<a href="#Program-and-Library-Variables">Program and Library Variables</a> and <a href="#Flag-Variables-Ordering">Flag Variables Ordering</a>).  With this you can define compilation flags that apply to
all files compiled for a target.  For instance, in
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = foo
foo_SOURCES = foo.c foo.h bar.c bar.h main.c
foo_CFLAGS = -some -flags
</pre></div>

<p><samp>foo-foo.o</samp>, <samp>foo-bar.o</samp>, and <samp>foo-main.o</samp> will all be
compiled with &lsquo;<samp>-some -flags</samp>&rsquo;.  (If you wonder about the names of
these object files, see <a href="#Renamed-Objects">Renamed Objects</a>.)  Note that
<code>foo_CFLAGS</code> gives the flags to use when compiling all the C
sources of the <em>program</em> <code>foo</code>, it has nothing to do with
<samp>foo.c</samp> or <samp>foo-foo.o</samp> specifically.
</p>
<p>What if <samp>foo.c</samp> needs to be compiled into <samp>foo.o</samp> using some
specific flags, that none of the other files requires?  Obviously
per-program flags are not directly applicable here.  Something like
per-object flags are expected, i.e., flags that would be used only
when creating <samp>foo-foo.o</samp>.  Automake does not support that,
however this is easy to simulate using a library that contains only
that object, and compiling this library with per-library flags.
</p>
<div class="example">
<pre class="example">bin_PROGRAMS = foo
foo_SOURCES = bar.c bar.h main.c
foo_CFLAGS = -some -flags
foo_LDADD = libfoo.a
noinst_LIBRARIES = libfoo.a
libfoo_a_SOURCES = foo.c foo.h
libfoo_a_CFLAGS = -some -other -flags
</pre></div>

<p>Here <samp>foo-bar.o</samp> and <samp>foo-main.o</samp> will all be
compiled with &lsquo;<samp>-some -flags</samp>&rsquo;, while <samp>libfoo_a-foo.o</samp> will
be compiled using &lsquo;<samp>-some -other -flags</samp>&rsquo;.  Eventually, all
three objects will be linked to form <samp>foo</samp>.
</p>
<p>This trick can also be achieved using Libtool convenience libraries,
for instance &lsquo;<samp>noinst_LTLIBRARIES = libfoo.la</samp>&rsquo; (see <a href="#Libtool-Convenience-Libraries">Libtool Convenience Libraries</a>).
</p>
<p>Another tempting idea to implement per-object flags is to override the
compile rules <code>automake</code> would output for these files.
Automake will not define a rule for a target you have defined, so you
could think about defining the &lsquo;<samp>foo-foo.o: foo.c</samp>&rsquo; rule yourself.
We recommend against this, because this is error prone.  For instance,
if you add such a rule to the first example, it will break the day you
decide to remove <code>foo_CFLAGS</code> (because <samp>foo.c</samp> will then be
compiled as <samp>foo.o</samp> instead of <samp>foo-foo.o</samp>, see <a href="#Renamed-Objects">Renamed Objects</a>).  Also in order to support dependency tracking, the two
<samp>.o</samp>/<samp>.obj</samp> extensions, and all the other flags variables
involved in a compilation, you will end up modifying a copy of the
rule previously output by <code>automake</code> for this file.  If a new
release of Automake generates a different rule, your copy will need to
be updated by hand.
</p>
<hr>
<a name="Multiple-Outputs"></a>
<div class="header">
<p>
Next: <a href="#Hard_002dCoded-Install-Paths" accesskey="n" rel="next">Hard-Coded Install Paths</a>, Previous: <a href="#Per_002dObject-Flags" accesskey="p" rel="prev">Per-Object Flags</a>, Up: <a href="#FAQ" accesskey="u" rel="up">FAQ</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Handling-Tools-that-Produce-Many-Outputs"></a>
<h3 class="section">27.9 Handling Tools that Produce Many Outputs</h3>
<a name="index-multiple-outputs_002c-rules-with"></a>
<a name="index-many-outputs_002c-rules-with"></a>
<a name="index-rules-with-multiple-outputs"></a>

<p>This section describes a <code>make</code> idiom that can be used when a
tool produces multiple output files.  It is not specific to Automake
and can be used in ordinary <samp>Makefile</samp>s.
</p>
<p>Suppose we have a program called <code>foo</code> that will read one file
called <samp>data.foo</samp> and produce two files named <samp>data.c</samp> and
<samp>data.h</samp>.  We want to write a <samp>Makefile</samp> rule that captures
this one-to-two dependency.
</p>
<p>The naive rule is incorrect:
</p>
<div class="example">
<pre class="example"># This is incorrect.
data.c data.h: data.foo
        foo data.foo
</pre></div>

<p>What the above rule really says is that <samp>data.c</samp> and
<samp>data.h</samp> each depend on <samp>data.foo</samp>, and can each be built by
running &lsquo;<samp>foo data.foo</samp>&rsquo;.  In other words it is equivalent to:
</p>
<div class="example">
<pre class="example"># We do not want this.
data.c: data.foo
        foo data.foo
data.h: data.foo
        foo data.foo
</pre></div>

<p>which means that <code>foo</code> can be run twice.  Usually it will not
be run twice, because <code>make</code> implementations are smart enough
to check for the existence of the second file after the first one has
been built; they will therefore detect that it already exists.
However there are a few situations where it can run twice anyway:
</p>
<ul>
<li> The most worrying case is when running a parallel <code>make</code>.  If
<samp>data.c</samp> and <samp>data.h</samp> are built in parallel, two &lsquo;<samp>foo
data.foo</samp>&rsquo; commands will run concurrently.  This is harmful.
</li><li> Another case is when the dependency (here <samp>data.foo</samp>) is
(or depends upon) a phony target.
</li></ul>

<p>A solution that works with parallel <code>make</code> but not with
phony dependencies is the following:
</p>
<div class="example">
<pre class="example">data.c data.h: data.foo
        foo data.foo
data.h: data.c
</pre></div>

<p>The above rules are equivalent to
</p>
<div class="example">
<pre class="example">data.c: data.foo
        foo data.foo
data.h: data.foo data.c
        foo data.foo
</pre></div>

<p>therefore a parallel <code>make</code> will have to serialize the builds
of <samp>data.c</samp> and <samp>data.h</samp>, and will detect that the second is
no longer needed once the first is over.
</p>
<p>Using this pattern is probably enough for most cases.  However it does
not scale easily to more output files (in this scheme all output files
must be totally ordered by the dependency relation), so we will
explore a more complicated solution.
</p>
<p>Another idea is to write the following:
</p>
<div class="example">
<pre class="example"># There is still a problem with this one.
data.c: data.foo
        foo data.foo
data.h: data.c
</pre></div>

<p>The idea is that &lsquo;<samp>foo data.foo</samp>&rsquo; is run only when <samp>data.c</samp>
needs to be updated, but we further state that <samp>data.h</samp> depends
upon <samp>data.c</samp>.  That way, if <samp>data.h</samp> is required and
<samp>data.foo</samp> is out of date, the dependency on <samp>data.c</samp> will
trigger the build.
</p>
<p>This is almost perfect, but suppose we have built <samp>data.h</samp> and
<samp>data.c</samp>, and then we erase <samp>data.h</samp>.  Then, running
&lsquo;<samp>make data.h</samp>&rsquo; will not rebuild <samp>data.h</samp>.  The above rules
just state that <samp>data.c</samp> must be up-to-date with respect to
<samp>data.foo</samp>, and this is already the case.
</p>
<p>What we need is a rule that forces a rebuild when <samp>data.h</samp> is
missing.  Here it is:
</p>
<div class="example">
<pre class="example">data.c: data.foo
        foo data.foo
data.h: data.c
## Recover from the removal of $@
        @if test -f $@; then :; else \
          rm -f data.c; \
          $(MAKE) $(AM_MAKEFLAGS) data.c; \
        fi
</pre></div>

<p>The above scheme can be extended to handle more outputs and more
inputs.  One of the outputs is selected to serve as a witness to the
successful completion of the command, it depends upon all inputs, and
all other outputs depend upon it.  For instance, if <code>foo</code>
should additionally read <samp>data.bar</samp> and also produce
<samp>data.w</samp> and <samp>data.x</samp>, we would write:
</p>
<div class="example">
<pre class="example">data.c: data.foo data.bar
        foo data.foo data.bar
data.h data.w data.x: data.c
## Recover from the removal of $@
        @if test -f $@; then :; else \
          rm -f data.c; \
          $(MAKE) $(AM_MAKEFLAGS) data.c; \
        fi
</pre></div>

<p>However there are now three minor problems in this setup.  One is related
to the timestamp ordering of <samp>data.h</samp>, <samp>data.w</samp>,
<samp>data.x</samp>, and <samp>data.c</samp>.  Another one is a race condition
if a parallel <code>make</code> attempts to run multiple instances of the
recover block at once.  Finally, the recursive rule breaks &lsquo;<samp>make -n</samp>&rsquo;
when run with GNU <code>make</code> (as well as some other <code>make</code>
implementations), as it may remove <samp>data.h</samp> even when it should not
(see <a href="http://www.gnu.org/software/make/manual/make.html#MAKE-Variable">How the <code>MAKE</code> Variable Works</a> in <cite>The GNU Make Manual</cite>).
</p>
<p>Let us deal with the first problem.  <code>foo</code> outputs four files,
but we do not know in which order these files are created.  Suppose
that <samp>data.h</samp> is created before <samp>data.c</samp>.  Then we have a
weird situation.  The next time <code>make</code> is run, <samp>data.h</samp>
will appear older than <samp>data.c</samp>, the second rule will be
triggered, a shell will be started to execute the &lsquo;<samp>if&hellip;fi</samp>&rsquo;
command, but actually it will just execute the <code>then</code> branch,
that is: nothing.  In other words, because the witness we selected is
not the first file created by <code>foo</code>, <code>make</code> will start
a shell to do nothing each time it is run.
</p>
<p>A simple riposte is to fix the timestamps when this happens.
</p>
<div class="example">
<pre class="example">data.c: data.foo data.bar
        foo data.foo data.bar
data.h data.w data.x: data.c
        @if test -f $@; then \
          touch $@; \
        else \
## Recover from the removal of $@
          rm -f data.c; \
          $(MAKE) $(AM_MAKEFLAGS) data.c; \
        fi
</pre></div>

<p>Another solution is to use a different and dedicated file as witness,
rather than using any of <code>foo</code>&rsquo;s outputs.
</p>
<div class="example">
<pre class="example">data.stamp: data.foo data.bar
        @rm -f data.tmp
        @touch data.tmp
        foo data.foo data.bar
        @mv -f data.tmp $@
data.c data.h data.w data.x: data.stamp
## Recover from the removal of $@
        @if test -f $@; then :; else \
          rm -f data.stamp; \
          $(MAKE) $(AM_MAKEFLAGS) data.stamp; \
        fi
</pre></div>

<p><samp>data.tmp</samp> is created before <code>foo</code> is run, so it has a
timestamp older than output files output by <code>foo</code>.  It is then
renamed to <samp>data.stamp</samp> after <code>foo</code> has run, because we
do not want to update <samp>data.stamp</samp> if <code>foo</code> fails.
</p>
<p>This solution still suffers from the second problem: the race
condition in the recover rule.  If, after a successful build, a user
erases <samp>data.c</samp> and <samp>data.h</samp>, and runs &lsquo;<samp>make -j</samp>&rsquo;, then
<code>make</code> may start both recover rules in parallel.  If the two
instances of the rule execute &lsquo;<samp>$(MAKE) $(AM_MAKEFLAGS)
data.stamp</samp>&rsquo; concurrently the build is likely to fail (for instance, the
two rules will create <samp>data.tmp</samp>, but only one can rename it).
</p>
<p>Admittedly, such a weird situation does not arise during ordinary
builds.  It occurs only when the build tree is mutilated.  Here
<samp>data.c</samp> and <samp>data.h</samp> have been explicitly removed without
also removing <samp>data.stamp</samp> and the other output files.
<code>make clean; make</code> will always recover from these situations even
with parallel makes, so you may decide that the recover rule is solely
to help non-parallel make users and leave things as-is.  Fixing this
requires some locking mechanism to ensure only one instance of the
recover rule rebuilds <samp>data.stamp</samp>.  One could imagine something
along the following lines.
</p>
<div class="example">
<pre class="example">data.c data.h data.w data.x: data.stamp
## Recover from the removal of $@
        @if test -f $@; then :; else \
          trap 'rm -rf data.lock data.stamp' 1 2 13 15; \
## mkdir is a portable test-and-set
          if mkdir data.lock 2&gt;/dev/null; then \
## This code is being executed by the first process.
            rm -f data.stamp; \
            $(MAKE) $(AM_MAKEFLAGS) data.stamp; \
            result=$$?; rm -rf data.lock; exit $$result; \
          else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
            while test -d data.lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
            test -f data.stamp; \
          fi; \
        fi
</pre></div>

<p>Using a dedicated witness, like <samp>data.stamp</samp>, is very handy when
the list of output files is not known beforehand.  As an illustration,
consider the following rules to compile many <samp>*.el</samp> files into
<samp>*.elc</samp> files in a single command.  It does not matter how
<code>ELFILES</code> is defined (as long as it is not empty: empty targets
are not accepted by POSIX).
</p>
<div class="example">
<pre class="example">ELFILES = one.el two.el three.el &hellip;
ELCFILES = $(ELFILES:=c)

elc-stamp: $(ELFILES)
        @rm -f elc-temp
        @touch elc-temp
        $(elisp_comp) $(ELFILES)
        @mv -f elc-temp $@

$(ELCFILES): elc-stamp
        @if test -f $@; then :; else \
## Recover from the removal of $@
          trap 'rm -rf elc-lock elc-stamp' 1 2 13 15; \
          if mkdir elc-lock 2&gt;/dev/null; then \
## This code is being executed by the first process.
            rm -f elc-stamp; \
            $(MAKE) $(AM_MAKEFLAGS) elc-stamp; \
            rmdir elc-lock; \
          else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
            while test -d elc-lock; do sleep 1; done; \
## Succeed if and only if the first process succeeded.
            test -f elc-stamp; exit $$?; \
          fi; \
        fi
</pre></div>

<p>These solutions all still suffer from the third problem, namely that
they break the promise that &lsquo;<samp>make -n</samp>&rsquo; should not cause any actual
changes to the tree.  For those solutions that do not create lock files,
it is possible to split the recover rules into two separate recipe
commands, one of which does all work but the recursion, and the
other invokes the recursive &lsquo;<samp>$(MAKE)</samp>&rsquo;.  The solutions involving
locking could act upon the contents of the &lsquo;<samp>MAKEFLAGS</samp>&rsquo; variable,
but parsing that portably is not easy (see <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#The-Make-Macro-MAKEFLAGS">The Make Macro MAKEFLAGS</a> in <cite>The Autoconf Manual</cite>).  Here is an example:
</p>
<div class="example">
<pre class="example">ELFILES = one.el two.el three.el &hellip;
ELCFILES = $(ELFILES:=c)

elc-stamp: $(ELFILES)
        @rm -f elc-temp
        @touch elc-temp
        $(elisp_comp) $(ELFILES)
        @mv -f elc-temp $@

$(ELCFILES): elc-stamp
## Recover from the removal of $@
        @dry=; for f in x $$MAKEFLAGS; do \
          case $$f in \
            *=*|--*);; \
            *n*) dry=:;; \
          esac; \
        done; \
        if test -f $@; then :; else \
          $$dry trap 'rm -rf elc-lock elc-stamp' 1 2 13 15; \
          if $$dry mkdir elc-lock 2&gt;/dev/null; then \
## This code is being executed by the first process.
            $$dry rm -f elc-stamp; \
            $(MAKE) $(AM_MAKEFLAGS) elc-stamp; \
            $$dry rmdir elc-lock; \
          else \
## This code is being executed by the follower processes.
## Wait until the first process is done.
            while test -d elc-lock &amp;&amp; test -z &quot;$$dry&quot;; do \
              sleep 1; \
            done; \
## Succeed if and only if the first process succeeded.
            $$dry test -f elc-stamp; exit $$?; \
          fi; \
        fi
</pre></div>

<p>For completeness it should be noted that GNU <code>make</code> is able to
express rules with multiple output files using pattern rules
(see <a href="http://www.gnu.org/software/make/manual/make.html#Pattern-Examples">Pattern Rule Examples</a> in <cite>The GNU Make
Manual</cite>).  We do not discuss pattern rules here because they are not
portable, but they can be convenient in packages that assume GNU
<code>make</code>.
</p>

<hr>
<a name="Hard_002dCoded-Install-Paths"></a>
<div class="header">
<p>
Next: <a href="#Debugging-Make-Rules" accesskey="n" rel="next">Debugging Make Rules</a>, Previous: <a href="#Multiple-Outputs" accesskey="p" rel="prev">Multiple Outputs</a>, Up: <a href="#FAQ" accesskey="u" rel="up">FAQ</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Installing-to-Hard_002dCoded-Locations"></a>
<h3 class="section">27.10 Installing to Hard-Coded Locations</h3>

<div class="display">
<pre class="display">My package needs to install some configuration file.  I tried to use
the following rule, but &lsquo;<samp>make distcheck</samp>&rsquo; fails.  Why?

</pre><div class="example">
<pre class="example"># Do not do this.
install-data-local:
        $(INSTALL_DATA) $(srcdir)/afile $(DESTDIR)/etc/afile
</pre></div>
</div>

<div class="display">
<pre class="display">My package needs to populate the installation directory of another
package at install-time.  I can easily compute that installation
directory in <samp>configure</samp>, but if I install files therein,
&lsquo;<samp>make distcheck</samp>&rsquo; fails.  How else should I do?
</pre></div>

<p>These two setups share their symptoms: &lsquo;<samp>make distcheck</samp>&rsquo; fails
because they are installing files to hard-coded paths.  In the later
case the path is not really hard-coded in the package, but we can
consider it to be hard-coded in the system (or in whichever tool that
supplies the path).  As long as the path does not use any of the
standard directory variables (&lsquo;<samp>$(prefix)</samp>&rsquo;, &lsquo;<samp>$(bindir)</samp>&rsquo;,
&lsquo;<samp>$(datadir)</samp>&rsquo;, etc.), the effect will be the same:
user-installations are impossible.
</p>
<p>As a (non-root) user who wants to install a package, you usually have no
right to install anything in <samp>/usr</samp> or <samp>/usr/local</samp>.  So you
do something like &lsquo;<samp>./configure --prefix ~/usr</samp>&rsquo; to install a
package in your own <samp>~/usr</samp> tree.
</p>
<p>If a package attempts to install something to some hard-coded path
(e.g., <samp>/etc/afile</samp>), regardless of this <samp>--prefix</samp> setting,
then the installation will fail.  &lsquo;<samp>make distcheck</samp>&rsquo; performs such
a <samp>--prefix</samp> installation, hence it will fail too.
</p>
<p>Now, there are some easy solutions.
</p>
<p>The above <code>install-data-local</code> example for installing
<samp>/etc/afile</samp> would be better replaced by
</p>
<div class="example">
<pre class="example">sysconf_DATA = afile
</pre></div>

<p>by default <code>sysconfdir</code> will be &lsquo;<samp>$(prefix)/etc</samp>&rsquo;, because
this is what the GNU Standards require.  When such a package is
installed on an FHS compliant system, the installer will have to set
&lsquo;<samp>--sysconfdir=/etc</samp>&rsquo;.  As the maintainer of the package you
should not be concerned by such site policies: use the appropriate
standard directory variable to install your files so that the installer
can easily redefine these variables to match their site conventions.
</p>
<p>Installing files that should be used by another package is slightly
more involved.  Let&rsquo;s take an example and assume you want to install
a shared library that is a Python extension module.  If you ask Python
where to install the library, it will answer something like this:
</p>
<div class="example">
<pre class="example">% <kbd>python -c 'from distutils import sysconfig;
             print sysconfig.get_python_lib(1,0)'</kbd>
/usr/lib/python2.5/site-packages
</pre></div>

<p>If you indeed use this absolute path to install your shared library,
non-root users will not be able to install the package, hence
distcheck fails.
</p>
<p>Let&rsquo;s do better.  The &lsquo;<samp>sysconfig.get_python_lib()</samp>&rsquo; function
actually accepts a third argument that will replace Python&rsquo;s
installation prefix.
</p>
<div class="example">
<pre class="example">% <kbd>python -c 'from distutils import sysconfig;
             print sysconfig.get_python_lib(1,0,&quot;${exec_prefix}&quot;)'</kbd>
${exec_prefix}/lib/python2.5/site-packages
</pre></div>

<p>You can also use this new path.  If you do
</p><ul>
<li> root users can install your package with the same <samp>--prefix</samp>
as Python (you get the behavior of the previous attempt)

</li><li> non-root users can install your package too, they will have the
extension module in a place that is not searched by Python but they
can work around this using environment variables (and if you installed
scripts that use this shared library, it&rsquo;s easy to tell Python were to
look in the beginning of your script, so the script works in both
cases).
</li></ul>

<p>The <code>AM_PATH_PYTHON</code> macro uses similar commands to define
&lsquo;<samp>$(pythondir)</samp>&rsquo; and &lsquo;<samp>$(pyexecdir)</samp>&rsquo; (see <a href="#Python">Python</a>).
</p>
<p>Of course not all tools are as advanced as Python regarding that
substitution of <var>prefix</var>.  So another strategy is to figure the
part of the installation directory that must be preserved.  For
instance, here is how <code>AM_PATH_LISPDIR</code> (see <a href="#Emacs-Lisp">Emacs Lisp</a>)
computes &lsquo;<samp>$(lispdir)</samp>&rsquo;:
</p>
<div class="example">
<pre class="example">$EMACS -batch -Q -eval '(while load-path
  (princ (concat (car load-path) &quot;\n&quot;))
  (setq load-path (cdr load-path)))' &gt;conftest.out
lispdir=`sed -n
  -e 's,/$,,'
  -e '/.*\/lib\/x*emacs\/site-lisp$/{
        s,.*/lib/\(x*emacs/site-lisp\)$,${libdir}/\1,;p;q;
      }'
  -e '/.*\/share\/x*emacs\/site-lisp$/{
        s,.*/share/\(x*emacs/site-lisp\),${datarootdir}/\1,;p;q;
      }'
  conftest.out`
</pre></div>

<p>I.e., it just picks the first directory that looks like
<samp>*/lib/*emacs/site-lisp</samp> or <samp>*/share/*emacs/site-lisp</samp> in
the search path of emacs, and then substitutes &lsquo;<samp>${libdir}</samp>&rsquo; or
&lsquo;<samp>${datadir}</samp>&rsquo; appropriately.
</p>
<p>The emacs case looks complicated because it processes a list and
expects two possible layouts, otherwise it&rsquo;s easy, and the benefits for
non-root users are really worth the extra <code>sed</code> invocation.
</p>

<hr>
<a name="Debugging-Make-Rules"></a>
<div class="header">
<p>
Next: <a href="#Reporting-Bugs" accesskey="n" rel="next">Reporting Bugs</a>, Previous: <a href="#Hard_002dCoded-Install-Paths" accesskey="p" rel="prev">Hard-Coded Install Paths</a>, Up: <a href="#FAQ" accesskey="u" rel="up">FAQ</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Debugging-Make-Rules-1"></a>
<h3 class="section">27.11 Debugging Make Rules</h3>
<a name="index-debugging-rules"></a>
<a name="index-rules_002c-debugging"></a>

<p>The rules and dependency trees generated by <code>automake</code> can get
rather complex, and leave the developer head-scratching when things
don&rsquo;t work as expected.  Besides the debug options provided by the
<code>make</code> command (see <a href="http://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</a> in <cite>The GNU Make
Manual</cite>), here&rsquo;s a couple of further hints for debugging makefiles
generated by <code>automake</code> effectively:
</p>
<ul>
<li> If less verbose output has been enabled in the package with the use
of silent rules (see <a href="#Automake-Silent-Rules">Automake Silent Rules</a>), you can use
<code>make V=1</code> to see the commands being executed.
</li><li> <code>make -n</code> can help show what would be done without actually doing
it.  Note however, that this will <em>still execute</em> commands prefixed
with &lsquo;<samp>+</samp>&rsquo;, and, when using GNU <code>make</code>, commands that contain
the strings &lsquo;<samp>$(MAKE)</samp>&rsquo; or &lsquo;<samp>${MAKE}</samp>&rsquo; (see <a href="http://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of
Execution</a> in <cite>The GNU Make Manual</cite>).
Typically, this is helpful to show what recursive rules would do, but it
means that, in your own rules, you should not mix such recursion with
actions that change any files.<a name="DOCF8" href="#FOOT8"><sup>8</sup></a>  Furthermore, note that GNU <code>make</code> will update
prerequisites for the <samp>Makefile</samp> file itself even with <samp>-n</samp>
(see <a href="http://www.gnu.org/software/make/manual/make.html#Remaking-Makefiles">Remaking Makefiles</a> in <cite>The GNU Make Manual</cite>).
</li><li> <code>make SHELL=&quot;/bin/bash -vx&quot;</code> can help debug complex rules.
See <a href="http://www.gnu.org/software/autoconf/manual/autoconf.html#The-Make-Macro-SHELL">The Make Macro SHELL</a> in <cite>The Autoconf Manual</cite>, for some
portability quirks associated with this construct.
</li><li> <code>echo 'print: ; @echo &quot;$(VAR)&quot;' | make -f Makefile -f - print</code>
can be handy to examine the expanded value of variables.  You may need
to use a target other than &lsquo;<samp>print</samp>&rsquo; if that is already used or a
file with that name exists.
</li><li> <a href="http://bashdb.sourceforge.net/remake/">http://bashdb.sourceforge.net/remake/</a> provides a modified
GNU <code>make</code> command called <code>remake</code> that copes with
complex GNU <code>make</code>-specific Makefiles and allows to trace
execution, examine variables, and call rules interactively, much like
a debugger.
</li></ul>


<hr>
<a name="Reporting-Bugs"></a>
<div class="header">
<p>
Previous: <a href="#Debugging-Make-Rules" accesskey="p" rel="prev">Debugging Make Rules</a>, Up: <a href="#FAQ" accesskey="u" rel="up">FAQ</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Reporting-Bugs-1"></a>
<h3 class="section">27.12 Reporting Bugs</h3>

<p>Most nontrivial software has bugs.  Automake is no exception.  Although
we cannot promise we can or will fix a bug, and we might not even agree
that it is a bug, we want to hear about problems you encounter. Often we
agree they are bugs and want to fix them.
</p>
<p>To make it possible for us to fix a bug, please report it. In order to
do so effectively, it helps to know when and how to do it.
</p>
<p>Before reporting a bug, it is a good idea to see if it is already known.
You can look at the <a href="http://debbugs.gnu.org/">GNU Bug Tracker</a>
and the <a href="http://lists.gnu.org/archive/html/bug-automake/">bug-automake mailing list archives</a> for previous bug reports.  We
previously used a
<a href="http://sourceware.org/cgi-bin/gnatsweb.pl?database=automake">Gnats database</a> for bug tracking, so some bugs might have been reported
there already.  Please do not use it for new bug reports, however.
</p>
<p>If the bug is not already known, it should be reported.  It is very
important to report bugs in a way that is useful and efficient.  For
this, please familiarize yourself with
<a href="http://www.chiark.greenend.org.uk/~sgtatham/bugs.html">How to
Report Bugs Effectively</a> and
<a href="http://catb.org/~esr/faqs/smart-questions.html">How to Ask
Questions the Smart Way</a>.  This helps you and developers to save time
which can then be spent on fixing more bugs and implementing more
features.
</p>
<p>For a bug report, a feature request or other suggestions, please send
email to <a href="mailto:bug-automake@gnu.org">bug-automake@gnu.org</a>.  This will then open a new
bug in the <a href="http://debbugs.gnu.org/automake">bug tracker</a>.  Be
sure to include the versions of Autoconf and Automake that you use.
Ideally, post a minimal <samp>Makefile.am</samp> and <samp>configure.ac</samp> that
reproduces the problem you encounter.  If you have encountered test
suite failures, please attach the <samp>test-suite.log</samp> file.
</p>

<hr>
<a name="Copying-This-Manual"></a>
<div class="header">
<p>
Next: <a href="#Indices" accesskey="n" rel="next">Indices</a>, Previous: <a href="#FAQ" accesskey="p" rel="prev">FAQ</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Copying-This-Manual-1"></a>
<h2 class="appendix">Appendix A Copying This Manual</h2>

<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#GNU-Free-Documentation-License" accesskey="1">GNU Free Documentation License</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">License for copying this manual
</td></tr>
</table>

<hr>
<a name="GNU-Free-Documentation-License"></a>
<div class="header">
<p>
Up: <a href="#Copying-This-Manual" accesskey="u" rel="up">Copying This Manual</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="GNU-Free-Documentation-License-1"></a>
<h3 class="appendixsec">A.1 GNU Free Documentation License</h3>
<div align="center">Version 1.3, 3 November 2008
</div>

<div class="display">
<pre class="display">Copyright &copy; 2000-2014 Free Software Foundation, Inc.
<a href="http://fsf.org/">http://fsf.org/</a>

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
</pre></div>

<ol>
<li> PREAMBLE

<p>The purpose of this License is to make a manual, textbook, or other
functional and useful document <em>free</em> in the sense of freedom: to
assure everyone the effective freedom to copy and redistribute it,
with or without modifying it, either commercially or noncommercially.
Secondarily, this License preserves for the author and publisher a way
to get credit for their work, while not being considered responsible
for modifications made by others.
</p>
<p>This License is a kind of &ldquo;copyleft&rdquo;, which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.
</p>
<p>We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.
</p>
</li><li> APPLICABILITY AND DEFINITIONS

<p>This License applies to any manual or other work, in any medium, that
contains a notice placed by the copyright holder saying it can be
distributed under the terms of this License.  Such a notice grants a
world-wide, royalty-free license, unlimited in duration, to use that
work under the conditions stated herein.  The &ldquo;Document&rdquo;, below,
refers to any such manual or work.  Any member of the public is a
licensee, and is addressed as &ldquo;you&rdquo;.  You accept the license if you
copy, modify or distribute the work in a way requiring permission
under copyright law.
</p>
<p>A &ldquo;Modified Version&rdquo; of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.
</p>
<p>A &ldquo;Secondary Section&rdquo; is a named appendix or a front-matter section
of the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document&rsquo;s overall
subject (or to related matters) and contains nothing that could fall
directly within that overall subject.  (Thus, if the Document is in
part a textbook of mathematics, a Secondary Section may not explain
any mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.
</p>
<p>The &ldquo;Invariant Sections&rdquo; are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.  If a
section does not fit the above definition of Secondary then it is not
allowed to be designated as Invariant.  The Document may contain zero
Invariant Sections.  If the Document does not identify any Invariant
Sections then there are none.
</p>
<p>The &ldquo;Cover Texts&rdquo; are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.  A Front-Cover Text may
be at most 5 words, and a Back-Cover Text may be at most 25 words.
</p>
<p>A &ldquo;Transparent&rdquo; copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, that is suitable for revising the document
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup, or absence of markup, has been arranged to thwart
or discourage subsequent modification by readers is not Transparent.
An image format is not Transparent if used for any substantial amount
of text.  A copy that is not &ldquo;Transparent&rdquo; is called &ldquo;Opaque&rdquo;.
</p>
<p>Examples of suitable formats for Transparent copies include plain
<small>ASCII</small> without markup, Texinfo input format, LaTeX input
format, <acronym>SGML</acronym> or <acronym>XML</acronym> using a publicly available
<acronym>DTD</acronym>, and standard-conforming simple <acronym>HTML</acronym>,
PostScript or <acronym>PDF</acronym> designed for human modification.  Examples
of transparent image formats include <acronym>PNG</acronym>, <acronym>XCF</acronym> and
<acronym>JPG</acronym>.  Opaque formats include proprietary formats that can be
read and edited only by proprietary word processors, <acronym>SGML</acronym> or
<acronym>XML</acronym> for which the <acronym>DTD</acronym> and/or processing tools are
not generally available, and the machine-generated <acronym>HTML</acronym>,
PostScript or <acronym>PDF</acronym> produced by some word processors for
output purposes only.
</p>
<p>The &ldquo;Title Page&rdquo; means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, &ldquo;Title Page&rdquo; means
the text near the most prominent appearance of the work&rsquo;s title,
preceding the beginning of the body of the text.
</p>
<p>The &ldquo;publisher&rdquo; means any person or entity that distributes copies
of the Document to the public.
</p>
<p>A section &ldquo;Entitled XYZ&rdquo; means a named subunit of the Document whose
title either is precisely XYZ or contains XYZ in parentheses following
text that translates XYZ in another language.  (Here XYZ stands for a
specific section name mentioned below, such as &ldquo;Acknowledgements&rdquo;,
&ldquo;Dedications&rdquo;, &ldquo;Endorsements&rdquo;, or &ldquo;History&rdquo;.)  To &ldquo;Preserve the Title&rdquo;
of such a section when you modify the Document means that it remains a
section &ldquo;Entitled XYZ&rdquo; according to this definition.
</p>
<p>The Document may include Warranty Disclaimers next to the notice which
states that this License applies to the Document.  These Warranty
Disclaimers are considered to be included by reference in this
License, but only as regards disclaiming warranties: any other
implication that these Warranty Disclaimers may have is void and has
no effect on the meaning of this License.
</p>
</li><li> VERBATIM COPYING

<p>You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.
</p>
<p>You may also lend copies, under the same conditions stated above, and
you may publicly display copies.
</p>
</li><li> COPYING IN QUANTITY

<p>If you publish printed copies (or copies in media that commonly have
printed covers) of the Document, numbering more than 100, and the
Document&rsquo;s license notice requires Cover Texts, you must enclose the
copies in covers that carry, clearly and legibly, all of these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.
</p>
<p>If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.
</p>
<p>If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a computer-network location from which the general network-using
public has access to download using public-standard network protocols
a complete Transparent copy of the Document, free of added material.
If you use the latter option, you must take reasonably prudent steps,
when you begin distribution of Opaque copies in quantity, to ensure
that this Transparent copy will remain thus accessible at the stated
location until at least one year after the last time you distribute an
Opaque copy (directly or through your agents or retailers) of that
edition to the public.
</p>
<p>It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.
</p>
</li><li> MODIFICATIONS

<p>You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:
</p>
<ol>
<li> Use in the Title Page (and on the covers, if any) a title distinct
from that of the Document, and from those of previous versions
(which should, if there were any, be listed in the History section
of the Document).  You may use the same title as a previous version
if the original publisher of that version gives permission.

</li><li> List on the Title Page, as authors, one or more persons or entities
responsible for authorship of the modifications in the Modified
Version, together with at least five of the principal authors of the
Document (all of its principal authors, if it has fewer than five),
unless they release you from this requirement.

</li><li> State on the Title page the name of the publisher of the
Modified Version, as the publisher.

</li><li> Preserve all the copyright notices of the Document.

</li><li> Add an appropriate copyright notice for your modifications
adjacent to the other copyright notices.

</li><li> Include, immediately after the copyright notices, a license notice
giving the public permission to use the Modified Version under the
terms of this License, in the form shown in the Addendum below.

</li><li> Preserve in that license notice the full lists of Invariant Sections
and required Cover Texts given in the Document&rsquo;s license notice.

</li><li> Include an unaltered copy of this License.

</li><li> Preserve the section Entitled &ldquo;History&rdquo;, Preserve its Title, and add
to it an item stating at least the title, year, new authors, and
publisher of the Modified Version as given on the Title Page.  If
there is no section Entitled &ldquo;History&rdquo; in the Document, create one
stating the title, year, authors, and publisher of the Document as
given on its Title Page, then add an item describing the Modified
Version as stated in the previous sentence.

</li><li> Preserve the network location, if any, given in the Document for
public access to a Transparent copy of the Document, and likewise
the network locations given in the Document for previous versions
it was based on.  These may be placed in the &ldquo;History&rdquo; section.
You may omit a network location for a work that was published at
least four years before the Document itself, or if the original
publisher of the version it refers to gives permission.

</li><li> For any section Entitled &ldquo;Acknowledgements&rdquo; or &ldquo;Dedications&rdquo;, Preserve
the Title of the section, and preserve in the section all the
substance and tone of each of the contributor acknowledgements and/or
dedications given therein.

</li><li> Preserve all the Invariant Sections of the Document,
unaltered in their text and in their titles.  Section numbers
or the equivalent are not considered part of the section titles.

</li><li> Delete any section Entitled &ldquo;Endorsements&rdquo;.  Such a section
may not be included in the Modified Version.

</li><li> Do not retitle any existing section to be Entitled &ldquo;Endorsements&rdquo; or
to conflict in title with any Invariant Section.

</li><li> Preserve any Warranty Disclaimers.
</li></ol>

<p>If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version&rsquo;s license notice.
These titles must be distinct from any other section titles.
</p>
<p>You may add a section Entitled &ldquo;Endorsements&rdquo;, provided it contains
nothing but endorsements of your Modified Version by various
parties&mdash;for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.
</p>
<p>You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.
</p>
<p>The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.
</p>
</li><li> COMBINING DOCUMENTS

<p>You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice, and that you preserve all their Warranty Disclaimers.
</p>
<p>The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.
</p>
<p>In the combination, you must combine any sections Entitled &ldquo;History&rdquo;
in the various original documents, forming one section Entitled
&ldquo;History&rdquo;; likewise combine any sections Entitled &ldquo;Acknowledgements&rdquo;,
and any sections Entitled &ldquo;Dedications&rdquo;.  You must delete all
sections Entitled &ldquo;Endorsements.&rdquo;
</p>
</li><li> COLLECTIONS OF DOCUMENTS

<p>You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.
</p>
<p>You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.
</p>
</li><li> AGGREGATION WITH INDEPENDENT WORKS

<p>A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, is called an &ldquo;aggregate&rdquo; if the copyright
resulting from the compilation is not used to limit the legal rights
of the compilation&rsquo;s users beyond what the individual works permit.
When the Document is included in an aggregate, this License does not
apply to the other works in the aggregate which are not themselves
derivative works of the Document.
</p>
<p>If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one half of
the entire aggregate, the Document&rsquo;s Cover Texts may be placed on
covers that bracket the Document within the aggregate, or the
electronic equivalent of covers if the Document is in electronic form.
Otherwise they must appear on printed covers that bracket the whole
aggregate.
</p>
</li><li> TRANSLATION

<p>Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License, and all the license notices in the
Document, and any Warranty Disclaimers, provided that you also include
the original English version of this License and the original versions
of those notices and disclaimers.  In case of a disagreement between
the translation and the original version of this License or a notice
or disclaimer, the original version will prevail.
</p>
<p>If a section in the Document is Entitled &ldquo;Acknowledgements&rdquo;,
&ldquo;Dedications&rdquo;, or &ldquo;History&rdquo;, the requirement (section 4) to Preserve
its Title (section 1) will typically require changing the actual
title.
</p>
</li><li> TERMINATION

<p>You may not copy, modify, sublicense, or distribute the Document
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense, or distribute it is void, and
will automatically terminate your rights under this License.
</p>
<p>However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally
terminates your license, and (b) permanently, if the copyright holder
fails to notify you of the violation by some reasonable means prior to
60 days after the cessation.
</p>
<p>Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.
</p>
<p>Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, receipt of a copy of some or all of the same material does
not give you any rights to use it.
</p>
</li><li> FUTURE REVISIONS OF THIS LICENSE

<p>The Free Software Foundation may publish new, revised versions
of the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
<a href="http://www.gnu.org/copyleft/">http://www.gnu.org/copyleft/</a>.
</p>
<p>Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License &ldquo;or any later version&rdquo; applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.  If the Document
specifies that a proxy can decide which future versions of this
License can be used, that proxy&rsquo;s public statement of acceptance of a
version permanently authorizes you to choose that version for the
Document.
</p>
</li><li> RELICENSING

<p>&ldquo;Massive Multiauthor Collaboration Site&rdquo; (or &ldquo;MMC Site&rdquo;) means any
World Wide Web server that publishes copyrightable works and also
provides prominent facilities for anybody to edit those works.  A
public wiki that anybody can edit is an example of such a server.  A
&ldquo;Massive Multiauthor Collaboration&rdquo; (or &ldquo;MMC&rdquo;) contained in the
site means any set of copyrightable works thus published on the MMC
site.
</p>
<p>&ldquo;CC-BY-SA&rdquo; means the Creative Commons Attribution-Share Alike 3.0
license published by Creative Commons Corporation, a not-for-profit
corporation with a principal place of business in San Francisco,
California, as well as future copyleft versions of that license
published by that same organization.
</p>
<p>&ldquo;Incorporate&rdquo; means to publish or republish a Document, in whole or
in part, as part of another Document.
</p>
<p>An MMC is &ldquo;eligible for relicensing&rdquo; if it is licensed under this
License, and if all works that were first published under this License
somewhere other than this MMC, and subsequently incorporated in whole
or in part into the MMC, (1) had no cover texts or invariant sections,
and (2) were thus incorporated prior to November 1, 2008.
</p>
<p>The operator of an MMC Site may republish an MMC contained in the site
under CC-BY-SA on the same site at any time before August 1, 2009,
provided the MMC is eligible for relicensing.
</p>
</li></ol>

<a name="ADDENDUM_003a-How-to-use-this-License-for-your-documents"></a>
<h3 class="heading">ADDENDUM: How to use this License for your documents</h3>

<p>To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:
</p>
<div class="smallexample">
<pre class="smallexample">  Copyright (C)  <var>year</var>  <var>your name</var>.
  Permission is granted to copy, distribute and/or modify this document
  under the terms of the GNU Free Documentation License, Version 1.3
  or any later version published by the Free Software Foundation;
  with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
  Texts.  A copy of the license is included in the section entitled ``GNU
  Free Documentation License''.
</pre></div>

<p>If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the &ldquo;with&hellip;Texts.&rdquo; line with this:
</p>
<div class="smallexample">
<pre class="smallexample">    with the Invariant Sections being <var>list their titles</var>, with
    the Front-Cover Texts being <var>list</var>, and with the Back-Cover Texts
    being <var>list</var>.
</pre></div>

<p>If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.
</p>
<p>If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.
</p>


<hr>
<a name="Indices"></a>
<div class="header">
<p>
Previous: <a href="#Copying-This-Manual" accesskey="p" rel="prev">Copying This Manual</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Indices-1"></a>
<h2 class="appendix">Appendix B Indices</h2>

<table class="menu" border="0" cellspacing="0">
<tr><td align="left" valign="top">&bull; <a href="#Macro-Index" accesskey="1">Macro Index</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Index of Autoconf macros
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#Variable-Index" accesskey="2">Variable Index</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Index of Makefile variables
</td></tr>
<tr><td align="left" valign="top">&bull; <a href="#General-Index" accesskey="3">General Index</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">General index
</td></tr>
</table>

<hr>
<a name="Macro-Index"></a>
<div class="header">
<p>
Next: <a href="#Variable-Index" accesskey="n" rel="next">Variable Index</a>, Up: <a href="#Indices" accesskey="u" rel="up">Indices</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Macro-Index-1"></a>
<h3 class="appendixsec">B.1 Macro Index</h3>

<table><tr><th valign="top">Jump to: &nbsp; </th><td><a class="summary-letter" href="#Macro-Index_fn_symbol-1"><b>_</b></a>
 &nbsp; 
<br>
<a class="summary-letter" href="#Macro-Index_fn_letter-A"><b>A</b></a>
 &nbsp; 
<a class="summary-letter" href="#Macro-Index_fn_letter-M"><b>M</b></a>
 &nbsp; 
</td></tr></table>
<table class="index-fn" border="0">
<tr><td></td><th align="left">Index Entry</th><td>&nbsp;</td><th align="left"> Section</th></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Macro-Index_fn_symbol-1">_</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fAM_005fDEPENDENCIES"><code>_AM_DEPENDENCIES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Private-Macros">Private Macros</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Macro-Index_fn_letter-A">A</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fCANONICAL_005fBUILD"><code>AC_CANONICAL_BUILD</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fCANONICAL_005fHOST"><code>AC_CANONICAL_HOST</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fCANONICAL_005fTARGET"><code>AC_CANONICAL_TARGET</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fCONFIG_005fAUX_005fDIR-1"><code>AC_CONFIG_AUX_DIR</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fCONFIG_005fAUX_005fDIR"><code>AC_CONFIG_AUX_DIR</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Subpackages">Subpackages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fCONFIG_005fFILES"><code>AC_CONFIG_FILES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Requirements">Requirements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fCONFIG_005fHEADERS"><code>AC_CONFIG_HEADERS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fCONFIG_005fLIBOBJ_005fDIR-1"><code>AC_CONFIG_LIBOBJ_DIR</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fCONFIG_005fLIBOBJ_005fDIR"><code>AC_CONFIG_LIBOBJ_DIR</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#LIBOBJS">LIBOBJS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fCONFIG_005fLINKS"><code>AC_CONFIG_LINKS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fCONFIG_005fSUBDIRS"><code>AC_CONFIG_SUBDIRS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Subpackages">Subpackages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fDEFUN"><code>AC_DEFUN</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending-aclocal">Extending aclocal</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fF77_005fLIBRARY_005fLDFLAGS"><code>AC_F77_LIBRARY_LDFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fFC_005fSRCEXT"><code>AC_FC_SRCEXT</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fINIT"><code>AC_INIT</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fLIBOBJ-2"><code>AC_LIBOBJ</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fLIBOBJ"><code>AC_LIBOBJ</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#LTLIBOBJS">LTLIBOBJS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fLIBOBJ-1"><code>AC_LIBOBJ</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#LIBOBJS">LIBOBJS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fLIBSOURCE-1"><code>AC_LIBSOURCE</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fLIBSOURCE"><code>AC_LIBSOURCE</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#LIBOBJS">LIBOBJS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fLIBSOURCES"><code>AC_LIBSOURCES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fOUTPUT"><code>AC_OUTPUT</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Requirements">Requirements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fPREREQ"><code>AC_PREREQ</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending-aclocal">Extending aclocal</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fPROG_005fCXX"><code>AC_PROG_CXX</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fPROG_005fF77"><code>AC_PROG_F77</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fPROG_005fFC"><code>AC_PROG_FC</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fPROG_005fLEX"><code>AC_PROG_LEX</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fPROG_005fLEX-1"><code>AC_PROG_LEX</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fPROG_005fLIBTOOL"><code>AC_PROG_LIBTOOL</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fPROG_005fOBJC"><code>AC_PROG_OBJC</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fPROG_005fOBJCXX"><code>AC_PROG_OBJCXX</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fPROG_005fRANLIB"><code>AC_PROG_RANLIB</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fPROG_005fYACC"><code>AC_PROG_YACC</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fREQUIRE_005fAUX_005fFILE"><code>AC_REQUIRE_AUX_FILE</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fSUBST"><code>AC_SUBST</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fCONDITIONAL-1"><code>AM_CONDITIONAL</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fCONDITIONAL"><code>AM_CONDITIONAL</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Usage-of-Conditionals">Usage of Conditionals</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fCONDITIONAL-2"><code>AM_CONDITIONAL</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Usage-of-Conditionals">Usage of Conditionals</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fCOND_005fIF-1"><code>AM_COND_IF</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fCOND_005fIF"><code>AM_COND_IF</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Usage-of-Conditionals">Usage of Conditionals</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fCOND_005fIF-2"><code>AM_COND_IF</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Usage-of-Conditionals">Usage of Conditionals</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fDEP_005fTRACK"><code>AM_DEP_TRACK</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Private-Macros">Private Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fGNU_005fGETTEXT"><code>AM_GNU_GETTEXT</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fGNU_005fGETTEXT_005fINTL_005fSUBDIR"><code>AM_GNU_GETTEXT_INTL_SUBDIR</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fINIT_005fAUTOMAKE"><code>AM_INIT_AUTOMAKE</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Requirements">Requirements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fINIT_005fAUTOMAKE-1"><code>AM_INIT_AUTOMAKE</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fMAINTAINER_005fMODE"><code>AM_MAINTAINER_MODE</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rebuilding">Rebuilding</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fMAINTAINER_005fMODE-1"><code>AM_MAINTAINER_MODE</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#maintainer_002dmode">maintainer-mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fMAINTAINER_005fMODE_0028_005bdefault_002dmode_005d_0029"><code>AM_MAINTAINER_MODE(<span class="roman">[</span><var>default-mode</var><span class="roman">]</span>)</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fMAKE_005fINCLUDE"><code>AM_MAKE_INCLUDE</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Private-Macros">Private Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fMISSING_005fPROG"><code>AM_MISSING_PROG</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fOUTPUT_005fDEPENDENCY_005fCOMMANDS"><code>AM_OUTPUT_DEPENDENCY_COMMANDS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Private-Macros">Private Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fPATH_005fLISPDIR"><code>AM_PATH_LISPDIR</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fPATH_005fPYTHON"><code>AM_PATH_PYTHON</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Python">Python</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fPROG_005fAR"><code>AM_PROG_AR</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fPROG_005fAS"><code>AM_PROG_AS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fPROG_005fCC_005fC_005fO"><code>AM_PROG_CC_C_O</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fPROG_005fGCJ"><code>AM_PROG_GCJ</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fPROG_005fINSTALL_005fSTRIP"><code>AM_PROG_INSTALL_STRIP</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Private-Macros">Private Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fPROG_005fLEX"><code>AM_PROG_LEX</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fPROG_005fMKDIR_005fP"><code>AM_PROG_MKDIR_P</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Obsolete-Macros">Obsolete Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fPROG_005fUPC"><code>AM_PROG_UPC</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fPROG_005fVALAC"><code>AM_PROG_VALAC</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vala-Support">Vala Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fSANITY_005fCHECK"><code>AM_SANITY_CHECK</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Private-Macros">Private Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fSET_005fDEPDIR"><code>AM_SET_DEPDIR</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Private-Macros">Private Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fSILENT_005fRULES"><code>AM_SILENT_RULES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fSUBST_005fNOTMAKE_0028var_0029"><code>AM_SUBST_NOTMAKE(<var>var</var>)</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fWITH_005fDMALLOC"><code>AM_WITH_DMALLOC</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Macro-Index_fn_letter-M">M</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-m4_005finclude"><code>m4_include</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basics-of-Distribution">Basics of Distribution</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-m4_005finclude-1"><code>m4_include</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
</table>
<table><tr><th valign="top">Jump to: &nbsp; </th><td><a class="summary-letter" href="#Macro-Index_fn_symbol-1"><b>_</b></a>
 &nbsp; 
<br>
<a class="summary-letter" href="#Macro-Index_fn_letter-A"><b>A</b></a>
 &nbsp; 
<a class="summary-letter" href="#Macro-Index_fn_letter-M"><b>M</b></a>
 &nbsp; 
</td></tr></table>

<hr>
<a name="Variable-Index"></a>
<div class="header">
<p>
Next: <a href="#General-Index" accesskey="n" rel="next">General Index</a>, Previous: <a href="#Macro-Index" accesskey="p" rel="prev">Macro Index</a>, Up: <a href="#Indices" accesskey="u" rel="up">Indices</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Variable-Index-1"></a>
<h3 class="appendixsec">B.2 Variable Index</h3>

<table><tr><th valign="top">Jump to: &nbsp; </th><td><a class="summary-letter" href="#Variable-Index_vr_symbol-1"><b>_</b></a>
 &nbsp; 
<br>
<a class="summary-letter" href="#Variable-Index_vr_letter-A"><b>A</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-B"><b>B</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-C"><b>C</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-D"><b>D</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-E"><b>E</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-F"><b>F</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-G"><b>G</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-H"><b>H</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-I"><b>I</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-J"><b>J</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-L"><b>L</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-M"><b>M</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-N"><b>N</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-O"><b>O</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-P"><b>P</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-R"><b>R</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-S"><b>S</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-T"><b>T</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-U"><b>U</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-V"><b>V</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-W"><b>W</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-X"><b>X</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-Y"><b>Y</b></a>
 &nbsp; 
</td></tr></table>
<table class="index-vr" border="0">
<tr><td></td><th align="left">Index Entry</th><td>&nbsp;</td><th align="left"> Section</th></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_symbol-1">_</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fDATA"><code>_DATA</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Data">Data</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fHEADERS"><code>_HEADERS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Headers">Headers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fLIBRARIES"><code>_LIBRARIES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#A-Library">A Library</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fLISP"><code>_LISP</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Emacs-Lisp">Emacs Lisp</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fLOG_005fCOMPILE"><code>_LOG_COMPILE</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Parallel-Test-Harness">Parallel Test Harness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fLOG_005fCOMPILER"><code>_LOG_COMPILER</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Parallel-Test-Harness">Parallel Test Harness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fLOG_005fDRIVER"><code>_LOG_DRIVER</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Declaring-Custom-Test-Drivers">Declaring Custom Test Drivers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fLOG_005fDRIVER_005fFLAGS"><code>_LOG_DRIVER_FLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Declaring-Custom-Test-Drivers">Declaring Custom Test Drivers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fLOG_005fFLAGS"><code>_LOG_FLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Parallel-Test-Harness">Parallel Test Harness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fLTLIBRARIES"><code>_LTLIBRARIES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Libraries">Libtool Libraries</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fMANS"><code>_MANS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Man-Pages">Man Pages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fPROGRAMS"><code>_PROGRAMS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fPROGRAMS-1"><code>_PROGRAMS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Sources">Program Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fPYTHON"><code>_PYTHON</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Python">Python</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fSCRIPTS"><code>_SCRIPTS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts">Scripts</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fSOURCES"><code>_SOURCES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Sources">Program Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fSOURCES-1"><code>_SOURCES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Sources">Program Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fSOURCES-2"><code>_SOURCES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Default-_005fSOURCES">Default _SOURCES</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fTEXINFOS"><code>_TEXINFOS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fTEXINFOS-1"><code>_TEXINFOS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-A">A</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-ALLOCA"><code>ALLOCA</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#LTLIBOBJS">LTLIBOBJS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ALLOCA-1"><code>ALLOCA</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#LIBOBJS">LIBOBJS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fCCASFLAGS"><code>AM_CCASFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Assembly-Support">Assembly Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fCFLAGS"><code>AM_CFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Variables">Program Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fCOLOR_005fTESTS"><code>AM_COLOR_TESTS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts_002dbased-Testsuites">Scripts-based Testsuites</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fCPPFLAGS"><code>AM_CPPFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Variables">Program Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fCPPFLAGS-1"><code>AM_CPPFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Assembly-Support">Assembly Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fCXXFLAGS"><code>AM_CXXFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#C_002b_002b-Support">C++ Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fDEFAULT_005fSOURCE_005fEXT"><code>AM_DEFAULT_SOURCE_EXT</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Default-_005fSOURCES">Default _SOURCES</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fDEFAULT_005fV"><code><code>AM_DEFAULT_V</code></code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Automake-Silent-Rules">Automake Silent Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fDEFAULT_005fVERBOSITY"><code><code>AM_DEFAULT_VERBOSITY</code></code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Automake-Silent-Rules">Automake Silent Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fDISTCHECK_005fCONFIGURE_005fFLAGS"><code>AM_DISTCHECK_CONFIGURE_FLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Checking-the-Distribution">Checking the Distribution</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fETAGSFLAGS"><code>AM_ETAGSFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Tags">Tags</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fext_005fLOG_005fDRIVER_005fFLAGS"><code>AM_<var>ext</var>_LOG_DRIVER_FLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Declaring-Custom-Test-Drivers">Declaring Custom Test Drivers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fext_005fLOG_005fFLAGS"><code>AM_<var>ext</var>_LOG_FLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Parallel-Test-Harness">Parallel Test Harness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fFCFLAGS"><code>AM_FCFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Fortran-9x-Support">Fortran 9x Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fFFLAGS"><code>AM_FFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Fortran-77-Support">Fortran 77 Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fGCJFLAGS"><code>AM_GCJFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Java-Support-with-gcj">Java Support with gcj</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fINSTALLCHECK_005fSTD_005fOPTIONS_005fEXEMPT"><code>AM_INSTALLCHECK_STD_OPTIONS_EXEMPT</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fJAVACFLAGS"><code>AM_JAVACFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Java">Java</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fLDFLAGS"><code>AM_LDFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Linking">Linking</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fLDFLAGS-1"><code>AM_LDFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Variables">Program Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fLFLAGS"><code>AM_LFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Yacc-and-Lex">Yacc and Lex</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fLIBTOOLFLAGS"><code>AM_LIBTOOLFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Flags">Libtool Flags</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fLOG_005fDRIVER_005fFLAGS"><code>AM_LOG_DRIVER_FLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Declaring-Custom-Test-Drivers">Declaring Custom Test Drivers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fLOG_005fFLAGS"><code>AM_LOG_FLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Parallel-Test-Harness">Parallel Test Harness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fMAKEFLAGS"><code>AM_MAKEFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Subdirectories">Subdirectories</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fMAKEINFOFLAGS"><code>AM_MAKEINFOFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fMAKEINFOHTMLFLAGS"><code>AM_MAKEINFOHTMLFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fOBJCFLAGS"><code>AM_OBJCFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Objective-C-Support">Objective C Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fOBJCXXFLAGS"><code>AM_OBJCXXFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Objective-C_002b_002b-Support">Objective C++ Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fRFLAGS"><code>AM_RFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Fortran-77-Support">Fortran 77 Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fRUNTESTFLAGS"><code>AM_RUNTESTFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#DejaGnu-Tests">DejaGnu Tests</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fTESTS_005fENVIRONMENT"><code>AM_TESTS_ENVIRONMENT</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts_002dbased-Testsuites">Scripts-based Testsuites</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fTESTS_005fFD_005fREDIRECT"><code>AM_TESTS_FD_REDIRECT</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts_002dbased-Testsuites">Scripts-based Testsuites</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fUPCFLAGS"><code>AM_UPCFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Unified-Parallel-C-Support">Unified Parallel C Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fUPDATE_005fINFO_005fDIR"><code>AM_UPDATE_INFO_DIR</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fV"><code><code>AM_V</code></code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Automake-Silent-Rules">Automake Silent Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fVALAFLAGS"><code>AM_VALAFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vala-Support">Vala Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fV_005fat"><code><code>AM_V_at</code></code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Automake-Silent-Rules">Automake Silent Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fV_005fGEN"><code><code>AM_V_GEN</code></code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Automake-Silent-Rules">Automake Silent Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fYFLAGS"><code>AM_YFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Yacc-and-Lex">Yacc and Lex</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AR"><code>AR</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AUTOCONF"><code>AUTOCONF</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AUTOM4TE"><code>AUTOM4TE</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#aclocal-Invocation">aclocal Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AUTOMAKE_005fJOBS"><code>AUTOMAKE_JOBS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AUTOMAKE_005fOPTIONS"><code>AUTOMAKE_OPTIONS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AUTOMAKE_005fOPTIONS-1"><code>AUTOMAKE_OPTIONS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Dependencies">Dependencies</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AUTOMAKE_005fOPTIONS-2"><code>AUTOMAKE_OPTIONS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-B">B</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-bin_005fPROGRAMS"><code>bin_PROGRAMS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Sources">Program Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-bin_005fSCRIPTS"><code>bin_SCRIPTS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts">Scripts</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-build_005ftriplet"><code>build_triplet</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-BUILT_005fSOURCES"><code>BUILT_SOURCES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Sources">Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-BZIP2"><code>BZIP2</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-Types-of-Distributions">The Types of Distributions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-C">C</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-CC"><code>CC</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Variables">Program Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CCAS"><code>CCAS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CCAS-1"><code>CCAS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Assembly-Support">Assembly Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CCASFLAGS"><code>CCASFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CCASFLAGS-1"><code>CCASFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Assembly-Support">Assembly Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CFLAGS"><code>CFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Variables">Program Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-check_005f"><code>check_</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-check_005fLTLIBRARIES"><code>check_LTLIBRARIES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Convenience-Libraries">Libtool Convenience Libraries</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-check_005fPROGRAMS"><code>check_PROGRAMS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Sources">Program Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-check_005fPROGRAMS-1"><code>check_PROGRAMS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Default-_005fSOURCES">Default _SOURCES</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-check_005fSCRIPTS"><code>check_SCRIPTS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts">Scripts</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CLASSPATH_005fENV"><code>CLASSPATH_ENV</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Java">Java</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CLEANFILES"><code>CLEANFILES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Clean">Clean</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-COMPILE"><code>COMPILE</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Variables">Program Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CONFIGURE_005fDEPENDENCIES"><code>CONFIGURE_DEPENDENCIES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rebuilding">Rebuilding</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CONFIG_005fSTATUS_005fDEPENDENCIES"><code>CONFIG_STATUS_DEPENDENCIES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rebuilding">Rebuilding</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CPPFLAGS"><code>CPPFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Variables">Program Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CPPFLAGS-1"><code>CPPFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Assembly-Support">Assembly Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CXX"><code>CXX</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#C_002b_002b-Support">C++ Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CXXCOMPILE"><code>CXXCOMPILE</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#C_002b_002b-Support">C++ Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CXXFLAGS"><code>CXXFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#C_002b_002b-Support">C++ Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CXXLINK"><code>CXXLINK</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#C_002b_002b-Support">C++ Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CXXLINK-1"><code>CXXLINK</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#How-the-Linker-is-Chosen">How the Linker is Chosen</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-D">D</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-DATA"><code>DATA</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-DATA-1"><code>DATA</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Data">Data</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-data_005fDATA"><code>data_DATA</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Data">Data</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-DEFS"><code>DEFS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Variables">Program Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-DEJATOOL"><code>DEJATOOL</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#DejaGnu-Tests">DejaGnu Tests</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-DESTDIR"><code>DESTDIR</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#DESTDIR">DESTDIR</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-DESTDIR-1"><code>DESTDIR</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Staged-Installs">Staged Installs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-DISABLE_005fHARD_005fERRORS"><code>DISABLE_HARD_ERRORS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts_002dbased-Testsuites">Scripts-based Testsuites</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-DISTCHECK_005fCONFIGURE_005fFLAGS"><code>DISTCHECK_CONFIGURE_FLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Checking-the-Distribution">Checking the Distribution</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-distcleancheck_005flistfiles"><code>distcleancheck_listfiles</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Checking-the-Distribution">Checking the Distribution</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-distcleancheck_005flistfiles-1"><code>distcleancheck_listfiles</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Errors-with-distclean">Errors with distclean</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-DISTCLEANFILES"><code>DISTCLEANFILES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Clean">Clean</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-DISTCLEANFILES-1"><code>DISTCLEANFILES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Checking-the-Distribution">Checking the Distribution</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-distdir-1"><code>distdir</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-dist-Hook">The dist Hook</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-distdir-2"><code>distdir</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Third_002dParty-Makefiles">Third-Party Makefiles</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-distuninstallcheck_005flistfiles"><code>distuninstallcheck_listfiles</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Checking-the-Distribution">Checking the Distribution</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_005f"><code>dist_</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Alternative">Alternative</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_005f-1"><code>dist_</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Fine_002dgrained-Distribution-Control">Fine-grained Distribution Control</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_005flisp_005fLISP"><code>dist_lisp_LISP</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Emacs-Lisp">Emacs Lisp</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_005fnoinst_005fLISP"><code>dist_noinst_LISP</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Emacs-Lisp">Emacs Lisp</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-DIST_005fSUBDIRS"><code>DIST_SUBDIRS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Subdirectories-with-AM_005fCONDITIONAL">Subdirectories with AM_CONDITIONAL</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-DIST_005fSUBDIRS-1"><code>DIST_SUBDIRS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basics-of-Distribution">Basics of Distribution</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-DVIPS"><code>DVIPS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-E">E</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-EMACS"><code>EMACS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ETAGSFLAGS"><code>ETAGSFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Tags">Tags</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ETAGS_005fARGS"><code>ETAGS_ARGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Tags">Tags</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-EXPECT"><code>EXPECT</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#DejaGnu-Tests">DejaGnu Tests</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-EXTRA_005fDIST"><code>EXTRA_DIST</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basics-of-Distribution">Basics of Distribution</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-EXTRA_005fmaude_005fDEPENDENCIES"><code>EXTRA_maude_DEPENDENCIES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Linking">Linking</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-EXTRA_005fmaude_005fDEPENDENCIES-1"><code>EXTRA_maude_DEPENDENCIES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-EXTRA_005fmaude_005fSOURCES"><code>EXTRA_maude_SOURCES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-EXTRA_005fPROGRAMS"><code>EXTRA_PROGRAMS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conditional-Programs">Conditional Programs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ext_005fLOG_005fCOMPILE"><code><var>ext</var>_LOG_COMPILE</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Parallel-Test-Harness">Parallel Test Harness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ext_005fLOG_005fCOMPILER"><code><var>ext</var>_LOG_COMPILER</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Parallel-Test-Harness">Parallel Test Harness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ext_005fLOG_005fDRIVER"><code><var>ext</var>_LOG_DRIVER</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Declaring-Custom-Test-Drivers">Declaring Custom Test Drivers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ext_005fLOG_005fDRIVER_005fFLAGS"><code><var>ext</var>_LOG_DRIVER_FLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Declaring-Custom-Test-Drivers">Declaring Custom Test Drivers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ext_005fLOG_005fFLAGS"><code><var>ext</var>_LOG_FLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Parallel-Test-Harness">Parallel Test Harness</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-F">F</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-F77"><code>F77</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Fortran-77-Support">Fortran 77 Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-F77COMPILE"><code>F77COMPILE</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Fortran-77-Support">Fortran 77 Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-F77LINK"><code>F77LINK</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#How-the-Linker-is-Chosen">How the Linker is Chosen</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-FC"><code>FC</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Fortran-9x-Support">Fortran 9x Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-FCCOMPILE"><code>FCCOMPILE</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Fortran-9x-Support">Fortran 9x Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-FCFLAGS"><code>FCFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Fortran-9x-Support">Fortran 9x Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-FCLINK"><code>FCLINK</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#How-the-Linker-is-Chosen">How the Linker is Chosen</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-FCLINK-1"><code>FCLINK</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Fortran-9x-Support">Fortran 9x Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-FFLAGS"><code>FFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Fortran-77-Support">Fortran 77 Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-FLIBS"><code>FLIBS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Mixing-Fortran-77-With-C-and-C_002b_002b">Mixing Fortran 77 With C and C++</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-FLINK"><code>FLINK</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Fortran-77-Support">Fortran 77 Support</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-G">G</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-GCJ"><code>GCJ</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-GCJFLAGS"><code>GCJFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-GCJFLAGS-1"><code>GCJFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Java-Support-with-gcj">Java Support with gcj</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-GCJLINK"><code>GCJLINK</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#How-the-Linker-is-Chosen">How the Linker is Chosen</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-GTAGS_005fARGS"><code>GTAGS_ARGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Tags">Tags</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-GZIP_005fENV"><code>GZIP_ENV</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basics-of-Distribution">Basics of Distribution</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-H">H</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-HEADERS"><code>HEADERS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-host_005ftriplet"><code>host_triplet</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-I">I</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-INCLUDES"><code>INCLUDES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Variables">Program Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-include_005fHEADERS"><code>include_HEADERS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Headers">Headers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-info_005fTEXINFOS"><code>info_TEXINFOS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-J">J</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-JAVA"><code>JAVA</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-JAVAC"><code>JAVAC</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Java">Java</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-JAVACFLAGS"><code>JAVACFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Java">Java</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-JAVAROOT"><code>JAVAROOT</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Java">Java</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-L">L</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-LDADD"><code>LDADD</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Linking">Linking</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LDFLAGS"><code>LDFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Variables">Program Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LFLAGS"><code>LFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Yacc-and-Lex">Yacc and Lex</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-libexec_005fPROGRAMS"><code>libexec_PROGRAMS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Sources">Program Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-libexec_005fSCRIPTS"><code>libexec_SCRIPTS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts">Scripts</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LIBOBJS"><code>LIBOBJS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LIBOBJS-1"><code>LIBOBJS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#LTLIBOBJS">LTLIBOBJS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LIBOBJS-2"><code>LIBOBJS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#LIBOBJS">LIBOBJS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LIBRARIES"><code>LIBRARIES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LIBS"><code>LIBS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Variables">Program Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LIBTOOLFLAGS"><code>LIBTOOLFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Flags">Libtool Flags</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-lib_005fLIBRARIES"><code>lib_LIBRARIES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#A-Library">A Library</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-lib_005fLTLIBRARIES"><code>lib_LTLIBRARIES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Libraries">Libtool Libraries</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LINK"><code>LINK</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Variables">Program Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LINK-1"><code>LINK</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#How-the-Linker-is-Chosen">How the Linker is Chosen</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LISP"><code>LISP</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-lispdir"><code>lispdir</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-lisp_005fLISP"><code>lisp_LISP</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Emacs-Lisp">Emacs Lisp</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-localstate_005fDATA"><code>localstate_DATA</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Data">Data</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LOG_005fCOMPILE"><code>LOG_COMPILE</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Parallel-Test-Harness">Parallel Test Harness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LOG_005fCOMPILER"><code>LOG_COMPILER</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Parallel-Test-Harness">Parallel Test Harness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LOG_005fDRIVER"><code>LOG_DRIVER</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Declaring-Custom-Test-Drivers">Declaring Custom Test Drivers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LOG_005fDRIVER_005fFLAGS"><code>LOG_DRIVER_FLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Declaring-Custom-Test-Drivers">Declaring Custom Test Drivers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LOG_005fFLAGS"><code>LOG_FLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Parallel-Test-Harness">Parallel Test Harness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LTALLOCA"><code>LTALLOCA</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#LTLIBOBJS">LTLIBOBJS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LTALLOCA-1"><code>LTALLOCA</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#LIBOBJS">LIBOBJS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LTLIBOBJS"><code>LTLIBOBJS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#LTLIBOBJS">LTLIBOBJS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LTLIBOBJS-1"><code>LTLIBOBJS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#LIBOBJS">LIBOBJS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LTLIBRARIES"><code>LTLIBRARIES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-M">M</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-MAINTAINERCLEANFILES"><code>MAINTAINERCLEANFILES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Clean">Clean</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-MAKE"><code>MAKE</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Subdirectories">Subdirectories</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-MAKEINFO"><code>MAKEINFO</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-MAKEINFOFLAGS"><code>MAKEINFOFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-MAKEINFOHTML"><code>MAKEINFOHTML</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-MANS"><code>MANS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-man_005fMANS"><code>man_MANS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Man-Pages">Man Pages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fAR"><code>maude_AR</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fCCASFLAGS"><code>maude_CCASFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fCFLAGS"><code>maude_CFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fCPPFLAGS"><code>maude_CPPFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fCXXFLAGS"><code>maude_CXXFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fDEPENDENCIES"><code>maude_DEPENDENCIES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Linking">Linking</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fDEPENDENCIES-1"><code>maude_DEPENDENCIES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fFFLAGS"><code>maude_FFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fGCJFLAGS"><code>maude_GCJFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fLDADD"><code>maude_LDADD</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Linking">Linking</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fLDADD-1"><code>maude_LDADD</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fLDFLAGS"><code>maude_LDFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Linking">Linking</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fLDFLAGS-1"><code>maude_LDFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fLFLAGS"><code>maude_LFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fLIBADD"><code>maude_LIBADD</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#A-Library">A Library</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fLIBADD-1"><code>maude_LIBADD</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fLIBTOOLFLAGS"><code>maude_LIBTOOLFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Flags">Libtool Flags</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fLIBTOOLFLAGS-1"><code>maude_LIBTOOLFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fLINK"><code>maude_LINK</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fOBJCFLAGS"><code>maude_OBJCFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fOBJCXXFLAGS"><code>maude_OBJCXXFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fRFLAGS"><code>maude_RFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fSHORTNAME"><code>maude_SHORTNAME</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fSOURCES"><code>maude_SOURCES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fUPCFLAGS"><code>maude_UPCFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maude_005fYFLAGS"><code>maude_YFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-MISSING"><code>MISSING</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-MKDIR_005fP"><code>MKDIR_P</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Obsolete-Macros">Obsolete Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mkdir_005fp"><code>mkdir_p</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Obsolete-Macros">Obsolete Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-MOSTLYCLEANFILES"><code>MOSTLYCLEANFILES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Clean">Clean</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-N">N</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-nobase_005f"><code>nobase_</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Alternative">Alternative</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-nodist_005f"><code>nodist_</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Alternative">Alternative</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-nodist_005f-1"><code>nodist_</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Fine_002dgrained-Distribution-Control">Fine-grained Distribution Control</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-noinst_005f"><code>noinst_</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-noinst_005fHEADERS"><code>noinst_HEADERS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Headers">Headers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-noinst_005fHEADERS-1"><code>noinst_HEADERS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Headers">Headers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-noinst_005fLIBRARIES"><code>noinst_LIBRARIES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#A-Library">A Library</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-noinst_005fLISP"><code>noinst_LISP</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Emacs-Lisp">Emacs Lisp</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-noinst_005fLTLIBRARIES"><code>noinst_LTLIBRARIES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Convenience-Libraries">Libtool Convenience Libraries</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-noinst_005fPROGRAMS"><code>noinst_PROGRAMS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Sources">Program Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-noinst_005fSCRIPTS"><code>noinst_SCRIPTS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts">Scripts</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-notrans_005f"><code>notrans_</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Man-Pages">Man Pages</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-O">O</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-OBJC"><code>OBJC</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Objective-C-Support">Objective C Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-OBJCCOMPILE"><code>OBJCCOMPILE</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Objective-C-Support">Objective C Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-OBJCFLAGS"><code>OBJCFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Objective-C-Support">Objective C Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-OBJCLINK"><code>OBJCLINK</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Objective-C-Support">Objective C Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-OBJCLINK-1"><code>OBJCLINK</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#How-the-Linker-is-Chosen">How the Linker is Chosen</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-OBJCXX"><code>OBJCXX</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Objective-C_002b_002b-Support">Objective C++ Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-OBJCXXCOMPILE"><code>OBJCXXCOMPILE</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Objective-C_002b_002b-Support">Objective C++ Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-OBJCXXFLAGS"><code>OBJCXXFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Objective-C_002b_002b-Support">Objective C++ Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-OBJCXXLINK"><code>OBJCXXLINK</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Objective-C_002b_002b-Support">Objective C++ Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-OBJCXXLINK-1"><code>OBJCXXLINK</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#How-the-Linker-is-Chosen">How the Linker is Chosen</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-oldinclude_005fHEADERS"><code>oldinclude_HEADERS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Headers">Headers</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-P">P</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-PACKAGE"><code>PACKAGE</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basics-of-Distribution">Basics of Distribution</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pkgdatadir"><code>pkgdatadir</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pkgdata_005fDATA"><code>pkgdata_DATA</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Data">Data</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pkgdata_005fSCRIPTS"><code>pkgdata_SCRIPTS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts">Scripts</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pkgincludedir"><code>pkgincludedir</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pkginclude_005fHEADERS"><code>pkginclude_HEADERS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Headers">Headers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pkglibdir"><code>pkglibdir</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pkglibexecdir"><code>pkglibexecdir</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pkglibexec_005fPROGRAMS"><code>pkglibexec_PROGRAMS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Sources">Program Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pkglibexec_005fSCRIPTS"><code>pkglibexec_SCRIPTS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts">Scripts</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pkglib_005fLIBRARIES"><code>pkglib_LIBRARIES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#A-Library">A Library</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pkglib_005fLTLIBRARIES"><code>pkglib_LTLIBRARIES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Libraries">Libtool Libraries</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pkgpyexecdir"><code>pkgpyexecdir</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Python">Python</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pkgpythondir"><code>pkgpythondir</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Python">Python</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-PROGRAMS"><code>PROGRAMS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-PROGRAMS-1"><code>PROGRAMS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pyexecdir"><code>pyexecdir</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Python">Python</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-PYTHON"><code>PYTHON</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-PYTHON-1"><code>PYTHON</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Python">Python</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pythondir"><code>pythondir</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Python">Python</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-PYTHON_005fEXEC_005fPREFIX"><code>PYTHON_EXEC_PREFIX</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Python">Python</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-PYTHON_005fPLATFORM"><code>PYTHON_PLATFORM</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Python">Python</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-PYTHON_005fPREFIX"><code>PYTHON_PREFIX</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Python">Python</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-PYTHON_005fVERSION"><code>PYTHON_VERSION</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Python">Python</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-R">R</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-RECHECK_005fLOGS"><code>RECHECK_LOGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Parallel-Test-Harness">Parallel Test Harness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-RFLAGS"><code>RFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Fortran-77-Support">Fortran 77 Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-RUNTEST"><code>RUNTEST</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#DejaGnu-Tests">DejaGnu Tests</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-RUNTESTDEFAULTFLAGS"><code>RUNTESTDEFAULTFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#DejaGnu-Tests">DejaGnu Tests</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-RUNTESTFLAGS"><code>RUNTESTFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#DejaGnu-Tests">DejaGnu Tests</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-S">S</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-sbin_005fPROGRAMS"><code>sbin_PROGRAMS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Sources">Program Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-sbin_005fSCRIPTS"><code>sbin_SCRIPTS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts">Scripts</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-SCRIPTS"><code>SCRIPTS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-SCRIPTS-1"><code>SCRIPTS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts">Scripts</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-sharedstate_005fDATA"><code>sharedstate_DATA</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Data">Data</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-SOURCES"><code>SOURCES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Sources">Program Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-SOURCES-1"><code>SOURCES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Default-_005fSOURCES">Default _SOURCES</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-SUBDIRS"><code>SUBDIRS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Subdirectories">Subdirectories</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-SUBDIRS-1"><code>SUBDIRS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basics-of-Distribution">Basics of Distribution</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-SUFFIXES"><code>SUFFIXES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Suffixes">Suffixes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-sysconf_005fDATA"><code>sysconf_DATA</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Data">Data</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-T">T</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-TAGS_005fDEPENDENCIES"><code>TAGS_DEPENDENCIES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Tags">Tags</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-target_005ftriplet"><code>target_triplet</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-TESTS"><code>TESTS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts_002dbased-Testsuites">Scripts-based Testsuites</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-TESTS-1"><code>TESTS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Parallel-Test-Harness">Parallel Test Harness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-TESTS_005fENVIRONMENT"><code>TESTS_ENVIRONMENT</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts_002dbased-Testsuites">Scripts-based Testsuites</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-TEST_005fEXTENSIONS"><code>TEST_EXTENSIONS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Parallel-Test-Harness">Parallel Test Harness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-TEST_005fLOGS"><code>TEST_LOGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Parallel-Test-Harness">Parallel Test Harness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-TEST_005fSUITE_005fLOG"><code>TEST_SUITE_LOG</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Parallel-Test-Harness">Parallel Test Harness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-TEXI2DVI"><code>TEXI2DVI</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-TEXI2PDF"><code>TEXI2PDF</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-TEXINFOS"><code>TEXINFOS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-TEXINFOS-1"><code>TEXINFOS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-TEXINFO_005fTEX"><code>TEXINFO_TEX</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-top_005fdistdir"><code>top_distdir</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-dist-Hook">The dist Hook</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-top_005fdistdir-1"><code>top_distdir</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Third_002dParty-Makefiles">Third-Party Makefiles</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-U">U</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-UPC"><code>UPC</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-UPC-1"><code>UPC</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Unified-Parallel-C-Support">Unified Parallel C Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-UPCCOMPILE"><code>UPCCOMPILE</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Unified-Parallel-C-Support">Unified Parallel C Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-UPCFLAGS"><code>UPCFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Unified-Parallel-C-Support">Unified Parallel C Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-UPCLINK"><code>UPCLINK</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Unified-Parallel-C-Support">Unified Parallel C Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-UPCLINK-1"><code>UPCLINK</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#How-the-Linker-is-Chosen">How the Linker is Chosen</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-V">V</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-V"><code><code>V</code></code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Automake-Silent-Rules">Automake Silent Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-VALAC"><code>VALAC</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vala-Support">Vala Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-VALAFLAGS"><code>VALAFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vala-Support">Vala Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-VERBOSE"><code>VERBOSE</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Parallel-Test-Harness">Parallel Test Harness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-VERSION"><code>VERSION</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basics-of-Distribution">Basics of Distribution</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-W">W</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-WARNINGS"><code>WARNINGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-WARNINGS-1"><code>WARNINGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#aclocal-Options">aclocal Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-WITH_005fDMALLOC"><code>WITH_DMALLOC</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-X">X</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-XFAIL_005fTESTS"><code>XFAIL_TESTS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts_002dbased-Testsuites">Scripts-based Testsuites</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-XZ_005fOPT"><code>XZ_OPT</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-Types-of-Distributions">The Types of Distributions</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="Variable-Index_vr_letter-Y">Y</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-YACC"><code>YACC</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-YFLAGS"><code>YFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Yacc-and-Lex">Yacc and Lex</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
</table>
<table><tr><th valign="top">Jump to: &nbsp; </th><td><a class="summary-letter" href="#Variable-Index_vr_symbol-1"><b>_</b></a>
 &nbsp; 
<br>
<a class="summary-letter" href="#Variable-Index_vr_letter-A"><b>A</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-B"><b>B</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-C"><b>C</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-D"><b>D</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-E"><b>E</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-F"><b>F</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-G"><b>G</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-H"><b>H</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-I"><b>I</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-J"><b>J</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-L"><b>L</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-M"><b>M</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-N"><b>N</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-O"><b>O</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-P"><b>P</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-R"><b>R</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-S"><b>S</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-T"><b>T</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-U"><b>U</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-V"><b>V</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-W"><b>W</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-X"><b>X</b></a>
 &nbsp; 
<a class="summary-letter" href="#Variable-Index_vr_letter-Y"><b>Y</b></a>
 &nbsp; 
</td></tr></table>

<hr>
<a name="General-Index"></a>
<div class="header">
<p>
Previous: <a href="#Variable-Index" accesskey="p" rel="prev">Variable Index</a>, Up: <a href="#Indices" accesskey="u" rel="up">Indices</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Indices" title="Index" rel="index">Index</a>]</p>
</div>
<a name="General-Index-1"></a>
<h3 class="appendixsec">B.3 General Index</h3>

<table><tr><th valign="top">Jump to: &nbsp; </th><td><a class="summary-letter" href="#General-Index_cp_symbol-1"><b>#</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_symbol-2"><b>$</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_symbol-3"><b>+</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_symbol-4"><b>-</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_symbol-5"><b>.</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_symbol-6"><b>:</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_symbol-7"><b>_</b></a>
 &nbsp; 
<br>
<a class="summary-letter" href="#General-Index_cp_letter-A"><b>A</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-B"><b>B</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-C"><b>C</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-D"><b>D</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-E"><b>E</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-F"><b>F</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-G"><b>G</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-H"><b>H</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-I"><b>I</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-J"><b>J</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-L"><b>L</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-M"><b>M</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-N"><b>N</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-O"><b>O</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-P"><b>P</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-R"><b>R</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-S"><b>S</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-T"><b>T</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-U"><b>U</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-V"><b>V</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-W"><b>W</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-X"><b>X</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-Y"><b>Y</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-Z"><b>Z</b></a>
 &nbsp; 
</td></tr></table>
<table class="index-cp" border="0">
<tr><td></td><th align="left">Index Entry</th><td>&nbsp;</td><th align="left"> Section</th></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_symbol-1">#</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0023_0023-_0028special-Automake-comment_0029"><code>##</code> (special Automake comment)</a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Operation">General Operation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0023serial-syntax"><code>#serial</code> syntax</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Serials">Serials</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_symbol-2">$</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_0024_0028LIBOBJS_0029-and-empty-libraries">&lsquo;<samp>$(LIBOBJS)</samp>&rsquo; and empty libraries</a>:</td><td>&nbsp;</td><td valign="top"><a href="#LIBOBJS">LIBOBJS</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_symbol-3">+</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002b_003d"><code>+=</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Operation">General Operation</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_symbol-4">-</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dadd_002dmissing"><code>--add-missing</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dautomake_002dacdir"><code>--automake-acdir</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#aclocal-Options">aclocal Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dbuild_003dbuild"><code>--build=<var>build</var></code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Cross_002dCompilation">Cross-Compilation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dcopy"><code>--copy</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002ddiff"><code>--diff</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#aclocal-Options">aclocal Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002ddisable_002ddependency_002dtracking"><code>--disable-dependency-tracking</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Dependency-Tracking">Dependency Tracking</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002ddisable_002dmaintainer_002dmode"><code>--disable-maintainer-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002ddisable_002dsilent_002drules"><code>--disable-silent-rules</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Automake-Silent-Rules">Automake Silent Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002ddry_002drun"><code>--dry-run</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#aclocal-Options">aclocal Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002denable_002ddebug_002c-example"><samp>--enable-debug</samp>, example</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Usage-of-Conditionals">Usage of Conditionals</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002denable_002ddependency_002dtracking"><code>--enable-dependency-tracking</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Dependency-Tracking">Dependency Tracking</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002denable_002dmaintainer_002dmode"><code>--enable-maintainer-mode</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002denable_002dsilent_002drules"><code>--enable-silent-rules</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Automake-Silent-Rules">Automake Silent Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dforce"><code>--force</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#aclocal-Options">aclocal Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dforce_002dmissing"><code>--force-missing</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dforeign"><code>--foreign</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dgnits"><code>--gnits</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dgnits_002c-complete-description"><samp>--gnits</samp>, complete description</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Gnits">Gnits</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dgnu"><code>--gnu</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dgnu_002c-complete-description"><samp>--gnu</samp>, complete description</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Gnits">Gnits</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dgnu_002c-required-files"><samp>--gnu</samp>, required files</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Gnits">Gnits</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dhelp"><code>--help</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dhelp-1"><code>--help</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#aclocal-Options">aclocal Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dhelp-check"><samp>--help</samp> check</a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dhelp_003drecursive"><code>--help=recursive</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Nested-Packages">Nested Packages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dhost_003dhost"><code>--host=<var>host</var></code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Cross_002dCompilation">Cross-Compilation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dinclude_002ddeps"><code>--include-deps</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dinstall"><code>--install</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#aclocal-Options">aclocal Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dlibdir"><code>--libdir</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dno_002dforce"><code>--no-force</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002doutput"><code>--output</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#aclocal-Options">aclocal Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002doutput_002ddir"><code>--output-dir</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dprefix"><code>--prefix</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Standard-Directory-Variables">Standard Directory Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dprint_002dac_002ddir"><code>--print-ac-dir</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#aclocal-Options">aclocal Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dprint_002dlibdir"><code>--print-libdir</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dprogram_002dprefix_003dprefix"><code>--program-prefix=<var>prefix</var></code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Renaming">Renaming</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dprogram_002dsuffix_003dsuffix"><code>--program-suffix=<var>suffix</var></code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Renaming">Renaming</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dprogram_002dtransform_002dname_003dprogram"><code>--program-transform-name=<var>program</var></code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Renaming">Renaming</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dsystem_002dacdir"><code>--system-acdir</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#aclocal-Options">aclocal Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dtarget_003dtarget"><code>--target=<var>target</var></code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Cross_002dCompilation">Cross-Compilation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dverbose"><code>--verbose</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dverbose-1"><code>--verbose</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#aclocal-Options">aclocal Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dversion"><code>--version</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dversion-1"><code>--version</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#aclocal-Options">aclocal Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dversion-check"><samp>--version</samp> check</a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dwarnings"><code>--warnings</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dwarnings-1"><code>--warnings</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#aclocal-Options">aclocal Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002d_002dwith_002ddmalloc"><code>--with-dmalloc</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002da"><code>-a</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002dc"><code>-c</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002df"><code>-f</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002dhook-targets"><samp>-hook</samp> targets</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002di"><code>-i</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002dI"><code>-I</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#aclocal-Options">aclocal Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002dl-and-LDADD"><samp>-l</samp> and <code>LDADD</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Linking">Linking</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002dlocal-targets"><samp>-local</samp> targets</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002dmodule_002c-libtool"><samp>-module</samp>, libtool</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Modules">Libtool Modules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002do"><code>-o</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002dv"><code>-v</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002dW"><code>-W</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002dW-1"><code>-W</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#aclocal-Options">aclocal Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002dWall"><code>-Wall</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#amhello_0027s-configure_002eac-Setup-Explained">amhello's configure.ac Setup Explained</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002dWerror"><code>-Werror</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#amhello_0027s-configure_002eac-Setup-Explained">amhello's configure.ac Setup Explained</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_symbol-5">.</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002ela-suffix_002c-defined"><samp>.la</samp> suffix, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Concept">Libtool Concept</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002elog-files"><samp>.log</samp> files</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Parallel-Test-Harness">Parallel Test Harness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_002etrs-files"><samp>.trs</samp> files</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Parallel-Test-Harness">Parallel Test Harness</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_symbol-6">:</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_003acopy_002din_002dglobal_002dlog_003a">:copy-in-global-log:</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Log-files-generation-and-test-results-recording">Log files generation and test results recording</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_003arecheck_003a">:recheck:</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Log-files-generation-and-test-results-recording">Log files generation and test results recording</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_003atest_002dglobal_002dresult_003a">:test-global-result:</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Log-files-generation-and-test-results-recording">Log files generation and test results recording</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_003atest_002dresult_003a"><code>:test-result:</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Log-files-generation-and-test-results-recording">Log files generation and test results recording</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_symbol-7">_</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fDATA-primary_002c-defined"><code>_DATA</code> primary, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Data">Data</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fDEPENDENCIES_002c-defined"><code>_DEPENDENCIES</code>, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Linking">Linking</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fHEADERS-primary_002c-defined"><code>_HEADERS</code> primary, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Headers">Headers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fJAVA-primary_002c-defined"><code>_JAVA</code> primary, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Java">Java</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fLDFLAGS_002c-defined"><code>_LDFLAGS</code>, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Linking">Linking</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fLDFLAGS_002c-libtool"><code>_LDFLAGS</code>, libtool</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Flags">Libtool Flags</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fLIBADD_002c-libtool"><code>_LIBADD</code>, libtool</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Flags">Libtool Flags</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fLIBRARIES-primary_002c-defined"><code>_LIBRARIES</code> primary, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#A-Library">A Library</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fLIBTOOLFLAGS_002c-libtool"><code>_LIBTOOLFLAGS</code>, libtool</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Flags">Libtool Flags</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fLISP-primary_002c-defined"><code>_LISP</code> primary, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Emacs-Lisp">Emacs Lisp</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fLTLIBRARIES-primary_002c-defined"><code>_LTLIBRARIES</code> primary, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Libraries">Libtool Libraries</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fMANS-primary_002c-defined"><code>_MANS</code> primary, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Man-Pages">Man Pages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fPROGRAMS-primary-variable"><code>_PROGRAMS</code> primary variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fPYTHON-primary_002c-defined"><code>_PYTHON</code> primary, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Python">Python</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fSCRIPTS-primary_002c-defined"><code>_SCRIPTS</code> primary, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts">Scripts</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fSOURCES-and-header-files"><code>_SOURCES</code> and header files</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Sources">Program Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fSOURCES-primary_002c-defined"><code>_SOURCES</code> primary, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Sources">Program Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fSOURCES_002c-default"><code>_SOURCES</code>, default</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Default-_005fSOURCES">Default _SOURCES</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fSOURCES_002c-empty"><code>_SOURCES</code>, empty</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Default-_005fSOURCES">Default _SOURCES</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-_005fTEXINFOS-primary_002c-defined"><code>_TEXINFOS</code> primary, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_letter-A">A</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-acinclude_002em4_002c-defined"><samp>acinclude.m4</samp>, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complete">Complete</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-aclocal-and-serial-numbers"><code>aclocal</code> and serial numbers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Serials">Serials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-aclocal-program_002c-introduction"><code>aclocal</code> program, introduction</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complete">Complete</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-aclocal-search-path"><code>aclocal</code> search path</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Macro-Search-Path">Macro Search Path</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-aclocal_0027s-scheduled-death"><code>aclocal</code>&rsquo;s scheduled death</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Future-of-aclocal">Future of aclocal</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-aclocal_002c-extending"><code>aclocal</code>, extending</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending-aclocal">Extending aclocal</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-aclocal_002c-Invocation"><code>aclocal</code>, Invocation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#aclocal-Invocation">aclocal Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-aclocal_002c-Invoking"><code>aclocal</code>, Invoking</a>:</td><td>&nbsp;</td><td valign="top"><a href="#aclocal-Invocation">aclocal Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-aclocal_002c-Options"><code>aclocal</code>, Options</a>:</td><td>&nbsp;</td><td valign="top"><a href="#aclocal-Options">aclocal Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-aclocal_002c-using"><code>aclocal</code>, using</a>:</td><td>&nbsp;</td><td valign="top"><a href="#configure">configure</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-aclocal_002em4_002c-preexisting"><samp>aclocal.m4</samp>, preexisting</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complete">Complete</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ACLOCAL_005fPATH"><code>ACLOCAL_PATH</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Macro-Search-Path">Macro Search Path</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fCONFIG_005fFILES_002c-conditional"><code>AC_CONFIG_FILES</code>, conditional</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Usage-of-Conditionals">Usage of Conditionals</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AC_005fSUBST-and-SUBDIRS"><code>AC_SUBST</code> and <code>SUBDIRS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Subdirectories-with-AC_005fSUBST">Subdirectories with AC_SUBST</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Adding-new-SUFFIXES">Adding new <code>SUFFIXES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Suffixes">Suffixes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-all"><code>all</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Standard-Targets">Standard Targets</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-all-1"><code>all</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-all_002dlocal"><code>all-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ALLOCA_002c-and-Libtool"><code>ALLOCA</code>, and Libtool</a>:</td><td>&nbsp;</td><td valign="top"><a href="#LTLIBOBJS">LTLIBOBJS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ALLOCA_002c-example"><code>ALLOCA</code>, example</a>:</td><td>&nbsp;</td><td valign="top"><a href="#LIBOBJS">LIBOBJS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ALLOCA_002c-special-handling"><code>ALLOCA</code>, special handling</a>:</td><td>&nbsp;</td><td valign="top"><a href="#LIBOBJS">LIBOBJS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-amhello_002d1_002e0_002etar_002egz_002c-creation"><samp>amhello-1.0.tar.gz</samp>, creation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Hello-World">Hello World</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-amhello_002d1_002e0_002etar_002egz_002c-location"><samp>amhello-1.0.tar.gz</samp>, location</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Use-Cases">Use Cases</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-amhello_002d1_002e0_002etar_002egz_002c-use-cases"><samp>amhello-1.0.tar.gz</samp>, use cases</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Use-Cases">Use Cases</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fCCASFLAGS-and-CCASFLAGS"><code>AM_CCASFLAGS</code> and <code>CCASFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fCFLAGS-and-CFLAGS"><code>AM_CFLAGS</code> and <code>CFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fCONDITIONAL-and-SUBDIRS"><code>AM_CONDITIONAL</code> and <code>SUBDIRS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Subdirectories-with-AM_005fCONDITIONAL">Subdirectories with AM_CONDITIONAL</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fCPPFLAGS-and-CPPFLAGS"><code>AM_CPPFLAGS</code> and <code>CPPFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fCXXFLAGS-and-CXXFLAGS"><code>AM_CXXFLAGS</code> and <code>CXXFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fFCFLAGS-and-FCFLAGS"><code>AM_FCFLAGS</code> and <code>FCFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fFFLAGS-and-FFLAGS"><code>AM_FFLAGS</code> and <code>FFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fGCJFLAGS-and-GCJFLAGS"><code>AM_GCJFLAGS</code> and <code>GCJFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fINIT_005fAUTOMAKE_002c-example-use"><code>AM_INIT_AUTOMAKE</code>, example use</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complete">Complete</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fLDFLAGS-and-LDFLAGS"><code>AM_LDFLAGS</code> and <code>LDFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fLFLAGS-and-LFLAGS"><code>AM_LFLAGS</code> and <code>LFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fLIBTOOLFLAGS-and-LIBTOOLFLAGS"><code>AM_LIBTOOLFLAGS</code> and <code>LIBTOOLFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fMAINTAINER_005fMODE_002c-purpose"><code>AM_MAINTAINER_MODE</code>, purpose</a>:</td><td>&nbsp;</td><td valign="top"><a href="#maintainer_002dmode">maintainer-mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fOBJCFLAGS-and-OBJCFLAGS"><code>AM_OBJCFLAGS</code> and <code>OBJCFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fOBJCXXFLAGS-and-OBJXXCFLAGS"><code>AM_OBJCXXFLAGS</code> and <code>OBJXXCFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fRFLAGS-and-RFLAGS"><code>AM_RFLAGS</code> and <code>RFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fUPCFLAGS-and-UPCFLAGS"><code>AM_UPCFLAGS</code> and <code>UPCFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-AM_005fYFLAGS-and-YFLAGS"><code>AM_YFLAGS</code> and <code>YFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Append-operator">Append operator</a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Operation">General Operation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ARG_005fMAX">ARG_MAX</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Length-Limitations">Length Limitations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-autogen_002esh-and-autoreconf"><samp>autogen.sh</samp> and <code>autoreconf</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Error-required-file-ltmain_002esh-not-found">Error required file ltmain.sh not found</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-autom4te">autom4te</a>:</td><td>&nbsp;</td><td valign="top"><a href="#aclocal-Invocation">aclocal Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Automake-constraints">Automake constraints</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Introduction">Introduction</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-automake-options"><code>automake</code> options</a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Automake-parser_002c-limitations-of">Automake parser, limitations of</a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Operation">General Operation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Automake-requirements">Automake requirements</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Introduction">Introduction</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Automake-requirements-1">Automake requirements</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Requirements">Requirements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-automake_002c-invocation"><code>automake</code>, invocation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-automake_002c-invoking"><code>automake</code>, invoking</a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Automake_002c-recursive-operation">Automake, recursive operation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Operation">General Operation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Automatic-dependency-tracking">Automatic dependency tracking</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Dependencies">Dependencies</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Automatic-linker-selection">Automatic linker selection</a>:</td><td>&nbsp;</td><td valign="top"><a href="#How-the-Linker-is-Chosen">How the Linker is Chosen</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-autoreconf-and-libtoolize"><code>autoreconf</code> and <code>libtoolize</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Error-required-file-ltmain_002esh-not-found">Error required file ltmain.sh not found</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-autoreconf_002c-example"><code>autoreconf</code>, example</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Creating-amhello">Creating amhello</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-autoscan"><code>autoscan</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#amhello_0027s-configure_002eac-Setup-Explained">amhello's configure.ac Setup Explained</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Autotools_002c-introduction">Autotools, introduction</a>:</td><td>&nbsp;</td><td valign="top"><a href="#GNU-Build-System">GNU Build System</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Autotools_002c-purpose">Autotools, purpose</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Why-Autotools">Why Autotools</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-autoupdate">autoupdate</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Obsolete-Macros">Obsolete Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Auxiliary-programs">Auxiliary programs</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Auxiliary-Programs">Auxiliary Programs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Avoiding-man-page-renaming">Avoiding man page renaming</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Man-Pages">Man Pages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Avoiding-path-stripping">Avoiding path stripping</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Alternative">Alternative</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_letter-B">B</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Binary-package">Binary package</a>:</td><td>&nbsp;</td><td valign="top"><a href="#DESTDIR">DESTDIR</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-bootstrap_002esh-and-autoreconf"><samp>bootstrap.sh</samp> and <code>autoreconf</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Error-required-file-ltmain_002esh-not-found">Error required file ltmain.sh not found</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Bugs_002c-reporting">Bugs, reporting</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Introduction">Introduction</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-build-tree-and-source-tree">build tree and source tree</a>:</td><td>&nbsp;</td><td valign="top"><a href="#VPATH-Builds">VPATH Builds</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-BUILT_005fSOURCES_002c-defined"><code>BUILT_SOURCES</code>, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Sources">Sources</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_letter-C">C</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-C_002b_002b-support">C++ support</a>:</td><td>&nbsp;</td><td valign="top"><a href="#C_002b_002b-Support">C++ Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-canonicalizing-Automake-variables">canonicalizing Automake variables</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Canonicalization">Canonicalization</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CCASFLAGS-and-AM_005fCCASFLAGS"><code>CCASFLAGS</code> and <code>AM_CCASFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CFLAGS-and-AM_005fCFLAGS"><code>CFLAGS</code> and <code>AM_CFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cfortran">cfortran</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Mixing-Fortran-77-With-C-and-C_002b_002b">Mixing Fortran 77 With C and C++</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-check"><code>check</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Standard-Targets">Standard Targets</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-check-1"><code>check</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Tests">Tests</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-check-2"><code>check</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-check_002dlocal"><code>check-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-check_002dnews"><code>check-news</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-check_005f-primary-prefix_002c-definition">&lsquo;<samp>check_</samp>&rsquo; primary prefix, definition</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-check_005fPROGRAMS-example"><code>check_PROGRAMS</code> example</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Default-_005fSOURCES">Default _SOURCES</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-clean"><code>clean</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Standard-Targets">Standard Targets</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-clean-1"><code>clean</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-clean_002dlocal"><code>clean-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Clean">Clean</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-clean_002dlocal-1"><code>clean-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Colorized-testsuite-output">Colorized testsuite output</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts_002dbased-Testsuites">Scripts-based Testsuites</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-command-line-length-limit">command line length limit</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Length-Limitations">Length Limitations</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Comment_002c-special-to-Automake">Comment, special to Automake</a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Operation">General Operation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Compilation-of-Java-to-bytecode">Compilation of Java to bytecode</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Java">Java</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Compilation-of-Java-to-native-code">Compilation of Java to native code</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Java-Support-with-gcj">Java Support with gcj</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Compile-Flag-Variables">Compile Flag Variables</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Complete-example">Complete example</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complete">Complete</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Conditional-example_002c-_002d_002denable_002ddebug">Conditional example, <samp>--enable-debug</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Usage-of-Conditionals">Usage of Conditionals</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-conditional-libtool-libraries">conditional libtool libraries</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conditional-Libtool-Libraries">Conditional Libtool Libraries</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Conditional-programs">Conditional programs</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conditional-Programs">Conditional Programs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Conditional-subdirectories">Conditional subdirectories</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conditional-Subdirectories">Conditional Subdirectories</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Conditional-SUBDIRS">Conditional <code>SUBDIRS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conditional-Subdirectories">Conditional Subdirectories</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Conditionals">Conditionals</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conditionals">Conditionals</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-config_002eguess"><samp>config.guess</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-config_002esite-example"><samp>config.site</samp> example</a>:</td><td>&nbsp;</td><td valign="top"><a href="#config_002esite">config.site</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-configuration-variables_002c-overriding">configuration variables, overriding</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Standard-Configuration-Variables">Standard Configuration Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Configuration_002c-basics">Configuration, basics</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Installation">Basic Installation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Configure-substitutions-in-TESTS">Configure substitutions in <code>TESTS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Parallel-Test-Harness">Parallel Test Harness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-configure_002eac_002c-Hello-World"><samp>configure.ac</samp>, Hello World</a>:</td><td>&nbsp;</td><td valign="top"><a href="#amhello_0027s-configure_002eac-Setup-Explained">amhello's configure.ac Setup Explained</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-configure_002eac_002c-scanning"><samp>configure.ac</samp>, scanning</a>:</td><td>&nbsp;</td><td valign="top"><a href="#configure">configure</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-conflicting-definitions">conflicting definitions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Constraints-of-Automake">Constraints of Automake</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Introduction">Introduction</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-convenience-libraries_002c-libtool">convenience libraries, libtool</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Convenience-Libraries">Libtool Convenience Libraries</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-copying-semantics">copying semantics</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cpio-example"><code>cpio</code> example</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CPPFLAGS-and-AM_005fCPPFLAGS"><code>CPPFLAGS</code> and <code>AM_CPPFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cross_002dcompilation">cross-compilation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Cross_002dCompilation">Cross-Compilation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-cross_002dcompilation-example">cross-compilation example</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Cross_002dCompilation">Cross-Compilation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CVS-and-generated-files">CVS and generated files</a>:</td><td>&nbsp;</td><td valign="top"><a href="#CVS">CVS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CVS-and-third_002dparty-files">CVS and third-party files</a>:</td><td>&nbsp;</td><td valign="top"><a href="#CVS">CVS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CVS-and-timestamps">CVS and timestamps</a>:</td><td>&nbsp;</td><td valign="top"><a href="#CVS">CVS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-CXXFLAGS-and-AM_005fCXXFLAGS"><code>CXXFLAGS</code> and <code>AM_CXXFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_letter-D">D</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-DATA-primary_002c-defined"><code>DATA</code> primary, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Data">Data</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-debug-build_002c-example">debug build, example</a>:</td><td>&nbsp;</td><td valign="top"><a href="#VPATH-Builds">VPATH Builds</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-debugging-rules">debugging rules</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Debugging-Make-Rules">Debugging Make Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-default-source_002c-Libtool-modules-example">default source, Libtool modules example</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Default-_005fSOURCES">Default _SOURCES</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-default-verbosity-for-silent-rules">default verbosity for silent rules</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Automake-Silent-Rules">Automake Silent Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-default-_005fSOURCES">default <code>_SOURCES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Default-_005fSOURCES">Default _SOURCES</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-definitions_002c-conflicts">definitions, conflicts</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dejagnu"><code>dejagnu</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#DejaGnu-Tests">DejaGnu Tests</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dejagnu-1"><code>dejagnu</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-depcomp"><code>depcomp</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Dependencies">Dependencies</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dependencies-and-distributed-files">dependencies and distributed files</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Errors-with-distclean">Errors with distclean</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Dependency-tracking">Dependency tracking</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Dependency-Tracking">Dependency Tracking</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Dependency-tracking-1">Dependency tracking</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Dependencies">Dependencies</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Dependency-tracking_002c-disabling">Dependency tracking, disabling</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Dependencies">Dependencies</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-directory-variables">directory variables</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Standard-Directory-Variables">Standard Directory Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dirlist"><samp>dirlist</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Macro-Search-Path">Macro Search Path</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Disabling-dependency-tracking">Disabling dependency tracking</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Dependencies">Dependencies</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Disabling-hard-errors">Disabling hard errors</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts_002dbased-Testsuites">Scripts-based Testsuites</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist"><code>dist</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Standard-Targets">Standard Targets</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist-1"><code>dist</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basics-of-Distribution">Basics of Distribution</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_002dbzip2-1"><code>dist-bzip2</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-Types-of-Distributions">The Types of Distributions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_002dbzip2-2"><code>dist-bzip2</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_002dbzip2"><code>dist-bzip2</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_002dgzip"><code>dist-gzip</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-Types-of-Distributions">The Types of Distributions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_002dhook"><code>dist-hook</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-dist-Hook">The dist Hook</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_002dhook-1"><code>dist-hook</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_002dlzip-1"><code>dist-lzip</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-Types-of-Distributions">The Types of Distributions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_002dlzip-2"><code>dist-lzip</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_002dlzip"><code>dist-lzip</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_002dshar-1"><code>dist-shar</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-Types-of-Distributions">The Types of Distributions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_002dshar-2"><code>dist-shar</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_002dshar"><code>dist-shar</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_002dtarZ-1"><code>dist-tarZ</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-Types-of-Distributions">The Types of Distributions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_002dtarZ-2"><code>dist-tarZ</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_002dtarZ"><code>dist-tarZ</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_002dxz-1"><code>dist-xz</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-Types-of-Distributions">The Types of Distributions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_002dxz-2"><code>dist-xz</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_002dxz"><code>dist-xz</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_002dzip-1"><code>dist-zip</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-Types-of-Distributions">The Types of Distributions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_002dzip-2"><code>dist-zip</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_002dzip"><code>dist-zip</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-distcheck"><code>distcheck</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Creating-amhello">Creating amhello</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-distcheck-1"><code>distcheck</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Checking-the-Distribution">Checking the Distribution</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-distcheck-better-than-dist"><code>distcheck</code> better than <code>dist</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Preparing-Distributions">Preparing Distributions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-distcheck-example"><code>distcheck</code> example</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Creating-amhello">Creating amhello</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-distcheck_002dhook"><code>distcheck-hook</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Checking-the-Distribution">Checking the Distribution</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-distclean"><code>distclean</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Standard-Targets">Standard Targets</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-distclean-1"><code>distclean</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-distclean-2"><code>distclean</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Errors-with-distclean">Errors with distclean</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-distclean_002c-diagnostic"><code>distclean</code>, diagnostic</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Errors-with-distclean">Errors with distclean</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-distclean_002dlocal"><code>distclean-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Clean">Clean</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-distclean_002dlocal-1"><code>distclean-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-distcleancheck"><code>distcleancheck</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Checking-the-Distribution">Checking the Distribution</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-distdir"><code>distdir</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Third_002dParty-Makefiles">Third-Party Makefiles</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Distinction-between-errors-and-failures-in-testsuites">Distinction between errors and failures in testsuites</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Generalities-about-Testing">Generalities about Testing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Distributions_002c-preparation">Distributions, preparation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Preparing-Distributions">Preparing Distributions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-distuninstallcheck"><code>distuninstallcheck</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Checking-the-Distribution">Checking the Distribution</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_005f-and-nobase_005f"><code>dist_</code> and <code>nobase_</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Alternative">Alternative</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dist_005f-and-notrans_005f"><code>dist_</code> and <code>notrans_</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Man-Pages">Man Pages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-DIST_005fSUBDIRS_002c-explained"><code>DIST_SUBDIRS</code>, explained</a>:</td><td>&nbsp;</td><td valign="top"><a href="#SUBDIRS-vs-DIST_005fSUBDIRS">SUBDIRS vs DIST_SUBDIRS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dmalloc_002c-support-for"><code>dmalloc</code>, support for</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dvi"><code>dvi</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dvi-1"><code>dvi</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-DVI-output-using-Texinfo">DVI output using Texinfo</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-dvi_002dlocal"><code>dvi-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_letter-E">E</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-E_002dmail_002c-bug-reports">E-mail, bug reports</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Introduction">Introduction</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-EDITION-Texinfo-flag"><code>EDITION</code> Texinfo flag</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-else"><code>else</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Usage-of-Conditionals">Usage of Conditionals</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Empty-libraries">Empty libraries</a>:</td><td>&nbsp;</td><td valign="top"><a href="#A-Library">A Library</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Empty-libraries-and-_0024_0028LIBOBJS_0029">Empty libraries and &lsquo;<samp>$(LIBOBJS)</samp>&rsquo;</a>:</td><td>&nbsp;</td><td valign="top"><a href="#LIBOBJS">LIBOBJS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-empty-_005fSOURCES">empty <code>_SOURCES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Default-_005fSOURCES">Default _SOURCES</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-endif"><code>endif</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Usage-of-Conditionals">Usage of Conditionals</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Example-conditional-_002d_002denable_002ddebug">Example conditional <samp>--enable-debug</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Usage-of-Conditionals">Usage of Conditionals</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Example-conditional-AC_005fCONFIG_005fFILES">Example conditional <code>AC_CONFIG_FILES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Usage-of-Conditionals">Usage of Conditionals</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Example-Hello-World">Example Hello World</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Hello-World">Hello World</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Example-of-recursive-operation">Example of recursive operation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Operation">General Operation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Example-of-shared-libraries">Example of shared libraries</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Libraries">Libtool Libraries</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Example_002c-EXTRA_005fPROGRAMS">Example, <code>EXTRA_PROGRAMS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Example_002c-false-and-true">Example, <code>false</code> and <code>true</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#true">true</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Example_002c-mixed-language">Example, mixed language</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Mixing-Fortran-77-With-C-and-C_002b_002b">Mixing Fortran 77 With C and C++</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Executable-extension">Executable extension</a>:</td><td>&nbsp;</td><td valign="top"><a href="#EXEEXT">EXEEXT</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Exit-status-77_002c-special-interpretation">Exit status 77, special interpretation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts_002dbased-Testsuites">Scripts-based Testsuites</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Exit-status-99_002c-special-interpretation">Exit status 99, special interpretation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts_002dbased-Testsuites">Scripts-based Testsuites</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-expected-failure">expected failure</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Generalities-about-Testing">Generalities about Testing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-expected-test-failure">expected test failure</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Generalities-about-Testing">Generalities about Testing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Expected-test-failure">Expected test failure</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts_002dbased-Testsuites">Scripts-based Testsuites</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Extending-aclocal">Extending <code>aclocal</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending-aclocal">Extending aclocal</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Extending-list-of-installation-directories">Extending list of installation directories</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Extension_002c-executable">Extension, executable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#EXEEXT">EXEEXT</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Extra-files-distributed-with-Automake">Extra files distributed with Automake</a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-EXTRA_005f_002c-prepending"><code>EXTRA_</code>, prepending</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-EXTRA_005fPROGRAMS_002c-defined"><code>EXTRA_PROGRAMS</code>, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-EXTRA_005fPROGRAMS_002c-defined-1"><code>EXTRA_PROGRAMS</code>, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conditional-Programs">Conditional Programs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-EXTRA_005fprog_005fSOURCES_002c-defined"><code>EXTRA_prog_SOURCES</code>, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conditional-Sources">Conditional Sources</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_letter-F">F</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-false-Example"><code>false</code> Example</a>:</td><td>&nbsp;</td><td valign="top"><a href="#true">true</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-FCFLAGS-and-AM_005fFCFLAGS"><code>FCFLAGS</code> and <code>AM_FCFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Features-of-the-GNU-Build-System">Features of the GNU Build System</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Use-Cases">Use Cases</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-FFLAGS-and-AM_005fFFLAGS"><code>FFLAGS</code> and <code>AM_FFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-file-names_002c-limitations-on">file names, limitations on</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Limitations-on-File-Names">Limitations on File Names</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-filename_002dlength_002dmax_003d99"><code>filename-length-max=99</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Files-distributed-with-Automake">Files distributed with Automake</a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-First-line-of-Makefile_002eam">First line of Makefile.am</a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Operation">General Operation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Flag-variables_002c-ordering">Flag variables, ordering</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Flag-Variables_002c-Ordering">Flag Variables, Ordering</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-FLIBS_002c-defined"><code>FLIBS</code>, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Mixing-Fortran-77-With-C-and-C_002b_002b">Mixing Fortran 77 With C and C++</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-foreign"><code>foreign</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#amhello_0027s-configure_002eac-Setup-Explained">amhello's configure.ac Setup Explained</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-foreign-1"><code>foreign</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-foreign-strictness"><samp>foreign</samp> strictness</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Strictness">Strictness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Fortran-77-support">Fortran 77 support</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Fortran-77-Support">Fortran 77 Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Fortran-77_002c-mixing-with-C-and-C_002b_002b">Fortran 77, mixing with C and C++</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Mixing-Fortran-77-With-C-and-C_002b_002b">Mixing Fortran 77 With C and C++</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Fortran-77_002c-Preprocessing">Fortran 77, Preprocessing</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Preprocessing-Fortran-77">Preprocessing Fortran 77</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Fortran-9x-support">Fortran 9x support</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Fortran-9x-Support">Fortran 9x Support</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_letter-G">G</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-GCJFLAGS-and-AM_005fGCJFLAGS"><code>GCJFLAGS</code> and <code>AM_GCJFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-generated-files-and-CVS">generated files and CVS</a>:</td><td>&nbsp;</td><td valign="top"><a href="#CVS">CVS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-generated-files_002c-distributed">generated files, distributed</a>:</td><td>&nbsp;</td><td valign="top"><a href="#CVS">CVS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Gettext-support">Gettext support</a>:</td><td>&nbsp;</td><td valign="top"><a href="#gettext">gettext</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-git_002ddist"><code>git-dist</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Operation">General Operation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-git_002ddist_002c-non_002dstandard-example"><code>git-dist</code>, non-standard example</a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Operation">General Operation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-gnits"><code>gnits</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-gnits-strictness"><samp>gnits</samp> strictness</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Strictness">Strictness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-gnu"><code>gnu</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-GNU-Build-System_002c-basics">GNU Build System, basics</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Installation">Basic Installation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-GNU-Build-System_002c-features">GNU Build System, features</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Use-Cases">Use Cases</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-GNU-Build-System_002c-introduction">GNU Build System, introduction</a>:</td><td>&nbsp;</td><td valign="top"><a href="#GNU-Build-System">GNU Build System</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-GNU-Build-System_002c-use-cases">GNU Build System, use cases</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Use-Cases">Use Cases</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-GNU-Coding-Standards">GNU Coding Standards</a>:</td><td>&nbsp;</td><td valign="top"><a href="#GNU-Build-System">GNU Build System</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-GNU-Gettext-support">GNU Gettext support</a>:</td><td>&nbsp;</td><td valign="top"><a href="#gettext">gettext</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-GNU-make-extensions">GNU make extensions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Operation">General Operation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-GNU-Makefile-standards">GNU Makefile standards</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Introduction">Introduction</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-gnu-strictness"><samp>gnu</samp> strictness</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Strictness">Strictness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-GNUmakefile-including-Makefile"><samp>GNUmakefile</samp> including <samp>Makefile</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Third_002dParty-Makefiles">Third-Party Makefiles</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_letter-H">H</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-hard-error">hard error</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Generalities-about-Testing">Generalities about Testing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Header-files-in-_005fSOURCES">Header files in <code>_SOURCES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Sources">Program Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-HEADERS-primary_002c-defined"><code>HEADERS</code> primary, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Headers">Headers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-HEADERS_002c-installation-directories"><code>HEADERS</code>, installation directories</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Headers">Headers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Hello-World-example">Hello World example</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Hello-World">Hello World</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-hook-targets">hook targets</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-HP_002dUX-10_002c-lex-problems">HP-UX 10, <code>lex</code> problems</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-html"><code>html</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-html-1"><code>html</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-HTML-output-using-Texinfo">HTML output using Texinfo</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-html_002dlocal"><code>html-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_letter-I">I</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-id"><code>id</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Tags">Tags</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-if"><code>if</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Usage-of-Conditionals">Usage of Conditionals</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-include"><code>include</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basics-of-Distribution">Basics of Distribution</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-include-1"><code>include</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Include">Include</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-include_002c-distribution"><code>include</code>, distribution</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basics-of-Distribution">Basics of Distribution</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Including-Makefile-fragment">Including <samp>Makefile</samp> fragment</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Include">Include</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-indentation-in-Makefile_002eam">indentation in Makefile.am</a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Operation">General Operation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-info"><code>info</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-info-1"><code>info</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-info_002din_002dbuilddir"><code>info-in-builddir</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-info_002dlocal"><code>info-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install"><code>install</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Standard-Targets">Standard Targets</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install-1"><code>install</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-Two-Parts-of-Install">The Two Parts of Install</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install-2"><code>install</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Install-hook">Install hook</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending-Installation">Extending Installation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Install_002c-two-parts-of">Install, two parts of</a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-Two-Parts-of-Install">The Two Parts of Install</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002ddata"><code>install-data</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Two_002dPart-Install">Two-Part Install</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002ddata-1"><code>install-data</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-Two-Parts-of-Install">The Two Parts of Install</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002ddata-2"><code>install-data</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002ddata_002dhook"><code>install-data-hook</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002ddata_002dlocal"><code>install-data-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending-Installation">Extending Installation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002ddata_002dlocal-1"><code>install-data-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002ddvi"><code>install-dvi</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002ddvi-1"><code>install-dvi</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002ddvi_002dlocal"><code>install-dvi-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002dexec"><code>install-exec</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Two_002dPart-Install">Two-Part Install</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002dexec-1"><code>install-exec</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#The-Two-Parts-of-Install">The Two Parts of Install</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002dexec-2"><code>install-exec</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002dexec_002dhook"><code>install-exec-hook</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002dexec_002dlocal"><code>install-exec-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending-Installation">Extending Installation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002dexec_002dlocal-1"><code>install-exec-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002dhtml"><code>install-html</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002dhtml-1"><code>install-html</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002dhtml_002dlocal"><code>install-html-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002dinfo"><code>install-info</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002dinfo-1"><code>install-info</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002dinfo-2"><code>install-info</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002dinfo-target"><code>install-info</code> target</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002dinfo_002dlocal"><code>install-info-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002dman"><code>install-man</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Man-Pages">Man Pages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002dman-1"><code>install-man</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002dman-target"><code>install-man</code> target</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Man-Pages">Man Pages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002dpdf"><code>install-pdf</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002dpdf-1"><code>install-pdf</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002dpdf_002dlocal"><code>install-pdf-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002dps"><code>install-ps</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002dps-1"><code>install-ps</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002dps_002dlocal"><code>install-ps-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002dstrip"><code>install-strip</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Standard-Targets">Standard Targets</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-install_002dstrip-1"><code>install-strip</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Install-Rules-for-the-User">Install Rules for the User</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Installation-directories_002c-extending-list">Installation directories, extending list</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Installation-support">Installation support</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Install">Install</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Installation_002c-basics">Installation, basics</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Installation">Basic Installation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-installcheck"><code>installcheck</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Standard-Targets">Standard Targets</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-installcheck-1"><code>installcheck</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-installcheck_002dlocal"><code>installcheck-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-installdirs"><code>installdirs</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Install-Rules-for-the-User">Install Rules for the User</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-installdirs-1"><code>installdirs</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-installdirs_002dlocal"><code>installdirs-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Installing-headers">Installing headers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Headers">Headers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Installing-scripts">Installing scripts</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts">Scripts</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-installing-versioned-binaries">installing versioned binaries</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Interfacing-with-third_002dparty-packages">Interfacing with third-party packages</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Third_002dParty-Makefiles">Third-Party Makefiles</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Invocation-of-aclocal">Invocation of <code>aclocal</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#aclocal-Invocation">aclocal Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Invocation-of-automake">Invocation of <code>automake</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Invoking-aclocal">Invoking <code>aclocal</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#aclocal-Invocation">aclocal Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Invoking-automake">Invoking <code>automake</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_letter-J">J</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-JAVA-primary_002c-defined"><code>JAVA</code> primary, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Java">Java</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-JAVA-restrictions"><code>JAVA</code> restrictions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Java">Java</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Java-support-with-gcj">Java support with gcj</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Java-Support-with-gcj">Java Support with gcj</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Java-to-bytecode_002c-compilation">Java to bytecode, compilation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Java">Java</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Java-to-native-code_002c-compilation">Java to native code, compilation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Java-Support-with-gcj">Java Support with gcj</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_letter-L">L</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-lazy-test-execution">lazy test execution</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Parallel-Test-Harness">Parallel Test Harness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LDADD-and-_002dl"><code>LDADD</code> and <samp>-l</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Linking">Linking</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LDFLAGS-and-AM_005fLDFLAGS"><code>LDFLAGS</code> and <code>AM_LDFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-lex-problems-with-HP_002dUX-10"><code>lex</code> problems with HP-UX 10</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-lex_002c-multiple-lexers"><code>lex</code>, multiple lexers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Yacc-and-Lex">Yacc and Lex</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LFLAGS-and-AM_005fLFLAGS"><code>LFLAGS</code> and <code>AM_LFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-libltdl_002c-introduction"><samp>libltdl</samp>, introduction</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Concept">Libtool Concept</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LIBOBJS_002c-and-Libtool"><code>LIBOBJS</code>, and Libtool</a>:</td><td>&nbsp;</td><td valign="top"><a href="#LTLIBOBJS">LTLIBOBJS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LIBOBJS_002c-example"><code>LIBOBJS</code>, example</a>:</td><td>&nbsp;</td><td valign="top"><a href="#LIBOBJS">LIBOBJS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LIBOBJS_002c-special-handling"><code>LIBOBJS</code>, special handling</a>:</td><td>&nbsp;</td><td valign="top"><a href="#LIBOBJS">LIBOBJS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LIBRARIES-primary_002c-defined"><code>LIBRARIES</code> primary, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#A-Library">A Library</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-libtool-convenience-libraries">libtool convenience libraries</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Convenience-Libraries">Libtool Convenience Libraries</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-libtool-libraries_002c-conditional">libtool libraries, conditional</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conditional-Libtool-Libraries">Conditional Libtool Libraries</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-libtool-library_002c-definition">libtool library, definition</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Concept">Libtool Concept</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-libtool-modules">libtool modules</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Modules">Libtool Modules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Libtool-modules_002c-default-source-example">Libtool modules, default source example</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Default-_005fSOURCES">Default _SOURCES</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-libtool_002c-introduction"><code>libtool</code>, introduction</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Concept">Libtool Concept</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LIBTOOLFLAGS-and-AM_005fLIBTOOLFLAGS"><code>LIBTOOLFLAGS</code> and <code>AM_LIBTOOLFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-libtoolize-and-autoreconf"><code>libtoolize</code> and <code>autoreconf</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Error-required-file-ltmain_002esh-not-found">Error required file ltmain.sh not found</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-libtoolize_002c-no-longer-run-by-automake"><code>libtoolize</code>, no longer run by <code>automake</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Error-required-file-ltmain_002esh-not-found">Error required file ltmain.sh not found</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Limitations-of-automake-parser">Limitations of automake parser</a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Operation">General Operation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Linking-Fortran-77-with-C-and-C_002b_002b">Linking Fortran 77 with C and C++</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Mixing-Fortran-77-With-C-and-C_002b_002b">Mixing Fortran 77 With C and C++</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LISP-primary_002c-defined"><code>LISP</code> primary, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Emacs-Lisp">Emacs Lisp</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LN_005fS-example"><code>LN_S</code> example</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-local-targets">local targets</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LTALLOCA_002c-special-handling"><code>LTALLOCA</code>, special handling</a>:</td><td>&nbsp;</td><td valign="top"><a href="#LTLIBOBJS">LTLIBOBJS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LTLIBOBJS_002c-special-handling"><code>LTLIBOBJS</code>, special handling</a>:</td><td>&nbsp;</td><td valign="top"><a href="#LTLIBOBJS">LTLIBOBJS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-LTLIBRARIES-primary_002c-defined"><code>LTLIBRARIES</code> primary, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Libraries">Libtool Libraries</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ltmain_002esh-not-found"><samp>ltmain.sh</samp> not found</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Error-required-file-ltmain_002esh-not-found">Error required file ltmain.sh not found</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_letter-M">M</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-m4_005finclude_002c-distribution"><code>m4_include</code>, distribution</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basics-of-Distribution">Basics of Distribution</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Macro-search-path">Macro search path</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Macro-Search-Path">Macro Search Path</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-macro-serial-numbers">macro serial numbers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Serials">Serials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Macros-Automake-recognizes">Macros Automake recognizes</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-maintainer_002dclean_002dlocal"><code>maintainer-clean-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Clean">Clean</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-make-check"><code>make check</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Tests">Tests</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-make-clean-support">&lsquo;<samp>make clean</samp>&rsquo; support</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Clean">Clean</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-make-dist">&lsquo;<samp>make dist</samp>&rsquo;</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basics-of-Distribution">Basics of Distribution</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-make-distcheck">&lsquo;<samp>make distcheck</samp>&rsquo;</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Checking-the-Distribution">Checking the Distribution</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-make-distclean_002c-diagnostic">&lsquo;<samp>make distclean</samp>&rsquo;, diagnostic</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Errors-with-distclean">Errors with distclean</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-make-distcleancheck">&lsquo;<samp>make distcleancheck</samp>&rsquo;</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Checking-the-Distribution">Checking the Distribution</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-make-distuninstallcheck">&lsquo;<samp>make distuninstallcheck</samp>&rsquo;</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Checking-the-Distribution">Checking the Distribution</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-make-install-support">&lsquo;<samp>make install</samp>&rsquo; support</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Install">Install</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-make-installcheck_002c-testing-_002d_002dhelp-and-_002d_002dversion">&lsquo;<samp>make installcheck</samp>&rsquo;, testing <samp>--help</samp> and <samp>--version</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Make-rules_002c-overriding">Make rules, overriding</a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Operation">General Operation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Make-targets_002c-overriding">Make targets, overriding</a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Operation">General Operation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Makefile-fragment_002c-including"><samp>Makefile</samp> fragment, including</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Include">Include</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Makefile_002eam_002c-first-line">Makefile.am, first line</a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Operation">General Operation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Makefile_002eam_002c-Hello-World"><samp>Makefile.am</samp>, Hello World</a>:</td><td>&nbsp;</td><td valign="top"><a href="#amhello_0027s-Makefile_002eam-Setup-Explained">amhello's Makefile.am Setup Explained</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Man-page-renaming_002c-avoiding">Man page renaming, avoiding</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Man-Pages">Man Pages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-MANS-primary_002c-defined"><code>MANS</code> primary, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Man-Pages">Man Pages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-many-outputs_002c-rules-with">many outputs, rules with</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Multiple-Outputs">Multiple Outputs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mdate_002dsh"><samp>mdate-sh</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-MinGW-cross_002dcompilation-example">MinGW cross-compilation example</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Cross_002dCompilation">Cross-Compilation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-missing_002c-purpose"><code>missing</code>, purpose</a>:</td><td>&nbsp;</td><td valign="top"><a href="#maintainer_002dmode">maintainer-mode</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Mixed-language-example">Mixed language example</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Mixing-Fortran-77-With-C-and-C_002b_002b">Mixing Fortran 77 With C and C++</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Mixing-Fortran-77-with-C-and-C_002b_002b">Mixing Fortran 77 with C and C++</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Mixing-Fortran-77-With-C-and-C_002b_002b">Mixing Fortran 77 With C and C++</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Mixing-Fortran-77-with-C-and_002for-C_002b_002b">Mixing Fortran 77 with C and/or C++</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Mixing-Fortran-77-With-C-and-C_002b_002b">Mixing Fortran 77 With C and C++</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mkdir-_002dp_002c-macro-check"><code>mkdir -p</code>, macro check</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Obsolete-Macros">Obsolete Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-modules_002c-libtool">modules, libtool</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Modules">Libtool Modules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mostlyclean"><code>mostlyclean</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mostlyclean_002dlocal"><code>mostlyclean-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Clean">Clean</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-mostlyclean_002dlocal-1"><code>mostlyclean-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-multiple-configurations_002c-example">multiple configurations, example</a>:</td><td>&nbsp;</td><td valign="top"><a href="#VPATH-Builds">VPATH Builds</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Multiple-configure_002eac-files">Multiple <samp>configure.ac</samp> files</a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Multiple-lex-lexers">Multiple <code>lex</code> lexers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Yacc-and-Lex">Yacc and Lex</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-multiple-outputs_002c-rules-with">multiple outputs, rules with</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Multiple-Outputs">Multiple Outputs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Multiple-yacc-parsers">Multiple <code>yacc</code> parsers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Yacc-and-Lex">Yacc and Lex</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_letter-N">N</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Nested-packages">Nested packages</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Nested-Packages">Nested Packages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Nesting-packages">Nesting packages</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Subpackages">Subpackages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-no_002ddefine"><code>no-define</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-no_002ddefine-1"><code>no-define</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-no_002ddependencies"><code>no-dependencies</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Dependencies">Dependencies</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-no_002ddependencies-1"><code>no-dependencies</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-no_002ddist"><code>no-dist</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-no_002ddist_002dgzip-1"><code>no-dist-gzip</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-no_002ddist_002dgzip"><code>no-dist-gzip</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-no_002dexeext"><code>no-exeext</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-no_002dinstallinfo"><code>no-installinfo</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-no_002dinstallinfo-1"><code>no-installinfo</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-no_002dinstallinfo-option"><code>no-installinfo</code> option</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-no_002dinstallman"><code>no-installman</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Man-Pages">Man Pages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-no_002dinstallman-1"><code>no-installman</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-no_002dinstallman-option"><samp>no-installman</samp> option</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Man-Pages">Man Pages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-no_002dtexinfo_002etex"><code>no-texinfo.tex</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-nobase_005f-and-dist_005f-or-nodist_005f"><code>nobase_</code> and <code>dist_</code> or <code>nodist_</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Alternative">Alternative</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-nobase_005f-prefix"><code>nobase_</code> prefix</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Alternative">Alternative</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-nodist_005f-and-nobase_005f"><code>nodist_</code> and <code>nobase_</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Alternative">Alternative</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-nodist_005f-and-notrans_005f"><code>nodist_</code> and <code>notrans_</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Man-Pages">Man Pages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-noinst_005f-primary-prefix_002c-definition">&lsquo;<samp>noinst_</samp>&rsquo; primary prefix, definition</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Non_002dGNU-packages">Non-GNU packages</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Strictness">Strictness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Non_002dstandard-targets">Non-standard targets</a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Operation">General Operation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-nostdinc"><code>nostdinc</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-notrans_005f-and-dist_005f-or-nodist_005f"><code>notrans_</code> and <code>dist_</code> or <code>nodist_</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Man-Pages">Man Pages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-notrans_005f-prefix"><code>notrans_</code> prefix</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Man-Pages">Man Pages</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_letter-O">O</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-OBJCFLAGS-and-AM_005fOBJCFLAGS"><code>OBJCFLAGS</code> and <code>AM_OBJCFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-OBJCXXFLAGS-and-AM_005fOBJCXXFLAGS"><code>OBJCXXFLAGS</code> and <code>AM_OBJCXXFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Objective-C-support">Objective C support</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Objective-C-Support">Objective C Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Objective-C_002b_002b-support">Objective C++ support</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Objective-C_002b_002b-Support">Objective C++ Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Objects-in-subdirectory">Objects in subdirectory</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-obsolete-macros">obsolete macros</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Obsolete-Macros">Obsolete Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-optimized-build_002c-example">optimized build, example</a>:</td><td>&nbsp;</td><td valign="top"><a href="#VPATH-Builds">VPATH Builds</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-_002d_002dwarnings_003dcategory">Option, <samp>--warnings=<var>category</var></samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-_002dWcategory">Option, <samp>-W<var>category</var></samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-check_002dnews">Option, <samp>check-news</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-dejagnu">Option, <samp>dejagnu</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-dist_002dbzip2">Option, <samp>dist-bzip2</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-dist_002dlzip">Option, <samp>dist-lzip</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-dist_002dshar">Option, <samp>dist-shar</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-dist_002dtarZ">Option, <samp>dist-tarZ</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-dist_002dxz">Option, <samp>dist-xz</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-dist_002dzip">Option, <samp>dist-zip</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-filename_002dlength_002dmax_003d99">Option, <samp>filename-length-max=99</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-foreign">Option, <samp>foreign</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-gnits">Option, <samp>gnits</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-gnu">Option, <samp>gnu</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-info_002din_002dbuilddir">Option, <samp>info-in-builddir</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-no_002ddefine">Option, <samp>no-define</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-no_002ddependencies">Option, <samp>no-dependencies</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-no_002ddist">Option, <samp>no-dist</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-no_002ddist_002dgzip">Option, <samp>no-dist-gzip</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-no_002dexeext">Option, <samp>no-exeext</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-no_002dinstallinfo">Option, <code>no-installinfo</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-no_002dinstallinfo-1">Option, <samp>no-installinfo</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-no_002dinstallman">Option, <samp>no-installman</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Man-Pages">Man Pages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-no_002dinstallman-1">Option, <samp>no-installman</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-no_002dtexinfo_002etex">Option, <samp>no-texinfo.tex</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-nostdinc">Option, <samp>nostdinc</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-parallel_002dtests">Option, <samp>parallel-tests</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-readme_002dalpha">Option, <samp>readme-alpha</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-serial_002dtests">Option, <samp>serial-tests</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-tar_002dpax">Option, <samp>tar-pax</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-tar_002dustar">Option, <samp>tar-ustar</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-tar_002dv7">Option, <samp>tar-v7</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-version">Option, <var>version</var></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Option_002c-warnings">Option, warnings</a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Options_002c-aclocal">Options, <code>aclocal</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#aclocal-Options">aclocal Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Options_002c-automake">Options, <code>automake</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Options_002c-std_002doptions">Options, <samp>std-options</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Options_002c-subdir_002dobjects">Options, <samp>subdir-objects</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Ordering-flag-variables">Ordering flag variables</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Overriding-make-rules">Overriding make rules</a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Operation">General Operation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Overriding-make-targets">Overriding make targets</a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Operation">General Operation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Overriding-make-variables">Overriding make variables</a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Operation">General Operation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-overriding-rules">overriding rules</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-overriding-semantics">overriding semantics</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_letter-P">P</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-PACKAGE_002c-directory"><code>PACKAGE</code>, directory</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-PACKAGE_002c-prevent-definition"><code>PACKAGE</code>, prevent definition</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Packages_002c-nested">Packages, nested</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Nested-Packages">Nested Packages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Packages_002c-preparation">Packages, preparation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Preparing-Distributions">Preparing Distributions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Parallel-build-trees">Parallel build trees</a>:</td><td>&nbsp;</td><td valign="top"><a href="#VPATH-Builds">VPATH Builds</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-parallel_002dtests"><code>parallel-tests</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Path-stripping_002c-avoiding">Path stripping, avoiding</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Alternative">Alternative</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pax-format">pax format</a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pdf"><code>pdf</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pdf-1"><code>pdf</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-PDF-output-using-Texinfo">PDF output using Texinfo</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pdf_002dlocal"><code>pdf-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Per_002dobject-flags_002c-emulated">Per-object flags, emulated</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Per_002dObject-Flags">Per-Object Flags</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-per_002dtarget-compilation-flags_002c-defined">per-target compilation flags, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pkgdatadir_002c-defined"><code>pkgdatadir</code>, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pkgincludedir_002c-defined"><code>pkgincludedir</code>, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pkglibdir_002c-defined"><code>pkglibdir</code>, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-pkglibexecdir_002c-defined"><code>pkglibexecdir</code>, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Preparing-distributions">Preparing distributions</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Preparing-Distributions">Preparing Distributions</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Preprocessing-Fortran-77">Preprocessing Fortran 77</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Preprocessing-Fortran-77">Preprocessing Fortran 77</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Primary-variable_002c-DATA">Primary variable, <code>DATA</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Data">Data</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Primary-variable_002c-defined">Primary variable, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Primary-variable_002c-HEADERS">Primary variable, <code>HEADERS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Headers">Headers</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Primary-variable_002c-JAVA">Primary variable, <code>JAVA</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Java">Java</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Primary-variable_002c-LIBRARIES">Primary variable, <code>LIBRARIES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#A-Library">A Library</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Primary-variable_002c-LISP">Primary variable, <code>LISP</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Emacs-Lisp">Emacs Lisp</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Primary-variable_002c-LTLIBRARIES">Primary variable, <code>LTLIBRARIES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Libraries">Libtool Libraries</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Primary-variable_002c-MANS">Primary variable, <code>MANS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Man-Pages">Man Pages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Primary-variable_002c-PROGRAMS">Primary variable, <code>PROGRAMS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Primary-variable_002c-PYTHON">Primary variable, <code>PYTHON</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Python">Python</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Primary-variable_002c-SCRIPTS">Primary variable, <code>SCRIPTS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts">Scripts</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Primary-variable_002c-SOURCES">Primary variable, <code>SOURCES</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Sources">Program Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Primary-variable_002c-TEXINFOS">Primary variable, <code>TEXINFOS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-PROGRAMS-primary-variable"><code>PROGRAMS</code> primary variable</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Programs_002c-auxiliary">Programs, auxiliary</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Auxiliary-Programs">Auxiliary Programs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-PROGRAMS_002c-bindir"><code>PROGRAMS</code>, <code>bindir</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Sources">Program Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Programs_002c-conditional">Programs, conditional</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conditional-Programs">Conditional Programs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Programs_002c-renaming-during-installation">Programs, renaming during installation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Renaming">Renaming</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-prog_005fLDADD_002c-defined"><code>prog_LDADD</code>, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Linking">Linking</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Proxy-Makefile-for-third_002dparty-packages">Proxy <samp>Makefile</samp> for third-party packages</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Third_002dParty-Makefiles">Third-Party Makefiles</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ps"><code>ps</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ps-1"><code>ps</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-PS-output-using-Texinfo">PS output using Texinfo</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ps_002dlocal"><code>ps-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-PYTHON-primary_002c-defined"><code>PYTHON</code> primary, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Python">Python</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_letter-R">R</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Ratfor-programs">Ratfor programs</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Preprocessing-Fortran-77">Preprocessing Fortran 77</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-read_002donly-source-tree">read-only source tree</a>:</td><td>&nbsp;</td><td valign="top"><a href="#VPATH-Builds">VPATH Builds</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-readme_002dalpha"><code>readme-alpha</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-README_002dalpha"><samp>README-alpha</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Gnits">Gnits</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rebuild-rules">rebuild rules</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rebuilding">Rebuilding</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rebuild-rules-1">rebuild rules</a>:</td><td>&nbsp;</td><td valign="top"><a href="#CVS">CVS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-recheck"><code>recheck</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Parallel-Test-Harness">Parallel Test Harness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Recognized-macros-by-Automake">Recognized macros by Automake</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Optional">Optional</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Recursive-operation-of-Automake">Recursive operation of Automake</a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Operation">General Operation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-recursive-targets-and-third_002dparty-Makefiles">recursive targets and third-party <samp>Makefile</samp>s</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Third_002dParty-Makefiles">Third-Party Makefiles</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Register-test-case-result">Register test case result</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Log-files-generation-and-test-results-recording">Log files generation and test results recording</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Register-test-result">Register test result</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Log-files-generation-and-test-results-recording">Log files generation and test results recording</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Renaming-programs">Renaming programs</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Renaming">Renaming</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Reporting-bugs">Reporting bugs</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Introduction">Introduction</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Requirements-of-Automake">Requirements of Automake</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Requirements">Requirements</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Requirements_002c-Automake">Requirements, Automake</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Introduction">Introduction</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Restrictions-for-JAVA">Restrictions for <code>JAVA</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Java">Java</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-reStructuredText-field_002c-_003acopy_002din_002dglobal_002dlog_003a">reStructuredText field, <code>:copy-in-global-log:</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Log-files-generation-and-test-results-recording">Log files generation and test results recording</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-reStructuredText-field_002c-_003arecheck_003a">reStructuredText field, <code>:recheck:</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Log-files-generation-and-test-results-recording">Log files generation and test results recording</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-reStructuredText-field_002c-_003atest_002dglobal_002dresult_003a">reStructuredText field, <code>:test-global-result:</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Log-files-generation-and-test-results-recording">Log files generation and test results recording</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-reStructuredText-field_002c-_003atest_002dresult_003a">reStructuredText field, <code>:test-result:</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Log-files-generation-and-test-results-recording">Log files generation and test results recording</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-RFLAGS-and-AM_005fRFLAGS"><code>RFLAGS</code> and <code>AM_RFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rules-with-multiple-outputs">rules with multiple outputs</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Multiple-Outputs">Multiple Outputs</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rules_002c-conflicting">rules, conflicting</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rules_002c-debugging">rules, debugging</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Debugging-Make-Rules">Debugging Make Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-rules_002c-overriding">rules, overriding</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_letter-S">S</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-Scanning-configure_002eac">Scanning <samp>configure.ac</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#configure">configure</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-SCRIPTS-primary_002c-defined"><code>SCRIPTS</code> primary, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts">Scripts</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-SCRIPTS_002c-installation-directories"><code>SCRIPTS</code>, installation directories</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts">Scripts</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Selecting-the-linker-automatically">Selecting the linker automatically</a>:</td><td>&nbsp;</td><td valign="top"><a href="#How-the-Linker-is-Chosen">How the Linker is Chosen</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-serial-number-and-_002d_002dinstall">serial number and <samp>--install</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#aclocal-Options">aclocal Options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-serial-numbers-in-macros">serial numbers in macros</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Serials">Serials</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-serial_002dtests"><code>serial-tests</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-serial_002dtests_002c-Using"><samp>serial-tests</samp>, Using</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Serial-Test-Harness">Serial Test Harness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Shared-libraries_002c-support-for">Shared libraries, support for</a>:</td><td>&nbsp;</td><td valign="top"><a href="#A-Shared-Library">A Shared Library</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Silencing-make">Silencing <code>make</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Silencing-Make">Silencing Make</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Silent-make">Silent <code>make</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Silencing-Make">Silencing Make</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Silent-make-rules">Silent <code>make</code> rules</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Silencing-Make">Silencing Make</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Silent-rules">Silent rules</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Silencing-Make">Silencing Make</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-silent-rules-and-libtool">silent rules and libtool</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Automake-Silent-Rules">Automake Silent Rules</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-site_002eexp"><samp>site.exp</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#DejaGnu-Tests">DejaGnu Tests</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-source-tree-and-build-tree">source tree and build tree</a>:</td><td>&nbsp;</td><td valign="top"><a href="#VPATH-Builds">VPATH Builds</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-source-tree_002c-read_002donly">source tree, read-only</a>:</td><td>&nbsp;</td><td valign="top"><a href="#VPATH-Builds">VPATH Builds</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-SOURCES-primary_002c-defined"><code>SOURCES</code> primary, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-Sources">Program Sources</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Special-Automake-comment">Special Automake comment</a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Operation">General Operation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Staged-installation">Staged installation</a>:</td><td>&nbsp;</td><td valign="top"><a href="#DESTDIR">DESTDIR</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-std_002doptions"><code>std-options</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Strictness_002c-command-line">Strictness, command line</a>:</td><td>&nbsp;</td><td valign="top"><a href="#automake-Invocation">automake Invocation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Strictness_002c-defined">Strictness, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Strictness">Strictness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Strictness_002c-foreign">Strictness, <samp>foreign</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Strictness">Strictness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Strictness_002c-gnits">Strictness, <samp>gnits</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Strictness">Strictness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Strictness_002c-gnu">Strictness, <samp>gnu</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Strictness">Strictness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-su_002c-before-make-install">su, before <code>make install</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Installation">Basic Installation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-subdir_002dobjects"><code>subdir-objects</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Subdirectories_002c-building-conditionally">Subdirectories, building conditionally</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conditional-Subdirectories">Conditional Subdirectories</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Subdirectories_002c-configured-conditionally">Subdirectories, configured conditionally</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Unconfigured-Subdirectories">Unconfigured Subdirectories</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Subdirectories_002c-not-distributed">Subdirectories, not distributed</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Unconfigured-Subdirectories">Unconfigured Subdirectories</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Subdirectory_002c-objects-in">Subdirectory, objects in</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Program-and-Library-Variables">Program and Library Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-SUBDIRS-and-AC_005fSUBST"><code>SUBDIRS</code> and <code>AC_SUBST</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Subdirectories-with-AC_005fSUBST">Subdirectories with AC_SUBST</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-SUBDIRS-and-AM_005fCONDITIONAL"><code>SUBDIRS</code> and <code>AM_CONDITIONAL</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Subdirectories-with-AM_005fCONDITIONAL">Subdirectories with AM_CONDITIONAL</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-SUBDIRS_002c-conditional"><code>SUBDIRS</code>, conditional</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Conditional-Subdirectories">Conditional Subdirectories</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-SUBDIRS_002c-explained"><code>SUBDIRS</code>, explained</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Subdirectories">Subdirectories</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Subpackages">Subpackages</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Nested-Packages">Nested Packages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Subpackages-1">Subpackages</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Subpackages">Subpackages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-suffix-_002ela_002c-defined">suffix <samp>.la</samp>, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Concept">Libtool Concept</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-suffix-_002elo_002c-defined">suffix <samp>.lo</samp>, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Libtool-Concept">Libtool Concept</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-SUFFIXES_002c-adding"><code>SUFFIXES</code>, adding</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Suffixes">Suffixes</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Support-for-C_002b_002b">Support for C++</a>:</td><td>&nbsp;</td><td valign="top"><a href="#C_002b_002b-Support">C++ Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Support-for-Fortran-77">Support for Fortran 77</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Fortran-77-Support">Fortran 77 Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Support-for-Fortran-9x">Support for Fortran 9x</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Fortran-9x-Support">Fortran 9x Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Support-for-GNU-Gettext">Support for GNU Gettext</a>:</td><td>&nbsp;</td><td valign="top"><a href="#gettext">gettext</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Support-for-Java-with-gcj">Support for Java with gcj</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Java-Support-with-gcj">Java Support with gcj</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Support-for-Objective-C">Support for Objective C</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Objective-C-Support">Objective C Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Support-for-Objective-C_002b_002b">Support for Objective C++</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Objective-C_002b_002b-Support">Objective C++ Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Support-for-Unified-Parallel-C">Support for Unified Parallel C</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Unified-Parallel-C-Support">Unified Parallel C Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Support-for-Vala">Support for Vala</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vala-Support">Vala Support</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_letter-T">T</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-tags"><code>tags</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Tags">Tags</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-TAGS-support"><samp>TAGS</samp> support</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Tags">Tags</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-tar-formats"><code>tar</code> formats</a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-tar_002dpax"><code>tar-pax</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-tar_002dustar"><code>tar-ustar</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-tar_002dv7"><code>tar-v7</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Target_002c-install_002dinfo">Target, <code>install-info</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Target_002c-install_002dman">Target, <code>install-man</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Man-Pages">Man Pages</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-test-case">test case</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Generalities-about-Testing">Generalities about Testing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Test-case-result_002c-registering">Test case result, registering</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Log-files-generation-and-test-results-recording">Log files generation and test results recording</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-test-failure">test failure</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Generalities-about-Testing">Generalities about Testing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-test-harness">test harness</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Generalities-about-Testing">Generalities about Testing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-test-metadata">test metadata</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Parallel-Test-Harness">Parallel Test Harness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-test-pass">test pass</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Generalities-about-Testing">Generalities about Testing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Test-result_002c-registering">Test result, registering</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Log-files-generation-and-test-results-recording">Log files generation and test results recording</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-test-skip">test skip</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Generalities-about-Testing">Generalities about Testing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Test-suites">Test suites</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Tests">Tests</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Tests_002c-expected-failure">Tests, expected failure</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts_002dbased-Testsuites">Scripts-based Testsuites</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-testsuite-harness">testsuite harness</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Generalities-about-Testing">Generalities about Testing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Testsuite-progress-on-console">Testsuite progress on console</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Scripts_002dbased-Testsuites">Scripts-based Testsuites</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Texinfo-flag_002c-EDITION">Texinfo flag, <code>EDITION</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Texinfo-flag_002c-UPDATED">Texinfo flag, <code>UPDATED</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Texinfo-flag_002c-UPDATED_002dMONTH">Texinfo flag, <code>UPDATED-MONTH</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Texinfo-flag_002c-VERSION">Texinfo flag, <code>VERSION</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-texinfo_002etex"><samp>texinfo.tex</samp></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-TEXINFOS-primary_002c-defined"><code>TEXINFOS</code> primary, defined</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-third_002dparty-files-and-CVS">third-party files and CVS</a>:</td><td>&nbsp;</td><td valign="top"><a href="#CVS">CVS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Third_002dparty-packages_002c-interfacing-with">Third-party packages, interfacing with</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Third_002dParty-Makefiles">Third-Party Makefiles</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-timestamps-and-CVS">timestamps and CVS</a>:</td><td>&nbsp;</td><td valign="top"><a href="#CVS">CVS</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Transforming-program-names">Transforming program names</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Renaming">Renaming</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-trees_002c-source-vs_002e-build">trees, source vs. build</a>:</td><td>&nbsp;</td><td valign="top"><a href="#VPATH-Builds">VPATH Builds</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-true-Example"><code>true</code> Example</a>:</td><td>&nbsp;</td><td valign="top"><a href="#true">true</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_letter-U">U</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-underquoted-AC_005fDEFUN">underquoted <code>AC_DEFUN</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending-aclocal">Extending aclocal</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-unexpected-pass">unexpected pass</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Generalities-about-Testing">Generalities about Testing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-unexpected-test-pass">unexpected test pass</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Generalities-about-Testing">Generalities about Testing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Unified-Parallel-C-support">Unified Parallel C support</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Unified-Parallel-C-Support">Unified Parallel C Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Uniform-naming-scheme">Uniform naming scheme</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Uniform">Uniform</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-uninstall"><code>uninstall</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Standard-Targets">Standard Targets</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-uninstall-1"><code>uninstall</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Install-Rules-for-the-User">Install Rules for the User</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-uninstall-2"><code>uninstall</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-uninstall_002dhook"><code>uninstall-hook</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-uninstall_002dlocal"><code>uninstall-local</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Unit-tests">Unit tests</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Parallel-Test-Harness">Parallel Test Harness</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Unpacking">Unpacking</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Basic-Installation">Basic Installation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-UPCFLAGS-and-AM_005fUPCFLAGS"><code>UPCFLAGS</code> and <code>AM_UPCFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-UPDATED-Texinfo-flag"><code>UPDATED</code> Texinfo flag</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-UPDATED_002dMONTH-Texinfo-flag"><code>UPDATED-MONTH</code> Texinfo flag</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Use-Cases-for-the-GNU-Build-System">Use Cases for the GNU Build System</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Use-Cases">Use Cases</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-user-variables">user variables</a>:</td><td>&nbsp;</td><td valign="top"><a href="#User-Variables">User Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Using-aclocal">Using <code>aclocal</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#configure">configure</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ustar-format">ustar format</a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_letter-V">V</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-v7-tar-format">v7 <code>tar</code> format</a>:</td><td>&nbsp;</td><td valign="top"><a href="#List-of-Automake-options">List of Automake options</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Vala-Support">Vala Support</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Vala-Support">Vala Support</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-variables_002c-conflicting">variables, conflicting</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Variables_002c-overriding">Variables, overriding</a>:</td><td>&nbsp;</td><td valign="top"><a href="#General-Operation">General Operation</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-variables_002c-reserved-for-the-user">variables, reserved for the user</a>:</td><td>&nbsp;</td><td valign="top"><a href="#User-Variables">User Variables</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-VERSION-Texinfo-flag"><code>VERSION</code> Texinfo flag</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Texinfo">Texinfo</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-VERSION_002c-prevent-definition"><code>VERSION</code>, prevent definition</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Public-Macros">Public Macros</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-version_002em4_002c-example"><samp>version.m4</samp>, example</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rebuilding">Rebuilding</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-version_002esh_002c-example"><samp>version.sh</samp>, example</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Rebuilding">Rebuilding</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-versioned-binaries_002c-installing">versioned binaries, installing</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Extending">Extending</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-VPATH-builds">VPATH builds</a>:</td><td>&nbsp;</td><td valign="top"><a href="#VPATH-Builds">VPATH Builds</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_letter-W">W</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-wildcards">wildcards</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Wildcards">Wildcards</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-Windows">Windows</a>:</td><td>&nbsp;</td><td valign="top"><a href="#EXEEXT">EXEEXT</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_letter-X">X</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-xfail">xfail</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Generalities-about-Testing">Generalities about Testing</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-xpass">xpass</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Generalities-about-Testing">Generalities about Testing</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_letter-Y">Y</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-yacc_002c-multiple-parsers"><code>yacc</code>, multiple parsers</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Yacc-and-Lex">Yacc and Lex</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-YFLAGS-and-AM_005fYFLAGS"><code>YFLAGS</code> and <code>AM_YFLAGS</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Flag-Variables-Ordering">Flag Variables Ordering</a></td></tr>
<tr><td></td><td valign="top"><a href="#index-ylwrap"><code>ylwrap</code></a>:</td><td>&nbsp;</td><td valign="top"><a href="#Yacc-and-Lex">Yacc and Lex</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
<tr><th><a name="General-Index_cp_letter-Z">Z</a></th><td></td><td></td></tr>
<tr><td></td><td valign="top"><a href="#index-zardoz-example"><code>zardoz</code> example</a>:</td><td>&nbsp;</td><td valign="top"><a href="#Complete">Complete</a></td></tr>
<tr><td colspan="4"> <hr></td></tr>
</table>
<table><tr><th valign="top">Jump to: &nbsp; </th><td><a class="summary-letter" href="#General-Index_cp_symbol-1"><b>#</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_symbol-2"><b>$</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_symbol-3"><b>+</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_symbol-4"><b>-</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_symbol-5"><b>.</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_symbol-6"><b>:</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_symbol-7"><b>_</b></a>
 &nbsp; 
<br>
<a class="summary-letter" href="#General-Index_cp_letter-A"><b>A</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-B"><b>B</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-C"><b>C</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-D"><b>D</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-E"><b>E</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-F"><b>F</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-G"><b>G</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-H"><b>H</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-I"><b>I</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-J"><b>J</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-L"><b>L</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-M"><b>M</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-N"><b>N</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-O"><b>O</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-P"><b>P</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-R"><b>R</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-S"><b>S</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-T"><b>T</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-U"><b>U</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-V"><b>V</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-W"><b>W</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-X"><b>X</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-Y"><b>Y</b></a>
 &nbsp; 
<a class="summary-letter" href="#General-Index_cp_letter-Z"><b>Z</b></a>
 &nbsp; 
</td></tr></table>


<div class="footnote">
<hr>
<h4 class="footnotes-heading">Footnotes</h4>

<h3><a name="FOOT1" href="#DOCF1">(1)</a></h3>
<p>These variables are also called <em>make macros</em>
in Make terminology, however in this manual we reserve the term
<em>macro</em> for Autoconf&rsquo;s macros.</p>
<h3><a name="FOOT2" href="#DOCF2">(2)</a></h3>
<p>We
believe.  This work is new and there are probably warts.
See <a href="#Introduction">Introduction</a>, for information on reporting bugs.</p>
<h3><a name="FOOT3" href="#DOCF3">(3)</a></h3>
<p>There are other, more obscure reasons for
this limitation as well.</p>
<h3><a name="FOOT4" href="#DOCF4">(4)</a></h3>
<p>Please note that <code>automake</code> recognizes
<samp>-d</samp> in <code>AM_YFLAGS</code> only if it is not clustered with other
options; for example, it won&rsquo;t be recognized if <code>AM_YFLAGS</code> is
<samp>-dt</samp>, but it will be if <code>AM_YFLAGS</code> is <samp>-d -t</samp> or
<samp>-t -d</samp>.</p>
<h3><a name="FOOT5" href="#DOCF5">(5)</a></h3>
<p>Much, if not most, of the
information in the following sections pertaining to preprocessing
Fortran 77 programs was taken almost verbatim from <a href="http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</a> in <cite>The GNU Make Manual</cite>.</p>
<h3><a name="FOOT6" href="#DOCF6">(6)</a></h3>
<p>For example,
<a href="http://www-zeus.desy.de/~burow/cfortran/">the cfortran package</a>
addresses all of these inter-language issues, and runs under nearly all
Fortran 77, C and C++ compilers on nearly all platforms.  However,
<code>cfortran</code> is not yet Free Software, but it will be in the next
major release.</p>
<h3><a name="FOOT7" href="#DOCF7">(7)</a></h3>
<p>See also
<a href="http://catb.org/~esr/writings/taoup/html/ch11s09.html">http://catb.org/~esr/writings/taoup/html/ch11s09.html</a>.</p>
<h3><a name="FOOT8" href="#DOCF8">(8)</a></h3>
<p>Automake&rsquo;s &lsquo;<samp>dist</samp>&rsquo; and
&lsquo;<samp>distcheck</samp>&rsquo; rules had a bug in this regard in that they created
directories even with <samp>-n</samp>, but this has been fixed in Automake
1.11.</p>
</div>
<hr>



</body>
</html>
