# call函数
# 用户自己定义函数引用
# 函数语法: $(call VARIABLE,PARAM,PARAM,...)
# 函数功能:在执行时,将它的参数"PARAM"依次赋值给临时变量"$(1)"、"$(2)"(这些临时变量定义在"VARIABLE"的值中,参考下边的例子)...... call 函数对参数的数目没有限制,也可以没有参数值,没有参数值的"call"没有任何实际存在的意义。
# 函数说明:
# 1. 函数中"VARIBLE"是一个变量名,而不是变量引用。因此,通常"call"函数中的"VARIABLE"中不包含"$"(当然,除非此变量名是一个计算的变量名)。
# 2. 当变量"VARIBLE"是一个 make 内嵌的函数名时(如"if"、"foreach"、"strip"等),对"PARAM"参数的使用需要注意,因为不合适或者不正确的参数将会导致函数的返回值难以预料。
# 3. 函数中多个"PARAM"之间使用逗号分割。
# 4. 变量"VARIABLE"在定义时不能定义为直接展开式!只能定义为递归展开式。
# 首先,来看一个简单的例子。
# 示例 1:
reverse = $(2) $(1)
foo = $(call reverse,a,b)
# 变量"foo"的值为"ba"。这里变量"reverse"中的参数定义顺序可以根据需要来调整,并不是需要按照"$(1)"、"$(2)"、"$(3)"...... 这样的顺序来定义。
# 看一个稍微复杂一些的例子。我们定义了一个宏"pathsearch"来在"PATH"路径中搜索第一个指定的程序。
# 示例 2:
pathsearch = $(firstword $(wildcard $(addsuffix /$(1),$(subst :, ,$(PATH)))))
LS := $(call pathsearch,ls)