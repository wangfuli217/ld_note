number = first second     # 两个单词
number = "first second"   # 一个单词

= 是最基本的赋值 
:= 是覆盖之前的值 
?= 是如果没有被赋值过就赋予等号后面的值 
+= 是添加等号后面的值

# = ?=
如果我们要定义一个变量，其值是一个空格，那么我们可以这样来：
    nullstring :=
    space := $(nullstring) # end of the line

nullstring是一个Empty变量，其中什么也没有，而我们的space的值是一个空格。因为在操作符的右边是很难描述一个空格的，
这里采用的技术很管用，先用一个Empty变量来标明变量的值开始了，而后面采用"#"注释符来表示变量定义的终止，这样，
我们可以定义出其值是一个空格的变量。请注意这里关于"#"的使用，注释符"#"的这种特性值得我们注意，如果我们这样定义一个变量：
    dir := /foo/bar    # directory to put the frobs in
dir这个变量的值是"/foo/bar"，后面还跟了4个空格，如果我们这样使用这样变量来指定别的目录 "$(dir)/file"那么就完蛋了。

还有一个比较有用的操作符是"?="，先看示例：
    FOO ?= bar
其含义是，如果FOO没有被定义过，那么变量FOO的值就是"bar"，如果FOO先前被定义过，那么这条语将什么也不做，其等价于：
ifeq ($(origin FOO), undefined)
	FOO = bar
endif


自动化变量$? 代表依赖文件列表中被改变过的所有文件。 
自动化变量$^ 代表所有通过目录搜索得到的依赖文件的完整路径名(目录 + 一般文件名)列表。 
自动化变量$@ 代表规则的目标。 
自动化变量$< 代表规则中通过目录搜索得到的依赖文件列表的第一个依赖文件。

$@ 目标的全路径名 
$% 档案文件成员结构中的文件名 
$< 比给定的目标文件时间标记更新的依赖文件名 
$^ 所有必要条件的文件名，用空格隔开
$+ 所有必要条件的文件名，用空格隔开，包括重复的文件名 
$* 工作目标的主文件名,若当前目标是pro.o，则$*表示pro。 
$? 比目标的修改时间更晚的那些依赖模块表。
