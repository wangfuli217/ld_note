-Wall -Wextra -Wshadow -Wnon-virtual-dtor -pedantic # 可以关掉扩展并严格遵循ASCI C的规范
    -Wall -Wextra reasonable and standard
    -Wshadow warn the user if a variable declaration shadows one from a parent context
    -Wnon-virtual-dtor warn the user if a class with virtual functions has a non-virtual destructor. This helps catch hard to track down memory errors
    -Wold-style-cast warn for c-style casts
    -Wcast-align warn for potential performance problem casts
    -Wunused warn on anything being unused
    -Woverloaded-virtual warn if you overload (not override) a virtual function
    -Wpedantic warn if non-standard C++ is used
    -Wconversion warn on type conversions that may lose data
    -Wsign-conversion warn on sign conversions
    -Wmisleading-indentation warn if indentation implies blocks where blocks do not exist
    -Wduplicated-cond warn if if / else chain has duplicated conditions
    -Wduplicated-branches warn if if / else branches have duplicated code
    -Wlogical-op warn about logical operations being used where bitwise were probably wanted
    -Wnull-dereference warn if a null dereference is detected
    -Wuseless-cast warn if you perform a cast to the same type
    -Wdouble-promotion warn if float is implicit promoted to double
    -Wformat=2 warn on security issues around functions that format output (ie printf)
    -Wlifetime (clang only currently) shows object lifetime issues
# linker: https://github.com/lefticus/cppbestpractices/blob/master/02-Use_the_Tools_Available.md


Usage: gcc [options] file...
Options:
  -pass-exit-codes         Exit with highest error code from a phase
  --help                   Display this information
  --target-help            Display target specific command line options
  --help={target|optimizers|warnings|params|[^]{joined|separate|undocumented}}[,...]
                           Display specific types of command line options
  (Use '-v --help' to display command line options of sub-processes)
  --version                Display compiler version information
  -dumpspecs               Display all of the built in spec strings
  -dumpversion             Display the version of the compiler
  -dumpmachine             Display the compiler's target processor
  -print-search-dirs       Display the directories in the compiler's search path
  -print-libgcc-file-name  Display the name of the compiler's companion library
  -print-file-name=<lib>   Display the full path to library <lib>
  -print-prog-name=<prog>  Display the full path to compiler component <prog>
  -print-multi-directory   Display the root directory for versions of libgcc
  -print-multi-lib         Display the mapping between command line options and
                           multiple library search directories
  -print-multi-os-directory Display the relative path to OS libraries
  -print-sysroot           Display the target libraries directory
  -print-sysroot-headers-suffix Display the sysroot suffix used to find headers
  -Wa,<options>            Pass comma-separated <options> on to the assembler
  -Wp,<options>            Pass comma-separated <options> on to the preprocessor
  -Wl,<options>            Pass comma-separated <options> on to the linker
  -Xassembler <arg>        Pass <arg> on to the assembler
  -Xpreprocessor <arg>     Pass <arg> on to the preprocessor
  -Xlinker <arg>           Pass <arg> on to the linker
  -combine                 Pass multiple source files to compiler at once
  -save-temps              Do not delete intermediate files
  -pipe                    Use pipes rather than intermediate files
  -time                    Time the execution of each subprocess
  -specs=<file>            Override built-in specs with the contents of <file>
  -std=<standard>          Assume that the input sources are for <standard>
  --sysroot=<directory>    Use <directory> as the root directory for headers
                           and libraries
  -B <directory>           Add <directory> to the compiler's search paths
  -b <machine>             Run gcc for target <machine>, if installed
  -V <version>             Run gcc version number <version>, if installed
  -v                       Display the programs invoked by the compiler
  -###                     Like -v but options quoted and commands not executed
  -E                       Preprocess only; do not compile, assemble or link
  -S                       Compile only; do not assemble or link
  -c                       Compile and assemble, but do not link
  -o <file>                Place the output into <file>
  -x <language>            Specify the language of the following input files
                           Permissible languages include: c c++ assembler none
                           'none' means revert to the default behavior of
                           guessing the language based on the file's extension

Options starting with -g, -f, -m, -O, -W, or --param are automatically
 passed on to the various sub-processes invoked by gcc.  In order to pass
 other options on to these processes the -W<letter> options must be used.

For bug reporting instructions, please see:
<http://bugzilla.redhat.com/bugzilla>.


-nostartfiles： 不链接系统标准启动文件，而标准库文件仍然正常使用。

-nostdlib 不链接系统标准启动文件和标准库文件，会提示因为没有链接系统标准启动文件和标准库文件，而链接失败。 
该选项常用于裸机/bootloader、linux内核等程序，因为它们不需要启动文件、标准库文件。


-v  查看gcc编译器的版本，显示gcc执行时的详细过程
crt2.o 、crtbegin.o、crtend.o是gcc加入的系统标准启动文件，对于一般应用程序，这些启动是必须的。 
-Ldir：在库文件的搜索路径列表中添加dir目录。 
-lname：添加链接库文件。

