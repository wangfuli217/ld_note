内容提炼
  提倡基于接口及其实现的设计方法
  书中的实现代码并不是玩具代码，而是产品级使用
  基于接口的设计跟具体语言无关
  本书重点在算法工程，而不在数据结构算法本身
  
  作者的核心思想是可复用，即通过设计通用的接口及其实现打造出许多可重用的模块，然后基于这些模块进行开发。
这样一来只需在程序模块的基础上进行「搭积木」式的拼接就能快速完成产品的开发，可以说是一种开发方式。

  可复用 : 基于接口的设计方法 : 算法工程

库的设计和实现的困难源于：通用性、简单性和效率。
1. 过于通用，可能难以使用，或者效率较低而无法达到预期的目标
2. 过于简单，可能难以满足应用程序的需求
3. 过于难理解，程序员干脆就不会使用它们
库的设计和实现 -> 用于小规模程序设计的函数和数据结构
               -> 将这些工具打包的方式，以及如何使之健壮无错。
               -> 将模块规格说明与其实现相分离，以提高规格说明的清晰度和精确性，二者有助于提供健壮的实现
               
文学程序=英文正文+带标签的程序代码块
------------------------------------
<compute x·y>=
    sum=0;
    for (i=0;i<n;i++)
        sum +=x[i]*y[i];
定义了名为<compute>代码块，计算了数组x和y的点积。

调用改代码块：
<fucntion dotproduct>=
	int dotProduct (int x[],int y[],int n){
			int i,sum;
			<compute x·y>
			return sum;
}
抽取<function dotproduct>的结果是一个只包含下代码的文件述的文件：
	int dotProduct(int x[],int y[],int n){
			int i ,sum;
			sum =0;
			for (i=0;i<n;i++)
				sum+=x[i]*y[i];
			return sum;
}
文学程序 -> notangle noweb 工具
  文学程序是一种不受限与特定语法，而是为文字表述服务的一种代码表达方式
  代码与正文交织在一起，文章与代码相辅相成，浑然一体。
  文学程序通过「代码块标签」给出代码，并且各代码块顺序不定，且内容可随时增加
  用「代码块标签」替换实际代码，程序表达更简洁清晰
  
≡  可以简单理解为等于号
+≡ 符号表示往代码块中继续补充内容。

<hello.c 3> ≡    页码3
  <includes 4>   页码4
  <data 4>       页码4
  <protorypes 5> 页码5
  <functions 3>  页码3