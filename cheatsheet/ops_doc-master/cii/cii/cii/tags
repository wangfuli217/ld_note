!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALLOC	include/mem.h	38;"	d
ARENA_ALLOC	include/arena.h	31;"	d
ARENA_CALLOC	include/arena.h	34;"	d
ARENA_INCLUDE	include/arena.h	2;"	d
ARITH_INCLUDE	include/arith.h	2;"	d
ARRAYREP_INCLUDE	include/arrayrep.h	2;"	d
ARRAY_INCLUDE	include/array.h	2;"	d
ATOM_INCLUDE	include/atom.h	2;"	d
ArenaFailedException	src/arena.c	/^const except_t ArenaFailedException =$/;"	v
ArenaNewFailedException	src/arena.c	/^const except_t ArenaNewFailedException = $/;"	v
ArithmeticException	src/except.c	/^const T ArithmeticException         = {"ArithmeticException"};$/;"	v
AssertFailedException	src/assert.c	/^const except_t AssertFailedException       = {"AssertFailedException"};$/;"	v
BIT_INCLUDE	include/bit.h	2;"	d
BPW	src/bit.c	9;"	d	file:
BST_INCLUDE	include/bst.h	2;"	d
CALLOC	include/mem.h	41;"	d
CATCH	include/except.h	82;"	d
DIGRAPH_INCLUDE	include/digraph.h	2;"	d
DLIST_INCLUDE	include/dlist.h	2;"	d
ELSE	include/except.h	88;"	d
END_TRY	include/except.h	101;"	d
EXCEPT_INCLUDE	include/except.h	2;"	d
EXCEPT_SIGNAL	include/except.h	65;"	d
Except_entered	include/except.h	/^enum { Except_entered=0, Except_raised,$/;"	e	enum:__anon4
Except_finalized	include/except.h	/^       Except_handled,   Except_finalized };$/;"	e	enum:__anon4
Except_handled	include/except.h	/^       Except_handled,   Except_finalized };$/;"	e	enum:__anon4
Except_raised	include/except.h	/^enum { Except_entered=0, Except_raised,$/;"	e	enum:__anon4
FINALLY	include/except.h	94;"	d
FMT_INCLUDE	include/fmt.h	2;"	d
FREE	include/mem.h	48;"	d
GETWORD_INCLUDE	test/getword.h	2;"	d
HTAB_LEN	src/memchk.c	8;"	d	file:
INCLUDE_DIR	Makefile	/^INCLUDE_DIR = include$/;"	m
INDEXMINPQ_INCLUDE	include/indexminpq.h	2;"	d
INDEX_NO_KEY	include/sparsearray.h	6;"	d
IOException	src/except.c	/^const T IOException                 = {"IOException"};$/;"	v
IllegalArgumentException	src/except.c	/^const T IllegalArgumentException    = {"IllegalArgumentException"};$/;"	v
IndexOutOfBoundsException	src/except.c	/^const T IndexOutOfBoundsException   = {"IndexOutOfBoundsException"};$/;"	v
LIB	Makefile	/^LIB = $(LIB_DIR)\/libcii.a$/;"	m
LIB_DIR	Makefile	/^LIB_DIR = lib$/;"	m
LIST_INCLUDE	include/list.h	2;"	d
MEM_INCLUDE	include/mem.h	2;"	d
MemFailedException	src/memchk.c	/^const except_t MemFailedException          = {"MemFailedException"};$/;"	v
NALLOC	src/memchk.c	38;"	d	file:
NDESCRIPTORS	src/memchk.c	36;"	d	file:
NELEMS	src/atom.c	60;"	d	file:
NEW	include/mem.h	44;"	d
NEW0	include/mem.h	45;"	d
NEWARRAY	include/mem.h	46;"	d
NullPointerException	src/except.c	/^const T NullPointerException        = {"NullPointerException"};$/;"	v
OverflowException	src/fmt.c	/^const except_t  OverflowException = {"Formatting Overflow"};$/;"	v
RAISE	include/except.h	67;"	d
RERAISE	include/except.h	70;"	d
RESIZE	include/mem.h	50;"	d
RING_INCLUDE	include/ring.h	2;"	d
RuntimeException	src/except.c	/^const T RuntimeException            = {"RuntimeException"};$/;"	v
SEQ_INCLUDE	include/seq.h	2;"	d
SET_INCLUDE	include/set.h	2;"	d
SPAN	test/t_sparsearray.c	6;"	d	file:
SPARSEARRAY_INCLUDE	include/sparsearray.h	2;"	d
STACK_INCLUDE	include/stack.h	2;"	d
STR_INCLUDE	include/str.h	2;"	d
SignalException	src/except.c	/^const T SignalException             = {"SignalException"};$/;"	v
T	include/arena.h	/^typedef struct T *T;$/;"	t	typeref:struct:T
T	include/arena.h	37;"	d
T	include/arena.h	6;"	d
T	include/array.h	/^typedef struct T *T;$/;"	t	typeref:struct:T
T	include/array.h	21;"	d
T	include/array.h	4;"	d
T	include/arrayrep.h	/^struct T{$/;"	s
T	include/arrayrep.h	18;"	d
T	include/arrayrep.h	5;"	d
T	include/bit.h	/^typedef struct T *T;$/;"	t	typeref:struct:T
T	include/bit.h	35;"	d
T	include/bit.h	4;"	d
T	include/bst.h	/^typedef struct T *T;$/;"	t	typeref:struct:T
T	include/bst.h	22;"	d
T	include/bst.h	4;"	d
T	include/digraph.h	/^typedef struct T *T;$/;"	t	typeref:struct:T
T	include/digraph.h	12;"	d
T	include/digraph.h	134;"	d
T	include/dlist.h	/^struct T{$/;"	s
T	include/dlist.h	/^typedef struct T *T;$/;"	t	typeref:struct:T
T	include/dlist.h	27;"	d
T	include/dlist.h	4;"	d
T	include/except.h	/^typedef struct T{$/;"	s
T	include/except.h	/^}T; $/;"	t	typeref:struct:T
T	include/except.h	106;"	d
T	include/except.h	6;"	d
T	include/fmt.h	/^typedef void (*T)(int code, $/;"	t
T	include/fmt.h	65;"	d
T	include/fmt.h	8;"	d
T	include/indexminpq.h	/^typedef struct T *T;$/;"	t	typeref:struct:T
T	include/indexminpq.h	27;"	d
T	include/indexminpq.h	4;"	d
T	include/list.h	/^struct T{$/;"	s
T	include/list.h	/^typedef struct T *T;$/;"	t	typeref:struct:T
T	include/list.h	27;"	d
T	include/list.h	4;"	d
T	include/ring.h	/^typedef struct T *T;$/;"	t	typeref:struct:T
T	include/ring.h	28;"	d
T	include/ring.h	4;"	d
T	include/seq.h	/^typedef struct T *T;$/;"	t	typeref:struct:T
T	include/seq.h	23;"	d
T	include/seq.h	4;"	d
T	include/set.h	/^typedef struct T *T;$/;"	t	typeref:struct:T
T	include/set.h	30;"	d
T	include/set.h	4;"	d
T	include/sparsearray.h	/^typedef struct T *T;$/;"	t	typeref:struct:T
T	include/sparsearray.h	33;"	d
T	include/sparsearray.h	4;"	d
T	include/stack.h	/^typedef struct T *T;$/;"	t	typeref:struct:T
T	include/stack.h	18;"	d
T	include/stack.h	4;"	d
T	include/table.h	/^typedef struct T *T;$/;"	t	typeref:struct:T
T	include/table.h	24;"	d
T	include/table.h	4;"	d
T	include/text.h	/^typedef struct T {$/;"	s
T	include/text.h	/^} T;$/;"	t	typeref:struct:T
T	include/text.h	4;"	d
T	include/text.h	55;"	d
T	src/arena.c	/^struct T{$/;"	s	file:
T	src/arena.c	7;"	d	file:
T	src/array.c	9;"	d	file:
T	src/bit.c	/^struct T{$/;"	s	file:
T	src/bit.c	7;"	d	file:
T	src/bst.c	/^struct T{$/;"	s	file:
T	src/bst.c	5;"	d	file:
T	src/digraph.c	/^struct T{$/;"	s	file:
T	src/digraph.c	10;"	d	file:
T	src/dlist.c	7;"	d	file:
T	src/except.c	8;"	d	file:
T	src/fmt.c	14;"	d	file:
T	src/indexminpq.c	/^struct T{$/;"	s	file:
T	src/indexminpq.c	7;"	d	file:
T	src/list.c	7;"	d	file:
T	src/ring.c	/^struct T{$/;"	s	file:
T	src/ring.c	8;"	d	file:
T	src/seq.c	/^struct T{$/;"	s	file:
T	src/seq.c	10;"	d	file:
T	src/set.c	/^struct T{$/;"	s	file:
T	src/set.c	8;"	d	file:
T	src/sparsearray.c	/^struct T{$/;"	s	file:
T	src/sparsearray.c	9;"	d	file:
T	src/stack.c	/^struct T{$/;"	s	file:
T	src/stack.c	6;"	d	file:
T	src/table.c	/^struct T{$/;"	s	file:
T	src/table.c	7;"	d	file:
T	src/text.c	7;"	d	file:
TABLE_INCLUDE	include/table.h	2;"	d
TEST_MAX	test/t_sparsearray.c	5;"	d	file:
TEXT_INCLUDE	include/text.h	2;"	d
THRESHOLD	src/arena.c	39;"	d	file:
TRY	include/except.h	74;"	d
VPATH	Makefile	/^VPATH = src:include$/;"	m
_GNU_SOURCE	include/cii.h	1;"	d
_access_get	src/seq.c	/^_access_get(T seq, ssize_t position)$/;"	f	file:
_access_set	src/seq.c	/^_access_set(T seq, ssize_t position, void *x)$/;"	f	file:
_alloc	src/text.c	/^static char *_alloc(int len) {$/;"	f	file:
_bit_copy	src/bit.c	/^_bit_copy(T t)$/;"	f	file:
_bit_in_set	src/bit.c	/^_bit_in_set(unsigned char *bytes, ssize_t position)$/;"	f	file:
_bst_remove_child	src/bst.c	/^_bst_remove_child$/;"	f	file:
_bst_replace_child	src/bst.c	/^_bst_replace_child$/;"	f	file:
_bst_set_key	src/bst.c	/^_bst_set_key$/;"	f	file:
_cmp_simple	src/bst.c	/^_cmp_simple$/;"	f	file:
_cmpatom	src/set.c	/^_cmpatom(const void *x, const void *y)$/;"	f	file:
_cmpatom	src/table.c	/^_cmpatom(const void *x, const void *y)$/;"	f	file:
_cset	src/text.c	/^static char _cset[] =$/;"	v	file:
_current	src/text.c	/^} _head = { NULL, NULL, NULL }, *_current = &_head;$/;"	v	typeref:struct:chunk	file:
_dalloc	src/memchk.c	/^_dalloc(void *ptr, $/;"	f	file:
_default_except_handler	src/except.c	/^_default_except_handler(const T *e,$/;"	f	file:
_dummy_check	test/t_digraph.c	/^_dummy_check$/;"	f	file:
_dummy_connect	test/t_digraph.c	/^_dummy_connect$/;"	f	file:
_dummy_delete	test/t_indexminpq.c	/^_dummy_delete$/;"	f	file:
_dummy_insert	test/t_indexminpq.c	/^_dummy_insert$/;"	f	file:
_exch	src/indexminpq.c	/^_exch(T iminpq, int i, int j)$/;"	f	file:
_expand	src/seq.c	/^_expand(T seq)$/;"	f	file:
_find	src/memchk.c	/^_find(const void *ptr)$/;"	f	file:
_greater	src/indexminpq.c	/^_greater(T iminpq, int i, int j)$/;"	f	file:
_hashatom	src/set.c	/^_hashatom(const void *x)$/;"	f	file:
_hashatom	src/table.c	/^_hashatom(const void *key)$/;"	f	file:
_head	src/text.c	/^} _head = { NULL, NULL, NULL }, *_current = &_head;$/;"	v	typeref:struct:chunk	file:
_inuse	test/t_digraph.c	/^_inuse(const void *ptr,$/;"	f	file:
_inuse	test/t_indexminpq.c	/^_inuse(const void *ptr,$/;"	f	file:
_list_append_g	src/list.c	/^_list_append_g(T list, T tail)$/;"	f	file:
_list_list_g	src/list.c	/^_list_list_g(void *x, ...)$/;"	f	file:
_list_reverse_g	src/list.c	/^_list_reverse_g(T list)$/;"	f	file:
_relax	src/digraph.c	/^_relax$/;"	f	file:
_reset_lastget	src/ring.c	/^_reset_lastget(T ring)$/;"	f	file:
_ring_node	src/ring.c	/^_ring_node(T ring, ssize_t position)$/;"	f	file:
_ring_node_delete	src/ring.c	/^_ring_node_delete(T ring, struct node *p)$/;"	f	file:
_set_copy	src/set.c	/^_set_copy(T t, int hint)$/;"	f	file:
_signal_except_handler	src/except.c	/^_signal_except_handler(int sig)$/;"	f	file:
_sink	src/indexminpq.c	/^_sink(T iminpq, int k)$/;"	f	file:
_swim	src/indexminpq.c	/^_swim(T iminpq, int k)$/;"	f	file:
_usage	test/t_digraph.c	/^_usage()$/;"	f	file:
_usage	test/t_indexminpq.c	/^_usage()$/;"	f	file:
_usage	test/t_str.c	/^_usage()$/;"	f	file:
_usage	test/t_text.c	/^_usage()$/;"	f	file:
a	src/arena.c	/^    union align a;$/;"	m	union:header	typeref:union:header::align	file:
adj	src/digraph.c	/^struct adj{$/;"	s	file:
adj_seq	src/digraph.c	/^    seq_t   adj_seq;$/;"	m	struct:T	file:
aid	test/t_arena.c	/^        long aid;$/;"	m	union:test_gt::__anon3	file:
aid	test/t_mem.c	/^        long aid;$/;"	m	union:test_t::__anon1	file:
align	src/arena.c	/^union align{$/;"	u	file:
align	src/memchk.c	/^union align{$/;"	u	file:
append	src/fmt.c	/^static int  append(int c, void *cl)$/;"	f	file:
arena	src/digraph.c	/^    arena_t     arena;$/;"	m	struct:T	file:
arena_alloc	src/arena.c	/^arena_alloc(T arena, $/;"	f
arena_calloc	src/arena.c	/^arena_calloc(T arena,$/;"	f
arena_dispose	src/arena.c	/^arena_dispose(T *ap)$/;"	f
arena_free	src/arena.c	/^arena_free(T arena)$/;"	f
arena_new	src/arena.c	/^arena_new(void)$/;"	f
arith_ceiling	src/arith.c	/^arith_ceiling(int x, int y)$/;"	f
arith_div	src/arith.c	/^arith_div(int x, int y)$/;"	f
arith_floor	src/arith.c	/^arith_floor(int x, int y)$/;"	f
arith_max	src/arith.c	/^arith_max(int x, int y)$/;"	f
arith_min	src/arith.c	/^arith_min(int x, int y)$/;"	f
arith_mod	src/arith.c	/^arith_mod(int x, int y)$/;"	f
array	include/arrayrep.h	/^    char *array;$/;"	m	struct:T
array	src/seq.c	/^    struct array_t array;$/;"	m	struct:T	typeref:struct:T::array_t	file:
array_copy	src/array.c	/^array_copy(T array, ssize_t length)$/;"	f
array_free	src/array.c	/^array_free(T *array)$/;"	f
array_get	src/array.c	/^array_get(T array, ssize_t position)$/;"	f
array_length	src/array.c	/^array_length(T array)$/;"	f
array_new	src/array.c	/^array_new(ssize_t length, ssize_t size)$/;"	f
array_put	src/array.c	/^array_put(T array, ssize_t position, void *element)$/;"	f
array_resize	src/array.c	/^array_resize(T array, ssize_t length)$/;"	f
array_size	src/array.c	/^array_size(T array)$/;"	f
arrayrep_init	src/array.c	/^arrayrep_init(T array,$/;"	f
assert	include/assert.h	10;"	d
assert	include/assert.h	1;"	d
assert	include/assert.h	3;"	d
assert	src/assert.c	/^void (assert)(int e) {$/;"	f
atom	src/atom.c	/^static struct atom{$/;"	s	file:
atom_int	src/atom.c	/^atom_int(long n)$/;"	f
atom_length	src/atom.c	/^atom_length(const char *str)$/;"	f
atom_new	src/atom.c	/^atom_new(const char *str, int len)$/;"	f
atom_string	src/atom.c	/^atom_string(const char *str)$/;"	f
avail	src/arena.c	/^    char *avail;$/;"	m	struct:T	file:
avail	src/text.c	/^	char *avail;$/;"	m	struct:chunk	file:
avail	src/text.c	/^	char *avail;$/;"	m	struct:text_save_t	file:
b	src/arena.c	/^    struct T b;$/;"	m	union:header	typeref:struct:header::T	file:
binding	src/table.c	/^    struct binding{$/;"	s	struct:T	file:
bit_clear	src/bit.c	/^bit_clear   (T bset, ssize_t low, ssize_t high)$/;"	f
bit_count	src/bit.c	/^bit_count   (T bset)$/;"	f
bit_diff	src/bit.c	/^bit_diff    (T s, T t)$/;"	f
bit_eq	src/bit.c	/^bit_eq      (T s, T t)$/;"	f
bit_free	src/bit.c	/^bit_free    (T *bset)$/;"	f
bit_get	src/bit.c	/^bit_get     (T bset, ssize_t position)$/;"	f
bit_inter	src/bit.c	/^bit_inter   (T s, T t)$/;"	f
bit_length	src/bit.c	/^bit_length  (T bset)$/;"	f
bit_leq	src/bit.c	/^bit_leq     (T s, T t)$/;"	f
bit_lt	src/bit.c	/^bit_lt      (T s, T t)$/;"	f
bit_map	src/bit.c	/^bit_map     (T bset,$/;"	f
bit_minus	src/bit.c	/^bit_minus   (T s, T t)$/;"	f
bit_new	src/bit.c	/^bit_new     (ssize_t length)$/;"	f
bit_not	src/bit.c	/^bit_not     (T bset, ssize_t low, ssize_t high)$/;"	f
bit_put	src/bit.c	/^bit_put     (T bset, ssize_t position, int bit)$/;"	f
bit_set	src/bit.c	/^bit_set     (T bset, ssize_t low, ssize_t high)$/;"	f
bit_union	src/bit.c	/^bit_union   (T s, T t)$/;"	f
bp	src/fmt.c	/^    char   *bp;$/;"	m	struct:buf	file:
bst_delete	src/bst.c	/^bst_delete$/;"	f
bst_find	src/bst.c	/^bst_find$/;"	f
bst_get_key	src/bst.c	/^bst_get_key$/;"	f
bst_insert	src/bst.c	/^bst_insert$/;"	f
bst_maximum	src/bst.c	/^bst_maximum$/;"	f
bst_minimum	src/bst.c	/^bst_minimum$/;"	f
bst_new	src/bst.c	/^bst_new$/;"	f
bst_predecessor	src/bst.c	/^bst_predecessor$/;"	f
bst_successor	src/bst.c	/^bst_successor$/;"	f
bst_traverse	src/bst.c	/^bst_traverse$/;"	f
buckets	src/atom.c	/^}*buckets[2048];$/;"	v	typeref:struct:atom	file:
buckets	src/set.c	/^    }**buckets;$/;"	m	struct:T	typeref:struct:T::member	file:
buckets	src/table.c	/^    }**buckets;$/;"	m	struct:T	typeref:struct:T::binding	file:
buf	src/fmt.c	/^    char   *buf;$/;"	m	struct:buf	file:
buf	src/fmt.c	/^struct buf{ $/;"	s	file:
bytes	src/bit.c	/^    unsigned char *bytes;$/;"	m	struct:T	file:
chunk	src/text.c	/^static struct chunk {$/;"	s	file:
cmp	src/set.c	/^    int (*cmp) (const void *x, const void *y);$/;"	m	struct:T	file:
cmp	src/table.c	/^    int (*cmp)(const void *x, const void *y);$/;"	m	struct:T	file:
compare	test/t_bst.c	/^compare(const void *x, const void *y)$/;"	f	file:
compare	test/wf.c	/^compare(const void *x, const void *y)$/;"	f	file:
compare	test/xref.c	/^compare(const void *x, const void *y)$/;"	f	file:
compare_int	test/xref.c	/^compare_int(const void *x, const void *y)$/;"	f	file:
convert	src/str.c	24;"	d	file:
convert	src/text.c	12;"	d	file:
count	src/indexminpq.c	/^    int     count;$/;"	m	struct:T	file:
count	src/stack.c	/^    int count;$/;"	m	struct:T	file:
current	src/text.c	/^	struct chunk *current;$/;"	m	struct:text_save_t	typeref:struct:text_save_t::chunk	file:
cvt	src/fmt.c	/^static T cvt[256] = {$/;"	v	file:
cvt_c	src/fmt.c	/^cvt_c(int code, va_list *app,$/;"	f	file:
cvt_d	src/fmt.c	/^cvt_d(int code, va_list *app,$/;"	f	file:
cvt_f	src/fmt.c	/^cvt_f(int code, va_list *app,$/;"	f	file:
cvt_o	src/fmt.c	/^cvt_o(int code, va_list *app,$/;"	f	file:
cvt_p	src/fmt.c	/^cvt_p(int code, va_list *app,$/;"	f	file:
cvt_s	src/fmt.c	/^cvt_s(int code, va_list *app,$/;"	f	file:
cvt_u	src/fmt.c	/^cvt_u(int code, va_list *app,$/;"	f	file:
cvt_x	src/fmt.c	/^cvt_x(int code, va_list *app,$/;"	f	file:
d	src/arena.c	/^    double d;$/;"	m	union:align	file:
d	src/memchk.c	/^    double d;$/;"	m	union:align	file:
d	test/t_array.c	/^        double d;$/;"	m	union:gg::__anon2	file:
data	include/dlist.h	/^    void *data;$/;"	m	struct:T
data	test/t_array.c	/^    }data;$/;"	m	struct:gg	typeref:union:gg::__anon2	file:
default_handler	include/except.h	/^    void (*default_handler)(const T *e,$/;"	m	struct:except_context
descriptor	src/memchk.c	/^static struct descriptor{$/;"	s	file:
digraph_add	src/digraph.c	/^digraph_add         $/;"	f
digraph_add_seg	src/digraph.c	/^digraph_add_seg     $/;"	f
digraph_connect	src/digraph.c	/^digraph_connect$/;"	f
digraph_count	src/digraph.c	/^digraph_count$/;"	f
digraph_dijkstra	src/digraph.c	/^digraph_dijkstra$/;"	f
digraph_free	src/digraph.c	/^digraph_free$/;"	f
digraph_is_connect	src/digraph.c	/^digraph_is_connect$/;"	f
digraph_new	src/digraph.c	/^digraph_new$/;"	f
digraph_path_free	src/digraph.c	/^digraph_path_free$/;"	f
digraph_path_get	src/digraph.c	/^digraph_path_get     $/;"	f
digraph_path_length	src/digraph.c	/^digraph_path_length$/;"	f
digraph_path_t	include/digraph.h	/^typedef struct digraph_path_t   *digraph_path_t;$/;"	t	typeref:struct:digraph_path_t
digraph_path_t	src/digraph.c	/^struct digraph_path_t{$/;"	s	file:
digraph_sr_dist	src/digraph.c	/^digraph_sr_dist$/;"	f
digraph_sr_free	src/digraph.c	/^digraph_sr_free$/;"	f
digraph_sr_has_path	src/digraph.c	/^digraph_sr_has_path$/;"	f
digraph_sr_path_to	src/digraph.c	/^digraph_sr_path_to$/;"	f
digraph_sr_start	src/digraph.c	/^digraph_sr_start$/;"	f
digraph_sr_t	include/digraph.h	/^typedef struct digraph_sr_t     *digraph_sr_t;$/;"	t	typeref:struct:digraph_sr_t
digraph_sr_t	src/digraph.c	/^struct digraph_sr_t{$/;"	s	file:
dist_to	src/digraph.c	/^    double      *dist_to;$/;"	m	struct:digraph_sr_t	file:
dlist_append	src/dlist.c	/^dlist_append(T dlist, T dtail)$/;"	f
dlist_copy	src/dlist.c	/^dlist_copy(T dlist)$/;"	f
dlist_free	src/dlist.c	/^dlist_free(T *dlist)$/;"	f
dlist_length	src/dlist.c	/^dlist_length(T dlist)$/;"	f
dlist_list	src/dlist.c	/^dlist_list(void *x, ...)$/;"	f
dlist_map	src/dlist.c	/^dlist_map(T dlist,$/;"	f
dlist_pop	src/dlist.c	/^dlist_pop(T dlist, void **x)$/;"	f
dlist_push	src/dlist.c	/^dlist_push(T dlist, void *x)$/;"	f
dlist_reverse	src/dlist.c	/^dlist_reverse(T dlist)$/;"	f
dlist_to_array	src/dlist.c	/^dlist_to_array(T dlist, void *end)$/;"	f
doubleword	test/double.c	/^doubleword(char *name, FILE *fp)$/;"	f	file:
edge_array	src/digraph.c	/^    struct adj  **edge_array;$/;"	m	struct:digraph_sr_t	typeref:struct:digraph_sr_t::adj	file:
element	src/stack.c	/^    struct element{$/;"	s	struct:T	file:
env	include/except.h	/^	jmp_buf env;$/;"	m	struct:except_frame
equal	src/text.c	21;"	d	file:
except_context	include/except.h	/^struct except_context{$/;"	s
except_ctx	src/except.c	/^volatile struct except_context except_ctx = {.default_handler = _default_except_handler, $/;"	v	typeref:struct:except_context
except_flag	include/except.h	/^	int except_flag; $/;"	m	struct:except_context
except_frame	include/except.h	/^struct except_frame{$/;"	s
except_raise	src/except.c	/^except_raise(const T *e, $/;"	f
except_set_default_handler	src/except.c	/^except_set_default_handler(void (*handler)(const T *e,$/;"	f
exception	include/except.h	/^	const T *exception;$/;"	m	struct:except_frame
f	src/arena.c	/^    float f;$/;"	m	union:align	file:
f	src/memchk.c	/^    float f;$/;"	m	union:align	file:
f	test/t_array.c	/^        float f;$/;"	m	union:gg::__anon2	file:
file	include/except.h	/^	const char *file;$/;"	m	struct:except_frame
file	src/memchk.c	/^    const char *file;$/;"	m	struct:descriptor	file:
first	include/list.h	/^    void *first;$/;"	m	struct:T
first	test/t_bst.c	/^first(int c)$/;"	f	file:
first	test/wf.c	/^first(int c)$/;"	f	file:
first	test/xref.c	/^first(int c)$/;"	f	file:
fmt_flags	src/fmt.c	/^char       *fmt_flags = "-+ 0";$/;"	v
fmt_fmt	src/fmt.c	/^fmt_fmt(int (*put)(int c, void *cl),$/;"	f
fmt_fprint	src/fmt.c	/^fmt_fprint(FILE *stream, $/;"	f
fmt_print	src/fmt.c	/^fmt_print(const char *fmt, ...)$/;"	f
fmt_putd	src/fmt.c	/^fmt_putd(const char *str,$/;"	f
fmt_puts	src/fmt.c	/^void        fmt_puts(const char *str,$/;"	f
fmt_register	src/fmt.c	/^fmt_register(int code, T convert)$/;"	f
fmt_sfmt	src/fmt.c	/^fmt_sfmt(char *buf, $/;"	f
fmt_string	src/fmt.c	/^fmt_string(const char *fmt, ...)$/;"	f
fmt_vfmt	src/fmt.c	/^fmt_vfmt(int (*put)(int c, void *cl),$/;"	f
fmt_vsfmt	src/fmt.c	/^fmt_vsfmt(char *buf,$/;"	f
fmt_vstring	src/fmt.c	/^fmt_vstring(const char *fmt, va_list ap)$/;"	f
fp	src/arena.c	/^    void (*fp)(void);$/;"	m	union:align	file:
fp	src/memchk.c	/^    void (*fp)(void);$/;"	m	union:align	file:
free	src/memchk.c	/^    struct descriptor *free;$/;"	m	struct:descriptor	typeref:struct:descriptor::descriptor	file:
freechunks	src/arena.c	/^static T freechunks;$/;"	v	file:
freelist	src/memchk.c	/^static struct descriptor freelist = {.free = &freelist};$/;"	v	typeref:struct:descriptor	file:
from	src/digraph.c	/^    int         from;$/;"	m	struct:adj	file:
func	include/except.h	/^    const char *func;$/;"	m	struct:except_frame
func	src/memchk.c	/^    const char *func;$/;"	m	struct:descriptor	file:
get_except_signal	src/except.c	/^get_except_signal()$/;"	f
getword	test/double.c	/^getword(FILE *fp, char *buf, size_t size)$/;"	f	file:
getword	test/getword.c	/^getword(FILE *fp, $/;"	f
gg	test/t_array.c	/^struct gg{$/;"	s	file:
hash	src/memchk.c	41;"	d	file:
hash	src/set.c	/^    unsigned long (*hash) (const void *x);$/;"	m	struct:T	file:
hash	src/table.c	/^    unsigned long (*hash)(const void *key);$/;"	m	struct:T	file:
hash_int	test/xref.c	/^hash_int(const void *x)$/;"	f	file:
head	src/ring.c	/^    }*head;$/;"	m	struct:T	typeref:struct:T::node	file:
head	src/seq.c	/^    ssize_t head;$/;"	m	struct:T	file:
head	src/stack.c	/^    } *head;$/;"	m	struct:T	typeref:struct:T::element	file:
header	src/arena.c	/^union header{$/;"	u	file:
htab	src/memchk.c	/^} *htab[HTAB_LEN];$/;"	v	typeref:struct:descriptor	file:
i	src/arena.c	/^    int i;$/;"	m	union:align	file:
i	src/memchk.c	/^    int i;$/;"	m	union:align	file:
i	test/t_array.c	/^        int i;$/;"	m	union:gg::__anon2	file:
idx	src/str.c	22;"	d	file:
idx	src/text.c	10;"	d	file:
iminpq_change_key	src/indexminpq.c	/^iminpq_change_key$/;"	f
iminpq_clean	src/indexminpq.c	/^iminpq_clean$/;"	f
iminpq_contains	src/indexminpq.c	/^iminpq_contains    $/;"	f
iminpq_count	src/indexminpq.c	/^iminpq_count$/;"	f
iminpq_decrease_key	src/indexminpq.c	/^iminpq_decrease_key$/;"	f
iminpq_delete	src/indexminpq.c	/^iminpq_delete$/;"	f
iminpq_delete_min	src/indexminpq.c	/^iminpq_delete_min$/;"	f
iminpq_free	src/indexminpq.c	/^iminpq_free$/;"	f
iminpq_increase_key	src/indexminpq.c	/^iminpq_increase_key$/;"	f
iminpq_insert	src/indexminpq.c	/^iminpq_insert$/;"	f
iminpq_is_empty	src/indexminpq.c	/^iminpq_is_empty     $/;"	f
iminpq_key_of	src/indexminpq.c	/^iminpq_key_of       $/;"	f
iminpq_min_index	src/indexminpq.c	/^iminpq_min_index    $/;"	f
iminpq_min_key	src/indexminpq.c	/^iminpq_min_key      $/;"	f
iminpq_new	src/indexminpq.c	/^iminpq_new$/;"	f
iminpq_size	src/indexminpq.c	/^iminpq_size$/;"	f
insert	src/fmt.c	/^insert(int c, void *cl)$/;"	f	file:
int_comp	test/xref.c	/^int_comp(const void *x, const void *y)$/;"	f	file:
inuse	test/t_atom.c	/^inuse(const void *ptr,$/;"	f	file:
inuse	test/t_mem.c	/^inuse(const void *ptr,$/;"	f	file:
isatend	src/text.c	18;"	d	file:
key	src/bst.c	/^    void *key;$/;"	m	struct:T	file:
key	src/table.c	/^        const void *key;$/;"	m	struct:T::binding	file:
keys	src/indexminpq.c	/^    double  *keys;$/;"	m	struct:T	file:
l	src/arena.c	/^    long l;$/;"	m	union:align	file:
l	src/memchk.c	/^    long l;$/;"	m	union:align	file:
lastget_node	src/ring.c	/^    struct node *lastget_node;$/;"	m	struct:T	typeref:struct:T::node	file:
lastget_pos	src/ring.c	/^    ssize_t     lastget_pos;$/;"	m	struct:T	file:
ld	src/arena.c	/^    long double ld;$/;"	m	union:align	file:
ld	src/memchk.c	/^    long double ld;$/;"	m	union:align	file:
left	src/bst.c	/^    T left,right, parent;$/;"	m	struct:T	file:
len	include/text.h	/^	int         len;$/;"	m	struct:T
len	src/atom.c	/^    int len;$/;"	m	struct:atom	file:
length	include/arrayrep.h	/^    ssize_t length;$/;"	m	struct:T
length	src/bit.c	/^    ssize_t length;$/;"	m	struct:T	file:
length	src/ring.c	/^    ssize_t     length;$/;"	m	struct:T	file:
length	src/seq.c	/^    ssize_t length;$/;"	m	struct:T	file:
length	src/set.c	/^    int length;$/;"	m	struct:T	file:
length	src/table.c	/^    int length;$/;"	m	struct:T	file:
limit	src/arena.c	/^    char *limit;$/;"	m	struct:T	file:
limit	src/text.c	/^	char *limit;$/;"	m	struct:chunk	file:
line	include/except.h	/^	int line;$/;"	m	struct:except_frame
line	src/memchk.c	/^    int line;$/;"	m	struct:descriptor	file:
linenum	test/double.c	/^static int linenum;$/;"	v	file:
linenum	test/xref.c	/^static linenum;$/;"	v	file:
link	src/atom.c	/^    struct atom *link;$/;"	m	struct:atom	typeref:struct:atom::atom	file:
link	src/digraph.c	/^    struct adj  *link;$/;"	m	struct:adj	typeref:struct:adj::adj	file:
link	src/memchk.c	/^    struct descriptor *link;$/;"	m	struct:descriptor	typeref:struct:descriptor::descriptor	file:
link	src/set.c	/^        struct member *link;$/;"	m	struct:T::member	typeref:struct:T::member::member	file:
link	src/stack.c	/^        struct element *link;$/;"	m	struct:T::element	typeref:struct:T::element::element	file:
link	src/table.c	/^        struct binding *link;$/;"	m	struct:T::binding	typeref:struct:T::binding::binding	file:
link	src/text.c	/^	struct chunk *link;$/;"	m	struct:chunk	typeref:struct:chunk::chunk	file:
list_append	src/list.c	/^list_append(T list, T tail)$/;"	f
list_copy	src/list.c	/^list_copy(T list)$/;"	f
list_free	src/list.c	/^list_free(T *list)$/;"	f
list_length	src/list.c	/^list_length(T list)$/;"	f
list_list	src/list.c	/^list_list(void *x, ...)$/;"	f
list_map	src/list.c	/^list_map(T list, $/;"	f
list_pop	src/list.c	/^list_pop(T list, void **x)$/;"	f
list_push	src/list.c	/^list_push(T list, void *x)$/;"	f
list_reverse	src/list.c	/^list_reverse(T list)$/;"	f
list_to_array	src/list.c	/^list_to_array(T list, void *end)$/;"	f
llink	src/ring.c	/^        struct node *llink, *rlink;$/;"	m	struct:T::node	typeref:struct:T::node::node	file:
lp	src/arena.c	/^    long *lp;$/;"	m	union:align	file:
lp	src/memchk.c	/^    long *lp;$/;"	m	union:align	file:
lsbmask	src/bit.c	/^static unsigned char lsbmask[] = {$/;"	v	file:
main	test/double.c	/^main(int argc, char *argv[])$/;"	f
main	test/t_arena.c	/^main(int argc, char *argv[])$/;"	f
main	test/t_arith.c	/^main(int argc, char *argv[])$/;"	f
main	test/t_array.c	/^main(int argc, char *argv[])$/;"	f
main	test/t_atom.c	/^main(int argc, char *argv[])$/;"	f
main	test/t_bit.c	/^main(int argc, char *argv[])$/;"	f
main	test/t_bst.c	/^main(int argc, char *argv[])$/;"	f
main	test/t_digraph.c	/^main(int argc, char *argv[])$/;"	f
main	test/t_dlist.c	/^main(int argc, char *argv[])$/;"	f
main	test/t_except.c	/^main(int argc, char *argv[])$/;"	f
main	test/t_fmt.c	/^main(int argc, char *argv[])$/;"	f
main	test/t_indexminpq.c	/^main(int argc, char *argv[])$/;"	f
main	test/t_list.c	/^main(int argc, char *argv[])$/;"	f
main	test/t_mem.c	/^main(int argc, char *argv[])$/;"	f
main	test/t_ring.c	/^main(int argc, char *argv[])$/;"	f
main	test/t_seq.c	/^main(int argc, char *argv[])$/;"	f
main	test/t_sparsearray.c	/^main(int argc, char *argv[])$/;"	f
main	test/t_stack_midfix_to_postfix.c	/^main(int argc, char *argv[])$/;"	f
main	test/t_stack_postfix.c	/^main(int argc, char *argv[])$/;"	f
main	test/t_str.c	/^main(int argc, char *argv[])$/;"	f
main	test/t_text.c	/^main(int argc, char *argv[])$/;"	f
main	test/wf.c	/^main(int argc, char *argv[])$/;"	f
main	test/xref.c	/^main(int argc, char *argv[])$/;"	f
mem_alloc	src/mem.c	/^mem_alloc(ssize_t len, $/;"	f
mem_alloc	src/memchk.c	/^mem_alloc(ssize_t len, $/;"	f
mem_calloc	src/mem.c	/^mem_calloc(ssize_t count,$/;"	f
mem_calloc	src/memchk.c	/^mem_calloc(ssize_t count,$/;"	f
mem_free	src/mem.c	/^mem_free(void *ptr,$/;"	f
mem_free	src/memchk.c	/^mem_free(void *ptr,$/;"	f
mem_leak	src/memchk.c	/^mem_leak(void (*apply)(const void *ptr,$/;"	f
mem_resize	src/mem.c	/^mem_resize(ssize_t len,$/;"	f
mem_resize	src/memchk.c	/^mem_resize(ssize_t len,$/;"	f
member	src/set.c	/^        const void *member;$/;"	m	struct:T::member	file:
member	src/set.c	/^    struct member{$/;"	s	struct:T	file:
msbmask	src/bit.c	/^static unsigned char msbmask[] = {$/;"	v	file:
n	test/t_arena.c	/^    int n;$/;"	m	struct:test_gt	file:
n	test/t_mem.c	/^    int n;$/;"	m	struct:test_t	file:
nbytes	src/bit.c	13;"	d	file:
next	include/dlist.h	/^    T prev, next;$/;"	m	struct:T
next	test/t_array.c	/^    struct gg *next;$/;"	m	struct:gg	typeref:struct:gg::gg	file:
nfree	src/arena.c	/^static int nfree;$/;"	v	file:
node	src/ring.c	/^    struct node{$/;"	s	struct:T	file:
node_seq	src/digraph.c	/^    seq_t   node_seq;$/;"	m	struct:digraph_path_t	file:
nwords	src/bit.c	11;"	d	file:
objects	Makefile	/^objects = arith.o assert.o except.o memchk.o atom.o\\$/;"	m
outc	src/fmt.c	/^static int  outc(int c, void *cl)$/;"	f	file:
p	src/arena.c	/^    void *p;$/;"	m	union:align	file:
p	src/memchk.c	/^    void *p;$/;"	m	union:align	file:
pad	src/fmt.c	23;"	d	file:
parent	src/bst.c	/^    T left,right, parent;$/;"	m	struct:T	file:
per	test/t_sparsearray.c	/^per(int cur, int total)$/;"	f
person	test/t_arena.c	/^    }person;$/;"	m	struct:test_gt	typeref:union:test_gt::__anon3	file:
person	test/t_mem.c	/^    }person;$/;"	m	struct:test_t	typeref:union:test_t::__anon1	file:
pq	src/indexminpq.c	/^    int     *pq;$/;"	m	struct:T	file:
prev	include/dlist.h	/^    T prev, next;$/;"	m	struct:T
prev	include/except.h	/^	struct except_frame *prev;$/;"	m	struct:except_frame	typeref:struct:except_frame::except_frame
prev	src/arena.c	/^    T prev;$/;"	m	struct:T	file:
print	test/t_bst.c	/^print(const void *key, void *cl)$/;"	f	file:
print	test/t_dlist.c	/^print(void **x, void *cl)$/;"	f	file:
print	test/t_list.c	/^print(void **x, void *cl)$/;"	f	file:
print_table_files	test/xref.c	/^print_table_files(table_t files)$/;"	f	file:
ptr	src/memchk.c	/^    const void *ptr;$/;"	m	struct:descriptor	file:
qp	src/indexminpq.c	/^    int     *qp;$/;"	m	struct:T	file:
reason	include/except.h	/^    const char *reason;$/;"	m	struct:except_frame
rest	include/list.h	/^    T rest;$/;"	m	struct:T
rest	test/t_bst.c	/^rest(int c)$/;"	f	file:
rest	test/wf.c	/^rest(int c)$/;"	f	file:
rest	test/xref.c	/^rest(int c)$/;"	f	file:
right	src/bst.c	/^    T left,right, parent;$/;"	m	struct:T	file:
ring	src/sparsearray.c	/^    ring_t ring;$/;"	m	struct:T	file:
ring_add	src/ring.c	/^ring_add(T ring, ssize_t position, void *x)$/;"	f
ring_add_high	src/ring.c	/^ring_add_high(T ring, void *x)$/;"	f
ring_add_low	src/ring.c	/^ring_add_low(T ring, void *x)$/;"	f
ring_free	src/ring.c	/^ring_free(T *ring)$/;"	f
ring_get	src/ring.c	/^ring_get(T ring, ssize_t position)$/;"	f
ring_length	src/ring.c	/^ring_length(T ring)$/;"	f
ring_new	src/ring.c	/^ring_new(void)$/;"	f
ring_put	src/ring.c	/^ring_put(T ring, ssize_t position, void *x)$/;"	f
ring_remove	src/ring.c	/^ring_remove(T ring, ssize_t position)$/;"	f
ring_remove_high	src/ring.c	/^ring_remove_high(T ring)$/;"	f
ring_remove_low	src/ring.c	/^ring_remove_low(T ring)$/;"	f
ring_ring	src/ring.c	/^ring_ring(void *x, ...)$/;"	f
ring_rotate	src/ring.c	/^ring_rotate(T ring, ssize_t n)$/;"	f
rlink	src/ring.c	/^        struct node *llink, *rlink;$/;"	m	struct:T::node	typeref:struct:T::node::	file:
scatter	src/atom.c	/^static unsigned long scatter[] = {$/;"	v	file:
seq_add_high	src/seq.c	/^seq_add_high(T seq, void *x)$/;"	f
seq_add_low	src/seq.c	/^seq_add_low(T seq, void *x)$/;"	f
seq_free	src/seq.c	/^seq_free(T *seq)$/;"	f
seq_get	src/seq.c	/^seq_get(T seq, ssize_t position)$/;"	f
seq_length	src/seq.c	/^seq_length(T seq)$/;"	f
seq_new	src/seq.c	/^seq_new(ssize_t hint)$/;"	f
seq_put	src/seq.c	/^seq_put(T seq, ssize_t position, void *x)$/;"	f
seq_remove_high	src/seq.c	/^seq_remove_high(T seq)$/;"	f
seq_remove_low	src/seq.c	/^seq_remove_low(T seq)$/;"	f
seq_seq	src/seq.c	/^seq_seq(void *x, ...)$/;"	f
set_diff	src/set.c	/^set_diff(T s, T t)$/;"	f
set_free	src/set.c	/^set_free(T *set)$/;"	f
set_inter	src/set.c	/^set_inter(T s, T t)$/;"	f
set_length	src/set.c	/^set_length(T set)$/;"	f
set_map	src/set.c	/^set_map(T set,$/;"	f
set_member	src/set.c	/^set_member(T set, const void *member)$/;"	f
set_minus	src/set.c	/^set_minus(T s, T t)$/;"	f
set_new	src/set.c	/^set_new(int hint,$/;"	f
set_put	src/set.c	/^set_put(T set, const void *member)$/;"	f
set_remove	src/set.c	/^set_remove(T set, const void *member)$/;"	f
set_signal_except	src/except.c	/^set_signal_except(int sig)$/;"	f
set_to_array	src/set.c	/^set_to_array(T set, void *end)$/;"	f
set_union	src/set.c	/^set_union(T s, T t)$/;"	f
setop	src/bit.c	15;"	d	file:
sig	include/except.h	/^    int sig;$/;"	m	struct:except_context
size	include/arrayrep.h	/^    ssize_t size;$/;"	m	struct:T
size	src/digraph.c	/^    int size;$/;"	m	struct:digraph_sr_t	file:
size	src/fmt.c	/^    ssize_t size;$/;"	m	struct:buf	file:
size	src/indexminpq.c	/^    int     size;$/;"	m	struct:T	file:
size	src/memchk.c	/^    ssize_t size;$/;"	m	struct:descriptor	file:
size	src/set.c	/^    int size;$/;"	m	struct:T	file:
size	src/table.c	/^    int size;$/;"	m	struct:T	file:
sparsearray_free	src/sparsearray.c	/^sparsearray_free(T *sarray)$/;"	f
sparsearray_get	src/sparsearray.c	/^sparsearray_get(T sarray, ssize_t key)$/;"	f
sparsearray_get_at	src/sparsearray.c	/^sparsearray_get_at(T sarray, ssize_t index)$/;"	f
sparsearray_index_of_key	src/sparsearray.c	/^sparsearray_index_of_key(T sarray, ssize_t key)$/;"	f
sparsearray_key_at	src/sparsearray.c	/^sparsearray_key_at(T sarray, ssize_t index)$/;"	f
sparsearray_length	src/sparsearray.c	/^sparsearray_length(T sarray)$/;"	f
sparsearray_new	src/sparsearray.c	/^sparsearray_new(ssize_t hint)$/;"	f
sparsearray_put	src/sparsearray.c	/^sparsearray_put(T sarray, ssize_t key, void *value)$/;"	f
sparsearray_put_at	src/sparsearray.c	/^sparsearray_put_at(T sarray, ssize_t index, void *value)$/;"	f
sparsearray_remove	src/sparsearray.c	/^sparsearray_remove(T sarray, ssize_t key)$/;"	f
sparsearray_remove_at	src/sparsearray.c	/^sparsearray_remove_at(T sarray, ssize_t index)$/;"	f
stack	include/except.h	/^    struct except_frame *stack;$/;"	m	struct:except_context	typeref:struct:except_context::except_frame
stack_empty	src/stack.c	/^stack_empty(T stk)$/;"	f
stack_free	src/stack.c	/^stack_free(T *stk)$/;"	f
stack_length	src/stack.c	/^stack_length(T stk)$/;"	f
stack_new	src/stack.c	/^stack_new(void)$/;"	f
stack_peek	src/stack.c	/^stack_peek(T stk)$/;"	f
stack_pop	src/stack.c	/^stack_pop(T stk)$/;"	f
stack_push	src/stack.c	/^stack_push(T stk, void *x)$/;"	f
stamp	test/t_array.c	/^    unsigned long stamp;$/;"	m	struct:gg	file:
start	src/digraph.c	/^    int     start;$/;"	m	struct:digraph_path_t	file:
start	src/digraph.c	/^    int start;$/;"	m	struct:digraph_sr_t	file:
str	include/text.h	/^	const char  *str;$/;"	m	struct:T
str	src/atom.c	/^    char str[];$/;"	m	struct:atom	file:
str	test/t_arena.c	/^    char *str;$/;"	m	struct:test_gt	file:
str	test/t_mem.c	/^    char *str;$/;"	m	struct:test_t	file:
str_any	src/str.c	/^str_any$/;"	f
str_cat	src/str.c	/^str_cat$/;"	f
str_cat_v	src/str.c	/^str_cat_v$/;"	f
str_chr	src/str.c	/^str_chr$/;"	f
str_cmp	src/str.c	/^str_cmp$/;"	f
str_dup	src/str.c	/^str_dup$/;"	f
str_find	src/str.c	/^str_find$/;"	f
str_len	src/str.c	/^str_len$/;"	f
str_many	src/str.c	/^str_many$/;"	f
str_map	src/str.c	/^str_map$/;"	f
str_match	src/str.c	/^str_match$/;"	f
str_pos	src/str.c	/^str_pos$/;"	f
str_rchr	src/str.c	/^str_rchr$/;"	f
str_reverse	src/str.c	/^str_reverse$/;"	f
str_rfind	src/str.c	/^str_rfind$/;"	f
str_rmany	src/str.c	/^str_rmany$/;"	f
str_rmatch	src/str.c	/^str_rmatch$/;"	f
str_rupto	src/str.c	/^str_rupto$/;"	f
str_sub	src/str.c	/^str_sub$/;"	f
str_upto	src/str.c	/^str_upto$/;"	f
table	src/sparsearray.c	/^    table_t table;$/;"	m	struct:T	file:
table_free	src/table.c	/^table_free(T *table)$/;"	f
table_get	src/table.c	/^table_get(T table, const void *key)$/;"	f
table_length	src/table.c	/^table_length(T table)$/;"	f
table_map	src/table.c	/^table_map(T table,$/;"	f
table_new	src/table.c	/^table_new(int hint,$/;"	f
table_put	src/table.c	/^table_put(T table, const void *key, void *value)$/;"	f
table_remove	src/table.c	/^table_remove(T table, const void *key)$/;"	f
table_to_array	src/table.c	/^table_to_array(T table, void *end)$/;"	f
test_e	test/t_except.c	/^test_e(int num)$/;"	f	file:
test_gt	test/t_arena.c	/^struct test_gt{$/;"	s	file:
test_t	test/t_mem.c	/^struct test_t{$/;"	s	file:
text_any	src/text.c	/^text_any$/;"	f
text_ascii	src/text.c	/^const T text_ascii  = {127, _cset};$/;"	v
text_box	src/text.c	/^text_box$/;"	f
text_cat	src/text.c	/^text_cat$/;"	f
text_chr	src/text.c	/^text_chr$/;"	f
text_cmp	src/text.c	/^text_cmp$/;"	f
text_cset	src/text.c	/^const T text_cset   = {256, _cset};$/;"	v
text_digits	src/text.c	/^const T text_digits = {10,  _cset + '0'};$/;"	v
text_dup	src/text.c	/^text_dup$/;"	f
text_find	src/text.c	/^text_find$/;"	f
text_get	src/text.c	/^text_get$/;"	f
text_lcase	src/text.c	/^const T text_lcase  = {26,  _cset + 'a'};$/;"	v
text_many	src/text.c	/^text_many$/;"	f
text_map	src/text.c	/^text_map$/;"	f
text_match	src/text.c	/^text_match$/;"	f
text_null	src/text.c	/^const T text_null   = {0,   _cset};$/;"	v
text_pos	src/text.c	/^text_pos(T text, ssize_t i)$/;"	f
text_put	src/text.c	/^text_put$/;"	f
text_rchr	src/text.c	/^text_rchr$/;"	f
text_restore	src/text.c	/^text_restore(text_save_t *save)$/;"	f
text_reverse	src/text.c	/^text_reverse$/;"	f
text_rfind	src/text.c	/^text_rfind$/;"	f
text_rmany	src/text.c	/^text_rmany$/;"	f
text_rmatch	src/text.c	/^text_rmatch$/;"	f
text_rupto	src/text.c	/^text_rupto$/;"	f
text_save	src/text.c	/^text_save()$/;"	f
text_save_t	include/text.h	/^typedef struct text_save_t *text_save_t;$/;"	t	typeref:struct:text_save_t
text_save_t	src/text.c	/^struct text_save_t {$/;"	s	file:
text_sub	src/text.c	/^text_sub$/;"	f
text_ucase	src/text.c	/^const T text_ucase  = {26,  _cset + 'A'};$/;"	v
text_upto	src/text.c	/^text_upto$/;"	f
timestamp	src/set.c	/^    unsigned long timestamp;$/;"	m	struct:T	file:
timestamp	src/table.c	/^    unsigned long timestamp;$/;"	m	struct:T	file:
to	src/digraph.c	/^    int         to;$/;"	m	struct:adj	file:
type	include/except.h	/^    char *type;$/;"	m	struct:T
uid	test/t_arena.c	/^        long uid;$/;"	m	union:test_gt::__anon3	file:
uid	test/t_mem.c	/^        long uid;$/;"	m	union:test_t::__anon1	file:
value	src/ring.c	/^        void *value;$/;"	m	struct:T::node	file:
value	src/table.c	/^        void *value;$/;"	m	struct:T::binding	file:
vfree	test/wf.c	/^vfree(const void *key, void **count, void *cl)$/;"	f	file:
weight	src/digraph.c	/^    double      weight;$/;"	m	struct:adj	file:
wf	test/t_bst.c	/^wf(char *name, FILE *fp)$/;"	f	file:
wf	test/wf.c	/^wf(char *name, FILE *fp)$/;"	f	file:
words	src/bit.c	/^    unsigned long *words;$/;"	m	struct:T	file:
x	src/stack.c	/^        void *x;$/;"	m	struct:T::element	file:
xref	test/xref.c	/^xref(const char * file_name, FILE *fp, table_t id_tab)$/;"	f	file:
