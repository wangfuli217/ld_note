原子(atom)是一个指针，指向一个唯一的、不可变的序列，序列中包含零或多个字节(字节值任意)。
    大多数原子都指向 0 结尾字符串，但也可以是指向任一字节序列的指针。任一原子都只会出现一次，
这也是它被称为原子的原因。如果两个原子指向相同的位置，那么两者是相同的。原子的一个优点是，
只通过比较两个指针，即可比较两个字节序列是否相等。使用原子的另一个优点是节省空间，因为任一序列都只会出现一次。

原子本质是指针(实现细节)，同时也代表所指向的字节序列。

参数: 一个指向字节序列的指针，以及该系列中的字节数目。
如果必要的话，它将该系列的一个副本添加到原子表并返回该原子，
即指向该原子表中该系列副本的指针。
atom_new从不返回NULL指针。
在原子创建后，它在客户程序的整个执行时间内都存在。
原子总是以零字符结束，atom_new在必要时会添加零字符。
const char * atom_new(const char *str, int len); 
参数：接受一个0结尾字符串作为参数
const char * atom_string(const char *str);
参数：返回对应于以字符串表示的长整数n的原子
const char * atom_int(long n);
参数：返回其原子的长度
int atom_length(const char *str);

NEW   仅当需要分配的字节数在编译时已知，才能使用NEW
ALLOC 参数是所需分配的字节数

1. 分配空间、填充成员、插入链表

for (h = 0, i = 0; i < len; i++) { 
    h = (h<<1) + scatter[(unsigned char)str[i]] 
}
dcatter 是一个 256 项的数组，它将字节值映射到随机数，这些随机数是通过调用标准库函数 rand 生成的。
经验表明，这种简单的方法有助于使哈希值分布更均匀。

# 各种字符串Hash函数比较
https://www.byvoid.com/zhs/blog/string-hash-compare
