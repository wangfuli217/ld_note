UNIX 哲学是这样的：
一个程序只做一件事，并做好。
程序要能协作。
程序要能处理文本流，因为这是最通用的接口。

模块化，透明性和机制与策略的分离。

代码重用的关键在于透明性，而开源是实现透明性的有效方式

维护，调试才是成本
Unix(哲学)
{
1. 程序应该只关注一个目标，并尽可能把它做好。
2. 让程序能够互相协同工作。
3. 应该让程序处理文本数据流，因为这是一个通用的接口。
}

1. 过早的优化是一切罪恶的根源
2. 疑惑不定之时最适合穷举。
3. 数据决定一切。如果选择的数据结构能很好的管理数据，算法部分往往不言自明。
   记住，数据结构，而非算法，才是编程的关键。
   简约地写代码，聪明地用数据。
   
Unix(UNIX哲学)
{
一：小即是美。
二：让程序只做好一件事。
三：尽可能早地建立原型。
四：可移植性比效率更重要。
五：数据应该保存为文本文件。
六：尽可能地榨取软件的全部价值。
七：使用shell脚本来提高效率和可移植性。
八：避免使用可定制性低下的用户界面。
九：所有程序都是数据的过滤器。
此外还有十条原则则并不为所有人认同，甚至还是争论的焦点（如宏内核和微内核之争）：
一：应该允许用户定制操作环境。
二：让操作系统核心小而轻。
三：使用小写字母并尽量简短。
四：节约纸张，保护树林。
五：沉默是金。
六：并行地思考。
七：部分加部分大于整体。
八：寻找问题的帕雷托法则。
九：程序随需求而增长（Worse is better）。
十：层级地思考。
}   