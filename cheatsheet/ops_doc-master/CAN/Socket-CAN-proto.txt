https://blog.csdn.net/weixin_40528417/article/category/7489864

https://blog.csdn.net/weixin_40528417/article/details/79476186


https://github.com/BabyMelvin/Linux/tree/master/project/automotive # android HAL和Bus总线
  CAN总线标准只规定了物理层和数据链路层，至于应用层需要用户自定义。
  不同的CAN标准仅物理层不同。
  物理层和数据链路层：ISO11898；
  应用层：不同的应用领域使用不同的应用层标准。

Host、控制器和收发器
  Host常集成有CAN控制器,CAN控制器负责处理协议相关功能，以减轻Host的负担。
  CAN收发器:将控制器连接到传输媒介。

CAN 被细分为三个层次：
1. CAN对象层 (the object layer)
2. CAN传输层 (the transfer layer)
3. CAN物理层 (the phyical layer)
对象层和传输层包括所有由 ISO/OSI 模型定义的数据链路层的服务和功能
1. 对象层的作 用范围包括：
  查找被发送的报文。
  确定由实际要使用的传输层接收哪一个报文。
  为应用层相关硬件提供接口。
2. 传输层的作用主要：
  传送规则，也就是控制帧结构、执行仲裁、错误检测、出错标定、故障界定。
  总线上什么时候开始发送新报文及什么时候开始接收报文，均在传输层里确定。
  位定时的一些普通功能也可以看作是传输层的一部分。
  传输层的修改是受到限制的。
3. 物理层的作用：
    在不同节点之间根据所有的电气属性进行位信息的实际传输。
当然，同一网络内，物理层 对于所有的节点必须是相同的。尽管如此，在选择物理层方面还是很自由的。

4. 错误帧
错误帧用于在接收和发送消息时检测出错误，通知错误的帧。
错误帧由错误标志和错误界 定符构成。错误标志包括主动错误标志和被动错误标志两种。
4.1 主动错误标志：6个位的显性位，处于主动错误状态的单元检测出错误时输出的错 误标志。
4.2 被动错误标志：6个位的隐性位，处于被动错误状态的单元检测出错误时输出的错 误标志。

5. 由于线与的关系，显示位“0”可以覆盖隐性位“1”，因此ID 最小的节点赢得仲裁，总线上表现为该结点的报文，
   其他结点失去仲裁，退出发送，转为接收状态。
    标准格式ID与具有相同ID的远程帧或者扩展格式的数据帧在总线上竞争时，标准格式的RTR位为显性位的具有优先权，可继续发送。
    

1Mbps  40m 高速
125Kbps    低速
不同的距离、不同的网络，可配置不同的速度，最高速度为1MBit/s。在同一网络中，所有单元必须设定成统一的通信速度。
40      1Mbps
100     0.5Mbps
200     0.25Mbps
500     0.10Mbps
1000    0.05Mbps
    CAN总线是可同时连接多个单元的总线。可连接的单元总数理论上是没有限制的。但实际上可连接的单元
数受总线上的时间延迟及电气负载的限制。降低通信速度，可连接的单元数增加；提高通信速度，则可连接
的单元数减少。


低速CAN也叫Fault Tolerance CAN，指的是即使总线上一根线失效，总线依然可以通信。
如同串口中的MAX3232用作电平转换，CAN收发器的作用则是把逻辑信号转换为差分信号。
         [  ISO 11898(High speed)   ]         |           [  ISO 11519-2(Low speed)   ]
     [  隐性  ]       |       [  显性  ]      |       [  隐性  ]              [  显性  ]
min     normal  max   |  min     normal  max  |  min     normal  max     min     normal  max
-0.5    0       0.05  |  1.5     2.0     3.0  |  -0.3    -1.5     -      0.3     3.00    -
双绞线  （屏蔽/非屏蔽）                       |  双绞线  （屏蔽/非屏蔽） 
闭环总线                                      |  开环总线 
阻抗(Z)：120 Ω  (Min.85 Ω  Max.130Ω )         |  阻抗( Ζ) ：120 Ω  (Min.85 Ω  Max.130Ω ) 
总线电阻率(r)：70m Ω /m                       |  总线电阻率( Γ) ：90m Ω /m 
总线延迟时间：5ns/m                           |  总线延迟时间：5ns/m 
终端电阻：120 Ω  (Min.85 Ω  Max.130Ω )        |  终端电阻：2.20kΩ  (Min.2.09k Ω Max.2.31kΩ )

当处于逻辑1，CAN_High和CAN_Low的电压差小于0.5V时，称为隐性电平（Recessive）；
当处于逻辑0，CAN_High和CAN_Low的电压差大于0.9V，称为显性电平（Dominant）。
    CAN总线遵从线与机制：“显性”位可以覆盖“隐性”位；只有所有节点都发送“隐性”位， 
总线才处于“隐性” 状态。这种“线与”机制使CAN总线呈现显性优先的特性。
    简洁的物理层决定了CAN必然要配上一套更为复杂的协议。
如何用一个信号通道实现同样甚至更强大的功能，答案就是对数据或操作命令进行打包。
  多主机（Multi-Master）: 消息的发送不必遵从任何预先设定的时序，通信是事件驱动的。
  寻址机制              : 通过消息的标识符（Identifier）来区别消息。
  总线访问CSMA/CD+AMP   ： 多路载波侦听+基于消息优先级的冲突检测和非破坏性的仲裁机制（CSMA/CD+AMP）。
    CSMA（Carrie Sense Multiple Access）指的是所有节点必须都等到总线处于空闲状态时才能往总线上发送消息
    CD+AMP（Collision Detection + Arbitration on Message Priority）指的是如果多个节点往总线上发送消息时，具备最高优先级的消息获得总线。
    多路载波侦听：若网络上有数据，暂时不发送数据，等待网络空闲时再发；           若网络上无数据，立即发送已经准备好的数据。
    冲突检测：节点在发送数据时，要不停的检测发送的数据，确定是否与其他节点数据发送冲突，如果有冲突，则保证优先级高的报文先发送。（CD+AMP）
    非破坏性仲裁机制：通过ID仲裁，ID数值越小，报文优先级越高。
      发送低优先级报文的节点退出仲裁后，在下次总线空闲时自动重发报文。
      高优先级的报文不能中断低优先级报文的发送

数据帧和遥控帧都有扩展格式: 仲裁ID长度等于29
数据帧: 用于发送单元向接收单元传输数据的帧
遥控帧: 用于接收单元向具有相同ID的发送单元请求数据的帧, 遥控帧只有请求数据长度，没有请求数据长度对应的数据内容。
错误帧: 用于当检查出错误时，向其他单元通知错误的帧
超载帧: 用于接收单元通知其尚未做好接收准备的帧; # 过载帧由过载标志和过载界定符构成。
帧间隔: 用于将数据帧和遥控帧与前面的帧分离开来的帧 # 用于分隔数据帧和远程帧的帧; 过载帧和错误帧前不能插入帧间隔


数据帧和遥控帧的不同 
    遥控帧的RTR位为隐性位，没有数据段。 
    没有数据段的数据帧和遥控帧可通过RTR位区别开来。 

    遥控帧没有数据段，数据长度码该如何表示？ 
    遥控帧的数据长度码以所请求数据帧的数据长度码表示。 

    没有数据段的数据帧有何用途？ 
    例如，可用于各单元的定期连接确认/应答、或仲裁段本身带有实质性信息的情况下。

帧间隔：延迟传送(发送暂时停止)
    8 个位的隐性位。 
    只在处于被动错误状态的单元刚发送一个消息后的帧间隔中包含的段。

错误帧
•  位错误     比较输出电平和总线电平（不含填充位），当两电平不一样时所检测到的错误。
•  填充错误   在需要位填充的段内，连续检测到6位相同的电平时所检测到的错误。
•  CRC错误    从接收到的数据计算出的CRC结果与接收到的CRC顺序不同时所检测到的错误。
•  格式错误   检测出与固定格式的位段相反的格式时所检测到的错误。
•  ACK错误    发送单元在ACK槽(ACK Slot) 中检测出隐性电平时所检测到的错误（ACK没被传送过来时所检测到的错误）。
    
数据帧以一个显性位(逻辑0)开始，以7个连续的隐性位(逻辑1)结束。
# 帧起始(SOF): 标识一个数据帧的开始，固定一个显性位。用于同步，
    总线空闲期间的任何隐性到显性的跳变都将引起节点进行 硬同步。 只有总线在空闲期间节点才能够发送SOF。

# 仲裁段(Arbitration Field)
在CAN协议中，ID决定着数据帧发送的优先级，也决定着其他设备是否会接收这个数据帧。
仲裁段除了报文ID外，还有RTR, IDE, SRR位。

ID并不是表示发送的目的地址，而是表示访问总线的消息的优先级。

# 控制段
控制段是用二进制编码表示本报文中的数据段包含多少个字节。DLC段由4位组成，DLC3−DLC0，表示的数字为0-8.

# 数据段
数据帧的核心内容，有0-8个字节长度，由DLC确定。

# 同步 ; CAN 总线的通信方式为 NRZ 方式
CAN总线使用位同步的方式来确保通信时序，以及对总线的电平进行正确采样。
CAN同步分为硬同步和重新同步。同步规则：
    一个位时间内只允许一种同步方式
    任何一个“隐性”到“显性”的跳变都可用于同步
    硬同步发生在SOF阶段，所有接收节点调整各自当前位的同步段，使其位于发送的SOF位内。
    重新同步发生在一个帧的其他阶段，即当跳变沿落在同步段之外。
1. 硬同步
    当总线上出现帧起始信号（SOF，即隐性到显性的边沿）时，其他节点的控制器根据总线上
的这个下降沿对自己的位时序进行调整，把该下降沿包含到SS段内。这样根据起始帧来进行的同步称为硬同步。
2. 重新同步

错误检测功能 错误通知功能 错误恢复功能

    
CAN的一些基本概念
---------------------
1. 什么是CAN总线
CAN 是Controller Area Network的缩写，是ISO国际标准化的串行通信协议。
通俗来讲，CAN总线就是一种传输数据的线，用于在不同的ECU之间传输数据。

CAN总线有两个ISO国际标准：ISO11898 和 ISO11519。其中：
1.1 ISO11898 定义了通信速率为 125 kbps～1 Mbps 的高速 CAN 通信标准，属于闭环总线，传输速率可达1Mbps，总线长度 ≤ 40米。
1.2 ISO11519 定义了通信速率为 10～125 kbps 的低速 CAN 通信标准，属于开环总线，传输速率为40kbps时，总线长度可达1000米。

Tips: <总线的传输速率>：又称为总线的通信速率，指的是位速率。或称为比特率(和波特率不是一回事)，表示的是：单位时间内，
通信线路上传输的二进制位的数量，其基本单位是 bps 或者 b/s(bit per second)。

2. CAN的拓扑结构
下图中，左边是高速CAN总线的拓扑结构，右边是低速CAN总线的拓扑结构。
                                       120欧
-------     -------      -------      |=====|
|     |     |      |<-->|      | -----------|
| CPU |<--->| CAN  |    | CAN  |      |     |
|     |     |控制器|<-->|收发器| -----|     |
-------     -------      -------      |     |
                                      |=====|
                                       120欧
                                       
                                       |    |
                                      ||   || 2.2k欧
-------     -------      -------      ||   ||
|     |     |      |<-->|      | -----------|
| CPU |<--->| CAN  |    | CAN  |      |     |
|     |     |控制器|<-->|收发器| -----|     |
-------     -------      -------      |     |
                                      
如图中所示，CAN总线包括CAN_H 和 CAN_L 两根线。节点通过CAN控制器和CAN收发器连接到CAN总线上。
Tips ：通常来讲，ECU内部集成了CAN控制器和CAN收发器，但是也有没集成的，需要自己外加。
    
3. CAN信号表示
在CAN总线上，利用CAN_H和CAN_L两根线上的电位差来表示CAN信号。
CAN总线上的电位差分为显性电平和隐性电平。其中显性电平为逻辑0，隐性电平为逻辑1。

ISO11898标准（125kbps ~ 1Mbps）和ISO11519标准（10kbps ~ 125kbps）中CAN信号的表示分别如下所示： 

4。 CAN信号传输
发送过程：
    CAN控制器将CPU传来的信号转换为逻辑电平(即逻辑0-显性电平或者逻辑1-隐性电平)。
CAN发射器接收逻辑电平之后，再将其转换为差分电平输出到CAN总线上。
接收过程：
    CAN接收器将CAN_H 和 CAN_L 线上传来的差分电平转换为逻辑电平输出到CAN控制器，
CAN控制器再把该逻辑电平转化为相应的信号发送到CPU上。

概括的讲：
    发送方通过使总线电平发生变化，将其信息传递到CAN总线上。
    接收方通过监听总线电平，将总线上的消息读入自己的接收器。

5. CAN通信的特点
多主工作方式
    所谓多主工作方式，指的是：总线上的所有节点没有主从之分，大家都处于平等的地位。反应在数据传输上，
即是：在总线空闲状态，任意节点都可以向总线上发送消息。
Tips: <总线空闲状态>：当总线上的上出现连续的11位隐性电平，那么总线就处于空闲状态。也就是说对于任意一个节点而言，
只要它监听到总线上连续出现了11位隐性电平，那么该节点就会认为总线当前处于空闲状态，它就会立即向总线上发送自己的报文。
至于为什么连续出现11位隐性电平，就可以判定+总线处于空闲状态，这个问题可以结合CAN协议的帧结构来进行理解。

在多主工作方式下：
5.1 最先向总线发送消息的节点获得总线的发送权；(CSMA/CA)
5.1 当多个节点同时向总线发送消息时，所发送消息的优先权高的那个节点获得总线的发送权。
    例如：Node_A和Node_B同时向总线发送各自的消息Msg_1和Msg_2，如果Msg_1的优先级比Msg_2高，那么Node_A就获得了总线的发送权。
    
CSMA/CA :带有冲突避免的载波侦听多路访问，发送包的同时不能检测到信道上有无冲突，只能尽量"避免"。
CSMA/CA利用ACK信号来避免冲突的发生，也就是说，只有当客户端收到网络上返回的ACK信号后才确认送出的数据已经正确到达目的。


6. 非破坏性位仲裁机制
    在CAN协议中，所有的消息都以固定的帧格式发送。当多个节点同时向总线发送消息时，对各个消息的标识符(即ID号)进行逐位仲裁，
如果某个节点发送的消息仲裁获胜，那么这个节点将获取总线的发送权，仲裁失败的节点则立即停止发送并转变为监听(接收)状态。

    例如：Node_A和Node_B同时向总线发送各自的消息Msg_1和Msg_2，那么对Msg_1的ID号ID_1和Msg_2的ID号ID_2进行逐位仲裁，
如果仲裁结果是：ID_1的优先级比ID_2高，那么Msg_1在仲裁中获胜，于是发出Msg_1这条报文的节点Node_A就获得了总线的发送权。
同时，Msg_2在仲裁中失败，于是Node_B就转换到监听总线电平的状态。
这种仲裁机制既不会造成已发送数据的延迟，也不会破坏已经发送的数据，所以称为非破坏性仲裁机制。  

7. 系统的柔性
CAN总线上的节点没有"地址"的概念，因此在总线上增加节点时，不会对总线上已有节点的软硬件及应用层造成影响。

8. 通信速度
在同一条CAN线上，所有节点的通信速度(位速率)必须相同，如果两条不同通信速度总线上的节点想要实现信息交互，必须通过网关。
    例如：汽车上一般有两条CAN总线：500kbps的驱动系统CAN总线和125kbps的舒适系统CAN总线，如果驱动系统CAN总线上
的发动机节点要把自己的转速信息发送给舒适系统CAN总线上的转速表节点，那么这两条总线必须通过网关相连。

即:有一个单元的通信速度与其它的不一样，此单元也会输出错误信号，妨碍整个网络的通信。

9. 数据传输方式
    CAN总线可以实现一对一，一对多以及广播的数据传输方式，这依赖于验收滤波技术

10. 远程数据请求
某个节点Node_A可以通过发送“遥控帧”到总线上的方式，请求某个节点Node_B来发送由该遥控帧所指定的报文。

11. 错误检测、错误通知、错误恢复功能
    所有的节点都可以检测出错误(错误检测功能)；
    检测出错误的节点会立即通知总线上其它所有的节点(错误通知功能)；
    正在发送消息的节点，如果检测到错误，会立即停止当前的发送，并在同时不断地重复发送此消息，直到该消息发送成功为止(错误恢复功能)。
    
12. 故障封闭
    节点能够判断错误的类型，判断是暂时性的数据错误(如噪声干扰)还是持续性的数据错误(如节点内部故障)，
如果判断是严重的持续性错误，那么节点就会切断自己与总线的联系，从而避免影响总线上其他节点的正常工作。
    CAN通信的上述特点都是基于CAN协议所定义的多种帧结构来实现的，

13. CAN协议网络层次
    在CAN协议中，ISO标准只对数据链路层和物理层做了规定。对于数据链路层和物理层的一部分，
ISO11898和ISO11519-2的规定是相同，但是在物理层的PMD子层和MDI子层是不同的。

13.1 逻辑链路层
  逻辑链路控制     
    接收过滤       点到点，组播秒，广播
    过载通知       通知"接收准备尚未完成"
    错误恢复       再次发生
  介质访问控制     
    数据打包/解包  数据帧、遥控帧、错误帧、过载帧、间隔帧
    连接控制方式   竞争方式，支持多点传送
    仲裁方式       位仲裁方式、优先级高的ID可以继续被发送
    故障扩散抑制   自动判定暂时性错误或持续性错误，并切断持续性错误节点与总线间的联系
    错误通知       CRC错误、填充为错误、位错误、ACK错误、格式错误
    错误检测       所有节点均可随时检测错误
    应答方式       ACK应带和NACK应答
    通信方式       半双工通信和串行通信
13.2 物理层
  物理信令子层   PLS   
    位编码/解码方式    NRZ方式编码，位填充
  物理介质连接性 PMD   
    位时序             位时序，位的采样数
  截至相关接收   MDI   
    同步方式           根据同步段(SS端)实现同步(并且具有在同步功能)

14. 消息的发送 
    在CAN协议中，所有的消息都以固定的格式发送。总线空闲时，所有与总线相连的单元都可以开始发送新
消息。两个以上的单元同时开始发送消息时，根据标识符（Identifier  以下称为 ID ）决定优先级。ID并不
是表示发送的目的地址，而是表示访问总线的消息的优先级。两个以上的单元同时开始发送消息时，对各消
息ID的每个位进行逐个仲裁比较。仲裁获胜（被判定为优先级最高）的单元可继续发送消息，仲裁失利的
单元则立刻停止发送而进行接收工作。

15. 连接 
    CAN总线是可同时连接多个单元的总线。可连接的单元总数理论上是没有限制的。但实际上可连接的单元
数受总线上的时间延迟及电气负载的限制。降低通信速度，可连接的单元数增加；提高通信速度，则可连接
的单元数减少。

CAN 协议中的帧
---------------------
CAN协议中五种类型的帧结构：
    数据帧
    遥控帧
    错误帧
    过载帧
    帧间隔
1. 数据帧与遥控帧
在CAN协议中，数据帧和遥控帧有着诸多相同之处，所以，在这里，我们将数据帧和遥控帧放在一起来讲。

顾名思义，所谓数据帧，就是包含了我们要传输的数据的帧，其作用当然也就是承载发送节点要传递给接收节点的数据。
而遥控帧的作用可以描述为：请求其它节点发出与本遥控帧具有相同ID号的数据帧。
比如：在某一个时刻，节点Node_A向总线发送了一个ID号为ID_2的遥控帧，那么就意味着Node_A请求总线上的其他节点发送ID号为ID_2的数据帧。
节点Node_B能够发出ID号为ID_2的数据帧，那么Node_B就会在收到Node_A发出的遥控帧之后，立刻向总线上发送ID号为ID_2的数据帧。

数据帧 的帧结构如下图所示，包含七个段：帧起始、仲裁段、控制段、数据段、CRC段、ACK段、帧结束。

标准帧
|------|--------------|----------------------|-----------|---------------------|----------------------|-------|
|帧起始|     仲裁段   |        控制段        |  数据段   |          CRC段      |           ACK段      | 帧结束|
|------|--------------|----------------------|-----------|---------------------|----------------------|-------|
|  1   | ID(11) RTR(1)| IDE(1) r0(1) DLC(4)  |  Data(64) | CRC(15) CRC界定符(1)| ACK槽(1) ACK界定符(1)| EOF(7)|
|------|--------------|----------------------|-----------|---------------------|----------------------|-------|
扩展帧
|------------------------------------|----------------------|
|     仲裁段                         |        控制段        |
|------------------------------------|----------------------|
| ID(11) SSR(1) IDE(1) ID(18) RTR(1) | r0(1) r1(1) DLC(4)   |
|------------------------------------|----------------------|
遥控帧 相比于数据帧，从帧结构上来看，只是少了数据段，包含六个段：帧起始、仲裁段、控制段、CRC段、ACK段、帧结束。

数据帧和遥控帧都分为标准帧（CAN2.0A）和扩展帧（CAN2.0B）两种结构。
遥控帧相比于数据帧除了缺少数据段之外，遥控帧的RTR位恒为隐性1，数据帧的RTR位恒为显性0。

1.1 帧起始
帧的最开始的一位是帧起始，也叫SOF（Start Of Frame），SOF恒为显性位，即逻辑 0 。
帧起始表示CAN_H 和 CAN_L上有了电位差，也就是说，一旦总线上有了SOF就表示总线上开始有报文了。

# can 帧以一个 StartOf-Frame(SOF) 位开始，该位是一个显性的状态和允许硬件同 步所以的节点。

1.2 仲裁段
仲裁段是用来判定一帧报文优先级的依据，仲裁段中的ID号也是实现报文过滤机制的基础。
可以看到相比于数据帧仲裁段RTR位恒为显性0，遥控帧仲裁段的RTR位恒为隐性1。

# Arbitration Field: 开始位之后是 12 位的仲裁域(arbitration field)，其由 11 位的 ID 识别和远程传输帧请求位
# RTR (Remote Transmission Request)。RTR 位用于区分帧是远程帧与否。

1.2.1 仲裁过程
    在CAN总线通信中，有一种回读机制：指的是节点在向总线上发送报文的过程中，同时也对总线上的二进制位进行“回读”。
通过这种机制，节点就可以判断出本节点发出的二进制位与总线上当前的二进制位是否一致。

还有一种叫做线与机制：指的是在总线上，显性位能够覆盖隐性位。
    举个例子：在某一个时刻，节点Node_A向总线发送了一个显性位0，Node_B向总线发送了一个隐性位1，那么在该时刻，
总线上的电平为显性0。
    下面将以标准数据帧的一个例子来分析CAN总线的非破坏性逐位仲裁机制。
    一条CAN总线上有Node_A 和 Node_B两个节点，在总线空闲时，总线上为隐性电平，就在这个时候Node_A 和 Node_B 
这两个节点同时向总线上发送数据，
在Node_A 和 Node_B 传输数据前，总线处于空闲状态，为隐性电平1，这也就意味着，此时总线上的任意节点都可以向总线发送数据。
在某一时刻，Node_A 和Node_B两个节点同时向总线上发送数据。按照线与机制，总线上的电位为：
节点/ID号   ID10   ID9   ID8  ID7  ID6   …
Node_A      1       0    1    0     1    …
Node_B      1       0    1    1     …    …
总线        1       0    1    0     1    …
    在Node_A和Node_B两个节点向总线发送数据时，他们同时回读总线上的电平。从图中我们可以看到，
Node_A 和Node_B的ID10 、ID9、ID8电位相同，因此这两个节点从总线上听到的电位与他们自己发出的
电位也相同，这个时候还没有分出胜负。
    当Node_B回读总线上的 ID7 这一位时，发现总线上的电平跟它自己发送到总线上的不一样，此时，
Node_B知道自己在争夺总线的仲裁中失败了，那么它主动地转换为接收状态，不再发出信息。

于是在此之后，总线上的电平和Node_A发出的电平一致，也就是说，Node_A占据了总线的发送权。
通过上面的分析我们可以看到，在整个仲裁过程中：
    在Node_A获取总线的发送权之后，Node_A接着发送自己的Msg_A，因此在竞争总线的过程中不会对Msg_A的传输造成延时；
    在两个节点竞争总线的过程中，不会破坏Msg_A;

正是由于上面的两点，才称之为非破坏性仲裁机制。
Tips: 通过上面仲裁过程的分析，我们可以解释CAN总线通信的三个特点：
1）多主控制方式：只要总线空闲，总线上的任意节点都可以向总线上发送数据，直到节点在仲裁中一个个失败，
   最后只留下一个节点获得总线的发送权。
2）非破坏性仲裁机制：仲裁段逐位总裁，依靠回读机制、线与机制得以实现。
3）半双工通信：所谓半双工通信，指的是节点不能在自己发送报文的时候，同时接收其他节点发送来的报文。
   这是显然的，一个节点正在发送报文时，已经占据了总线的发送权，其他节点肯定不能向总线上发送报文。
    
1.2.2 仲裁段中的RTR，SRR和IDE位
通过上面标准数据帧的仲裁过程分析，我们已经理解了CAN总线的仲裁机制。但同时也注意到仲裁段除了ID号之外，还有其他的位。

RTR位：
  Tranmission Request Bit(远程发送请求位)。在数据帧中，RTR位恒为显性位0，在遥控帧中，恒为隐性1。
    Tips: 这么做的原因是保证数据帧优先级高于遥控帧。比如：在某一时刻t，节点Node_A发出了ID号为ID_2遥控帧报文来请求总线上
的其它节点发出ID号为ID_2的数据帧报文。但是就在同一时刻t，节点Node_B发出了ID号为ID_2的数据帧报文。这个时候怎么办呢，
显然依靠ID号不能仲裁出这两帧报文(一个遥控帧，一个数据帧，ID号相同)谁能占据总线的发送权，这种情况下，RTR位就起作用了，
由于RTR在数据帧中恒为显性0，在遥控帧中恒为隐性1，所以在ID号相同的情况下，一定是数据帧仲裁获胜。这就解释了 RTR位的作用：
在ID号相同的情况下，保证数据帧的优先级高于遥控帧。

SRR位
    Substitutes for Remote Requests Bit(替代远程请求位)，在扩展帧(数据帧或遥控帧)中，SRR恒为隐性位1，
并且可以发现，扩展帧的隐性SRR位正好对应标准帧的显性RTR位，这就解释了 SRR位的作用：在前11位ID号相同的情况下，
标准数据帧的优先级高于扩展数据帧；

IDE位
    全称：Identifier Extension Bit(标识符扩展位)。在扩展帧中恒为隐性1，在标准帧中，IDE位于控制段，且恒为显性0。
且扩展帧IDE位和标准帧IDE位位置对应，这就保证了： 在前11位ID号相同的情况下，标准遥控帧的优先级一定高于扩展遥控帧。

总结：
在ID号前11位相同的情况下：
    RTR：保证数据帧优先级高于遥控帧；
    SRR ：保证标准数据帧的优先级高于扩展数据帧。
    IDE ：保证标准遥控帧的优先级高于扩展遥控帧。

1.3 报文过滤
    在CAN总线中没有地址的概念，CAN总线是通过报文ID来实现收发数据的。CAN节点上都会有一个验收滤波ID表，其位于CAN节点的验收滤波器中，
如果总线上的报文的ID号在某个节点的验收滤波ID表中，那么这一帧报文就能通过该节点验收滤波器的验收，该节点就会接收这一帧报文。
比如：Node_A发送了一帧ID号为ID_1的报文Msg_1，Node_B的验收滤波ID表中恰好有ID_1，于是乎Msg_1就会被Node_B接收。
    Tips: 报文过滤机制体现了CAN通信的两条特点：
    1）一对一、组播和广播
    2）系统的柔性：正是因为CAN总线上收发报文是基于报文ID实现的，所以总线上添加节点时不会对总线上已有的节点造成影响。

1.4 控制段
数据帧和遥控帧的控制段结构相同： 
    标准帧中IDE位对应扩展帧中的IDE位，保证在前11位ID号相同的情况下，标准帧的优先级一定高于扩展帧；
    然后是保留位r0和r1(扩展帧)，保留位r0和r1必须以显性电平发送，但是接受方可以接受显性、隐性及其任意组合的电平；
    最后是4个字节的DLC(DLC3、DLC2、DLC1、DLC0)代表数据长度，指示了数据段中的字节数。
对于没有数据段的遥控帧，DLC表示该遥控帧对应的数据帧的数据段的字节数。

# Control Field: 接下来的仲裁域是控制域，包含 6 个位，其中的第一位是拓展识 别位 (Identifier Extension IDE), 
# 该位显性指明是否是标准帧还是拓展帧。
# 1. Control Field: RB0 位预留给 CAN 协议，保持为 0
# 2. Control Field: 控制位中剩余的 4 位是 DLC 域，该域用于指定 CAN 数据的长度， 支持 0-8 位

1.5 数据段
数据段可以包含0~8个字节的数据，从MSB(最高位)开始输出。

1.6 CRC段
CRC段包含CRC校验序列和CRC界定符。
CRC校验序列是根据多项式生成的CRC值，其计算范围包括：帧起始、仲裁段、控制段和数据段。
CRC界定符恒为隐性1。
# CRC: 接下来的 16 位是冗长检测，其中包括 15 位的 CRC 序列，第 16 位为 CRC 分隔符

1.7 ACK段
ACK段包含ACK槽和ACK界定符两个位。
发送节点在ACK段发送两个隐性位，即发送方发出的报文中ACK槽为隐性1；
    接收节点在接收到正确的报文之后会在ACK槽发送显性位0，通知发送节点正常接收结束。
所谓接收到正确的报文指的是接收到的报文没有填充错误、格式错误、CRC错误。

# ACK field: 最后一个域包含了 2 位的应答域。在 ACK Slot bit 期间，传输节点 发送一个接收位。
# 任何接收到一个 error-frame Frame 来应答是否正确的收到数据

1.8 帧结束
帧结束段表示该帧报文的结束，由7个隐性位构成。

https://blog.csdn.net/weixin_40528417/article/details/79771270
错误帧的帧结构
------------------
    在发送和接收报文时，总线上的节点如果检测出了错误，那么该节点就会发送错误帧，通知总线上的节点，自己出错了。
错误帧由错误标志和错误界定符两个部分组成。

| 错误标志重叠部分 | 错误界定符 |
| 错误标志         |            |
|    6     |       |     8      |

# 错误标志
    主动错误标志：6个连续的显性位；
    被动错误标志：6个连续的隐性位；
    错误界定符：8个连续的隐性位。
可以看到在错误标志之后还有0~6位的错误标志重叠，这一段最少有0个位，最多有6个位

1. 错误检测
1.1 位填充原则 # 位填充是为了防止突发错误而设定的功能。
在了解CAN总线中的错误检测之前，首先需要了解什么是位填充。
CAN协议中规定，当相同极性的电平持续五位时，则添加一个极性相反的位。

1. 5位连续相同电平之后，必须填充一位反向位，即不允许有6个连续相同位
2. SOF之前为总线空闲状态，不需要同步，因此不需要位填充
3. CRC之后为固定格式，不允许填充
4. 由CAN控制器自动实现

对于发送节点而言：
在发送数据帧和遥控帧时，对于SOF~CRC(除去CRC界定符)之间的位流，相同极性的电平如果持续5位，那么在下一个位插入一个与之前5位反型的电平；
对于接收节点而言：
在接收数据帧和遥控帧时，对于**SOF~CRC(除去CRC界定符)**之间的位流，相同极性的电平如果持续5位，那么需要删除下一位再接收。

Tips: 注意：填充位的添加和删除是由发送节点和接收节点完成的，CAN-BUS只负责传输，不会操纵信号。

2. 错误的种类
在CAN总线通信中，一共有五种错误：
2.1 位错误
2.2 ACK错误
2.3 填充错误
2.4 CRC错误
2.5 格式错误

以下5种：
2.1. 位填充错误 
   在使用位填充的帧场内，结点如果检测到6个连续相同的位值，则产生位填充错误， 在下一位开始时，该结点将发送一个错误帧。
2.2. 位错误 
   在发送期间，结点检测到总线的位值与自身发送的位值不一致时，则产生位错误， 在下一位开始时，该结点将发送一个错误帧。
2.3. CRC错误 
   接收结点计算的CRC码与数据帧本身自带的CRC码不一致，接收结点将丢弃该帧，并在ACK界定符之后发送一个错误帧。
2.4. 应答错误 
   发送结点在ACK Slot位会发送隐性位，同时监听总线是否为显性位，如果是显性位，则表明至少一个节点正确收到该帧；如果是隐性位，将产生ACK错误，发送结点发送一个错误帧。
2.5. 格式错误 
   发送结节在(CRC界定符、ACK界定符、帧结束EOF)固定格式的位置检测到显性位时，将发生格式错误，并发送一个错误帧。



2.1 位错误(Bit Check Error)
    节点将自己发送到总线上的电平与同时从总线上回读到的电平进行比较，如果发现二者不一致，
那么这个节点就会检测出一个位错误。
    实际上所谓“发出的电平与从总线上回读的电平不一致”，指的就是节点向总线发出隐性位，却
从总线上回读到显性位或者节点向总线发出显性位，却从总线上回读到隐性位这两种情况。

Tips: 有三种例外情况不属于位错误：
    在仲裁区，节点向总线发送隐性位却回读到显性位，不认为是位错误，这种情况表示该节点仲裁失败；
    在ACK槽，节点向总线发送隐性位却回读到显性位，不认为是位错误，这种情况表示，该节点当前发送
的这一帧报文至少被一个其它节点正确接收；
    该节点发送被动错误标志，节点Node_A向总线发送连续六个隐性位(被动错误标志)却回读到显性位，
不认为是位错误。因为被动错误标志是六个连续的隐性位，所以在总线上按照线与机制，有可能这六个连续
隐性位被其它节点发送的显性电平“吃掉”；
    
2.2 ACK错误(Acknowledgment Error)
    按照CAN协议的规定，在一帧报文(数据帧或者遥控帧)发出之后，如果接收节点Node_B成功接收了该帧报文，
那么接收节点Node_B就要在该帧报文ACK槽对应的时间段内向总线上发送一个显性位来应答发送节点Node_A。
这样发送节点Node_A就会在ACK槽时间段内从总线上回读到一个显性位。因此：
    当发送节点Node_A在ACK槽时间段内没有回读到显性位，那么发送节点Node_A就会检测到一个ACK应答错误。
这表示没有一个节点成功接收该帧报文。

2.3 填充错误(Fill Error)
    在需要执行位填充原则的帧段(数据帧遥控帧的SOF~CRC序列)，检测到连续六个同性位，则检测到一个填充错误。

2.4 CRC错误
    发送节点Node_A在发送数据帧或者遥控帧时，会计算出该帧报文的CRC序列。接收节点Node_B在接收报文时
也会执行相同的CRC算法，如果接收节点Node_B计算出的CRC序列值与发送节点Node_A发来的CRC序列值不一致，
那么接收节点就检测到一个CRC错误。

2.5 格式错误
在一帧报文发送时，如果在必须发送预定值的区域内检测到了非法值，那么就检测到一个格式错误。
CAN报文中，有预定值的区域包括：
2.5.1 数据帧和遥控帧的CRC界定符、ACK界定符、EOF；
2.5.2 错误帧界定符
2.5.3 过载帧界定符
    
3. 错误通知
    上一节中，讲到CAN通信中有五种错误，并且介绍了在什么情况下能够检测到这几种错误，在检测到错误之后，
检测到错误的节点就要发送错误帧到总线上来通知总线上的其他节点。

错误帧有的带有主动错误标志，有的带有被动错误标志，而且错误标志重叠部分的字节数也不一样，那么问题就来了：
    什么情况下发送带有主动错误标志的错误帧；
    什么情况下发送带有被动错误标志的错误帧；
    在哪个时间点发送错误帧；
    错误标志重叠部分是怎样形成的；
    
3.1 节点错误状态
按照CAN协议的规定，CAN总线上的节点始终处于以下三种状态之一。
    主动错误状态
    被动错误状态
    总关闭状态
当满足一定的条件时，节点可以从一种状态转换为另外一种状态。

Tips: 需要注意的是：
    处于主动错误状态，表示该节点具备发出主动错误标志的能力;
    处于被动错误状态，表示节点具备发出被动错误标志的能力。

1）主动错误状态
    节点处于主动错误状态可以正常通信；
    处于主动错误状态的节点(可能是接收节点也可能是发送节点)在检测出错误时，发出主动错误标志。

2）被动错误状态
    节点处于被动错误状态可以正常通信；
    被动错误状态是易引起错误的状态。 
    处于被动错误状态的单元虽能参加总线通信，但为不妨碍其它单元通信，接收时不能积极地发送错误通知。
    处于被动错误状态的单元即使检测出错误，而其它处于主动错误状态的单元如果没发现错误，整个总线也被认为是没有错误的。
    处于被动错误状态的节点(可能是接收节点也可能是发送节点)在检测出错误时，发出被动错误标志。
    另外，处于被动错误状态的单元在发送结束后不能马上再次开始发送。在开始下次发送前，在间隔帧期间内
必须插入"延迟传送"(8 个位的隐性位) 。

    Tips: 注意：这里说处于主动错误状态或被动错误状态的节点仍然可以正常通信，这里的正常通信指的是：
节点仍然能够从总线上接收报文，也能够竞争总线获胜后向总线上发送报文。但是不代表接收的报文一定正确也不代表一定能正确的发送报文。

3）总线关闭状态
    节点处于总线关闭状态，那么该节点不能收发报文； -- 信息的接收和发送均被禁止。
    处于总线关闭状态的节点，只能一直等待，在满足一定条件的时候，再次进入到主动错误状态。

错误状态的转换 : 这些状态依靠发送错误计数和接收错误计数来管理，根据计数值决定进入何种状态。
现在我们知道：
    处于主动错误状态的节点在检测到错误时会发送带有主动错误标志的错误帧；
    处于被动错误状态的节点在检测到错误时会发送带有被动错误标志的错误帧。
那么一个CAN节点在什么情况下处于主动错误状态，什么情况下处于被动错误状态呢？
根据CAN协议的规定，在CAN节点内，有两个计数器：发送错误计数器(TEC)和接收错误计数器(REC)。

    Tips: 需要注意的是：这两个计数器计得不是收发报文的数量，也不是收发错误帧的数量。TEC和RCE计数值的变化，
是根据下表的规定来进行的

  接受和发送错误计数器变动条件                                        发送错误计数器   接收错误计数器
1. 接收单元检查出错误                                                                   +1
例如: 接收单元在发送错误标志或过载标志中检测出                                          
"位错误"时，接收错误计数值不断增加。                                                    
2. 接收单元在发送完错误标志后检测到的第一个位为显性电平时                               +8
3. 发送单元在输出错误标志时                                             +8              
4. 发送单元在发送错误标志或者过载标志，检测出错误位                     +8              
5. 接收单元在发送错误标志或者过载标志，检测出错误位                                     +8
6. 各单元从主动错误标志，过载标志的最开始检测出连续14个位的显性位时，   发送时+8        发送时+8
   之后，每检测出8个位的显性位时                                                                
7. 检测出在被动错误标志后追加的8个位的显性位时                          发送时+8        发送时+8
8. 发送单元正常发送数据接收时(返回ACK且到帧结束也未                      -1             
检测出错误时)                                                                           
9. 接收单元正常发送数据接收时(返回ACK且到帧结束也未                                     
检测出错误时)                                                                           
10. 处于总线关闭状态的单元，检测到128次连续11个位的隐性位               TEC=0           REC=0

CAN节点错误状态的转换，就是基于这两个计数器来进行的。

初始状态： 主动错误状态   -> TEC>127 或 REC>127 -> 被动错误状态
           被动错误状态 -> TEC<=127  且 REC<=127 -> 主动错误状态
           被动错误状态 -> TEC >255              -> 总线关闭状态
           总线关闭状态 -> 总线上检测到128次连续的11位隐性位
           
可以看出，节点错误状态的转换就是一个**“量变”到“质变”的过程：

####1) 主动错误状态
最开始TCE和REC都小于127时**，就处于主动错误状态。
    在这一状态下，节点检测到一个错误就会发送带有主动错误标志的错误帧，因为主动错误标志是连续六个显性位，
所以这个时候主动错误标志将会“覆盖”掉总线上其它节点的发送，而之前在CAN总线上传输的报文就被这“六个连续显性位”破坏掉了。
    如果发出主动错误帧的节点是发送节点，这个情况下就相当于：刚刚发送的那一帧报文我发错了，现在我破坏掉它
(发送主动错误帧)，你们不管收到什么都不算数；
    如果发出主动错误帧的节点是接收节点，这个情况就相当于：刚刚我收报文的时候发现了错误，不管你们有没有发现这个错误，
我现在主动站出来告诉大家这个错误，并把这一帧报文破坏掉(发送主动错误帧)，刚才你们收到的东西不管对错都不算数了。
    Tips: 处于主动错误状态，说明这个节点目前是比较可靠的，出现错误的原因可能不是它本身的问题，即刚刚检测到
的错误可能不仅仅只有它自己遇到，正是因为这一点，整个总线才相信它报告的错误，允许它破坏掉发送中的报文，也就
是将这一次的发送作废。

####2)被动错误状态
    如果某个节点发送错误帧的次数较多，必将使得TCE＞127 或者 REC＞127，那么该节点就处于被动错误状态。
    在这一状态下，节点Node_A检测到一个错误就会发送带有被动错误标志的错误帧，因为被动错误标志是连续六个隐性位，
所以这个时候总线上正在传输的报文位流不会受到该被动错误帧的影响，其它的节点该发送的发送，该接收的接收，没人搭理
这个发送被动错误帧的节点Node_A。
    如果发出被动错误帧的节点Node_A为报文的发送节点，那么在发送被动错误帧之后，刚刚正在发送的报文被破坏，
并且Node_A不能在错误帧之后随着连续发送刚刚发送失败的那个报文。随之而来的是帧间隔，并且连带着8位隐性位的
“延迟传送” 段；这样总线电平就呈现出连续11位隐性位，总线上的其它节点就能判定总线处于空闲状态，就能参与总线竞争。
此时如果Node_A能够竞争成功，那么它就能接着发送，如果竞争不能成功，那么就接着等待下一次竞争。这种机制的目的
正是为了让其它正常节点(处于主动错误)优先使用总线。
    Tips: 处于被动错误状态，说明这个节点目前是不太可靠的，出现错误的原因可能是它本身的问题，即刚刚检测到
的错误可能仅仅只有它自己遇到，正是因为这一点，整个总线才不信任它报告的错误，从而只允许它发送六个连续的隐性位，
这样它才不会拖累别人。
    
####3)总线关闭状态
    如果一个处于被动错误状态的节点，仍然多次发送被动错误帧，那么势必导致TEC ＞ 255，这样就处于总线关闭状态。
    在总线关闭状态下的节点Node_A不能向总线上发送报文，也不能从总线上接收报文，整个节点脱离总线。等到检测到
128次11个连续的隐性位时，TEC和REC置0，重新回到主动错误状态。
    按照我的理解这个所谓“检测到128次11个连续隐性位”其实就是让这个节点隔离一段时间冷静下，因为它一旦处于
总线关闭状态，就不会和总线有任何的联系，这个时候只要它计算时间等于达到传送128次11个连续隐性位所用的时间，
就可以重新连到总线上。
    Tips: 处于总线关闭状态说明，这个节点目前挂掉了，总线先把它踢开，这样它才不会拖累别人，等到它冷静一段时间之后再回到总线上。

3.3 错误帧的发送
在检测到错误之后，什么时候发送错误帧呢？
按照CAN协议的规定：
  位错误、填充错误、格式错误、ACK错误。
    在错误产生的那一位的下一位开始发送错误帧。
  CRC错误
    紧随ACK界定符后的位发送错误帧。
    例子1：
    
https://blog.csdn.net/weixin_40528417/article/details/79871311

过载帧
---------------
过载帧是接收节点向总线上其它节点报告自身接收能力达到极限的帧。
    上面这句话可以这样理解：接收节点Node_A接收报文的能力达到极限了，于是Node_A就会发出
过载帧来告诉总线上的其它节点（包括发送节点），我接收节点Node_A已经没有能力处理你们发来的报文了。

过载帧包括：过载标志和过载界定符两个部分
    过载标志：连续6个显性位；
    过载界定符：连续8个隐性位。
    与错误帧类似，过载帧中有过载帧重叠部分，且形成过载重叠标志的原因与形成错误帧中的错误重叠标志的原因是相同的

    对于过载帧的帧结构我们可以这样理解：接收节点Node_A达到接收极限时，就会发出过载帧到总线上，
显然，过载标志的6个连续显性位会屏蔽掉总线上其它节点的发送，也就是说这个时候Node_A通过发送过载帧
的方式来破坏其它节点的发送，这样在Node_A发送过载帧期间，其它节点就不能成功发送报文，于是就相当于
把其它节点的发送推迟了，也就是说Node_A在其发送过载帧的这段时间得以“休息”。

有三种情况会引起过载帧：
1.1 接收节点自身原因。接收节点由于某种原因需要延迟接收下一个数据帧或者遥控帧。
1.2 在帧间隔的间歇段的第一位和第二位检测到一个显性位(正常的间歇段都是隐性位)
    帧间隔的间隔段本应是三个连续的隐性位，如果接收节点Node_A在间隔段检测到显性位，
那么就意味着此时有报文发向接收节点Node_A，但这个时候是不应该有报文发来的，于是Node_A发送过载帧。
1.3 CAN节点在错误界定符或过载界定符的第八位(最后一位)听到一个显性位0，节点会发送一个过载帧，且错误计数器不会增加。
    接收节点Node_A在错误界定符和过载界定符的最后一位听到显性位，也意味着有报文发向Node_A，
但这个时候是不应该有报文发来的，于是Node_A发送过载帧。
    
    
帧间隔
-----------------
    帧间隔是用来隔离数据帧(或者遥控帧)的，也就是说，数据帧(或者遥控帧)通过插入帧间隔可以
将本帧与先行帧(数据帧、遥控帧、错误帧、过载帧)分隔开来。

Tips: 过载帧和错误帧的前面不能插入帧间隔。
  帧间隔有两种不同的形式：
    | 间隔段 | 空闲段   |
    |  3     | 0 ~ 无穷 |
    主动错误状态的帧间隔：
    被动错误状态的帧间隔：
    | 间隔段 | 暂停段 | 空闲段   |
    |  3     |   8    | 0 ~ 无穷 |
    
间隔段：连续三个隐性位；间隔段期间，所有节点不允许发送数据这或遥控帧，只要在这期间监听到显性位，接收节点就会发送过载帧。
空闲段：连续隐性位，个数不一定，0个或者多个都可以。总线空闲的时间是任意长的，只要总线空闲，节点就可以竞争总线。
暂停段：只有处于被动错误状态的节点在发送帧间隔的时候，才会在帧间隔中插入8个连续隐性位的暂停段。
    暂停段，又叫做延迟传送段，为什么节点处于被动状态时会有这样一段呢。原因如下:首先，考虑主动错误状态的节点Node_A，
发送主动错误标志之后，随之就要重新发送刚刚发送失败的报文，但是为了间隔开与前面刚刚发送的错误帧，总线在错误帧之后
就会插入３个隐形位的帧间隔，在这３个隐形位期间，其它的节点不足以判定总线空闲(需要连续11个隐性位才能判定)，
所以Node_A仍然占据着总线的控制权，于是在帧间隔之后，Node_A能够接着发送报文。现在Node_A转入到被动错误状态了，
说明它已经不是很可靠了，这个时候如果没有延迟传送段，在Node_A发出被动错误标志之后，它仍然能够在3位的帧间隔之后
立即重新发送报文，这是不符合我们对被动错误状态的处理要求的当然也是不符合CAN协议的，于是乎对于发送出被动错误标志的节点，
总线在帧间隔中加入了８个连续隐性位的延迟传送段，这样的3+8=11个连续隐性位。就能让Node_A在这个帧间隔期间失去对总线的控制权，
从而优先保证其它正常(处于主动错误状态)节点能够使用总线，而不必等着一个已经不可靠的Node_A占据总线。


https://blog.csdn.net/weixin_40528417/article/details/79936476
1 位定时
------------
1.1 比特率和波特率
1) 位速率:又叫做比特率(bit rate)、信息传输率，表示的是单位时间内，总线上传输的信息量，
即每秒能够传输的二进制位的数量，单位是bit per second。
2）波特率：又叫做传码率、信号传输率，表示的是单位时间内传输的码元的数量，当两相调制时，
一个码元用一个二进制位表示，此时波特率在数值上和比特率是一样的，CAN总线正是两项调制这种情况。

Tips: 比特率和波特率并不是一回事儿，这一定一定要牢记。

1.2 位时间
------------
1.2.1 位时间的概念
位时间：表示的是一个二进制位在总线上传输时所需要的时间。
所以：
    位速率 = 1/位时间
首先了解以下CAN总线系统中的两个时钟：晶振时钟周期和CAN时钟周期

晶振时钟周期：是由单片机振荡器的晶振频率决定的，指的是振荡器每震荡一次所消耗的时间长度，也是整个系统中最小的时间单位。
CAN时钟周期：CAN时钟是由系统时钟分频而来的一个时间长度值，实际上就是一个时间份额Tq。可以按照下面的公式计算：
    CAN时钟周期 = 2×晶振时钟周期×BRP 
其中BRP叫做波特率预分频值（baudrate prescaler）。

1.2.2 位时间的分段
------------
如上文所述，在CAN的位定时中，一个CAN时钟周期称为一个时间量子 — Tq。
如下图所示：位时间分为四个段：同步段、传播段、相位缓冲段1、相位缓冲段2，总共8~25个时间量子（Tq）。

1）同步段（Synchronization Segment）：

    长度固定，1个时间量子Tq；
    一个位的传输从同步段开始；
    同步段用于同步总线上的各个节点，一个位的跳边沿在此时间段内。

2）传播段（Propagation Segment）：

    传播段用于补偿报文在总线和节点上传输时所产生的时间延迟；
    传播段时长 ≥ 2 × 报文在总线和节点上传输时产生的时间延迟 ；
    传播段时长可编程（1~8个时间量子Tq）。

3）相位缓冲段1（Phase Buffer Segment1）：

    用于补偿节点间的晶振误差；
    允许通过重同步对该段加长；
    在这个时间段的末端进行总线状态的采样；
    长度可编程（1~8个时间量子Tq）

4）相位缓冲段2（Phase Buffer Segment2）：

    用于补偿节点间的晶振误差；
    允许通过重同步对该段缩短；
    长度可编程（1~8个时间量子Tq）

于是
tBit=tSS+tPS+tPBS1+tPBS2

tBit:位时间
tSS:同步段时间
tPS:传播段时间
tPBS1:时间段1
tPBS2:时间段2


CAN的同步机制
-----------------------
在CAN通信中，有两种同步机制：硬同步与重同步。
2.1 同步的规则

☆ 一个位时间内只允许一种同步方式，要么硬同步要么重同步；
☆ 任何一个从“隐性”到“显性”的下降沿 都可以用于同步；
☆ 硬同步发生在报文的SOF位，所有接收节点调整各自当前位的同步段，使其位于发送的SOF位内；
☆ 重同步发生在一个报文SOF位之外的其它段，当下降沿落在了同步段之外时发生重同步；
☆ 在SOF到仲裁场发送的时间段内，如果有多个节点同时发送报文，那么这些发送节点对跳变沿不进行重同步

2.2 硬同步
-----------------------
硬同步发生在SOF位，所有接收节点调整各自当前位的同步段，调整宽度不限
（1）发送节点Node_A在发送SOF位时，SOF位的下降沿在SS段；
（2）这个时候接收节点Node_B发现自己当前位的SS段和发送节点SOF位的SS段不同步。也就是说当Node_A产生SOF位SS段时，Node_B的当前位的SS段已经在5个Tq之前产生了；
（3）于是接收节点Node_B强行将自己当前位的SS段拉到与SOF位的SS段同步。

2.3 重同步
-----------------------
重同步发生在一个报文SOF位之外的其它位场内，当接收节点Node_B当前位的下降沿落在了发送节点Node_A当前位的同步段之外时发生重同步。
重同步会导致相位缓冲段1的延长或者相位缓冲段2的缩短，从而保证采样点的准确。

2.3.1 PBS1延长
发的晚（慢），收的早（块），导致PBS1延长。


7 层：应用层  由实际应用程序提供可利用的服务。
6 层：表示层  进行数据表现形式的转换，如：文字设定、数据压缩、加密等的控制 
5 层：会话层  为建立会话式的通信，控制数据正确地接收和发送。 
4 层：传输层  控制数据传输的顺序、传送错误的恢复等，保证通信的品质。如：错误修正、再传输控制。
3 层：网络层  进行数据传送的路由选择或中继。如：单元间的数据交换、地址管理。
2 层：数据链路层  将物理层收到的信号（位序列）组成有意义的数据，提供传输错误控制等数据传输控制流程。
                  如：访问的方法、数据的形式。 
                  通信方式、连接控制方式、同步方式、检错方式。 
                  应答方式、通信方式、包（帧）的构成。 
                  位的调制方式（包括位时序条件）。
1 层：物理层      规定了通信时使用的电缆、连接器等的媒体、电气信号规格等，以实现设备间的信号传送。 
                  如：信号电平、收发器、电缆、连接器等的形态。 
