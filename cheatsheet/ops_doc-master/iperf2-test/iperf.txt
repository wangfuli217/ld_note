# https://iperf.fr/iperf-doc.php

# 官网
https://iperf.fr/

# 交叉编译 iperf 2.0
CC=/usr/local/arm/arm-2009q3/bin/arm-none-linux-gnueabi-gcc CXX=/usr/local/arm/arm-2009q3/bin/arm-none-linux-gnueabi-g++ ./configure --host=arm
src/Makefile      # gcc -static &&  g++ -static
compact/Makefile  # gcc -static &&  g++ -static


---------------------------------------
iPerf2 VS iPerf3
---------------------------------------

iPerf2 features currently supported by iPerf3 :
    TCP and UDP tests
    Set port (-p)
    Setting TCP options: No delay, MSS, etc.
    Setting UDP bandwidth (-b)
    Setting socket buffer size (-w)
    Reporting intervals (-i)
    Setting the iPerf buffer (-l)
    Bind to specific interfaces (-B)
    IPv6 tests (-6)
    Number of bytes to transmit (-n)
    Length of test (-t)
    Parallel streams (-P)
    Setting DSCP/TOS bit vectors (-S)
    Change number output format (-f)

New Features in iPerf 3.0 :
    Dynamic server (client/server parameter exchange) – Most server options from iPerf2 can now be dynamically set by the client
    Client/server results exchange
    A iPerf3 server accepts a single client simultaneously (multiple clients simultaneously for iPerf2)
    iPerf API (libiperf) – Provides an easy way to use, customize and extend iPerf functionality
    -R, Reverse test mode – Server sends, client receives
    -O, --omit N : omit the first n seconds (to ignore TCP slowstart)
    -b, --bandwidth n[KM] for TCP (only UDP for IPERF 2): Set target bandwidth to n bits/sec (default 1 Mbit/sec for UDP, unlimited for TCP).
    -V, --verbose : more detailed output than before
    -J, --json : output in JSON format
    -Z, --zerocopy : use a 'zero copy' sendfile() method of sending data. This uses much less CPU.
    -T, --title str : prefix every output line with this string
    -F, --file name : xmit/recv the specified file
    -A, --affinity n/n,m : set CPU affinity (cores are numbered from 0 - Linux and FreeBSD only)
    -k, --blockcount #[KMG] : number of blocks (packets) to transmit (instead of -t or -n)
    -4, --version4 : only use IPv4
    -6, --version6 : only use IPv6
    -L, --flowlabel : set IPv6 flow label (Linux only)
    -C, --linux-congestion : set congestion control algorithm (Linux and FreeBSD only) (-Z in iPerf2)
    -d, --debug : emit debugging output. Primarily (perhaps exclusively) of use to developers.
    -s, --server : iPerf2 can handle multiple client requests. iPerf3 will only allow one iperf connection at a time.

New Features in iPerf 3.1 :
    -I, --pidfile file write a file with the process ID, most useful when running as a daemon.
    --cport : Specify the client-side port.
    --sctp use SCTP rather than TCP (Linux, FreeBSD and Solaris).
    --udp-counters-64bit : Support very long-running UDP tests, which could cause a counter to overflow
    --logfile file : send output to a log file.

iPerf2 Features Not Supported by iPerf3 :
    Bidirectional testing (-d / -r)
    Data transmitted from stdin (-I)
    TTL : time-to-live, for multicast (-T)
    Exclude C(connection) D(data) M(multicast) S(settings) V(server) reports (-x)
    Report as a Comma-Separated Values (-y)
    Compatibility mode allows for use with older version of iPerf (-C)

---------------------------------------
iPerf2 help
---------------------------------------
Usage: iperf [-s|-c host] [options]
       iperf [-h|--help] [-v|--version]

Client/Server:
  -f, --format    [kmKM]   format to report: Kbits, Mbits, KBytes, MBytes
  -i, --interval  #        seconds between periodic bandwidth reports
  -l, --len       #[KM]    length of buffer to read or write (default 8 KB)
  -m, --print_mss          print TCP maximum segment size (MTU - TCP/IP header)
  -o, --output    <filename> output the report or error message to this specified file
  -p, --port      #        server port to listen on/connect to
  -u, --udp                use UDP rather than TCP
  -w, --window    #[KM]    TCP window size (socket buffer size)
  -B, --bind      <host>   bind to <host>, an interface or multicast address
  -C, --compatibility      for use with older versions does not sent extra msgs
  -M, --mss       #        set TCP maximum segment size (MTU - 40 bytes)
  -N, --nodelay            set TCP no delay, disabling Nagle's Algorithm
  -V, --IPv6Version        Set the domain to IPv6

Server specific:
  -s, --server             run in server mode
  -U, --single_udp         run in single threaded UDP mode
  -D, --daemon             run the server as a daemon

Client specific:
  -b, --bandwidth #[KM]    for UDP, bandwidth to send at in bits/sec
                           (default 1 Mbit/sec, implies -u)
  -c, --client    <host>   run in client mode, connecting to <host>
  -d, --dualtest           Do a bidirectional test simultaneously
  -n, --num       #[KM]    number of bytes to transmit (instead of -t)
  -r, --tradeoff           Do a bidirectional test individually
  -t, --time      #        time in seconds to transmit for (default 10 secs)
  -F, --fileinput <name>   input the data to be transmitted from a file
  -I, --stdin              input the data to be transmitted from stdin
  -L, --listenport #       port to recieve bidirectional tests back on
  -P, --parallel  #        number of parallel client threads to run
  -T, --ttl       #        time-to-live, for multicast (default 1)
  -Z, --linux-congestion <algo>  set TCP congestion control algorithm (Linux only)

Miscellaneous:
  -x, --reportexclude [CDMSV]   exclude C(connection) D(data) M(multicast) S(settings) V(server) reports
  -y, --reportstyle C      report as a Comma-Separated Values
  -h, --help               print this message and quit
  -v, --version            print version information and quit

[KM] Indicates options that support a K or M suffix for kilo- or mega-

The TCP window size option can be set by the environment variable
TCP_WINDOW_SIZE. Most other options can be set by an environment variable
IPERF_<long option name>, such as IPERF_BANDWIDTH.

Report bugs to <iperf-users@lists.sourceforge.net>



---------------------------------------
iPerf3 help
---------------------------------------
Usage: iperf3 [-s|-c host] [options]
       iperf3 [-h|--help] [-v|--version]

Server or Client:
  -p, --port      #         server port to listen on/connect to
  -f, --format   [kmgtKMGT] format to report: Kbits, Mbits, Gbits, Tbits
  -i, --interval  #         seconds between periodic throughput reports
  -F, --file name           xmit/recv the specified file
  -A, --affinity n/n,m      set CPU affinity
  -B, --bind      <host>    bind to the interface associated with the address <host>
  -V, --verbose             more detailed output
  -J, --json                output in JSON format
  --logfile f               send output to a log file
  --forceflush              force flushing output at every interval
  --timestamps    <format>  emit a timestamp at the start of each output line
                            (using optional format string as per strftime(3))
  -d, --debug               emit debugging output
  -v, --version             show version information and quit
  -h, --help                show this message and quit
Server specific:
  -s, --server              run in server mode
  -D, --daemon              run the server as a daemon
  -I, --pidfile file        write PID file
  -1, --one-off             handle one client connection then exit
  --server-bitrate-limit #[KMG][/#]   server's total bit rate limit (default 0 = no limit)
                            (optional slash and number of secs interval for averaging
                            total data rate.  Default is 5 seconds)
  --rsa-private-key-path    path to the RSA private key used to decrypt
                            authentication credentials
  --authorized-users-path   path to the configuration file containing user
                            credentials
Client specific:
  -c, --client    <host>    run in client mode, connecting to <host>
  -u, --udp                 use UDP rather than TCP
  --connect-timeout #       timeout for control connection setup (ms)
  -b, --bitrate #[KMG][/#]  target bitrate in bits/sec (0 for unlimited)
                            (default 1 Mbit/sec for UDP, unlimited for TCP)
                            (optional slash and packet count for burst mode)
  --pacing-timer #[KMG]     set the timing for pacing, in microseconds (default 1000)
  -t, --time      #         time in seconds to transmit for (default 10 secs)
  -n, --bytes     #[KMG]    number of bytes to transmit (instead of -t)
  -k, --blockcount #[KMG]   number of blocks (packets) to transmit (instead of -t or -n)
  -l, --length    #[KMG]    length of buffer to read or write
                            (default 128 KB for TCP, dynamic or 1460 for UDP)
  --cport         <port>    bind to a specific client port (TCP and UDP, default: ephemeral port)
  -P, --parallel  #         number of parallel client streams to run
  -R, --reverse             run in reverse mode (server sends, client receives)
  --bidir                   run in bidirectional mode.
                            Client and server send and receive data.
  -w, --window    #[KMG]    set window size / socket buffer size
  -C, --congestion <algo>   set TCP congestion control algorithm (Linux and FreeBSD only)
  -M, --set-mss   #         set TCP/SCTP maximum segment size (MTU - 40 bytes)
  -N, --no-delay            set TCP/SCTP no delay, disabling Nagle's Algorithm
  -4, --version4            only use IPv4
  -6, --version6            only use IPv6
  -S, --tos N               set the IP type of service, 0-255.
                            The usual prefixes for octal and hex can be used,
                            i.e. 52, 064 and 0x34 all specify the same value.
  --dscp N or --dscp val    set the IP dscp value, either 0-63 or symbolic.
                            Numeric values can be specified in decimal,
                            octal and hex (see --tos above).
  -L, --flowlabel N         set the IPv6 flow label (only supported on Linux)
  -Z, --zerocopy            use a 'zero copy' method of sending data
  -O, --omit N              omit the first n seconds
  -T, --title str           prefix every output line with this string
  --extra-data str          data string to include in client and server JSON
  --get-server-output       get results from server
  --udp-counters-64bit      use 64-bit counters in UDP test packets
  --repeating-payload       use repeating pattern in payload, instead of
                            randomized payload (like in iperf2)
  --username                username for authentication
  --rsa-public-key-path     path to the RSA public key used to encrypt
                            authentication credentials

[KMG] indicates options that support a K/M/G suffix for kilo-, mega-, or giga-

iperf3 homepage at: https://software.es.net/iperf/
Report bugs to:     https://github.com/esnet/iperf



---------------------------------------
Tuning a TCP connection
---------------------------------------
iperf -s -w 130k
iperf -c node2 -w 130k

iperf -s -w 300k
iperf -c node2 -w 300k
iperf -c node2 -w 300k -P 2

iperf -s -m


---------------------------------------
Tuning a UDP connection
---------------------------------------
iperf -s -u -i 1
iperf -s -u -l 32k -w 128k -i 1
iperf -c node2 -b 10m -l 32k -w 128k


---------------------------------------
Multicast
---------------------------------------
iperf -c 224.0.67.67 -u --ttl 5 -t 5
iperf -s -u -B 224.0.67.67 -i 1
iperf -s -u -B 224.0.67.67 -i 1


---------------------------------------
Using Representative Streams to measure bandwidth
---------------------------------------
The -F option is for file input.
The -I option is for input from stdin.
Client: $ iperf -c <server address> -F <file-name>
Client: $ iperf -c <server address> -I

---------------------------------------
Running the server as a daemon
---------------------------------------
Use the -D command line option to run the server as a daemon. Redirect the output to a file.
E.g. iperf -s -D > iperflog. 
This will have the iPerf Server running as a daemon and the server messages will be logged in the file iperfLog.


---------------------------------------
Using iPerf as a Service under Win32
---------------------------------------
-o outputfilename
    output the messages into the specified file
-s -D
    install iPerf as a service and run it
-s -R
    uninstall the iPerf service 

Examples:
iperf -s -D -o iperflog.txt
    will install the iPerf service and run it. Messages will be reported into "%windir%\system32\iperflog.txt"
iperf -s -R
    will uninstall the iPerf service if it is installed. 


