https://dupengair.github.io/2017/02/12/project-note-%E5%8D%8F%E8%AE%AE%E6%A0%88-TCP-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/

一、总体：
    报文发出后启动重传定时器，等待ack
    ack发出等待一段时间
    端到端校验和
    接收排序，丢弃重复数据
    cwnd和cnwnd
    ISN随时间变化

二、建链与拆链：

建链

    [发送SYN] SYN_SENT ->
    1. [收到SYN+ACK，发送ACK] ESTABLISHED               
    2. [只收到SYN, 再发送SYN+ACK] SYN_RCVD -> [收到ACK] ESTABLISHED
    
    注意：
服务端backlog满时，不对SYN做出回应，使得客户端尝试重发SYN以等待队列空闲，直到客户端的主动打开超时
    +客户端收到SYN+ACK并发送ACK后即认为连接成功，可以发送数据，此时数据有可能先于ACK到达服务端，服务端应缓存数据，等待ACK到达后才将新链接返回应用层
    +服务器在建链成功后才返回应用程序，因此应用程序无法拒绝客户端的主动打开

拆链

[发送FIN1] FIN_WAIT_1
1. [收到ACK] FIN_WAIT_2 -> [收到FIN2, 发送ACK] TIME_WAIT -> CLOSED
2. [收到FIN，发送ACK] CLOSING -> TIME_WAIT
注意：

2MSL
主动关闭方如果执行全关闭，需要在FIN_WAIT_2开启定时器，防止服务端不发FIN执行关闭动作
三、传输

经受时延，200ms~500ms应答ACK，NAGEL算法
Nagle算法：收集小分组一起确认
不适用于实时小数据类应用场景，如GUI，需关闭
滑动窗口：
扩大(右边右移)->应用程序读取接收buffer 缩小(左边右移)->收到新的数据
大小：带宽时延乘积 (全双工占满通道)
拥塞窗口：慢启动->从1个mss开始，每收到一个ack增大一个mss，直到cwnd与滑动窗口的最小值
紧急数据：
socket接口以带外数据OOB实现
tcp紧急指针指向下一个可用位置
TCP首部指出发送端已进入紧急模式，无论数据字节是否发出，URG紧急通知都会发送(数据流会因为TCP流量控制而停止，紧急通知总是无障碍的发送到对端TCP)，但紧急数据因为滑动窗口满而不随同发送
如果应用程序接口以紧急方式(带外数据MSG_OOB)发送多个字节，只有最后一个字节被认为是带外数据
发送端TCP往往发送多个含URG标志且紧急指针指向同一个数据字节的分节，但只有第一个到达的带外数据会通知到进程
读取：
两种方式：
默认单字节buffer额外保存，select返回异常，通过MSG_OOB标志读取，需要读完OOB再读过数据区，select才能捕捉下一次紧急指针
开启SO_OOBONLINE时，直接在接收缓冲区通过检查连接的带外标记读取
带外标记：
读操作总是停在带外标记上，无论缓冲区有多少数据
对于在线数据(SO_OOBONLINE选项开启)，如果下一个待读入的数据是OOB，则返回true。对于带外数据(SO_OOBONLINE选项关闭)，如果下一个待读入数据是OOB的下一个字节，则返回true
一个给定的TCP连接，只有一个带外标记，如果接收进程读入某个现有带外数据之前有新的带外数据到达，先前的标志就会丢失
拥塞处理：
超时：12次重传，指数避让，约9min后发送RST
快速重传：接收端收到失序报文，立即产生重复ACK。发送端收到3个重复ACK，重传丢失数据，即被确认的下一个数据包，发送端才知道，接收端无法确认。接下来执行拥塞避免。
允许重新分组发送较大的报文段，因为TCP按字节数确认
拥塞算法：
初始化cwnd=1，ssthresh=65535，拥塞发生时，如果是重复ack，ssthresh=当前窗口/2，如果是超时，cwnd=1，
每收到一个ack，增加cwnd，当cwnd<=sshresh时执行慢启动，然后进入拥塞避免
慢启动每收到一个ack，cwnd+=1mss，快速的指数增长，拥塞避免每收到一个ack，cwnd+=1/2cwnd,增加较慢
ICMP错误处理
源站抑制：慢启动，cwnd=1，ssthresh不变
主机/网络不可达：忽略，认为是暂时现象
糊涂窗口：接收端只通告少量数据，发送端只发送少量数据
避免：接收端只通告一个mss可用的窗口，发送端发送至少滑动窗口一半的数据量
四、定时器

persist：窗口关闭时，发送probe，避免接收端通知窗口可用的ack丢失，到时发送端死等
允许1字节数据，TCP总是允许发送已关闭窗口之后的1字节
每60s直到窗口打开
keep：检测半开放链接，2hour一次，异常时每75s一次，尝试10次
客户机崩溃：超时 -> connection time out
客户机重启：RST -> connection reset by peer
客户机正常，服务不可达：超时 -> connection unreachable
2MSL：30s
重传：12次重传，指数避让，约9min
FIN_WAIT_2：主动关闭方如果执行全关闭时防止服务端不发FIN
建立新连接：约75s