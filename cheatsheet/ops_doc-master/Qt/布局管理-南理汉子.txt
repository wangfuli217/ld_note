调用QWidget::setLayout()函数可以指定该widget使用什么样的布局方式。当某个widget被指定布局时，该布局将会自动的完成如下的动作：
    定位子widget的位置设置windows的默认大小设置windows的最小大小重新调整大小当如下部分更改时自动调整更新：
(1) 字号、text内容
(2) 显示/隐藏某widget
(3) 删除某widget

用Qt Designer设计表单有个好处，就是这些布局避免了编译、链接、循环运行。

QGraphicsAnchor(在QGraphicsAnchorLayout中表示两个item的锚点)；
QGraphicsAnchorLayout(在Graphics View中一个item链接到widget的锚点的布局)；
QBoxLayout(水平/垂直布局)；
QHBoxLayout(水平布局)；
QVBoxLayout(垂直布局)；
QFormLayout(表单布局)；
QGridLayout(网格布局)；
QLayout(布局的基类)；
QLayoutItem(布局中的抽象项目)；
QSpacerItem(布局中的空格)；
QWidgetItem(布局中的widget项目)；
QSizePolicy(布局策略，描述了水平/垂直布局时的策略)；
QStackedLayout(堆栈widget，同一时刻只有一个widget可显示)；
QButtonGroup(管理一堆按钮的容器)；
QGroupBox(有标题的组合框)； 为构建分组框提供了支持。分组框通常带有一个边框和一个标题栏
QStackedWidget(堆栈widget)；

QToolBox 类提供了一个列(选项卡式的)部件条目, 和QGroupBox有些相似地方
%% widgets/dialogs/standarddialogs

注意事项
    当你使用某个布局时，构建widget的时候不需要指定父对象(parent)。layout会自动的
为其重新分配父对象。layout不是父对象，widget只能令其他widget作为父对象，不可以将
layout作为父对象。


