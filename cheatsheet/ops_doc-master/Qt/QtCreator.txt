
1. 七种工作模式：欢迎、编辑(编写代码)、设计(GUI可视化编辑)、Debug(调试程序)、项目(项目参数配置)、分析(程序执行效率分析)、帮助。
2. 四个是构建调试区，由上到下依次是Qt套件选择、运行、调试运行和构建。
   设计按钮、项目按钮和构建调试区只有在打开或新建了项目之后才会变得可用。
   
2.1 第一个按钮是选择构建项目使用的 Qt 套件和构建目标程序的类型(Debug 或 Release)。
2.2 第二个是运行按钮，快捷键是 Ctrl+R，如果还没构建项目或刚修改了代码，直接点击运行的话，QtCreator 会自动构建生成新的目标程序并运行。
2.3 第三个是调试按钮，快捷键是 F5。调试程序之前，QtCreator 会自动构建生成最新的目标程序，并进入调试模式。在下一节专门讲解调试程序。
2.4 第四个是构建按钮，快捷键是 Ctrl+B，只构建最新的目标程序，但不运行。

   
3. QtCreator 下方的是定位工具和输出面板，在编写项目代码和运行、调试程序时会使用到。
4. 输出面板包括七个：问题(项目构建时的问题)、Search Results(搜索项目文件内容)、应用程序输出(运行和调试信息显示)、
    编译输出(编译、链接命令及其输出信息)、QML/JS Console(QML 命令窗口)、概要信息(项目信息摘要)、Version Control(版本控制系统)。

5. 新建项目 点击"新建 文件或项目"(快捷键 Ctrl+N)
新建项目对话框里有五类项目模板：
5.1 Application：Qt 应用程序，包括普通窗体程序和 QtQuick 程序。
5.2 Library：可以创建动态库、静态库以及 QtQuick 扩展插件、QtCreator 自身插件。
5.3 其他项目：可以创建单元测试项目、Qt4 设计师自定义控件、子目录项目等。
5.4 非 Qt 项目：可以创建纯 C 或 纯 C++ 项目。
5.5 导入项目：从版本控制系统管理的软件项目导入旧的项目。

6. 第一类 Application
6.1 Qt Widgets Application：普通窗体模板，传统基于部件的窗体界面程序。
6.2 Qt Quick Application：使用 QtQuick 设计界面的应用程序，编译得到二进制可执行程序。
6.3 Qt 控制台应用：因为 Qt 主要用于图形界面设计，这个控制台项目模板基本不用的。
6.4 Qt Quick UI：使用 QtQuick 设计的界面文件 *.qml ，项目不需要编译，而是使用 qmlscene 工具预览界面。

7. 子模板 Qt Widgets Application，开发普通的 Qt 窗体应用程序。
“Kit Selection”界面： 交叉编译和本地编译环境，或者静态链接环境
“类信息”设置界面：    
  QMainWindow：基于主窗口类的程序，一般用于较为复杂的应用程序，除了中央客户区界面，还可以包括菜单栏、工具栏、状态栏以及多个可停靠的 工具对话框等等。
  QWidget：最简单最基本的窗体程序，里面可以放置多个控件实现程序功能。
  QDialog：基于对话框的程序，对话框一般用于弹窗，也可以用于主界面显示。

Alt+0，可以控制边栏的显示和隐藏

8. 项目视图类型
边栏子窗口标题栏第一个控件是组合框，可以选择该子窗口的功能视图类型，目前可以选择 8 个视图类型：
    项目：即项目文件管理视图，可以选择项目里的文件进行编辑，包括 pro 文件也可以手动编辑。
    打开文档：当前已经打开的文件列表，文件名右边如果有 * 号，是该文件被修改了但尚未保存。
    书签：右击代码编辑器行号位置，看到“切换书签”，可以给代码行添加书签，方便跳转到该位置。
    文件系统：相当于系统里的文件资源管理器，可以查看项目文件夹在磁盘里的实际文件列表。
    类视图：可以查看项目里包含的类及相应源代码文件里的成员函数、成员变量。
    大纲：编辑器所显示的当前文件的大纲列表，如名字空间、类名、成员函数、成员变量等。
    类型层次：当前项目包含的类及其基类、派生类列表。
    Include Hierarchy：包含视图，显示当前项目里 *.h 、*.cpp 以及 Qt 类库头文件之间的包含关系。

9. 编辑区上方按钮
①和②：导航按钮“返回”和“前进”，这与网页浏览器的前进和后退按钮类似，可以在之前浏览的多个代码文件或一个代码文件里多个位置之间快速切换。
③：标识当前显示的文件是只读还是可写，一般都是可写的。
④：文件类型图标，当前显示文件的类型，这个控件其实是一个菜单按钮，点击可以弹出丰富的文件处理功能菜单，感兴趣的读者可以点开看看。
⑤：打开的文件名，可以在多个打开的文件之间选择切换，与边栏的“打开文档”视图是对应的。
⑥：关闭当前显示的文档。
⑦：选择符号，可以在当前显示的文件里多个函数、类、成员变量等之前快速切换，与边栏“大纲”视图是对应的。
⑧：为当前显示的文件添加额外的C++预处理指令，一般用不着。
⑨：编辑区光标的行号和列号。
⑩：代码编辑区分栏，可以增加多个编辑器窗口，显示多个打开的文档或显示较大源码文件的多个位置。



10 项目配置: 
10.1 Executable：可执行程序路径，或叫目标程序路径，生成的 exe 文件为
D:\QtProjects\ch02\build-hellocreator-Desktop_Qt_5_4_0_MinGW_32bit-Debug\debug\hellocreator.exe，
如果进入该路径，直接运行 exe 文件，那么 exe 文件默认是无法正常运行的，因为缺少运行时依赖的动态库和环境变量。
需要从开始菜单启动 Qt 命令行，然后从命令行启动 exe 才能正常运行。
10.2 Arguments：目标程序的命令行参数，可以在这里手动添加命令行参数，这样每次 QtCreator 启动目标程序时都会附加该参数。
10.3 Working directory：目标程序工作路径，这里需要特别注意，目标程序既不是从源代码路径启动，也不是从它自己的可执行程序路径启动，
    而是从工作路径启动，这个工作路径默认与影子构建路径一样。 因此，如果在程序代码里面使用相对路径操作文件，如 "data.db"，
    那么这个文件应该放到工作路径，这样目标程序从 QtCreator 启动时，才能找到相对路径里的文件。


file:/// 《QtCreator快速入门》 ppt
qt-opensource-windows-x86-mingw492-5.6.1-1.exe
opensource表示开源版本
windows-x86表示Windows 32位平台
mingw表示使用MinGW编译器
5.6.1-1是当前版本号


如果觉得字体太小，可以使用快捷键Ctrl +“+”(即同时按下Ctrl键和+号键)来放大字体，
使用Ctrl + “-”(减号)来缩小字体，或者使用Ctrl键+鼠标滚轮，
使用Ctrl+0(数字)可以使字体还原到默认大小。


窗口部件编辑模式(这是默认模式)、信号/槽编辑模式、伙伴编辑模式和Tab顺序编辑模式


发布
-------
    将release文件夹中的helloworld.exe复制过来，再去Qt安装目录的bin目录中将
libgcc_s_dw2-1.dll、libstdc++-6.dll、libwinpthread-1.dll、Qt5Core.dll、Qt5Gui.dll和Qt5Widgets.dll这6个文件复制过来，
另外，还需要将C:\Qt\Qt5.6.1\5.6\mingw49_32\plugins目录中的platforms文件夹复制过来（不要修改该文件夹名称），
里面只需要保留qwindows.dll文件即可

    若程序中使用了png以外格式的图片，在发布程序时就要将Qt安装目录下的plugins目录中的
imageformats文件夹复制到发布程序文件夹中，其中只要保留自己用到的文件格式的dll文件即可。
    例如用到了gif文件，那么只需要保留qgif.dll。
    而如果程序中使用了其他的模块，比如数据库，那么就要将plugins目录中的sqldrivers文件夹复制过来，
里面保留自己用到的数据库驱动。


icon
-------
RC_ICONS = myico.ico

自动补全
-----
    如果要输入一个很长的字符，比如setWindowTitle，那么可以直接输入swt三个字母
(就是setWindowTitle中首字母加其中的大写字母)来快速定位它，然后按下Enter按键就可以完成输入。
    也可以使用Ctrl+空格键来强制代码补全，需要注意它可能与使用的输入法的快捷键冲突。

uic –o ui_hellodialog.h hellodialog.ui 
qmake –project
这时在helloworld_2.pro文件中添加QT += widgets ，然后依次执行如下命令：
qmake
mingw32-make
cd release
helloworld_2.exe

greaterThan(QT_MAJOR_VERSION, 4): QT += widgets



 

