https://qtguide.ustclug.org/

######################################################################
# Automatically generated by qmake (3.0) ??? ?? 17 20:31:15 2015
######################################################################

QT+=widgets
TEMPLATE = app
TARGET = hellowidget
INCLUDEPATH += .

# Input
HEADERS += hellowidget.h
SOURCES += hellowidget.cpp main.cpp

第一句：
QT+=widgets
是我们在 qmake 命令里面指定添加的 QtWidgets 模块(即 widgets)，因为隐藏包含了 QtCore
(即 core)和 QtGui(即 gui)，所以不用手动添加 core 和 gui。

第二句：
TEMPLATE = app
这代表生成的目标程序类型模板，app 是可执行的应用程序，另外还可以生成静态库和动态库、
插件等等。一般大部分的模板都是 app 应用程序。

第三句：
TARGET = hellowidget
TARGET 指定目标程序的名字，在 Windows 系统里就是 hellowidget.exe，在 Linux 系统里可执行程序不需要扩展名，直接就叫 hellowidget。

第四句：
INCLUDEPATH += .
这句是将当前目录(.)添加到了包含路径(INCLUDEPATH)里，程序编译时除了从 Qt 库的包含路径，
还会从当前目录里寻找头文件，比如 hellowidget.h 就在当前文件夹里。

第五句：
至于 Qt 库的包含路径，qmake 自己默认就会添加，不需要我们操心的。
HEADERS += hellowidget.h
HEADERS 就是指定项目里的头文件。

第六句：
SOURCES += hellowidget.cpp main.cpp
SOURCES 就是指定项目里的源代码文件。


pro 文件可以通过 qmake 生成，或者手动编写 pro 文件也行。
qmake 又可以按照 pro 文件的内容生成 Makefile，然后使用 make 构建目标程序。
pro 文件是非常关键的项目管理和控制项目生成的文件，集成开发环境 QtCreator 就是采用 pro 文件管理和生成项目的


QT+=widgets
TEMPLATE = app
TARGET = hellouiwidget
INCLUDEPATH += .
# Input
HEADERS += hellouiwidget.h
FORMS += hello.ui
SOURCES += hellouiwidget.cpp main.cpp

hello.ui -> uic -> ui_hello.h -> 包含 -> hellouiwidget.h 

                  moc_hellouiwidget.cpp -> g++ -> moc_hellouiwidget.o  -> 
hellouiwidget.h   hellouiwidget.cpp     -> g++ -> hellouiwidget.o      -> hellouiwidget.exe
                  main.cpp              -> g++ -> main.o               -> 



CONFIG
  console
  c++11 //使用c++11的特性

QT += core gui //包含的模块
  greaterThan(QT_MAJOR_VERSION, 4): QT += widgets //大于Qt4版本 才包含widget模块

  
设置应用程序的图标，只需要修改 .pro 文件:
  Mac 使用 icns 图标: ICON = AppIcon.icns
  Windows 使用 ico 图标: RC_ICONS = AppIcon.ico
  图标和 .pro 文件在同一个目录即可

QT += sql




https://blog.csdn.net/liang19890820/article/details/51775652
Qt 之 pro 配置多个子工程/子模块
多工程
----------------------
    如果需要管理多工程（pro），比如：库工程、界面工程，其中，每一个工程均可单独编译成功，
但存在依赖关系。也就是说，lib2依赖于lib1，而UI依赖于lib2。
配置如下：
    配置TEMPLATE为subdirs设置多工程
    配置SUBDIRS，指定需要添加的工程模块
    配置CONFIG为ordered指定顺序编译
例如：
TEMPLATE = subdirs
#SUBDIRS += \
#    SubProject3 \
#    SubProject2 \
#    SubProject
SUBDIRS += $$PWD/SubProject3/SubProject3.pro \
           $$PWD/SubProject2/SubProject2.pro \
           $$PWD/SubProject/SubProject.pro
CONFIG += ordered

多模块
----------------------
    延续多工程，如果某一个工程功能比较多，我们必然要进行模块化。例如：界面工程包含：
登录界面、设置界面、主界面。。。这时，我们就可以使用pri模块化了。
include($$PWD/Login/Login.pri)
include($$PWD/Settings/Settings.pri)
include($$PWD/MainWindow/MainWindow.pri)


https://blog.csdn.net/liang19890820/article/details/51774724
注释
-------------
以“#”开始，到这一行结束。
快捷键：Ctrl + /

CONFIG
-------------
指定编译器选项和项目配置，值由qmake内部识别并具有特殊意义。
以下配置值控制编译标志：
选项                          说明
release                     项目以release模式构建。如果也指定了debug，那么最后一个生效。
debug                       项目以debug模式构建。
debug_and_release           项目准备以debug和release两种模式构建。
debug_and_release_target    此选项默认设置。如果也指定了debug_and_release，最终的debug和release构建在不同的目录。
build_all                   如果指定了debug_and_release，默认情况下，该项目会构建为debug和release模式。

autogen_precompile_source   自动生成一个.cpp文件，包含在.pro中指定的预编译头文件。
ordered                     使用subdirs模板时，此选项指定应该按照目录列表的顺序处理它们。
precompile_header           可以在项目中使用预编译头文件的支持。

warn_on                     编译器应该输出尽可能多的警告。如果也指定了warn_off，最后一个生效。
warn_off                    编译器应该输出尽可能少的警告。
exceptions                  启用异常支持。默认设置。
exceptions_off              禁用异常支持。
rtti                        启用RTTI支持。默认情况下，使用编译器默认。
rtti_off                    禁用RTTI支持。默认情况下，使用编译器默认。
stl                         启用STL支持。默认情况下，使用编译器默认。
stl_off                     禁用STL支持。默认情况下，使用编译器默认。
thread                      启用线程支持。当CONFIG包括qt时启用，这是缺省设置。
c++11                       启用c++11支持。如果编译器不支持c++11这个选项，没有影响。默认情况下，支持是禁用的。
c++14                       启用c++14支持。如果编译器不支持c++14这个选项，没有影响。默认情况下，支持是禁用的。
    当使用debug和release选项时(Windows下默认的)，该项目将被处理三次：一次生成一个”meta”Makefile，
另外两次生成Makefile.Debug和Makefile.Release。

    在后面的次数，build_pass和相应的debug或release添加到CONFIG选项。这使得它可以执行构建特定任务。
例如：
build_pass:CONFIG(debug, debug|release) {
    unix: TARGET = $$join(TARGET,,,_debug)
    else: TARGET = $$join(TARGET,,,d)
}

DEFINES
-------------
qmake添加这个变量的值作为编译器C预处理器宏(-D选项)。
例如：
DEFINES += USE_MY_STUFF
然后就可以在代码中使用：
#ifdef USE_MY_STUFF
    // TODO
#else
    // TODO
#endif
往往可以指定项目的特殊版本（比如：正式版、试用版）、对一些特殊功能模块（比如：加密狗）进行限制等。


DEPENDPATH
-------------
指定查看解决依赖关系的目录列表，当包含文件时使用。
例如：
DEPENDPATH += . forms include qrc sources

DESTDIR
-------------
指定在何处放置目标文件。
例如：
DESTDIR = ../../lib

FORMS
-------------
指定UI文件(参考： Qt Designer Manual)在编译前被uic处理。所有的构建这些UI文件所需的依赖、头文件和源文件都会自动被添加到项目中。
例如：
FORMS = mydialog.ui \
        mywidget.ui \
        myconfig.ui


HEADERS
-------------
指定项目中所有的头文件。
qmake会自动检测是头文件的类中是否需要moc，并增加适当的依赖关系和文件到项目中，来生成和链接moc文件。
例如：
HEADERS = myclass.h \
          login.h \
          mainwindow.h

INCLUDEPATH
-------------
指定编译项目时应该被搜索的#include目录。
例如：
INCLUDEPATH = c:/msdev/include d:/stl/include
如果路径包含空格，需要使用引号包含。
win32:INCLUDEPATH += "C:/mylibs/extra headers"
unix:INCLUDEPATH += "/home/user/extra headers"


LIBS
-------------
指定链接到项目中的库列表。如果使用Unix -l (library) 和 -L (library path) 标志，
在Windows上qmake正确处理库(也就是说，将库的完整路径传递给链接器)，库必须存在，qmake会寻找-l指定的库所在的目录。
例如：
win32:LIBS += c:/mylibs/math.lib
unix:LIBS += -L/usr/local/lib -lmath
如果路径包含空格，需要使用引号包含路径。
win32:LIBS += "C:/mylibs/extra libs/extra.lib"
unix:LIBS += "-L/home/user/extra libs" -lextra

MOC_DIR
-------------
指定来自moc的所有中间文件放置的目录（含Q_OBJECT宏的头文件转换成标准.h文件的存放目录）。
例如：
unix:MOC_DIR = ../myproject/tmp
win32:MOC_DIR = c:/myproject/tmp


OBJECTS_DIR
-------------
指定所有中间文件.o（.obj）放置的目录。
例如：
unix:OBJECTS_DIR = ../myproject/tmp
win32:OBJECTS_DIR = c:/myproject/tmp


QT
-------------
指定项目中使用Qt的模块。默认情况下，QT包含core和gui，以确保标准的GUI应用程序无需进一步的配置就可以构建。
如果想建立一个不包含Qt GUI模块的项目，可以使用“ -=”操作符。
下面一行将构建一个很小的Qt项目：
QT -= gui # 仅仅使用core模块
如果要创建一个界面，里面用到XML及网络相关的类，那么需要包含如下模块：
QT += core gui widgets xml network
    如果你的项目是一个Qt Designer插件，使用值uiplugin指定项目构建成库，但特定的Qt Designer插件支持，
请参考：Building and Installing the Plugin。



RCC_DIR
-------------
指定Qt资源编译器输出文件的目录（.qrc文件转换成qrc_*.h文件的存放目录）。
例如：
unix:RCC_DIR = ../myproject/resources
win32:RCC_DIR = c:/myproject/resources


RESOURCES
-------------
指定资源文件 (qrc) 的名称，参考：Qt之资源系统
例如：
RESOURCES += Resource/resource.qrc


RC_FILE
-------------
指定应用程序资源文件的名称。这个变量的值通常是由qmake或qmake.conf处理，很少需要进行修改。
例如：
RC_FILE += myapp.rc


RC_ICONS
-------------
仅适用于Windows，指定的图标应该包含在一个生成的.rc文件里。如果RC_FILE 和RES_FILE变量都没有设置这才可利用。
例如：
RC_ICONS = myapp.ico


SOURCES
-------------
指定项目中所有源文件。
例如：
SOURCES = myclass.cpp \
          login.cpp \
          mainwindow.cpp

TARGET
-------------
指定目标文件的名称。默认情况下包含的项目文件的基本名称。
例如：
TEMPLATE = app
TARGET = myapp
SOURCES = main.cpp
上面项目会生成一个可执行文件，Windows下为myapp.exe，Unix下为myapp。


TEMPLATE
-------------
模板变量告诉qmake为这个应用程序生成哪种makefile。

选项            说明
app             创建一个用于构建应用程序的Makefile（默认）。
lib             创建一个用于构建库的Makefile。
subdirs         创建一个用于构建目标子目录的Makefile，子目录使用SUBDIRS变量指定。
aux             创建一个不建任何东西的Makefile。如果没有编译器需要被调用来创建目标，比如你的项目使用解释型语言写的，使用此功能。注：此模板类型只能用于Makefile-based生成器。特别是，它不会工作在vcxproj和Xcode生成器。                                                 
vcapp           仅适用于Windows。创建一个Visual Studio应用程序项目。
vclib           仅适用于Windows。创建一个Visual Studio库项目。

例如：
TEMPLATE = lib
SOURCES = main.cpp
TARGET = mylib


TRANSLATIONS
-------------
指定包含用户界面翻译文本的翻译(.ts)文件列表。
例如：
TRANSLATIONS += Resource/myapp_zh.ts \
                Resource/myapp_en.ts

UI_DIR
-------------
指定来自uic的所有中间文件放置的目录（.ui文件转化成ui_*.h文件的存放目录）。
例如：
unix:UI_DIR = ../myproject/ui
win32:UI_DIR = c:/myproject/ui





申明及使用变量
DBFILE = $${PROJECTGROUP_PATH}/db/database.db

替换字符串
DBFILE = $$replace(DBFILE, /, \\);

调用系统命令
system("$${PROJECTGROUP_PATH}/clyyCopy.bat $${DBFILE} $${OUTPATH}")

编译输出目录
$$OUT_PWD

嵌入其他文件
include(../../defaults.pri)

增加源码
SOURCES += main.cpp

增加头文件
HEADERS  += ../../inc/New_SP1/clyymainwindows.h 

增加ui文件
FORMS    += ui/clyymainwindows.ui 

增加资源文件
RESOURCES += \
    clyy.qrc

设置编译输出程序名
TARGET

设置成功类型
TEMPLATE = app
app是应用程序
lib是动态链接库
subdirs是子目录项目

#是注释

增加模块
QT += core
注意，如果要修改私有的，需要增加类似
QT += core-private

增加子目录项目
SUBDIRS += src/New_SP1/New_SP1.pro

要求各个子项目按顺序编译，子目录的编译顺序在SUBDIRS中指明
CONFIG+=ordered

增加配置项
CONFIG +=

设置源码编码格式
CODECFORTR = UTF-8
CODECFORSRC = UTF-8

增加预定义
DEFINES += CLYY_5

增加C++11版本
QMAKE_CXXFLAGS += -std=c++11

增加头文件搜索路径
INCLUDEPATH += $$PROJECTGROUP_PATH/inc

增加库
LIBS += -L$$PWD/../build-dll-Desktop_Qt_5_5_1_MinGW_32bit-Debug/ -ldll

判断Qt版本
greaterThan(QT_MAJOR_VERSION, 4)

目标目录设置：
DESTDIR = PATH
注：编译后，会把链接成功的文件复制进指定文件夹，在调试的时候，也会运行此目录下的程序