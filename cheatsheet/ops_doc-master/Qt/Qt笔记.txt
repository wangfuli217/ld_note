1. QtCreator 是一个支持交叉编译的集成开发环境，支持多种界面和多种移动设备。 Linux MacOS Windows
2. QtCreator 使用Qt application框架进行设计开发程序。允许在一个平台上进行设计开发，在多个平台上运行。
3. QtCreator 能实现应用程序开发管理，实现从创建项目到部署应用程序。
4. QtCreator 为了能够构建和运行应用程序，QtCreator需要配置编译器。
5. QtCreator 使用 向导一步一步 创建项目
6. 应用程序的类型:  Qt Quick or HTML5 or Qt widgets 选择实现的语言:  C++ or JavaScript
7. 使用 版本控制工具 实现 保存源代码 而不保存 目标代码和中间代码
8. QtCreator 能够为不同项目设置不同的
9. 会话中支持  打开文件, 设置断点s, 计算表达式


http://mirrors.ustc.edu.cn/qtproject/
archive：各种Qt开发工具安装包，新旧都有（可以下载Qt开发环境和源代码）
community_releases：社区定制的Qt库，Tizen版Qt以及Qt附加源码包
development_releases：开发版，有新的和旧的不稳定版本，在Qt开发过程中的非正式版本
learning：有学习Qt的文档教程和示范视频
ministro：迷你版，目前是针对Android的版本
official_releases：正式发布版，是与开发版相对的稳定版Qt库和开发工具（可以下载Qt开发环境和源代码）
online：Qt在线安装源
snapshots：预览版，最新的开发测试中的Qt库和开发工具

archive 和 official_releases 两个目录都有最新的 Qt 开发环境安装包，
archive 目录里
  qt/，这是 Qt 开发环境的下载目录，我们刚说的 Qt 5 的大安装包就在这里面。
    qt/ 目录包含了所有的 Qt 版本，从 1.0 到目前的 5.5 。
    5.4.0 是完整的 Qt 库版本号，第一个数字 5 是大版本号(major)，第二个数字 4 是小版本号(minor)，第三个数字 0 是补丁号(patch)。
只要前面两个数字相同，Qt 库的特性就是一致的，最后的数字是对该版本的补丁更新。
     qt-opensource-windows-x86-mingw491_opengl-5.4.0.exe，其中 opensource 是指开源版本，
windows 是指开发环境的操作系统，x86 是指 32 位系统， mingw491 是指编译器环境，opengl 是指绘图驱动类型。
LTS(Long Term Support，长期支持版)


不同的操作系统都有对应的 Qt 开发环境安装包，根据自己操作系统选择其中一个下载就可以了：
① qt-opensource-windows-x86-mingw491_opengl-5.4.0.exe，这是 Windows 操作系统的安装包，编译 套件是 MinGW 工具集。
② qt-opensource-mac-x64-clang-5.4.0.dmg，这是苹果操作系统的安装包，编译套件是 Clang。
③ qt-opensource-linux-x86-5.4.0.run，这是 32 位 Linux 操作体统安装包，Linux 系统默认编译工具集是 GNU 套件。
④ qt-opensource-linux-x64-5.4.0.run，这是 64 位 Linux 操作系统安装包，也默认是 GNU 套件。
⑤ qt-everywhere-opensource-src-5.4.0.7z，这个不是安装包，是单纯的源代码压缩包，里面没有可执行文件，也没有开发环境。通常上面四 个开发环境安装包自带源代码，在安装时选中即可，所以一般不需要手动下载这个源代码包。

“Assistant” （Qt助手）是帮助文档查看工具，
“Designer” （Qt设计师）是图形界面可视化编辑工具
“Linguist”（Qt语言家）是多国语言翻译支持工具
Qt 5.4 for Desktop (MinGW 4.9 32bit)” 就是 Qt 开发命令行，配置好了 Qt 开发需要的环境变量，打开它我们就可以从命令行编译 Qt 程序。

QtStatic 静态库
http://www.qtcn.org/bbs/u/123401
https://pan.baidu.com/s/1sOFrkti69SCIb-hAZEfOXw


qmake       核心的项目构建工具，可以生成跨平台的 .pro 项目文件，并能依据不同操作系统和编译工具生成相应的 Makefile，
            用于构建可执行程序或链接库。
uic         User Interface Compiler，用户界面编译器，Qt 使用 XML 语法格式的 .ui 文件定义用户界面，uic 根据 .ui 文件
            生成用于创建用户界面的 C++ 代码头文件，比如 ui_*****.h 。
moc         Meta-Object Compiler，元对象编译器，moc 处理 C++ 头文件的类定义里面的 Q_OBJECT 宏，它会生成源代码文件，
            比如 moc_*****.cpp ，其中包含相应类的元对象代码，元对象代码主要用于实现 Qt 信号/槽机制、运行时类型定义、动态属性系统。
rcc         Resource Compiler，资源文件编译器，负责在项目构建过程中编译 .qrc 资源文件，将资源嵌入到最终的 Qt 程序里。
qtcreator   集成开发环境，包含项目生成管理、代码编辑、图形界面可视化编辑、 编译生成、程序调试、上下文帮助、
            版本控制系统集成等众多功能， 还支持手机和嵌入式设备的程序生成部署。
assistant   Qt 助手，帮助文档浏览查询工具，Qt 库所有模块和开发工具的帮助文档、示例代码等都可以检索到，是 Qt 开发必备神器，
           也可用于自学 Qt。
designer    Qt 设计师，专门用于可视化编辑图形用户界面（所见即所得），生成 .ui 文件用于 Qt 项目。
linguist    Qt 语言家，代码里用 tr() 宏包裹的就是可翻译的字符串，开发人员可用 lupdate 命令生成项目的待翻译字符串文件 .ts，
            用 linguist 翻译多国语言 .ts ，翻译完成后用 lrelease 命令生成 .qm 文件，然后就可用于多国语言界面显示。
qmlscene    在 Qt 4.x 里是用 qmlviewer 进行 QML 程序的原型设计和测试，Qt 5 用 qmlscene 取代了旧的 qmlviewer。新的
            qmlscene 另外还支持 Qt 5 中的新特性 scenegraph 。


创建项目
1. 文件分组
2. 添加构建步骤
3. 引入form和资源信息
4. 执行运行程序的配置

目前 Qt 的开源授权有两种，一种是 GPL 授权，另一种是 LGPL 授权(诺基亚收购后新增)

Qt4 时代主流的是传统部件（或叫控件）编程，所用的语言一般是 C++。
Qt5 将 QML 脚本编程提到与传统 C++ 部件编程相同的高度，力推 QML 界面编程，当然 QML 主要用于手机移动应用程序。
QML 包含大量使用手机移动设备的功能模块，比如基本部件(QtQuick模块)、GPS定位、渲染特效、蓝牙、NFC、WebkKit等等。


Applications
  Qt GUI Application
  Mobile Qt Application 
  Qt Quick Application (Built-in Elements)
  
  
https://blog.csdn.net/ieearth/article/details/77267219  QApplication


# Qt错误: 程序数据库管理器不匹配 请检查安装
C:\Program Files\Microsoft Visual Studio 10.0\VC\bin
C:\Program Files\Microsoft Visual Studio 10.0\Common7\Tools

解决方法：
　　到D:\VisualStudio2015\VC\bin目录下面拷贝mspdbsrv.exe、mspdb140.dll、mspdbcore.dll、mspdbst.dll到
D:\VisualStudio2015\Common7\IDE下面，或者到D:\VisualStudio2015\Common7\IDE目录下面拷贝mspdbsrv.exe、
mspdb140.dll、mspdbcore.dll、mspdbst.dll到D:\VisualStudio2015\VC\bin下面，总之就是让这两个文件夹中同时
含以上四个文件

# QtCreator常用快捷键
1）帮助文件：F1 （光标在函数名字或类名上，按 F1 即可跳转到对应帮助文档，查看其详细用法）
2）.h 文件和对应.cpp 文件切换：F4
3）编译并运行：Ctrl + R
4）函数声明和定义(函数调用和定义)切换：F2
5）代码注释取消注释：Ctrl + / （选中代码再按快捷键）
6）字体变大变小：Ctrl + 鼠标滚轮向上向下
7）移动代码：选中所要移动的代码 -> 按住 ctrl + shift -> 键盘方向键
8）查找替换关键字：ctrl + f
9）快速打开代码所在目录：编辑模式下 -> 选中项目文件 -> 右击 -> 选择“显示包含的目录”，即可显示项目所在目录（此方法同样可以打开代码文件所在目录）


Qt编程笔记
############################################
——解决方案
tr("&")
对字符串进行处理，使其翻译为其他语言的标记，建议用户可见的字符都使用。“&”为转义字符，其后的一个字符表示获取该对象热点的快捷键。

Q_OBJECT
只有加入了Q_OBJECT，你才能使用QT中的signal和slot机制（信号/槽）。

signals:
写在类中，在此宏后定义信号函数，定义了对象的功能。

slots:
写在类中，在此宏后定义槽函数，定义了对象的功能。

emit
激发信号，激发指定的信号函数（虚函数），调用其连接的槽函数（实函数）。
emit是Qt中的关键字，会被C++预处理器转换成标准的C++代码。

signal&slot
    当一个信号连接多个槽时，会以不确定的顺序调用这些槽。
    多个信号可以连接同一个槽
    一个信号可以连接另外一个信号，一个信号发射时，另一个也同时发射。
    连接可断开，disconnect(sender,SIGNAL(signal),receiver,SLOT(slot));
    连接会断开，当删除对象时，Qt会移除和这个对象相关的所有连接。
    多余参数会被忽略，当信号的参数比它所连接的槽的参数多，多余的参数会被忽略。
    不能在信号和槽的名字中包含参数名。
    可以有循环链接，但是要避免无限循环。

MainWindow
若要调用并显示一个界(MainWindow)，需要在main.cpp中添加如下代码。
MainWindow w;
w.show();

## Dialog
若要调用并显示一个对话框(Dialog)
    方案一
新建一个Dialog文件集合，然后在main.cpp中添加
#include<QApplication>
#include<QDialog>
#include"ui_XXXXX.h"
int main(int argc,char *argv[]){
  QApplication app(argc,argv);
  
  Ui::XXXXX ui;
  QDialog *myDialog = new QDialog;
  ui.setupUi(myDialog);
  myDialog->show();
  
  return app.exec()
}

    方案二
新建一个Dialog文件集合，在main.cpp中添加

#include<QApplication>
#include"XXXXX.h"
int main(int argc,char *argv[]){
  QApplication app(argc,argv);
  
  XXXXX *myDialog = new XXXXX;
  myDialog->show();
  
  return app.exec()
}
对于界面的代码写在XXXXX.cpp的初始化函数中（信号，槽，连接，检验器）。

## UI
若要采用UI快速设计模式，流程如下：

    在Qt Designer模式中设计GUI界面，在设计完成后保存设计。
    在XXXXX.cpp中使用ui->XXX来使用GUI设计中构造的实例。

文件用途说明：
​ XXXXX.h文件主要用于窗口中对象的信号与槽的声明，包含其他内容的声明。
​ XXXXX.cpp文件主要用于编写包含逻辑性的代码，包含信号与槽的连接。
​ XXXXX.ui文件主要保存UI界面的XML信息。
​ ui_XXXXX.h文件主要是UI设计后生成的文件，资源管理器中不可见。

Release
在Windows环境下需要打包应用程序才能在其他电脑上运行。
    首先需要IDE左下角电脑图标处选Release，然后点击绿色播放按钮，编译发布程序。
    在与项目文件夹中找到“build-*-Release”将XXXXX.exe复制到新的独立的目录。
    在“C:\Qt\Qt5.9.0\5.9\mingw53_32\bin”中找到“qtenv2.bat”
    运行后进入上述创建的目录，执行windeployqt XXXXX.exe
    程序会自动将程序需要的动态数据库复制在与exe同级路径下。
    采用安装包打包软件即可将这些文件合并为一个完整的安装包。
    或者将这些文件全部压缩发送，在另一台电脑上才能运行。

Hide Menu
    在UI设计界面中删除"menuBar""mainToolBar""statusBar"
    在"main.cpp"中将窗体的参数修改为
    MainWindow w;
    w.setWindowOpacity(1);
    w.setWindowFlags(Qt::FramelessWindowHint);
    w.setAttribute(Qt::WA_TranslucentBackground);
    w.show();


——API参数列表
QApplication
应用程序对象。必须使用一个QApplication对象来管理整个应用程序所用到的资源。
描述 	代码 	备注
构造 	QApplication myApp( argc, argv ); 	argc, argv不可缺少
关闭 	myApp.quit() 	关闭该应用程序的函数
结束 	myApp.exec() 	移交控制权给Qt

QPushButton
按钮对象。
描述 	代码 	备注
构造 	QPushButton *myButton = new QPushButton(tr("")); 	参数为需要显示的文字
默认 	myButton->setDefault(true/false); 	当前对话框的默认按钮
可用性 	myButton->setEnable(true/false); 	按钮是否可用
宽高 	myButton.resize(x,y); 	设定按钮的宽和高
加载 	myButton.show() 	加载并显示控件

QLabel
文本对象。参数：一个字符串作为显示内容。
描述 	代码 	备注
构造 	QLabel *myLabel = new QLabel(tr("")); 	参数为需要显示的文字
伙伴 	myLabel->setBuddy(...) 	参数为某实例，获得焦点后，焦点会转移到伙伴对象

QLineEdit
输入框对象。

QCheckBox
多选框对象。
描述 	代码 	备注
构造 	QcheckBox *myCheckBox = new QcheckBox(tr("")); 	参数为需要显示的文字
状态 	myCheckBox->isChecked() 	选中为True
可用性 	myCheckBox->setEnabled(true/false) 	

QGridLayout
格栅布局，多行多列，可调比例，自动调整父对象。
描述 	代码 	备注
构造 	QGridLayout *myGLayout = new QGridLayout(); 	初始化一个多行多列格栅布局
添加 	myQLayout->addWidgent(...) 	将部件对象添加至布局
应用 	setLayout(myGLayout) 	将布局应用在当前窗口

QHBoxLayout
垂直布局，被添加对象在垂直方向排列，排列顺序按照添加顺序排布，自动调整父对象。
描述 	代码 	备注
构造 	QHBoxLaout *myQLayout = new QHBoxLaout 	新建布局
添加 	myQLayout->addWidgent(...) 	将部件对象添加至垂直布局
空白 	myQLayout->addStretch(x) 	占位，参数可选，参数为比例

QVBoxLayout
水平布局，被添加对象在水平方向排列，排列顺序按照添加顺序排布，自动调整父对象。
描述 	代码 	备注
构造 	QVBoxLayout *myVLayout = new QVBoxLayout 	新建布局
添加 	myVLayout->addWidgent(...) 	将部件对象添加至水平布局
空白 	myQLayout->addStretch(x) 	占位，参数可选，参数为比例

QObject::connect()
连接函数，将信号与槽之间连接在一起。
connect(sender,SIGNAL(signal),receiver,SLOT(slot));
描述 	描述
sender 	发出信号的对象
SIGNAL() 	发出信号的函数
receive 	含有槽的对象
SLOT() 	信号对应的槽

QWidget::getTabOrder()
调整Tab按钮遍历顺序

# QT 居中显示.md
QApplication::desktop()->width() 获取桌面width
QApplication::desktop()->height() 获取桌面height
w.move ((QApplication::desktop()->width() - w.width())/2, (QApplication::desktop()->height() - w.height())/2);

1. ```dialog -> show();```显示当前窗口 
2. ```dialog ->setWindowFlags(windowFlags() | Qt::WindowStaysOnTopHint);```当前窗口显示在最前端 
3. ```lineEdit -> text();```获取当前lineEdit中的字符串，一般为QString类型 
4. ```label -> setText(QString);```将当前label中显示的文字设定为括号中的QString 
5. ```closed()```关闭当前窗口 
6. ```setVisible(bool)```设置当前控件可见 
7. ```ListWidget ->clear()```清空列表控件 
8. ```lineEdit ->text().toInt()```将lineEdit中的字符串转为整数 
9. ```QString.length()```得到QString字符串的长度 
10. ```QString[i].toAscii()```将QString中的一个字符转换为相应的ASCII码 
11. ```ListWidget ->addItem(new QListWidgetItem(QString))```在ListWidget列表控件里添加一行 
12. ```remove(filename)```C++的标准函数，包含在"stdio.h"头文件里，用来删除文件 
13. ```TextEdit->setTextUnderline(true)```表示在以下TextEdit显示的内容下面加下划线，使用完成后，用```TextEdit->setTextUnderline(false)```关闭


# Qt 开源项目
https://github.com/visualfc/liteide Go编辑器
https://github.com/clementine-player/Clementine 音乐播放器
https://github.com/wang-bin/QtAV FFmpeg的Qt封装，国人的作品
https://github.com/qTox/qTox     功能强大的IM客户端
https://github.com/LiveHelperChat/livehelperchat 基于XMPP 协议的聊天客户端
https://github.com/cloose/CuteMarkEd  Qt开发的Markdown编辑器
https://github.com/AlloyTeam/Rythem Qt版的fiddler
https://github.com/nitroshare/nitroshare-desktop 网络文件传输客户端

https://www.zhihu.com/question/50625217

http://www.qter.org/portal.php?mod=list&catid=18