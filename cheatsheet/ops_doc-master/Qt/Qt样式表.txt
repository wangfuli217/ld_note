https://zhuanlan.zhihu.com/p/28472916

https://zhuanlan.zhihu.com/p/36473329  # 样式表使用方法小结

2 选择器和声明

QPushButton { color: red }
QPushButton, QLineEdit, QComboBox { color: red }     # 逗号分隔
QPushButton { color: red; background-color: white }  # 分号隔开

3. 子控件
    Qt的很多控件，其实是由很多小的子控件组成的，例如QComboBox下拉列表有下拉菜单的小按钮，
那如果想要设置这些子控件，可以使用下面的语法：
QComboBox::drop-down { image: url(dropdown.png) }
这设置了下拉按钮的图案为dropdown.png。

4. 控件状态
QPushButton:hover { color: white }
鼠标悬停时，按钮文字变成白色

QRadioButton:!hover { color: red }
感叹号表示非，鼠标处于非悬停状态时，文字为红色

QCheckBox:hover:checked { color: white }
如果状态之间可以表示“与”的关系，就可以使用多个冒号连接起来，该示例表示悬停且为被勾选状态时，文字为白色。

QCheckBox:hover, QCheckBox:checked { color: white }
表示“或”关系，用逗号连接

QComboBox::drop-down:hover { image: url(dropdown_bright.png) }
对子控件进行设置


5 选择器
5.1 类型选择器
QComboBox{background-color:white;}
设置QComboBox及其子类的背景颜色为白色。

只设置了QFrame的背景颜色，所以QFrame的背景颜色被改变，QLabel是控件树中QFrame的儿子，背景颜色也改变。

QComboBox背景色还是白色。

5.2 通用选择器
通用选择器使用“*”，匹配所有控件。
*{color:blue;}

5.3 组选择器
如果想要为多种类型的控件设置同样的样式，则可以使用组选择器，类型之间使用逗号隔开
QPushButton, QLineEdit, QComboBox { color: red }     # 逗号分隔

5.4 后代选择器
有时，用户希望选择器匹配控件树中另一个控件的后代(例如，“匹配由QFrame包含的QComboBox”)。祖先与后代之间用空格隔开。
QGroupBox QComboBox{background-color:red;}
QGroupBox是祖先，QComboBox是后代，QComboBox包含在QGroupBox控件中。

6. 属性选择器
属性选择符有四种匹配方式，属性值必须是标识符或字符串:

属性匹配[att]
当控件设置“att”属性时匹配，无论该属性的值是多少。


完全匹配[att = val]
当控件的“att”属性值完全为“val”时匹配。


部分值匹配[att ~ = val]
当控件的“att”属性值是空格分隔的“单词”列表时，其中一个就是“val”时就可匹配。如果使用此选择器，则该值中的单词必须不包含空格(因为它们是由空格分隔的)。


[att | = val]
当控件的“att”属性值是一个连字符(“-”)分隔的“单词”列表时，以“val”开头。匹配总是从属性值的开始处开始




