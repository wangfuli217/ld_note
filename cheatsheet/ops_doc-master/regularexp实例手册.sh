
regex(用一个"字符串"来描述一个特征，然后去验证另一个"字符串"是否符合这个特征。){
1. 验证字符串是否符合指定特征，比如验证是否是合法的邮件地址。
2. 用来查找字符串，从一个长的文本中查找符合指定特征的字符串，比查找固定字符串更加灵活方便。
3. 用来替换，比普通的替换更强大。
注：区分大小写 
    多行模式
}

正则表达式: 一些用来匹配和处理文本的字符串。 PERL grep awk sed.
regex(普通字符){
    字母、数字、汉字、下划线、以及后边章节中没有特殊定义的标点符号，都是"普通字符"。表达式中的普通字符，
在匹配一个字符串的时候，匹配与之相同的一个字符。

举例1：表达式 "c"，在匹配字符串 "abcde" 时，匹配结果是：成功；匹配到的内容是："c"；匹配到的位置是：开始于2，结束于3。（注：下标从0开始还是从1开始，因当前编程语言的不同而可能不同）
举例2：表达式 "bcd"，在匹配字符串 "abcde" 时，匹配结果是：成功；匹配到的内容是："bcd"；匹配到的位置是：开始于1，结束于4。
}
regex(简单的转义字符){
# 表达式      可匹配
#---------------------------------
# \r, \n      代表回车和换行符
# \t          制表符
# \\          代表 "\" 本身
#---------------------------------
# \^          匹配 ^ 符号本身
# \$          匹配 $ 符号本身
# \.          匹配小数点（.）本身
表达式 "\$d"，在匹配字符串 "abc$de" 时，匹配结果是：成功；匹配到的内容是："$d"；匹配到的位置是：开始于3，结束于5。
}
regex(能够与 '多种字符' 匹配的表达式){
表达式         可匹配
\d              任意一个数字，0~9 中的任意一个
\w              任意一个字母或数字或下划线，也就是 A~Z,a~z,0~9,_ 中任意一个
\s              包括空格、制表符、换页符等空白字符的其中任意一个
.               小数点可以匹配除了换行符（\n）以外的任意一个字符

表达式 "\d\d"，在匹配 "abc123" 时，匹配的结果是：成功；匹配到的内容是："12"；匹配到的位置是：开始于3，结束于5。
表达式 "a.\d"，在匹配 "aaa100" 时，匹配的结果是：成功；匹配到的内容是："aa1"；匹配到的位置是：开始于1，结束于4。
}
regex(自定义能够匹配 '多种字符' 的表达式){
表达式     可匹配
[ab5@]      匹配 "a" 或 "b" 或 "5" 或 "@"
[^abc]      匹配 "a","b","c" 之外的任意一个字符
[f-k]       匹配 "f"~"k" 之间的任意一个字母
[^A-F0-3]   匹配 "A"~"F","0"~"3" 之外的任意一个字符

表达式 "[bcd][bcd]" 匹配 "abc123" 时，匹配的结果是：成功；匹配到的内容是："bc"；匹配到的位置是：开始于1，结束于3。
表达式 "[^abc]" 匹配 "abc123" 时，匹配的结果是：成功；匹配到的内容是："1"；匹配到的位置是：开始于3，结束于4。
}
regex(修饰匹配次数的特殊符号){
{n}     表达式重复n次，比如：点击测试 "\w{2}" 相当于 "\w\w"；点击测试 "a{5}" 相当于 "aaaaa"
{m,n}   表达式至少重复m次，最多重复n次，比如：点击测试 "ba{1,3}"可以匹配 "ba"或"baa"或"baaa"
{m,}    表达式至少重复m次，比如：点击测试 "\w\d{2,}"可以匹配 "a12","_456","M12344"...
?       匹配表达式0次或者1次，相当于 {0,1}，比如：点击测试 "a[cd]?"可以匹配 "a","ac","ad"
+       表达式至少出现1次，相当于 {1,}，比如：点击测试 "a+b"可以匹配 "ab","aab","aaab"...
*       表达式不出现或出现任意次，相当于 {0,}，比如：点击测试 "\^*b"可以匹配 "b","^^^b"...

表达式 "\d+\.?\d*" 在匹配 "It costs $12.5" 时，匹配的结果是：成功；匹配到的内容是："12.5"；匹配到的位置是：开始于10，结束于14。
表达式 "go{2,8}gle" 在匹配 "Ads by goooooogle" 时，匹配的结果是：成功；匹配到的内容是："goooooogle"；匹配到的位置是：开始于7，结束于17。
}
regex(其他一些代表抽象意义的特殊符号){
表达式     作用
^           与字符串开始的地方匹配，不匹配任何字符
$           与字符串结束的地方匹配，不匹配任何字符
\b          匹配一个单词边界，也就是单词和空格之间的位置，不匹配任何字符

表达式 "^aaa" 在匹配 "xxx aaa xxx" 时，匹配结果是：失败。因为 "^" 要求与字符串开始的地方匹配，因此，只有当 "aaa" 位于字符串的开头的时候，"^aaa" 才能匹配，点击测试 比如："aaa xxx xxx"。
表达式 "aaa$" 在匹配 "xxx aaa xxx" 时，匹配结果是：失败。因为 "$" 要求与字符串结束的地方匹配，因此，只有当 "aaa" 位于字符串的结尾的时候，"aaa$" 才能匹配，点击测试 比如："xxx xxx aaa"。
表达式 ".\b." 在匹配 "@@@abc" 时，匹配结果是：成功；匹配到的内容是："@a"；匹配到的位置是：开始于2，结束于4。
表达式 "\bend\b" 在匹配 "weekend,endfor,end" 时，匹配结果是：成功；匹配到的内容是："end"；匹配到的位置是：开始于15，结束于18。

表达式     作用
|           左右两边表达式之间 "或" 关系，匹配左边或者右边
( )         (1). 在被修饰匹配次数的时候，括号中的表达式可以作为整体被修饰
            (2). 取匹配结果的时候，括号中的表达式匹配到的内容可以被单独得到
            
表达式 "Tom|Jack" 在匹配字符串 "I'm Tom, he is Jack" 时，匹配结果是：成功；匹配到的内容是："Tom"；匹配到的位置是：开始于4，结束于7。匹配下一个时，匹配结果是：成功；匹配到的内容是："Jack"；匹配到的位置时：开始于15，结束于19。
表达式 "(go\s*)+" 在匹配 "Let's go go go!" 时，匹配结果是：成功；匹配到内容是："go go go"；匹配到的位置是：开始于6，结束于14。
表达式 "￥(\d+\.?\d*)" 在匹配 "＄10.9,￥20.5" 时，匹配的结果是：成功；匹配到的内容是："￥20.5"；匹配到的位置是：开始于6，结束于10。单独获取括号范围匹配到的内容是："20.5"。
}
regex(匹配次数中的贪婪与非贪婪){
1. 贪婪
表达式     匹配结果
(d)(\w+)    "\w+" 将匹配第一个 "d" 之后的所有字符 "xxxdxxxd"
(d)(\w+)(d) "\w+" 将匹配第一个 "d" 和最后一个 "d" 之间的所有字符 "xxxdxxx"。虽然 "\w+" 也能够匹配上最后一个 "d"，但是为了使整个表达式匹配成功，"\w+" 可以 "让出" 它本来能够匹配的最后一个 "d"
2. 非贪婪
表达式        匹配结果
(d)(\w+?)    "\w+?" 将尽可能少的匹配第一个 "d" 之后的字符，结果是："\w+?" 只匹配了一个 "x"
(d)(\w+?)(d) 为了让整个表达式匹配成功，"\w+?" 不得不匹配 "xxx" 才可以让后边的 "d" 匹配，从而使整个表达式匹配成功。因此，结果是："\w+?" 匹配 "xxx"

表达式 "<td>(.*)</td>" 与字符串 "<td><p>aa</p></td> <td><p>bb</p></td>" 匹配时，匹配的结果是：成功；匹配到的内容是 "<td><p>aa</p></td> <td><p>bb</p></td>" 整个字符串， 表达式中的 "</td>" 将与字符串中最后一个 "</td>" 匹配。
相比之下，表达式 "<td>(.*?)</td>" 匹配举例1中同样的字符串时，将只得到 "<td><p>aa</p></td>"， 再次匹配下一个时，可以得到第二个 "<td><p>bb</p></td>"。
}
regex(反向引用){
# 表达式在匹配时，表达式引擎会将小括号 "( )" 包含的表达式所匹配到的字符串记录下来。在获取匹配结果的时候，小括号包含的表达式所匹配到的字符串可以单独获取。
# 引用方法是 "\" 加上一个数字。"\1" 引用第1对括号内匹配到的字符串，"\2" 引用第2对括号内匹配到的字符串……以此类推，如果一对括号内包含另一对括号，则外层的括号先排序号。换句话说，哪一对的左括号 "(" 在前，那这一对就先排序号。

# 表达式 "('|")(.*?)(\1)" 在匹配 " 'Hello', "World" " 时，匹配结果是：成功；匹配到的内容是：" 'Hello' "。再次匹配下一个时，可以匹配到 " "World" "
# 表达式 "(\w)\1{4,}" 在匹配 "aa bbbb abcdefg ccccc 111121111 999999999" 时，匹配结果是：成功；匹配到的内容是 "ccccc"。再次匹配下一个时，将得到 999999999。这个表达式要求 "\w" 范围的字符至少重复5次，点击测试 注意与 "\w{5,}" 之间的区别。
# 表达式 "<(\w+)\s*(\w+(=('|").*?\4)?\s*)*>.*?</\1>" 在匹配 "<td id='td1' style="bgcolor:white"></td>" 时，匹配结果是成功。如果 "<td>" 与 "</td>" 不配对，则会匹配失败；如果改成其他配对，也可以匹配成功。

}
regex(预搜索，不匹配；反向预搜索，不匹配){

}
regex(其他通用规则){
3.1 表达式中，可以使用 "\xXX" 和 "\uXXXX" 表示一个字符（"X" 表示一个十六进制数）
形式      字符范围
\xXX        编号在 0 ~ 255 范围的字符，比如：点击测试 空格可以使用 "\x20" 表示
\uXXXX      任何字符可以使用 "\u" 再加上其编号的4位十六进制数表示，比如：点击测试 "\u4E2D"
3.2 在表达式 "\s"，"\d"，"\w"，"\b" 表示特殊意义的同时，对应的大写字母表示相反的意义
表达式     可匹配
\S          匹配所有非空白字符（"\s" 可匹配各个空白字符）
\D          匹配所有的非数字字符
\W          匹配所有的字母、数字、下划线以外的字符
\B          匹配非单词边界，即左右两边都是 "\w" 范围或者左右两边都不是 "\w" 范围时的字符缝隙

3.3 在表达式中有特殊意义，需要添加 # "\" 才能匹配该字符本身的字符汇总
字符      说明
^           匹配输入字符串的开始位置。要匹配 "^" 字符本身，请使用 "\^"
$           匹配输入字符串的结尾位置。要匹配 "$" 字符本身，请使用 "\$"
( )         标记一个子表达式的开始和结束位置。要匹配小括号，请使用 "\(" 和 "\)"
[ ]         用来自定义能够匹配 '多种字符' 的表达式。要匹配中括号，请使用 "\[" 和 "\]"
{ }         修饰匹配次数的符号。要匹配大括号，请使用 "\{" 和 "\}"
.           匹配除了换行符（\n）以外的任意一个字符。要匹配小数点本身，请使用 "\."
?           修饰匹配次数为 0 次或 1 次。要匹配 "?" 字符本身，请使用 "\?"
+           修饰匹配次数为至少 1 次。要匹配 "+" 字符本身，请使用 "\+"
*           修饰匹配次数为 0 次或任意次。要匹配 "*" 字符本身，请使用 "\*"
|           左右两边表达式之间 "或" 关系。匹配 "|" 本身，请使用 "\|"
3.4 括号 "( )" 内的子表达式，如果希望匹配结果不进行记录供以后使用，可以使用 "(?:xxxxx)" 格式
}