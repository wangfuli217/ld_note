#!/usr/bin/env bash
#
# bash-utils - A *bash* library for better scripting
# <http://github.com/e-picas/bash-utils>
# Copyright (c) 2015 Pierre Cassat & contributors
#
# This program is free software: you can freely use it, redistribute it
# and/or modify it according to your needs, for yourself or a commercial use,
# under the terms of the Apache License version 2.0 (the "License") as
# published by the Apache Software Foundation.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# The sources of this program are hosted on a public repository.
# You can modify it, to ameliorate a feature or correct an error,
# inform about a bug and follow updates at <http://github.com/e-picas/bash-utils>.
#
# You should have received a copy of the License along with this program ;
# please see the LICENSE file that was distributed with this source code.
# If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
#
# --------
#
# bash-utils:   this is the "entry point" of the Bash-Utils library
#               it should be available in one of the `$PATH` paths for all users
#               it acts like a loader of the library and a basic command which transmits the run to children & modules
#               it also acts like a script's interpreter
#
set -e

# include required lib & load bash-utils env
getapplibexec() {
    local cwd="$(pwd)"
    local path="$1"
    while [ -n "$path" ]; do
        cd "${path%/*}" 2>/dev/null; local name="${path##*/}"; path="$($(type -p greadlink readlink | head -1) "$name" || true)";
    done
    pwd
    cd "$cwd"
}
appfile="$(getapplibexec "${BASH_SOURCE[0]}")/bash-utils-core"
if [ ! -f "$appfile" ]; then echo "> ${BASH_SOURCE[0]}:${LINENO}: required file '$appfile' not found!" >&2; exit 1; fi
source "$appfile"

# direct options if so
while [ $# -gt 0 ]; do
    case "$1" in
        -f | --force )  FORCE=true;;
        -q | --quiet )  QUIET=true; VERBOSE=false;;
        -v | --verbose ) VERBOSE=true; QUIET=false;;
        -x | --debug )  DEBUG=true;;
        --dry-run )     DRY_RUN=true;;
        * ) break;;
    esac
    shift
done

# transmit the process to called script or module
defaultcmd="${BASH_UTILS_ROOT}/bash-utils-cmd"
cmd=''
if [ $# -gt 0 ] && [ -f "$1" ]; then
    cmd="$1"
    shift
    if (module_exists "$(basename "$cmd")" 2>/dev/null || false); then
        CMD_MODULE="$(basename "$cmd")"
    fi
elif [ $# -gt 0 ] && (module_exists "$1" 2>/dev/null || false); then
    cmd="$(find_module "$1")"
    CMD_MODULE="$1"
    shift
elif [ "$(basename "$0")" = "$(basename "${BASH_SOURCE[0]}")" ]; then
    cmd="$defaultcmd"
fi
[ -n "$CMD_MODULE" ] && load_module_info "$CMD_MODULE";
[ -n "$cmd" ] && [ -f "$cmd" ] && source "$cmd" "$@";

[ "$(basename "$0")" = "$(basename "${BASH_SOURCE[0]}")" ] && exit 0 || return 0;
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=sh
