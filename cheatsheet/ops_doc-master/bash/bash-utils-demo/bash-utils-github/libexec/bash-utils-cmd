#!/usr/bin/env bash
#
# bash-utils - A *bash* library for better scripting
# <http://github.com/e-picas/bash-utils>
# Copyright (c) 2015 Pierre Cassat & contributors
#
# This program is free software: you can freely use it, redistribute it
# and/or modify it according to your needs, for yourself or a commercial use,
# under the terms of the Apache License version 2.0 (the "License") as
# published by the Apache Software Foundation.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# The sources of this program are hosted on a public repository.
# You can modify it, to ameliorate a feature or correct an error,
# inform about a bug and follow updates at <http://github.com/e-picas/bash-utils>.
#
# You should have received a copy of the License along with this program ;
# please see the LICENSE file that was distributed with this source code.
# If not, see <http://www.apache.org/licenses/LICENSE-2.0>.
#
# --------
#
# bash-utils-cmd:   this is the default Bash-Utils library command
#                   it handles default parameters and actions of Bash-Utils when you call it directly
#
set -e

[ -z "$BASH_UTILS_VERSION" ] && { \
    source "$(dirname "${BASH_SOURCE[0]}")/bash-utils-core" || \
        { echo "> ${BASH_SOURCE[0]}:${LINENO}: bash-utils-core not found!" >&2; exit 1; }; \
};

#### Bash-Utils command ####

CMD_NAME="$BASH_UTILS_NAME"
CMD_VERSION="$BASH_UTILS_VERSION"
CMD_COPYRIGHT="$BASH_UTILS_COPYRIGHT"
CMD_LICENSE="$BASH_UTILS_LICENSE"
CMD_SOURCES="$BASH_UTILS_SOURCES"
CMD_DESCRIPTION="$BASH_UTILS_DESCRIPTION"
CMD_SYNOPSIS="$BASH_UTILS_SYNOPSIS"
CMD_USAGE="$BASH_UTILS_USAGE"
CMD_HELP="$BASH_UTILS_HELP";
CMD_OPTS_SHORT=("${BASH_UTILS_OPTS_SHORT[@]}")
CMD_OPTS_LONG=("${BASH_UTILS_OPTS_LONG[@]}")
CMD_ARGS=("${BASH_UTILS_ARGS[@]}")
TO_DEBUG[${#TO_DEBUG[@]}]=BASH_UTILS_KEY
TO_DEBUG[${#TO_DEBUG[@]}]=BASH_UTILS_VERSION
TO_DEBUG[${#TO_DEBUG[@]}]=BASH_UTILS
TO_DEBUG[${#TO_DEBUG[@]}]=BASH_UTILS_ROOT
TO_DEBUG[${#TO_DEBUG[@]}]=BASH_UTILS_MODULES
set_env_array CMD_OPTS_SHORT CMD_OPTS_SHORT[@]
set_env_array CMD_OPTS_LONG CMD_OPTS_LONG[@]
set_env_array CMD_ARGS CMD_ARGS[@]
set_env_array TO_DEBUG TO_DEBUG[@]

[ $# -eq 0 ] && usage_info && exit 1;
rearrange_options "$@"
[ -n "$CMD_REQ" ] && eval set -- "$CMD_REQ";
common_options "$@"
read_from_pipe
while [ $# -gt 0 ]; do
    case "$1" in
        -e | --exec* )
            OPTARG="$(echo "$2" | cut -d'=' -f2)"
            arg="${OPTARG}"
            [ -z "$arg" ] && arg="$PIPED_INPUT";
            if [ -f "$arg" ]; then
                source "$arg"
            else
                eval "$arg"
            fi
            exit $?
            ;;
        -- ) shift; break;;
        * )  ! is_known_option "$1" && error "unknown option '$1'";;
    esac
    shift
done

[ $# -eq 0 ] && usage_info && exit 1;
while [ $# -gt 0 ]; do
    case "$1" in
        'about')    if [ $# -gt 1 ] && (module_exists "$2" 2>/dev/null || false); then
                        load_module_info "$2"
                    fi
                    version_info && exit 0;;
        'debug')    debug && exit 0;;
        'help')     if [ $# -gt 1 ] && (module_exists "$2" 2>/dev/null || false); then
                        load_module_info "$2"
                    fi
                    help_info && exit 0;;
        'modules')  load_modules_list
                    help_info && exit 0;;
        'usage')    if [ $# -gt 1 ] && (module_exists "$2" 2>/dev/null || false); then
                        load_module_info "$2"
                    fi
                    usage_info && exit 0;;
        'version')  if [ $# -gt 1 ] && (module_exists "$2" 2>/dev/null || false); then
                        load_module_info "$2"
                    fi
                    version_info true && exit 0;;
        *)          error "unknown argument '$1'";;
    esac
    shift
done

exit 0
# Endfile
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=sh
