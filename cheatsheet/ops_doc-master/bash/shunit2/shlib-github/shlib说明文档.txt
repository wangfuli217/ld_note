cat - << 'EOF'
    shlib_ansi               输出颜色字符串
    shlib_expr_cmd           数值计算
    shlib_random             随机数
    shlib_relToAbsPath       绝对路径
    shlib_standalone_sgrep   setction的key-value值
EOF

shlib_ansi(){ cat - << 'EOF'
[初始化环境]
shlib_ansi_init always|auto|none
# ${SHLIB_TRUE} 判断返回值

[环境变量使用]
shlib_ansi_none=''
shlib_ansi_red=''
shlib_ansi_green=''
shlib_ansi_yellow=''
shlib_ansi_blue=''
shlib_ansi_magenta=''
shlib_ansi_cyan=''
shlib_ansi_white=''
echo "This color is ${shlib_ansi_red}red${shlib_ansi_none}."

=======================================
true; SHLIB_TRUE=$?
false; SHLIB_FALSE=$?

# Configure debug logging.
__SHLIB_DEBUG=':'
[ "${SHLIB_DEBUG:-}" = "${SHLIB_TRUE}" ] && __SHLIB_DEBUG='echo'

# shlib_log_debug outputs a debug level logging message.
shlib_log_debug() { ${__SHLIB_DEBUG} "DEBUG: $*" >&2; }
EOF
}

shlib_expr_cmd(){ cat - << 'EOF'
EXPR_CMD=$(shlib_expr_cmd)
${EXPR_CMD} 1 + 1

Args:
  none
Output:
  string: expr command
Return
  int: 0 upon success
EOF
}

shlib_random(){ cat - << 'EOF'
Outputs:
int: a value between 0-65535
EOF
}


shlib_relToAbsPath(){ cat - << 'EOF'
shlib_relToAbsPath
Args:
  shlib_path_: string: relative path
Outputs:
  string: absolute path
EOF
}


shlib_standalone_test_runner(){ cat - << 'EOF'
# Run all tests for all shells.
# $ ./test_runner
#
# Run all tests for single shell.
# $ ./test_runner -s /bin/bash
#
# Run single test for all shells.
# $ ./test_runner -t shunit_asserts_test.sh
#
# Run single test for single shell.
# $ ./test_runner -s /bin/bash -t shunit_asserts_test.sh
EOF
}

shlib_standalone_sgrep(){ cat - << 'EOF'
Example: show section of xorg.conf containing the keyboard layout.
$ sgrep 'XkbLayout' /etc/X11/xorg.conf
EOF
}







