<?xml version="1.0" encoding="UTF-8"?>
<s:shelldoc xmlns:s="http://www.forestent.com/2005/XSL/ShellDoc">
<s:header>
log4sh 1.3.7

http://log4sh.sourceforge.net/

written by Kate Ward &lt;kate.ward@forestent.com>
released under the LGPL

this module implements something like the log4j module from the Apache group

notes:
*) the default appender is a ConsoleAppender named stdout with a level
   of ERROR and layout of SimpleLayout
*) the appender levels are as follows (decreasing order of output):
   TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF
</s:header>
<s:function group="Log4sh" modifier="private">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_log4sh_log</function></funcdef>
      <paramdef>string <parameter>level</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>
    This is an internal debugging function. It should not be called.
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>_log4sh_log</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Log4sh" modifier="private">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_log4sh_trace</function></funcdef>
      <paramdef>string <parameter>level</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>
    This is an internal debugging function. It should not be called.
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>_log4sh_log</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Log4sh" modifier="private">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_log4sh_debug</function></funcdef>
      <paramdef>string <parameter>level</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>
    This is an internal debugging function. It should not be called.
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>_log4sh_log</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Log4sh" modifier="private">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_log4sh_info</function></funcdef>
      <paramdef>string <parameter>level</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>
    This is an internal debugging function. It should not be called.
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>_log4sh_log</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Log4sh" modifier="private">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_log4sh_warn</function></funcdef>
      <paramdef>string <parameter>level</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>
    This is an internal debugging function. It should not be called.
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>_log4sh_log</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Log4sh" modifier="private">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_log4sh_error</function></funcdef>
      <paramdef>string <parameter>level</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>
    This is an internal debugging function. It should not be called.
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>_log4sh_log</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Log4sh" modifier="private">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_log4sh_fatal</function></funcdef>
      <paramdef>string <parameter>level</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>
    This is an internal debugging function. It should not be called.
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>_log4sh_log</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Log4sh" modifier="private">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_log4sh_mktempDir</function></funcdef>
      <void />
    </funcprototype>
  </funcsynopsis>
  <para>
    Creates a secure temporary directory within which temporary files can be
    created. Honors the <code>TMPDIR</code> environment variable if it is
    set.
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>tmpDir=`_log4sh_mktempDir`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Log4sh" modifier="private">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_log4sh_updateSeconds</function></funcdef>
      <void />
    </funcprototype>
  </funcsynopsis>
  <para>
    Set the <code>__log4sh_seconds</code> variable to the number of seconds
    elapsed since the start of the script.
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>_log4sh_updateSeconds`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Log4sh" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>/boolean
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>log4sh_enableStrictBehavior</function></funcdef>
      <void />
    </funcprototype>
  </funcsynopsis>
  <para>
    Enables strict log4j behavior.
  </para>
  <para><emphasis role="strong">Since:</emphasis> 1.3.7</para>
  <funcsynopsis>
    <funcsynopsisinfo>log4sh_enableStrictBehavior</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Log4sh" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>/boolean
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>log4sh_setAlternative</function></funcdef>
      <paramdef>string <parameter>command</parameter></paramdef>
      <paramdef>string <parameter>path</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>
    Specifies an alternative path for a command.
  </para>
  <para><emphasis role="strong">Since:</emphasis> 1.3.7</para>
  <funcsynopsis>
    <funcsynopsisinfo>log4sh_setAlternative nc /bin/nc</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Log4sh" modifier="private">
<entry align="right">
  <code>integer</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_log4sh_findArrayElement</function></funcdef>
      <paramdef>string[] <parameter>array</parameter></paramdef>
      <paramdef>string <parameter>element</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Find the position of element in an array</para>
  <funcsynopsis>
    <funcsynopsisinfo>
      pos=`_log4sh_findArrayElement "$array" $element`
    </funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Log4sh" modifier="private">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_log4sh_getArrayElement</function></funcdef>
      <paramdef>string[] <parameter>array</parameter></paramdef>
      <paramdef>integer <parameter>position</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Retrieve the element at the given position from an array</para>
  <funcsynopsis>
    <funcsynopsisinfo>element=`_log4sh_getArrayElement "$array" $position`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Log4sh" modifier="private">
<entry align="right">
  <code>integer</code>
</entry>
<entry align="left">
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_log4sh_getArrayLength</function></funcdef>
      <paramdef>string[] <parameter>array</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Get the length of an array</para>
  <funcsynopsis>
    <funcsynopsisinfo>length=`_log4sh_getArrayLength "$array"`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Log4sh" modifier="private">
<entry align="right">
  <code>string[]</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_log4sh_setArrayElement</function></funcdef>
      <paramdef>string[] <parameter>array</parameter></paramdef>
      <paramdef>integer <parameter>position</parameter></paramdef>
      <paramdef>string <parameter>element</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Place an element at a given location in an array</para>
  <funcsynopsis>
    <funcsynopsisinfo>newArray=`_log4sh_setArrayElement "$array" $position $element`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Log4sh" modifier="private">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_log4sh_peekStack</function></funcdef>
      <paramdef>string[] <parameter>array</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Return the topmost element on a stack without removing the
  element.</para>
  <funcsynopsis>
    <funcsynopsisinfo>element=`_log4sh_peekStack "$array"`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Log4sh" modifier="private">
<entry align="right">
  <code>string[]</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_log4sh_popStack</function></funcdef>
      <paramdef>string[] <parameter>array</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Remove the top-most element from a stack. This command takes a
  normal log4sh string array as input, but treats it as though it were a
  stack.</para>
  <funcsynopsis>
    <funcsynopsisinfo>newArray=`_log4sh_popStack "$array"`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Log4sh" modifier="private">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_log4sh_pushStack</function></funcdef>
      <paramdef>string[] <parameter>array</parameter></paramdef>
      <paramdef>string <parameter>element</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Add a new element to the top of a stack. This command takes a normal
  log4sh string array as input, but treats it as though it were a
  stack.</para>
  <funcsynopsis>
    <funcsynopsisinfo>newArray=`_log4sh_pushStack "$array" $element`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Appender" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_activateOptions</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>
    Activate an appender's configuration. This should be called after
    reconfiguring an appender via code. It needs only to be called once
    before any logging statements are called. This calling of this function
    will be required in log4sh 1.4.x.
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>appender_activateAppender myAppender</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Appender" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_close</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Disable any further logging via an appender. Once closed, the
  appender can be reopened by setting it to any logging Level (e.g.
  INFO).</para>
  <funcsynopsis>
    <funcsynopsisinfo>appender_close myAppender</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Appender" modifier="public">
<entry align="right">
  <code>boolean</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_exists</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Checks for the existance of a named appender</para>
  <funcsynopsis>
    <funcsynopsisinfo>exists=`appender_exists myAppender`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Appender" modifier="public">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_getLayout</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Gets the Layout of an Appender</para>
  <funcsynopsis>
    <funcsynopsisinfo>type=`appender_getLayout myAppender`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Appender" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_setLayout</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
      <paramdef>string <parameter>layout</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Sets the Layout of an Appender (e.g. PatternLayout)</para>
  <funcsynopsis>
    <funcsynopsisinfo>appender_setLayout myAppender PatternLayout</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Appender" modifier="private">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_appender_getLayoutByIndex</function></funcdef>
      <paramdef>integer <parameter>index</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Gets the Layout of an Appender at the given array index</para>
  <funcsynopsis>
    <funcsynopsisinfo>type=`_appender_getLayoutByIndex 3`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Appender" modifier="public">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_getLevel</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Gets the current logging Level of an Appender</para>
  <funcsynopsis>
    <funcsynopsisinfo>type=`appender_getLevel myAppender`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Appender" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>/<code>boolean</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_setLevel</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
      <paramdef>string <parameter>level</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Sets the Level of an Appender (e.g. INFO)</para>
  <funcsynopsis>
    <funcsynopsisinfo>appender_setLevel myAppender INFO</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Appender" modifier="private">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_appender_getLevelByIndex</function></funcdef>
      <paramdef>integer <parameter>index</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Gets the current logging Level of an Appender at the given array
  index</para>
  <funcsynopsis>
    <funcsynopsisinfo>type=`_appender_getLevelByIndex 3`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Appender" modifier="public">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_getPattern</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Gets the Pattern of an Appender</para>
  <funcsynopsis>
    <funcsynopsisinfo>pattern=`appender_getPattern myAppender`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Appender" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>/<code>boolean</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_setPattern</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
      <paramdef>string <parameter>pattern</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Sets the Pattern of an Appender</para>
  <funcsynopsis>
    <funcsynopsisinfo>appender_setPattern myAppender '%d %p - %m%n'</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Appender" modifier="private">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_appender_getPatternByIndex</function></funcdef>
      <paramdef>integer <parameter>index</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Gets the Pattern of an Appender at the specified array index</para>
  <funcsynopsis>
    <funcsynopsisinfo>pattern=`_appender_getPatternByIndex 3`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Appender" modifier="private">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_appender_parsePattern</function></funcdef>
      <paramdef>string <parameter>pattern</parameter></paramdef>
      <paramdef>string <parameter>priority</parameter></paramdef>
      <paramdef>string <parameter>message</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Generate a logging message given a Pattern, priority, and message.
  All dates will be represented as ISO 8601 dates (YYYY-MM-DD
  HH:MM:SS).</para>
  <para>Note: the '<code>%r</code>' character modifier does not work in the
  Solaris <code>/bin/sh</code> shell</para>
  <para>Example:
    <blockquote>
      <funcsynopsis>
        <funcsynopsisinfo>_appender_parsePattern '%d %p - %m%n' INFO "message to log"</funcsynopsisinfo>
      </funcsynopsis>
    </blockquote>
  </para>
</entry>
</s:function>
<s:function group="Appender" modifier="public">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_getType</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Gets the Type of an Appender</para>
  <funcsynopsis>
    <funcsynopsisinfo>type=`appender_getType myAppender`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Appender" modifier="public">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_getAppenderType</function></funcdef>
      <paramdef>integer <parameter>index</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para><emphasis role="strong">Deprecated as of 1.3.1</emphasis></para>
  <para>
    Gets the Type of an Appender at the given array index
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>type=`appender_getAppenderType 3`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Appender" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>/<code>boolean</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_setType</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
      <paramdef>string <parameter>type</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Sets the Type of an Appender (e.g. FileAppender)</para>
  <funcsynopsis>
    <funcsynopsisinfo>appender_setType myAppender FileAppender</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Appender" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_setAppenderType</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
      <paramdef>string <parameter>type</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para><emphasis role="strong">Deprecated as of 1.3.1</emphasis></para>
  <para>
    Sets the Type of an Appender (e.g. FileAppender)
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>appender_setAppenderType myAppender FileAppender</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Appender" modifier="private">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_appender_getTypeByIndex</function></funcdef>
      <paramdef>integer <parameter>index</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Gets the Type of an Appender at the given array index</para>
  <funcsynopsis>
    <funcsynopsisinfo>type=`_appender_getTypeByIndex 3`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Appender" modifier="private">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_appender_cache</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Dynamically creates an appender function in memory that will fully
  instantiate itself when it is called.</para>
  <funcsynopsis>
    <funcsynopsisinfo>_appender_cache myAppender</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Appender" modifier="private">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_appender_activate</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>
    Dynamically regenerates an appender function in memory that is fully
    instantiated for a specific logging task.
    </para>
  <funcsynopsis>
    <funcsynopsisinfo>_appender_activate myAppender</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="FileAppender" modifier="private">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_appender_file_getFileByIndex</function></funcdef>
      <paramdef>integer <parameter>index</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Get the filename of a FileAppender at the given array index</para>
  <funcsynopsis>
    <funcsynopsisinfo>_appender_file_getFileByIndex 3</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="FileAppender" modifier="public">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_file_getFile</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Get the filename of a FileAppender</para>
  <funcsynopsis>
    <funcsynopsisinfo>appender_file_getFile myAppender</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="FileAppender" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_file_setFile</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>
    Set the filename for a FileAppender (e.g. <filename>STDERR</filename> or
    <filename>/var/log/log4sh.log</filename>).
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>appender_file_setFile myAppender STDERR</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="FileAppender" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_setAppenderFile</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para><emphasis role="strong">Deprecated as of 1.3.2</emphasis></para>
  <para>
    Set the filename for a FileAppender (e.g. "STDERR" or
    "/var/log/log4sh.log")
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>appender_setAppenderFile myAppender STDERR</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="FileAppender" modifier="public">
<entry align="right">
  <code>integer</code>/boolean
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_file_getMaxBackupIndex</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>
    Returns the value of the MaxBackupIndex option.
  </para>
  <para><emphasis role="strong">Since:</emphasis> 1.3.7</para>
  <funcsynopsis>
    <funcsynopsisinfo>appender_file_getMaxBackupIndex myAppender</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="FileAppender" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_file_setMaxBackupIndex</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
      <paramdef>integer <parameter>index</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Set the maximum number of backup files to keep around.</para>
  <para>
    The <emphasis role="strong">MaxBackupIndex</emphasis> option determines
    how many backup files are kept before the oldest is erased. This option
    takes a positive integer value. If set to zero, then there will be no
    backup files and the log file will be truncated when it reaches
    <option>MaxFileSize</option>.
  </para>
  <para><emphasis role="strong">Since:</emphasis> 1.3.7</para>
  <funcsynopsis>
    <funcsynopsisinfo>appender_file_setMaxBackupIndex myAppender 3</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="FileAppender" modifier="public">
<entry align="right">
  <code>integer</code>/boolean
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_file_getMaxFileSize</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>
    Get the maximum size that the output file is allowed to reach before
    being rolled over to backup files.
  </para>
  <para><emphasis role="strong">Since:</emphasis> 1.3.7</para>
  <funcsynopsis>
    <funcsynopsisinfo>maxSize=`appender_file_getMaxBackupSize myAppender`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="FileAppender" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>/boolean
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_file_setMaxFileSize</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
      <paramdef>string <parameter>size</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>
    Set the maximum size that the output file is allowed to reach before
    being rolled over to backup files.
  </para>
  <para>
    In configuration files, the <option>MaxFileSize</option> option takes an
    long integer in the range 0 - 2^40. You can specify the value with the
    suffixes "KiB", "MiB" or "GiB" so that the integer is interpreted being
    expressed respectively in kilobytes, megabytes or gigabytes. For example,
    the value "10KiB" will be interpreted as 10240.
  </para>
  <para><emphasis role="strong">Since:</emphasis> 1.3.7</para>
  <funcsynopsis>
    <funcsynopsisinfo>appender_file_setMaxBackupSize myAppender 10KiB</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="SMTPAppender" modifier="private">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_appender_smtp_getToByIndex</function></funcdef>
      <paramdef>integer <parameter>index</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Get the email to address for the given appender</para>
  <funcsynopsis>
    <funcsynopsisinfo>email=`_appender_smtp_getToByIndex 3`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="SMTPAppender" modifier="public">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_smtp_getTo</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Get the to address for the given appender</para>
  <funcsynopsis>
    <funcsynopsisinfo>email=`appender_smtp_getTo myAppender`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="SMTPAppender" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_smtp_setTo</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
      <paramdef>string <parameter>email</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Set the to address for the given appender</para>
  <funcsynopsis>
    <funcsynopsisinfo>appender_smtp_setTo myAppender user@example.com</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="SMTPAppender" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_setAppenderRecipient</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
      <paramdef>string <parameter>email</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para><emphasis role="strong">Deprecated as of 1.3.1</emphasis></para>
  <para>
    Set the to address for the given appender
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>appender_smtp_setTo myAppender user@example.com</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="SMTPAppender" modifier="private">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_appender_smtp_getSubjectByIndex</function></funcdef>
      <paramdef>integer <parameter>index</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Get the email subject for the given appender</para>
  <funcsynopsis>
    <funcsynopsisinfo>subject=`_appender_smtp_getSubjectByIndex 3`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="SMTPAppender" modifier="public">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_smtp_getSubject</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Get the email subject for the given appender</para>
  <funcsynopsis>
    <funcsynopsisinfo>subject=`appender_smtp_getSubject myAppender`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="SMTPAppender" modifier="public">
<entry align="right">
  <emphasis>void/boolean</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_smtp_setSubject</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
      <paramdef>string <parameter>subject</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Sets the email subject for an SMTP appender</para>
  <funcsynopsis>
    <funcsynopsisinfo>appender_smtp_setSubject myAppender "This is a test"</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="SMTPAppender" modifier="public">
<entry align="right">
  <emphasis>void/boolean</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_setAppenderSubject</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
      <paramdef>string <parameter>subject</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para><emphasis role="strong">Deprecated as of 1.3.1</emphasis></para>
  <para>
    Sets the email subject for an SMTP appender
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>appender_setAppenderSubject myAppender "This is a test"</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="SyslogAppender" modifier="private">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef>
        <function>_appender_syslog_getFacilityByIndex</function>
      </funcdef>
      <paramdef>integer <parameter>index</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Get the syslog facility of the specified appender by index</para>
  <funcsynopsis>
    <funcsynopsisinfo>
      facility=`_appender_syslog_getFacilityByIndex 3`
    </funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="SyslogAppender" modifier="public">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_getSyslogFacility</function></funcdef>
      <paramdef>integer <parameter>index</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para><emphasis role="strong">Deprecated as of 1.3.1</emphasis></para>
  <para>
    Get the syslog facility of the specified appender by index
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>facility=`appender_getSyslogFacility 3`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="SyslogAppender" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_syslog_getFacility</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>
    Get the syslog facility for the given appender.
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>facility=`appender_syslog_getFacility myAppender`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="SyslogAppender" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_syslog_setFacility</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
      <paramdef>string <parameter>facility</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Set the syslog facility for the given appender</para>
  <funcsynopsis>
    <funcsynopsisinfo>appender_syslog_setFacility myAppender local4`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="SyslogAppender" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_setSyslogFacility</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
      <paramdef>string <parameter>facility</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para><emphasis role="strong">Deprecated as of 1.3.2</emphasis></para>
  <para>
    Set the syslog facility for the given appender
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>appender_setSyslogFacility myAppender local4`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="SyslogAppender" modifier="public">
<entry align="right">
  <code>string</code>/boolean
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_syslog_getHost</function></funcdef>
      <paramdef>integer <parameter>index</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>
    Get the syslog host of the specified appender.
  </para>
  <para><emphasis role="strong">Since:</emphasis> 1.3.7</para>
  <funcsynopsis>
    <funcsynopsisinfo>host=`appender_syslog_getHost myAppender`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="SyslogAppender" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>/boolean
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>appender_syslog_setHost</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
      <paramdef>string <parameter>host</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>
    Set the syslog host for the given appender. Requires that the 'nc'
    command alternative has been previously set with the
    log4sh_setAlternative() function.
  </para>
  <para><emphasis role="strong">Since:</emphasis> 1.3.7</para>
  <funcsynopsis>
    <funcsynopsisinfo>appender_syslog_setHost myAppender localhost</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Level" modifier="public">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>logger_level_toLevel</function></funcdef>
      <paramdef>integer <parameter>val</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Converts an internally used level integer into its external level
  equivalent</para>
  <funcsynopsis>
    <funcsynopsisinfo>level=`logger_level_toLevel 3`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Level" modifier="public">
<entry align="right">
  <code>integer</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>logger_level_toInt</function></funcdef>
      <paramdef>string <parameter>level</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Converts an externally used level tag into its integer
  equivalent</para>
  <funcsynopsis>
    <funcsynopsisinfo>levelInt=`logger_level_toInt WARN`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Logger" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>/<code>boolean</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>logger_addAppender</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Add and initialize a new appender</para>
  <funcsynopsis>
    <funcsynopsisinfo>logger_addAppender $appender</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Logger" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>logger_addAppenderWithPattern</function></funcdef>
      <paramdef>string <parameter>appender</parameter></paramdef>
      <paramdef>string <parameter>pattern</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para><emphasis role="strong">Deprecated as of 1.3.6</emphasis></para>
  <para>
    Add and initialize a new appender with a specific PatternLayout
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>logger_addAppenderWithPattern $appender '%d %p - %m%n'</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Logger" modifier="public">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>logger_getFilename</function></funcdef>
      <void />
    </funcprototype>
  </funcsynopsis>
  <para>
    Get the filename that would be shown when the '%F' conversion character
    is used in a PatternLayout.
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>filename=`logger_getFilename`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Logger" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>logger_setFilename</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Set the filename to be shown when the '%F' conversion character is
  used in a PatternLayout.</para>
  <funcsynopsis>
    <funcsynopsisinfo>logger_setFilename 'myScript.sh'</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Logger" modifier="public">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>logger_getLevel</function></funcdef>
      <void />
    </funcprototype>
  </funcsynopsis>
  <para>Get the global default logging level (e.g. DEBUG).</para>
  <funcsynopsis>
    <funcsynopsisinfo>level=`logger_getLevel`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Logger" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>logger_setLevel</function></funcdef>
      <paramdef>string <parameter>level</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Sets the global default logging level (e.g. DEBUG).</para>
  <funcsynopsis>
    <funcsynopsisinfo>logger_setLevel INFO</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Logger" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>log</function></funcdef>
      <paramdef>string <parameter>level</parameter></paramdef>
      <paramdef>string[] <parameter>message(s)</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>The base logging command that logs a message to all defined
    appenders</para>
  <funcsynopsis>
    <funcsynopsisinfo>log DEBUG 'This is a test message'</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Logger" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>logger_trace</function></funcdef>
      <paramdef>string[] <parameter>message</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>This is a helper function for logging a message at the TRACE
    priority</para>
  <funcsynopsis>
    <funcsynopsisinfo>logger_trace 'This is a trace message'</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Logger" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>logger_debug</function></funcdef>
      <paramdef>string[] <parameter>message</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>This is a helper function for logging a message at the DEBUG
    priority</para>
  <funcsynopsis>
    <funcsynopsisinfo>logger_debug 'This is a debug message'</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Logger" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>logger_info</function></funcdef>
      <paramdef>string[] <parameter>message</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>This is a helper function for logging a message at the INFO
    priority</para>
  <funcsynopsis>
    <funcsynopsisinfo>logger_info 'This is a info message'</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Logger" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>logger_warn</function></funcdef>
      <paramdef>string[] <parameter>message</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>
    This is a helper function for logging a message at the WARN priority
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>logger_warn 'This is a warn message'</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Logger" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>logger_error</function></funcdef>
      <paramdef>string[] <parameter>message</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>
    This is a helper function for logging a message at the ERROR priority
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>logger_error 'This is a error message'</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Logger" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>logger_fatal</function></funcdef>
      <paramdef>string[] <parameter>message</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>This is a helper function for logging a message at the FATAL
    priority</para>
  <funcsynopsis>
    <funcsynopsisinfo>logger_fatal 'This is a fatal message'</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Property" modifier="private">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_log4sh_getPropPrefix</function></funcdef>
      <paramdef>string <parameter>property</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Takes a string (eg. "log4sh.appender.stderr.File") and returns the
  prefix of it (everything before the first '.' char). Normally used in
  parsing the log4sh configuration file.</para>
  <funcsynopsis>
    <funcsynopsisinfo>prefix=`_log4sh_getPropPrefix $property"`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Property" modifier="private">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_log4sh_stripPropPrefix</function></funcdef>
      <paramdef>string <parameter>property</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Strips the prefix off a property configuration command and returns
  the string. E.g. "log4sh.appender.stderr.File" becomes
  "appender.stderr.File".</para>
  <funcsynopsis>
    <funcsynopsisinfo>newProperty=`_log4sh_stripPropPrefix $property`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Property" modifier="private">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_log4sh_propAppender</function></funcdef>
      <paramdef>string <parameter>property</parameter></paramdef>
      <paramdef>string <parameter>value</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Configures log4sh using an appender property configuration statement</para>
  <funcsynopsis>
    <funcsynopsisinfo>_log4sh_propAppender $property $value</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Property" modifier="private">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_log4sh_propLogger</function></funcdef>
      <paramdef>string <parameter>property</parameter></paramdef>
      <paramdef>string <parameter>value</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>(future) Configures log4sh with a <code>logger</code> configuration
  statement. Sample output: "logger: property value".</para>
  <funcsynopsis>
    <funcsynopsisinfo>result=`_log4sh_propLogger $property $value`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Property" modifier="private">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_log4sh_propRootLogger</function></funcdef>
      <paramdef>string <parameter>rootLogger</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>Configures log4sh with a <code>rootLogger</code> configuration
  statement. It expects a comma separated string similar to the following:</para>
  <para><code>log4sh.rootLogger=ERROR, stderr, R</code></para>
  <para>The first option is the default logging level to set for all
  of the following appenders that will be created, and all following options
  are the names of appenders to create. The appender names must be
  unique.</para>
  <funcsynopsis>
    <funcsynopsisinfo>_log4sh_propRootLogger $value</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Property" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>log4sh_doConfigure</function></funcdef>
      <paramdef>string <parameter>configFileName</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>
    Read configuration from a file. <emphasis role="strong">The existing
    configuration is not cleared or reset.</emphasis> If you require a
    different behavior, then call the <code>log4sh_resetConfiguration</code>
    before calling <code>log4sh_doConfigure</code>.
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>log4sh_doConfigure myconfig.properties</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Property" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>log4sh_readProperties</function></funcdef>
      <paramdef>string <parameter>configFileName</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para><emphasis role="strong">Deprecated as of 1.3.6</emphasis></para>
  <para>
    See <code>log4sh_doConfigure</code>.
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>log4sh_readProperties myconfig.properties</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Property" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>log4sh_resetConfiguration</function></funcdef>
      <void />
    </funcprototype>
  </funcsynopsis>
  <para>
    This function completely resets the log4sh configuration to have no
    appenders with a global logging level of ERROR.
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>log4sh_resetConfiguration</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Thread" modifier="public">
<entry align="right">
  <code>string</code>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>logger_getThreadName</function></funcdef>
      <void />
    </funcprototype>
  </funcsynopsis>
  <para>Gets the current thread name.</para>
  <funcsynopsis>
    <funcsynopsisinfo>threadName=`logger_getThreadName`</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Thread" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>logger_setThreadName</function></funcdef>
      <paramdef>string <parameter>threadName</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>
    Sets the thread name (e.g. the name of the script). This thread name can
    be used with the '%t' conversion character within a
    <option>PatternLayout</option>.
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>logger_setThreadName "myThread"</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Thread" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>logger_pushThreadName</function></funcdef>
      <paramdef>string <parameter>threadName</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para><emphasis role="strong">Deprecated as of 1.3.7</emphasis></para>
  <para>
    Sets the thread name (eg. the name of the script) and pushes the old on
    to a stack for later use. This thread name can be used with the '%t'
    conversion character within a <option>PatternLayout</option>.
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>logger_pushThreadName "myThread"</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Thread" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>logger_popThreadName</function></funcdef>
      <void />
    </funcprototype>
  </funcsynopsis>
  <para><emphasis role="strong">Deprecated as of 1.3.7</emphasis></para>
  <para>
    Removes the topmost thread name from the stack. The next thread name on
    the stack is then placed in the <varname>__log4sh_threadName</varname>
    variable. If the stack is empty, or has only one element left, then a
    warning is given that no more thread names can be popped from the stack.
  </para>
  <funcsynopsis>
    <funcsynopsisinfo>logger_popThreadName</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Trap" modifier="public">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>log4sh_cleanup</function></funcdef>
      <void />
    </funcprototype>
  </funcsynopsis>
  <para>This is a cleanup function to remove the temporary directory used by
  log4sh. It is provided for scripts who want to do log4sh cleanup work
  themselves rather than using the automated cleanup of log4sh that is
  invoked upon a normal exit of the script.</para>
  <funcsynopsis>
    <funcsynopsisinfo>log4sh_cleanup</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
<s:function group="Trap" modifier="private">
<entry align="right">
  <emphasis>void</emphasis>
</entry>
<entry>
  <funcsynopsis>
    <funcprototype>
      <funcdef><function>_log4sh_cleanup</function></funcdef>
      <paramdef>string <parameter>signal</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>This is a cleanup function to remove the temporary directory used by
  log4sh. It should only be called by log4sh itself when it is taking
  control of traps.</para>
  <para>If there was a previously defined trap for the given signal, log4sh
  will attempt to call the original trap handler as well so as not to break
  the parent script.</para>
  <funcsynopsis>
    <funcsynopsisinfo>_log4sh_cleanup EXIT</funcsynopsisinfo>
  </funcsynopsis>
</entry>
</s:function>
</s:shelldoc>
