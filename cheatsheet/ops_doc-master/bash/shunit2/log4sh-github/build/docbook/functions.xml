<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns:s="http://www.forestent.com/2005/XSL/ShellDoc" id="shelldoc" lang="en-US">
  <title>Function Reference</title>
  <section>
    <title>Appender</title>
    <table>
      <title>Appender</title>
      <tgroup cols="2">
        <tbody>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_activateOptions</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>
    Activate an appender's configuration. This should be called after
    reconfiguring an appender via code. It needs only to be called once
    before any logging statements are called. This calling of this function
    will be required in log4sh 1.4.x.
  </para>
              <funcsynopsis>
                <funcsynopsisinfo>appender_activateAppender myAppender</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_close</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>Disable any further logging via an appender. Once closed, the
  appender can be reopened by setting it to any logging Level (e.g.
  INFO).</para>
              <funcsynopsis>
                <funcsynopsisinfo>appender_close myAppender</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <code>boolean</code>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_exists</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>Checks for the existance of a named appender</para>
              <funcsynopsis>
                <funcsynopsisinfo>exists=`appender_exists myAppender`</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <code>string</code>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_getAppenderType</function>
                  </funcdef>
                  <paramdef>integer <parameter>index</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>
                <emphasis role="strong">Deprecated as of 1.3.1</emphasis>
              </para>
              <para>
    Gets the Type of an Appender at the given array index
  </para>
              <funcsynopsis>
                <funcsynopsisinfo>type=`appender_getAppenderType 3`</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <code>string</code>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_getLayout</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>Gets the Layout of an Appender</para>
              <funcsynopsis>
                <funcsynopsisinfo>type=`appender_getLayout myAppender`</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <code>string</code>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_getLevel</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>Gets the current logging Level of an Appender</para>
              <funcsynopsis>
                <funcsynopsisinfo>type=`appender_getLevel myAppender`</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <code>string</code>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_getPattern</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>Gets the Pattern of an Appender</para>
              <funcsynopsis>
                <funcsynopsisinfo>pattern=`appender_getPattern myAppender`</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <code>string</code>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_getType</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>Gets the Type of an Appender</para>
              <funcsynopsis>
                <funcsynopsisinfo>type=`appender_getType myAppender`</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_setAppenderType</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                  <paramdef>string <parameter>type</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>
                <emphasis role="strong">Deprecated as of 1.3.1</emphasis>
              </para>
              <para>
    Sets the Type of an Appender (e.g. FileAppender)
  </para>
              <funcsynopsis>
                <funcsynopsisinfo>appender_setAppenderType myAppender FileAppender</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_setLayout</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                  <paramdef>string <parameter>layout</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>Sets the Layout of an Appender (e.g. PatternLayout)</para>
              <funcsynopsis>
                <funcsynopsisinfo>appender_setLayout myAppender PatternLayout</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right"><emphasis>void</emphasis>/<code>boolean</code></entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_setLevel</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                  <paramdef>string <parameter>level</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>Sets the Level of an Appender (e.g. INFO)</para>
              <funcsynopsis>
                <funcsynopsisinfo>appender_setLevel myAppender INFO</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right"><emphasis>void</emphasis>/<code>boolean</code></entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_setPattern</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                  <paramdef>string <parameter>pattern</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>Sets the Pattern of an Appender</para>
              <funcsynopsis>
                <funcsynopsisinfo>appender_setPattern myAppender '%d %p - %m%n'</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right"><emphasis>void</emphasis>/<code>boolean</code></entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_setType</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                  <paramdef>string <parameter>type</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>Sets the Type of an Appender (e.g. FileAppender)</para>
              <funcsynopsis>
                <funcsynopsisinfo>appender_setType myAppender FileAppender</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section>
    <title>FileAppender</title>
    <table>
      <title>FileAppender</title>
      <tgroup cols="2">
        <tbody>
          <row valign="top">
            <entry align="right">
              <code>string</code>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_file_getFile</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>Get the filename of a FileAppender</para>
              <funcsynopsis>
                <funcsynopsisinfo>appender_file_getFile myAppender</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right"><code>integer</code>/boolean
</entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_file_getMaxBackupIndex</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>
    Returns the value of the MaxBackupIndex option.
  </para>
              <para><emphasis role="strong">Since:</emphasis> 1.3.7</para>
              <funcsynopsis>
                <funcsynopsisinfo>appender_file_getMaxBackupIndex myAppender</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right"><code>integer</code>/boolean
</entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_file_getMaxFileSize</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>
    Get the maximum size that the output file is allowed to reach before
    being rolled over to backup files.
  </para>
              <para><emphasis role="strong">Since:</emphasis> 1.3.7</para>
              <funcsynopsis>
                <funcsynopsisinfo>maxSize=`appender_file_getMaxBackupSize myAppender`</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_file_setFile</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                  <paramdef>string <parameter>filename</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>
    Set the filename for a FileAppender (e.g. <filename>STDERR</filename> or
    <filename>/var/log/log4sh.log</filename>).
  </para>
              <funcsynopsis>
                <funcsynopsisinfo>appender_file_setFile myAppender STDERR</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_file_setMaxBackupIndex</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                  <paramdef>integer <parameter>index</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>Set the maximum number of backup files to keep around.</para>
              <para>
    The <emphasis role="strong">MaxBackupIndex</emphasis> option determines
    how many backup files are kept before the oldest is erased. This option
    takes a positive integer value. If set to zero, then there will be no
    backup files and the log file will be truncated when it reaches
    <option>MaxFileSize</option>.
  </para>
              <para><emphasis role="strong">Since:</emphasis> 1.3.7</para>
              <funcsynopsis>
                <funcsynopsisinfo>appender_file_setMaxBackupIndex myAppender 3</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right"><emphasis>void</emphasis>/boolean
</entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_file_setMaxFileSize</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                  <paramdef>string <parameter>size</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>
    Set the maximum size that the output file is allowed to reach before
    being rolled over to backup files.
  </para>
              <para>
    In configuration files, the <option>MaxFileSize</option> option takes an
    long integer in the range 0 - 2^40. You can specify the value with the
    suffixes "KiB", "MiB" or "GiB" so that the integer is interpreted being
    expressed respectively in kilobytes, megabytes or gigabytes. For example,
    the value "10KiB" will be interpreted as 10240.
  </para>
              <para><emphasis role="strong">Since:</emphasis> 1.3.7</para>
              <funcsynopsis>
                <funcsynopsisinfo>appender_file_setMaxBackupSize myAppender 10KiB</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_setAppenderFile</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                  <paramdef>string <parameter>filename</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>
                <emphasis role="strong">Deprecated as of 1.3.2</emphasis>
              </para>
              <para>
    Set the filename for a FileAppender (e.g. "STDERR" or
    "/var/log/log4sh.log")
  </para>
              <funcsynopsis>
                <funcsynopsisinfo>appender_setAppenderFile myAppender STDERR</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section>
    <title>Level</title>
    <table>
      <title>Level</title>
      <tgroup cols="2">
        <tbody>
          <row valign="top">
            <entry align="right">
              <code>integer</code>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>logger_level_toInt</function>
                  </funcdef>
                  <paramdef>string <parameter>level</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>Converts an externally used level tag into its integer
  equivalent</para>
              <funcsynopsis>
                <funcsynopsisinfo>levelInt=`logger_level_toInt WARN`</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <code>string</code>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>logger_level_toLevel</function>
                  </funcdef>
                  <paramdef>integer <parameter>val</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>Converts an internally used level integer into its external level
  equivalent</para>
              <funcsynopsis>
                <funcsynopsisinfo>level=`logger_level_toLevel 3`</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section>
    <title>Log4sh</title>
    <table>
      <title>Log4sh</title>
      <tgroup cols="2">
        <tbody>
          <row valign="top">
            <entry align="right"><emphasis>void</emphasis>/boolean
</entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>log4sh_enableStrictBehavior</function>
                  </funcdef>
                  <void/>
                </funcprototype>
              </funcsynopsis>
              <para>
    Enables strict log4j behavior.
  </para>
              <para><emphasis role="strong">Since:</emphasis> 1.3.7</para>
              <funcsynopsis>
                <funcsynopsisinfo>log4sh_enableStrictBehavior</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right"><emphasis>void</emphasis>/boolean
</entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>log4sh_setAlternative</function>
                  </funcdef>
                  <paramdef>string <parameter>command</parameter></paramdef>
                  <paramdef>string <parameter>path</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>
    Specifies an alternative path for a command.
  </para>
              <para><emphasis role="strong">Since:</emphasis> 1.3.7</para>
              <funcsynopsis>
                <funcsynopsisinfo>log4sh_setAlternative nc /bin/nc</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section>
    <title>Logger</title>
    <table>
      <title>Logger</title>
      <tgroup cols="2">
        <tbody>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>log</function>
                  </funcdef>
                  <paramdef>string <parameter>level</parameter></paramdef>
                  <paramdef>string[] <parameter>message(s)</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>The base logging command that logs a message to all defined
    appenders</para>
              <funcsynopsis>
                <funcsynopsisinfo>log DEBUG 'This is a test message'</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right"><emphasis>void</emphasis>/<code>boolean</code></entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>logger_addAppender</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>Add and initialize a new appender</para>
              <funcsynopsis>
                <funcsynopsisinfo>logger_addAppender $appender</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>logger_addAppenderWithPattern</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                  <paramdef>string <parameter>pattern</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>
                <emphasis role="strong">Deprecated as of 1.3.6</emphasis>
              </para>
              <para>
    Add and initialize a new appender with a specific PatternLayout
  </para>
              <funcsynopsis>
                <funcsynopsisinfo>logger_addAppenderWithPattern $appender '%d %p - %m%n'</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>logger_debug</function>
                  </funcdef>
                  <paramdef>string[] <parameter>message</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>This is a helper function for logging a message at the DEBUG
    priority</para>
              <funcsynopsis>
                <funcsynopsisinfo>logger_debug 'This is a debug message'</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>logger_error</function>
                  </funcdef>
                  <paramdef>string[] <parameter>message</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>
    This is a helper function for logging a message at the ERROR priority
  </para>
              <funcsynopsis>
                <funcsynopsisinfo>logger_error 'This is a error message'</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>logger_fatal</function>
                  </funcdef>
                  <paramdef>string[] <parameter>message</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>This is a helper function for logging a message at the FATAL
    priority</para>
              <funcsynopsis>
                <funcsynopsisinfo>logger_fatal 'This is a fatal message'</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <code>string</code>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>logger_getFilename</function>
                  </funcdef>
                  <void/>
                </funcprototype>
              </funcsynopsis>
              <para>
    Get the filename that would be shown when the '%F' conversion character
    is used in a PatternLayout.
  </para>
              <funcsynopsis>
                <funcsynopsisinfo>filename=`logger_getFilename`</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <code>string</code>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>logger_getLevel</function>
                  </funcdef>
                  <void/>
                </funcprototype>
              </funcsynopsis>
              <para>Get the global default logging level (e.g. DEBUG).</para>
              <funcsynopsis>
                <funcsynopsisinfo>level=`logger_getLevel`</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>logger_info</function>
                  </funcdef>
                  <paramdef>string[] <parameter>message</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>This is a helper function for logging a message at the INFO
    priority</para>
              <funcsynopsis>
                <funcsynopsisinfo>logger_info 'This is a info message'</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>logger_setFilename</function>
                  </funcdef>
                  <paramdef>string <parameter>filename</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>Set the filename to be shown when the '%F' conversion character is
  used in a PatternLayout.</para>
              <funcsynopsis>
                <funcsynopsisinfo>logger_setFilename 'myScript.sh'</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>logger_setLevel</function>
                  </funcdef>
                  <paramdef>string <parameter>level</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>Sets the global default logging level (e.g. DEBUG).</para>
              <funcsynopsis>
                <funcsynopsisinfo>logger_setLevel INFO</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>logger_trace</function>
                  </funcdef>
                  <paramdef>string[] <parameter>message</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>This is a helper function for logging a message at the TRACE
    priority</para>
              <funcsynopsis>
                <funcsynopsisinfo>logger_trace 'This is a trace message'</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>logger_warn</function>
                  </funcdef>
                  <paramdef>string[] <parameter>message</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>
    This is a helper function for logging a message at the WARN priority
  </para>
              <funcsynopsis>
                <funcsynopsisinfo>logger_warn 'This is a warn message'</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section>
    <title>Property</title>
    <table>
      <title>Property</title>
      <tgroup cols="2">
        <tbody>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>log4sh_doConfigure</function>
                  </funcdef>
                  <paramdef>string <parameter>configFileName</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>
    Read configuration from a file. <emphasis role="strong">The existing
    configuration is not cleared or reset.</emphasis> If you require a
    different behavior, then call the <code>log4sh_resetConfiguration</code>
    before calling <code>log4sh_doConfigure</code>.
  </para>
              <funcsynopsis>
                <funcsynopsisinfo>log4sh_doConfigure myconfig.properties</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>log4sh_readProperties</function>
                  </funcdef>
                  <paramdef>string <parameter>configFileName</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>
                <emphasis role="strong">Deprecated as of 1.3.6</emphasis>
              </para>
              <para>
    See <code>log4sh_doConfigure</code>.
  </para>
              <funcsynopsis>
                <funcsynopsisinfo>log4sh_readProperties myconfig.properties</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>log4sh_resetConfiguration</function>
                  </funcdef>
                  <void/>
                </funcprototype>
              </funcsynopsis>
              <para>
    This function completely resets the log4sh configuration to have no
    appenders with a global logging level of ERROR.
  </para>
              <funcsynopsis>
                <funcsynopsisinfo>log4sh_resetConfiguration</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section>
    <title>SMTPAppender</title>
    <table>
      <title>SMTPAppender</title>
      <tgroup cols="2">
        <tbody>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_setAppenderRecipient</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                  <paramdef>string <parameter>email</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>
                <emphasis role="strong">Deprecated as of 1.3.1</emphasis>
              </para>
              <para>
    Set the to address for the given appender
  </para>
              <funcsynopsis>
                <funcsynopsisinfo>appender_smtp_setTo myAppender user@example.com</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void/boolean</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_setAppenderSubject</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                  <paramdef>string <parameter>subject</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>
                <emphasis role="strong">Deprecated as of 1.3.1</emphasis>
              </para>
              <para>
    Sets the email subject for an SMTP appender
  </para>
              <funcsynopsis>
                <funcsynopsisinfo>appender_setAppenderSubject myAppender "This is a test"</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <code>string</code>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_smtp_getSubject</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>Get the email subject for the given appender</para>
              <funcsynopsis>
                <funcsynopsisinfo>subject=`appender_smtp_getSubject myAppender`</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <code>string</code>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_smtp_getTo</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>Get the to address for the given appender</para>
              <funcsynopsis>
                <funcsynopsisinfo>email=`appender_smtp_getTo myAppender`</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void/boolean</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_smtp_setSubject</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                  <paramdef>string <parameter>subject</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>Sets the email subject for an SMTP appender</para>
              <funcsynopsis>
                <funcsynopsisinfo>appender_smtp_setSubject myAppender "This is a test"</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_smtp_setTo</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                  <paramdef>string <parameter>email</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>Set the to address for the given appender</para>
              <funcsynopsis>
                <funcsynopsisinfo>appender_smtp_setTo myAppender user@example.com</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section>
    <title>SyslogAppender</title>
    <table>
      <title>SyslogAppender</title>
      <tgroup cols="2">
        <tbody>
          <row valign="top">
            <entry align="right">
              <code>string</code>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_getSyslogFacility</function>
                  </funcdef>
                  <paramdef>integer <parameter>index</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>
                <emphasis role="strong">Deprecated as of 1.3.1</emphasis>
              </para>
              <para>
    Get the syslog facility of the specified appender by index
  </para>
              <funcsynopsis>
                <funcsynopsisinfo>facility=`appender_getSyslogFacility 3`</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_setSyslogFacility</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                  <paramdef>string <parameter>facility</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>
                <emphasis role="strong">Deprecated as of 1.3.2</emphasis>
              </para>
              <para>
    Set the syslog facility for the given appender
  </para>
              <funcsynopsis>
                <funcsynopsisinfo>appender_setSyslogFacility myAppender local4`</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_syslog_getFacility</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>
    Get the syslog facility for the given appender.
  </para>
              <funcsynopsis>
                <funcsynopsisinfo>facility=`appender_syslog_getFacility myAppender`</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right"><code>string</code>/boolean
</entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_syslog_getHost</function>
                  </funcdef>
                  <paramdef>integer <parameter>index</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>
    Get the syslog host of the specified appender.
  </para>
              <para><emphasis role="strong">Since:</emphasis> 1.3.7</para>
              <funcsynopsis>
                <funcsynopsisinfo>host=`appender_syslog_getHost myAppender`</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_syslog_setFacility</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                  <paramdef>string <parameter>facility</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>Set the syslog facility for the given appender</para>
              <funcsynopsis>
                <funcsynopsisinfo>appender_syslog_setFacility myAppender local4`</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right"><emphasis>void</emphasis>/boolean
</entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>appender_syslog_setHost</function>
                  </funcdef>
                  <paramdef>string <parameter>appender</parameter></paramdef>
                  <paramdef>string <parameter>host</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>
    Set the syslog host for the given appender. Requires that the 'nc'
    command alternative has been previously set with the
    log4sh_setAlternative() function.
  </para>
              <para><emphasis role="strong">Since:</emphasis> 1.3.7</para>
              <funcsynopsis>
                <funcsynopsisinfo>appender_syslog_setHost myAppender localhost</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section>
    <title>Thread</title>
    <table>
      <title>Thread</title>
      <tgroup cols="2">
        <tbody>
          <row valign="top">
            <entry align="right">
              <code>string</code>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>logger_getThreadName</function>
                  </funcdef>
                  <void/>
                </funcprototype>
              </funcsynopsis>
              <para>Gets the current thread name.</para>
              <funcsynopsis>
                <funcsynopsisinfo>threadName=`logger_getThreadName`</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>logger_popThreadName</function>
                  </funcdef>
                  <void/>
                </funcprototype>
              </funcsynopsis>
              <para>
                <emphasis role="strong">Deprecated as of 1.3.7</emphasis>
              </para>
              <para>
    Removes the topmost thread name from the stack. The next thread name on
    the stack is then placed in the <varname>__log4sh_threadName</varname>
    variable. If the stack is empty, or has only one element left, then a
    warning is given that no more thread names can be popped from the stack.
  </para>
              <funcsynopsis>
                <funcsynopsisinfo>logger_popThreadName</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>logger_pushThreadName</function>
                  </funcdef>
                  <paramdef>string <parameter>threadName</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>
                <emphasis role="strong">Deprecated as of 1.3.7</emphasis>
              </para>
              <para>
    Sets the thread name (eg. the name of the script) and pushes the old on
    to a stack for later use. This thread name can be used with the '%t'
    conversion character within a <option>PatternLayout</option>.
  </para>
              <funcsynopsis>
                <funcsynopsisinfo>logger_pushThreadName "myThread"</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>logger_setThreadName</function>
                  </funcdef>
                  <paramdef>string <parameter>threadName</parameter></paramdef>
                </funcprototype>
              </funcsynopsis>
              <para>
    Sets the thread name (e.g. the name of the script). This thread name can
    be used with the '%t' conversion character within a
    <option>PatternLayout</option>.
  </para>
              <funcsynopsis>
                <funcsynopsisinfo>logger_setThreadName "myThread"</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section>
    <title>Trap</title>
    <table>
      <title>Trap</title>
      <tgroup cols="2">
        <tbody>
          <row valign="top">
            <entry align="right">
              <emphasis>void</emphasis>
            </entry>
            <entry>
              <funcsynopsis>
                <funcprototype>
                  <funcdef>
                    <function>log4sh_cleanup</function>
                  </funcdef>
                  <void/>
                </funcprototype>
              </funcsynopsis>
              <para>This is a cleanup function to remove the temporary directory used by
  log4sh. It is provided for scripts who want to do log4sh cleanup work
  themselves rather than using the automated cleanup of log4sh that is
  invoked upon a normal exit of the script.</para>
              <funcsynopsis>
                <funcsynopsisinfo>log4sh_cleanup</funcsynopsisinfo>
              </funcsynopsis>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
</chapter>
