<?xml version="1.0" encoding="UTF-8"?>
<!--
$Id: quickstart.xml 230 2006-08-19 22:32:02Z sfsetse $
vim:softtabstop=2 shiftwidth=2
-->

<!-- =========================================================================
Quickstart
-->
<chapter id="quickstart"><title>Quickstart</title>
  <para>First things first. Go to the directory from which you extracted the log4sh software. In there, you should find a <filename>Makefile</filename>. If you find one, you are in the right place. We need to setup the environment for running tests, so from this directory, execute the <command>make test-prep</command> command as shown below. Once this is done, a <filename class="directory">test</filename> directory will be created and prepared with everything needed to run the log4sh tests.</para>

  <para>Prepare your environment.</para>

  <screen><![CDATA[
$ make test-prep
$ cd test
]]></screen>

  <!-- =======================================================================
   ! Hello, World! example
   !-->
  <example><title>Hello, World!</title>
    <para>Ok.  What kind of a quickstart would this be if the first example wasn't a "Hello, World!" example?  Who knows, but this isn't one of those kind of quickstarts.</para>

    <para>Run the Hello World test.</para>

    <screen><![CDATA[
$ ./hello_world
1 [main] INFO shell  - Hello, world!
]]></screen>

    <para>You should have seen output similar to that above.  If not, make sure you are in the right location and such.  If you really had problems, please send a letter to the log4sh maintainers.  Who knows, maybe you already found a bug.  Hopefully not!</para>

    <para>The Hello, World! test is about as simple as it gets.  If you take a look at the test, all it does is load <filename>log4sh</filename>, reset the default logging level from <option>ERROR</option> to <option>INFO</option>, and the logs a "Hello, world!" message.  As you can see, it didn't take much to setup and use log4sh.</para>
  </example>

  <!-- =======================================================================
   ! Properties configuration example
   !-->
  <example><title>Properties Configuration Test</title>
    <para>In this example, a <filename>log4sh.properties</filename> configuraiton file will be used to pre-configure log4sh before any logging messages are output.  It demonstrates that a configuration file can be used to alter the behavior of log4sh without having to change any shell code.</para>

    <para>Run the properties configuration test.</para>

    <screen><![CDATA[
$ ./test-prop-config
INFO - We are the Simpsons!
INFO - Mmmmmm .... Chocolate.
INFO - Homer likes chocolate
...
]]></screen>

    <para>You should see much more output on your terminal that what was listed above. What is actually happening is log4sh is outputting information to STDERR using logging statements that were stored in the <filename>test-common</filename> script. In addition, there were multiple logfiles generated (take a look in the <filename class="directory">test</filename> directory), and output was written also written via Syslog. Take a look at both the property configuration script (<filename>test-prop-config</filename>) and the common script (<filename>test-common</filename>) if you would like to see what is happening. If you do, you will notice that nowhere in code was it configured to write to the any of those different locations. The <filename>log4sh.properties</filename> configuration file did all of that work for us. Go ahead and take a look at it too. You might be amazed with how easy it was to write to so many locations with such a small amount of code.</para>
  </example>

  <!-- =======================================================================
   ! Runtime configuration example
   !-->
  <example><title>Runtime Configuration Test</title>
    <para>This example is <emphasis>exactly</emphasis> like the last example as far as output is concerned (they both execute the same <filename>test-common</filename> script), but this one is configured instead at runtime with function calls. It demonstrates that log4sh is fully configurable at runtime.</para>

    <para>Run the runtime configuration test.</para>

    <screen><![CDATA[
$ ./test-runtime-config
INFO - We are the Simpsons!
INFO - Mmmmmm .... Chocolate.
INFO - Homer likes chocolate
...
]]></screen>

    <para>You should again see much more output on your terminal that what was listed above. The output should also have been exactly the same (except that the times were different) as the above example. This is because the same logging commands were used. If you take a look a look in the <filename>test-runtime-config</filename> script though, you will see that this time log4sh was configured completly at runtime. The <filename>log4sh.properties</filename> was not used. It shows that log4sh can be fully configured without a pre-existing configuration file. This isn't nearly as friendly as using the configuration file, but there are times when it is needed.</para>
  </example>

</chapter>
