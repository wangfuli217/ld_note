<?xml version="1.0" encoding="UTF-8"?>
<!--
$Id: advancedusage.xml 403 2007-01-01 16:05:33Z sfsetse $
vim: softtabstop=2 shiftwidth=2
-->

<!-- =========================================================================
Advanced Usage Guide
-->
<chapter id="advancedusage"><title>Advanced Usage</title>
  <para>This chapter is dedicated to some more advanced usage of log4sh. It is meant to demonstrate some functionality that might not normally be understood.</para>

  <section id="advancedusage-sect-envvars"><title>Environment Variables</title>
    <para>There are several environment variables that can be set to alter the behavior of log4sh. The full listing is below.</para>

    <table id="advancedusage-envvars">
      <title>log4sh Environment Variables</title>
      <tgroup cols="3">
      <thead>
	<row>
	  <entry>Variable</entry>
	  <entry>Default</entry>
	  <entry>Description</entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><varname>LOG4SH_ALTERNATIVE_NC</varname></entry>
	  <entry><emphasis>none</emphasis></entry>
	  <entry>Provide log4sh with the absolute path to the <command>nc</command> (netcat) command -- e.g. <filename>/bin/nc</filename></entry>
	</row>
	<row>
	  <entry><varname>LOG4SH_CONFIGURATION</varname></entry>
	  <entry><emphasis>none</emphasis></entry>
	  <entry>Provide log4sh with the absolute path to the log4sh properties file.</entry>
	</row>
	<row>
	  <entry><varname>LOG4SH_CONFIG_PREFIX</varname></entry>
	  <entry><option>log4sh</option></entry>
	  <entry>Define the expected prefix to use for parsing the properties file -- e.g. <option>log4j</option></entry>
	</row>
	<row>
	  <entry><varname>LOG4SH_DEBUG</varname></entry>
	  <entry><emphasis>none</emphasis></entry>
	  <entry>Enable internal log4sh debug output. Set to any non-empty value.</entry>
	</row>
	<row>
	  <entry><varname>LOG4SH_DEBUG_FILE</varname></entry>
	  <entry><emphasis>none</emphasis></entry>
	  <entry>Define a file where all internal log4sh trace/debug/info output will be written to -- e.g. <filename>log4sh_internal.log</filename></entry>
	</row>
	<row>
	  <entry><varname>LOG4SH_INFO</varname></entry>
	  <entry><emphasis>none</emphasis></entry>
	  <entry>Enable internal log4sh info output. Set to any non-empty value.</entry>
	</row>
	<row>
	  <entry><varname>LOG4SH_TRACE</varname></entry>
	  <entry><emphasis>none</emphasis></entry>
	  <entry>Enable internal log4sh trace output. Set to any non-empty value.</entry>
	</row>
      </tbody>
      </tgroup>
    </table>
  </section>

  <section id="advancedusage-sect-remotesyslog"><title>Remote Syslog Logging</title>
    <para>Logging to a remote syslog host is incredibly easy with log4sh, but it is not functionality that is normally exposed to a shell user. The <command>logger</command> command, which is used for local syslog logging, unfortunately does not support logging to a remote syslog host. As such, a couple of choices are available to enable logging to remote hosts.</para>

    <para>Choice #1 -- reconfigure the <command>syslogd</command> daemon</para>

    <para>One can alter the configuration of the local syslog daemon, and request that certain types of logging information be sent to remote hosts. This choice requires no extra software to be installed on the machine, but it does require a reconfiguration of the system-wide syslog daemon. As the syslog daemon is different between operating systems, and even between OS releases, no attempt will be made to describe how to do this in this document. Read the respective <command>man</command> page for your particular system to learn what is required.</para>

    <para>Choice #2 -- install <command>nc</command> (netcat) command -- <emphasis>recommended</emphasis></para>

    <para>The <command>nc</command> (netcat) command has the ability to generate the UDP packet to port 514 that is required for remote syslog logging. If you have this command installed, you can tell log4sh that this <emphasis>alternative</emphasis> command exists, and then you will be able to use the <function>appender_syslog_setHost()</function> function as you would expect.</para>

    <para>The examples below show what a minimum properties file or a minimum script should look like that do remote syslog logging.</para>

    <example id="alternative-nc-config"><title>Sample log4sh properties file demonstrating remote syslog logging</title>
      <programlisting><![CDATA[
#
# log4sh example: remote syslog logging
#

# Set the 'nc' alternative command to enable remote syslog logging
log4sh.alternative.nc = /bin/nc

 Set root logger level to INFO and its only appender to mySyslog
log4sh.rootLogger=INFO, mySyslog

# mySyslog is set to be a SyslogAppender.
log4sh.appender.mySyslog = SyslogAppender
log4sh.appender.mySyslog.SyslogHost = somehost
]]></programlisting>
    </example>

    <example id="alternative-nc-runtime"><title>Sample shell script demonstrating remote syslog logging</title>
      <programlisting><![CDATA[
#! /bin/sh
#
# log4sh example: remote syslog logging
#

# load log4sh (disabling properties file warning) and clear the default
# configuration
LOG4SH_CONFIGURATION='none' . ./log4sh
log4sh_resetConfiguration

# set alternative 'nc' command
log4sh_setAlternative nc /bin/nc

# add and configure a SyslogAppender that logs to a remote host
logger_addAppender mySyslog
appender_setType mySyslog SyslogAppender
appender_syslog_setFacility mySyslog local4
appender_syslog_setHost mySyslog somehost
appender_activateOptions mySyslog

# say Hello to the world
logger_info 'Hello, world'
]]></programlisting>
    </example>
  </section>

  <section id="advancedusage-sect-filerolling">
    <title>Automated File Rolling</title>

    <para>Logging is great, but not when it runs you out of hard drive space. To help prevent such situations, log4sh has automated file rolling built in. By changing your <option>FileAppender</option> into a <option>RollingFileAppender</option>, you enable automatic rolling of your log files. Each logfile will be rolled after it reaches a maximum file size that you determine, and you can also decide the number of backups to be kept.</para>

    <para>To limit the maximum size of your log files, you need to set the <option>MaxFileSize</option> appender option in a properties file, or use the <function>appender_file_setMaxFileSize()</function> function. The maximum size is specified by giving a value and a unit for that value (e.g. a 1 megabyte log file can be specified as '1MiB', '1024KiB', or '1048576B'). Note, the unit must be specified with the proper case, i.e. a unit of 'KB' is correct 'kb' is not.</para>

    <para>The default maximum file size is equavilent to 1MiB</para>

    <table id="advancedusage-fileunits">
      <title>Acceptable file size units</title>
      <tgroup cols="3">
      <thead>
	<row>
	  <entry>Unit</entry>
	  <entry>Size in bytes</entry>
	  <entry>Equivalent sizes</entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry>B (bytes)</entry>
	  <entry>1</entry>
	  <entry>1B</entry>
	</row>
	<row>
	  <entry>KB</entry>
	  <entry>1,000</entry>
	  <entry>1KB = 1000B</entry>
	</row>
	<row>
	  <entry>KiB (kilobytes)</entry>
	  <entry>1,024</entry>
	  <entry>1KiB = 1024B</entry>
	</row>
	<row>
	  <entry>MB</entry>
	  <entry>1,000,000</entry>
	  <entry>1MB = 1000KB = 1000000B</entry>
	</row>
	<row>
	  <entry>MiB (megabytes)</entry>
	  <entry>1,048,576</entry>
	  <entry>1MiB = 1024KiB = 1048576B</entry>
	</row>
	<row>
	  <entry>GB</entry>
	  <entry>1,000,000,000</entry>
	  <entry>1GB = 1000MB = 1000000KB = 1000000000B</entry>
	</row>
	<row>
	  <entry>GiB (gigabytes)</entry>
	  <entry>1,073,741,824</entry>
	  <entry>1GiB = 1024MiB = 1048576KiB = 1073741824B</entry>
	</row>
	<row>
	  <entry>TB</entry>
	  <entry>1,000,000,000,000</entry>
	  <entry>1TB = 1000GB = 1000000MB = 1000000000KB = 1000000000000B</entry>
	</row>
	<row>
	  <entry>TiB (terabytes)</entry>
	  <entry>1,099,511,627,776</entry>
	  <entry>1TiB = 1024GiB = 1048576MiB = 1073741824KiB = 1099511627776B</entry>
	</row>
      </tbody>
      </tgroup>
    </table>

    <para><emphasis role="strong">Note:</emphasis> log4sh differes from log4j in the impretation of its units. log4j assumes that all units are base-2 units (i.e. that KB = 1024B), where as log4sh makes a distinction between the standard SI units of KB (base-10 ~ 1000B = 10^3) and KiB (base-2 ~ 1024B = 2^10). If this causes problems, call the <function>log4sh_enableStrictBehavior()</function> once after loading log4sh to force the unit intrepretation to be like log4j.</para>

    <para>To limit the maximum number of backup files kept, you need to set the <option>MaxBackupIndex</option> appender option in a properties file, or use the <function>appender_file_setMaxBackupIndex()</function> function. Whenever a file has reached the point of needing rotation, log4sh will rename the current logfile to include an extension of '.0', and any other backups will have thier extension number increased as well. With a maximum backup index of zero, no backups will be kept.</para>

    <para>The default maximum backup index is equavilent to '1 MiB'</para>

    <example id="alternative-rolling-config"><title>Sample log4sh properties file demonstrating a RollingFileAppender</title>
      <programlisting><![CDATA[
#
# log4sh example: using the RollingFileAppender
#

 Set root logger level to INFO and its only appender to R
log4sh.rootLogger=INFO, R

# add a RollingFileAppender named R
log4sh.appender.R = RollingFileAppender
log4sh.appender.R.File = /path/to/some/file
log4sh.appender.R.MaxFileSize = 10KB
log4sh.appender.R.MaxBackupIndex = 1
]]></programlisting>
    </example>

    <example id="alternative-rolling-runtime"><title>Sample shell script demonstrating a RollingFileAppender</title>
      <programlisting><![CDATA[
#! /bin/sh
#
# log4sh example: using the RollingFileAppender
#

# load log4sh (disabling properties file warning) and clear the default
# configuration
LOG4SH_CONFIGURATION='none' . ./log4sh
log4sh_resetConfiguration

# add and configure a RollingFileAppender named R
logger_addAppender R
appender_setType R RollingFileAppender
appender_file_setFile R '/path/to/some/file'
appender_file_setMaxFileSize R 10KB
appender_file_setMaxBackupIndex R 1
appender_activateOptions R

# say Hello to the world
logger_info 'Hello, world'
]]></programlisting>
    </example>
  </section>
</chapter>
