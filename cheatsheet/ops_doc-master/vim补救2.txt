vim(启动Vim){
vim -c cmd file: 在打开文件前，先执行指定的命令；
vim -r file: 恢复上次异常退出的文件；
vim -R file: 以只读的方式打开文件，但可以强制保存；
vim -M file: 以只读的方式打开文件，不可以强制保存；
vim -y num file: 将编辑窗口的大小设为num行；
vim + file: 从文件的末尾开始；
vim +num file: 从第num行开始；
vim +/string file: 打开file，并将光标停留在第一个找到的string上。
vim –remote file: 用已有的vim进程打开指定的文件。 如果你不想启用多个vim会话，这个很有用。
但要注意， 如果你用vim，会寻找名叫VIM的服务器；如果你已经有一个gvim在运行了， 你可以用
gvim –remote file在已有的gvim中打开文件。
}

vim(文档操作){
e file –关闭当前编辑的文件，并开启新的文件。 如果对当前文件的修改未保存，vi会警告。
:e! file –放弃对当前文件的修改，编辑新的文件。
:e+file – 开始新的文件，并从文件尾开始编辑。
:e+n file – 开始新的文件，并从第n行开始编辑。
:enew –编译一个未命名的新文档。(CTRL-W n)
:e – 重新加载当前文档。
:e! – 重新加载当前文档，并丢弃已做的改动。
:e#或ctrl+^ – 回到刚才编辑的文件，很实用。
:f或ctrl+g – 显示文档名，是否修改，和光标位置。
:f filename – 改变编辑的文件名，这时再保存相当于另存为。
gf – 打开以光标所在字符串为文件名的文件。
:w – 保存修改。
:n1,n2w filename – 选择性保存从某n1行到另n2行的内容。
:wq – 保存并退出。
ZZ – 保存并退出。
:x – 保存并退出。
:q[uit] ——退出当前窗口。(CTRL-W q或CTRL-W CTRL-Q)
:saveas newfilename – 另存为
:browse e – 会打开一个文件浏览器让你选择要编辑的文件。 如果是终端中，则会打开netrw的文件浏览窗口； 如果是gvim，则会打开一个图形界面的浏览窗口。 实际上:browse后可以跟任何编辑文档的命令，如sp等。 用browse打开的起始目录可以由browsedir来设置：
:set browsedir=last – 用上次访问过的目录（默认）；
:set browsedir=buffer – 用当前文件所在目录；
:set browsedir=current – 用当前工作目录；
:Sex – 水平分割一个窗口，浏览文件系统；
:Vex – 垂直分割一个窗口，浏览文件系统；
}
vim(翻屏){
n%: 到文件n%的位置。
zz: 将当前行移动到屏幕中央。
zt: 将当前行移动到屏幕顶端。
zb: 将当前行移动到屏幕底端。
}
vim(标记){
使用标记可以快速移动。到达标记后，可以用Ctrl+o返回原来的位置。 Ctrl+o和Ctrl+i 很像浏览器上的 后退 和 前进 。
m\{a-z\}: 标记光标所在位置，局部标记，只用于当前文件。
m\{A-Z\}: 标记光标所在位置，全局标记。标记之后，退出Vim， 重新启动，标记仍然有效。
\`\{a-z\}: 移动到标记位置。
'\{a-z\}: 移动到标记行的行首。
\`\{0-9}：回到上[2-10]次关闭vim时最后离开的位置。
\`\`: 移动到上次编辑的位置。''也可以，不过\`\`精确到列，而''精确到行 。如果想跳转到更老的位置，可以按C-o，跳转到更新的位置用C-i。
\`": 移动到上次离开的地方。
\`.: 移动到最后改动的地方。
:marks 显示所有标记。
:delmarks a b – 删除标记a和b。
:delmarks a-c – 删除标记a、b和c。
:delmarks a c-f – 删除标记a、c、d、e、f。
:delmarks! – 删除当前缓冲区的所有标记。
:help mark-motions 查看更多关于mark的知识。
}
vim(改写插入){
c[n]w: 改写光标后1(n)个词。
c[n]l: 改写光标后n个字母。
c[n]h: 改写光标前n个字母。
[n]cc: 修改当前[n]行。
[n]s: 以输入的文本替代光标之后1(n)个字符，相当于c[n]l。
[n]S: 删除指定数目的行，并以所输入文本代替之。
}
vim(剪切和复制、粘贴){
[n]x: 剪切光标右边n个字符，相当于d[n]l。
[n]X: 剪切光标左边n个字符，相当于d[n]h。
:m,ny<cr> 复制m行到n行的内容。
:m,nd<cr> 剪切m行到n行的内容。
}
vim(寄存器){
a-z：都可以用作寄存器名。\"ayy把当前行的内容放入a寄存器。
A-Z：用大写字母索引寄存器，可以在寄存器中追加内容。 如\"Ayy把当前行的内容追加到a寄存器中。
:reg 显示所有寄存器的内容。
\"\"：不加寄存器索引时，默认使用的寄存器。
\"\*：当前选择缓冲区，"\*yy把当前行的内容放入当前选择缓冲区。
\"+：系统剪贴板。\"+yy把当前行的内容放入系统剪贴板。
}
vim(基本排版){
<< 向左缩进一个shiftwidth
>> 向右缩进一个shiftwidth
:ce(nter) 本行文字居中
:le(ft) 本行文字靠左
:ri(ght) 本行文字靠右
gq 对选中的文字重排，即对过长的文字进行断行
gqq 重排当前行
gqnq 重排n行
gqap 重排当前段
gqnap 重排n段
gqnj 重排当前行和下面n行
gqQ 重排当前段对文章末尾
J 拼接当前行和下一行
}
vim(一些按键){
gd: 跳转到局部变量的定义处；
gD: 跳转到全局变量的定义处，从当前文件开头开始搜索；
g;: 上一个修改过的地方；
g,: 下一个修改过的地方；
[[: 跳转到上一个函数块开始，需要有单独一行的{。
]]: 跳转到下一个函数块开始，需要有单独一行的{。
[]: 跳转到上一个函数块结束，需要有单独一行的}。
][: 跳转到下一个函数块结束，需要有单独一行的}。
[{: 跳转到当前块开始处；
]}: 跳转到当前块结束处；
[/: 跳转到当前注释块开始处；
]/: 跳转到当前注释块结束处；
%: 不仅能移动到匹配的(),\{\}或[]上，而且能在\#if，\#else， \#endif之间跳跃。
}