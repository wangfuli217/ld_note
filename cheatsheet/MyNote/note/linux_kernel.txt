处理器在任何指定时间点上的活动必然概括为一列三者之一:
	运行于用户空间,执行用户进程
	运行于内核空间,处于进程上下文,代表某个特定的进程执行(当CPU空闲时,内核就运行一个空进程,处于进程上下文,但运行于内核空间)
	运行于内核空间,处于中断上下文,与任何进程无关,处理某个特定的中断
内核源码树根目录描述
	.config			配置项,一般是模块的配置
	System.map		符号对照表,编译后才会有,将内核符号和它们的起始地址对应起来,调度的时候,如果需要把内存地址翻译成容易理解的函数名以及变量名,这就会很有用
	arch			特定体系结构的源码
	
lock			块设备I/O层
	crypto			加密API
	Documentation	内核源码文档
	drivers			设备驱动程序
	firmware		使用某些驱动程序而需要的设备固件
	fs				VFS和各种文件系统
	include			内核头文件
	init			内核引导和初始化
	ipc				进程间通信代码
	kernel			像调度程序这样的核心子系统
	lib				通用内核函数
	mm				内存管理子系统和VM
	net				网络子系统
	samples			示例,示范代码
	scripts			编译内核所用的脚本
	security		Linux安全模块
	sound			语音子系统
	usr				早期用户空间代码(所谓的initramfs)
	tools			在Linux开发中有用的工具
	virt			虚拟化基础结构
编译内核
	make config 			会在命令行下一一选择配置,太浪费时间
	make menuconfig			基于ncurse库编制的图形界面工具
	make gconfig			基于gtk+的图形工具
	make defconfig			基于默认的配置为你的体系创建一个配置
	make oldconfig			验证和更新配置
	make >/dev/null 		如果想尽量看到少的垃圾信息,却又不希望错过错误报告与警告信息的话可以执行此命令
	make -jn				单任务编译太慢,可以按照逻辑cpu个数来指定n,一般是逻辑cpu个数乘以1到2
	make modules_install	把所有已编译的模块安装到正确的主目录/lib/modules/下
和用户空间编程差异
	内核编程时既不能访问C库也不能访问标准的C头文件
	内核编程时必须使用GNU C
	内核编程时缺乏像用户空间那样的内存保护机制
	内核编程时难以执行浮点运算
	内核给每个进程只有一个很小的定长堆栈
	由于内核支持异步中断,抢占和SMP,因此必须时刻注意同步和并发
	要考虑可移植的重要性
进程
	进程就是处于执行期的代码,但进程并不局限于一段可执行代码->代码段,还包括打开的文件,挂起的信号,内核内部数据,处理器状态,一个或多个具有内存映射的内存地址空间及一个或多个执行线程,数据段等
	进程就是正在执行的程序代码的实时结果,内核需要有效而透明地管理所有细节
	程序本身并不是进程,进程是处于执行期的程序以及相关资源的总称
	内核将进程的列表放在叫做任务队列的双向循环环链表中,链表中的每一项都是类型为task_struct,称为进程描述符,定义在内核<linux/sched.h>文件中,包含一个具体进程的所有信息
	在进程内核栈的栈底或栈顶会创建一个新的结构struct thread_info,在头文件<asm/thread_info.h>中,每个任务的thread_info结构在它的内核栈的尾端分配,thread_info的地址就是实际task_struct的指针
	子进程与进程的区别仅仅在于PID,PPID,某些资源和统计量(例如:挂起的信号,它没有必要被继承)
	写时拷贝:
		传统的fork()系统调用直接把所有的资源复制给新创建的线程,这种实现过于简单且效率低下,更坏的情况是,如果新进程准备打算执行一个新的映像,那么所有拷贝都将前功尽弃
		写时拷贝是一种可以推迟甚至免除拷贝数据的技术,内核此时并不复制整个进程地址空间,而是让父进程与子进程共享同一个拷贝,只有在需要写入的时候,数据才会被复制
线程
	是在进程中活动的对象,每个线程都拥有一个独立的程序计数器,进程栈和一组进程寄存器,内核调度的对象是线程,而不是进程
	对Linux而言,线程只不过是一种特殊的进程罢了,从内核角度来说,并没有线程这个概念,Linux把所有线程都当成进程来实现,仅仅被视为一个与其他进程共享某些资源的进程
	提供了在同一程序内共享内存地址空间运行的一组线程,这些线程还可以共享打开的文件和其它资源,每个线程都有自己的task_struct
	内核线程-独立运行在内核空间的进程,与普通进程的区别在于内核线程没有独立的地址空间,它们只在内核空间运行,从来不切换到内核空间中去
进程调度
	Linux2.5内核中采用了O(1)算法的进程调度程序,不管输入有多大,都能在恒定时间内完成工作,但是它在交互式进程中不佳
	Linux2.6及以后内核中采用了"反转楼梯最后期限调度算法(Rotating Staircase Deadline scheduler)"(RSDL),该算法吸取了队列理论,将公平调度的概念引入了Linux调度程序,并最终在2.6.23内核版本中替代了O(1)算法,它此刻被称为"完全公平调度算法",简称CFS
	Linux采用两种不同的优先级级范围,第一种是nice值,它的范围从-20到+19,默认为0,越大的nice值意味着越低的优先级,第二种是实时优先级,其值是可配置的,默认情况下它的范围从0到99,与nice值相反,越高的实时优先级意味着进程优先级越高
	任何实时进程的优先级都高于普通进程,也就是说实时优先级和nice优先级处于互不相交的两个范畴
	时间片是一个数值,它表明进程在被抢占前所能持续运行的时间-时间片过长会导致对交互的响应表现欠佳,时间片太短会明显增大进程切换带来的处理器耗时,很多操作系统特别重视这一点,所以默认的时间片都很短,如10ms
	Linux并没有直接分配时间片到进程,它是将处理器的使用比划分给了进程,这样一来,进程所获得的处理器时间其实是和系统负载均衡密切相关的,这个比例会进一步受优先级影响
	在多数操作系统中,是否要将一个进程立刻投入运行(也就是抢占当前进程),是完全由进程优先级和是否有时间片决定的,而在Linux中使用新的CFS调度器,其抢占时机取决于新的可运行程序消耗了多少处理器使用比,如果消耗的使用比当前进程小,则新进程立刻投入运行,抢占当前进程,否则,将推迟其运行
	Linux调度器是以模块方式提供的,这样做的目的是允许不同类型的进程可以有针对性地选择调度算法,这种模块化结构被称为调度器类,它允许多种不同的调度算法并存,调度属于自己范畴的进程,每个调度器都有一个优先级,它会按照优先级顺序遍历调度类,拥有一个可执行进程的最高优先级的调度器类胜出
	完全公平调度CFS是针对普通进程的一个调度类
	CFS引入了每个进程获得的时间片底线,这个底线称为最小粒度
系统调用
	在Linux中,每个系统调用都有一个系统调用号,当用户空间的进程执行一个系统调用的时候,这个系统调用号就是用来指明到底是要执行哪个系统调用,进程不会提及系统调用的名称
	用户空间的程序无法执行内核代码,它们不能直接调用内核空间的函数,因为内核驻留在受保护的地址空间上,通知内核的机制是靠软中断来实现的:通过引发一个异常来促使系统切换到内核态去执行异常处理程序,此时的异常处理程序就是系统调用处理程序
下半部
	是一个操作系统转用词汇,用于指代中断处理流程中推后执行的那一部分,在Linux中,目前有3种机制来实现,软中断,tasklet和工作队列
	软中断是一组静态(编译期间)定义的下半部接口,有32个,可以在所有处理器上同时执行--即使两个类型相同也可以
	tasklet是一种基于软中断实现的灵活性强,动态创建下半部的实现机制,两个不同类型的tasklet可以在不同的处理器上同时执行,但类型相同的tasklet不能同时执行
	每个处理器都有一个叫ksoftirqd/n的线程,区别在于n,它是处理器对应的编号,它的NICE值是最低的19,为了保证处理器空间时能即时处理,也能保证处理器负载过高时先处理用户任务,之所有每个处理器都有这样一个线程是为了保证只要有空闲的cpu,就会处理软中断
	工作队列是唯一能在进程上下文中运行的下半部机制,也只有它可以睡眠
	
自旋锁
	自旋锁最多被一个可执行线程持有,如果一个执行线程试图获得一个被已经持有的自旋锁,那么该线程就会一直进行忙循环-旋转-等锁重新可用.
	一个被争用的自旋锁使得请求它的线程在等待锁重新可用时自旋(特别浪费处理器时间),这种行为是自旋锁的要点,所以自旋锁不应被长时间持有
	自旋锁是不可递归的
读写锁
	读写锁,读锁是共享锁,写锁是互斥锁,在大量有读操作的地方使用读锁不一定是好的手段,这可能导致写锁无法写入,读锁可以不断地递归
信号量
	信号量是一种睡眠锁,如果有一个任务试图获得一个不可用(已被占用)的信号量时,信号量会使将其推进一个等待队列,然后让其睡眠,这时处理器能重获自由,从而去执行其他代码
互斥锁
	指的是任何可以睡眠的强制互斥锁,比如使用计数是1的信号量
	限制:
		给mutex上锁者必须负责给其解锁,不能在一个上下文中锁定一个mutex,在另一个上下文中给它解锁
		当持有一个mutex时,进程不可以退出
	