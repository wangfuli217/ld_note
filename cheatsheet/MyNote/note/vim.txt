vi -u NONE     		让vi在启动的时候不加载.vimrc
vim -N				使用nocompatible选项进入vi,防止进入兼容模式(兼容模式会使很多功能被禁用)
vi有三种模式,一般模式,插入模式,末行模式

在插入模式中移动光标会重置修改状态
进入末行模式使用大写Q,退出输入vi即可

在vim中|仅表示命令分隔符

vim只有一条额外规则,当一个操作符命令被连续调用2次时,它会作用于当前行,所以dd删除当前行,<<缩进当前行,gU是特殊情况,可以使用gUgU或者gUU
vim内设的操作符命令有(可以自定义操作符):
	c	修改
	d	删除
	y	复制到寄存器,如"ayw复制到a寄存器
	g~	反转大小写
	gu	转为小写
	gU	转为大写
	>	增加缩进
	<	减小缩进
	=	自动缩进
	!	使用外部程序过滤{motion}所跨越的行

操作符+动作命令 = 动作
只有操作符才会激活操作符待裁决模式

在插入模式下按
ctrl+[				可切换到普通模式,与ESC功能一样
ctrl+o				可切换到插入-普通模式(可执行一次普通模式命令,再返回到插入模式)
ctrl+r	字符		可以使用字符寄存器里的内容(在末行模式下同样可以使用)
ctrl+v 数字			可以从字符编码的输入得字符,一般为3位,如果想输入一个编码超过3位的字符,则输入4位16进制字符,如果ctrl+v u00bf,若输入的非数字,则插入这个按键本身所代表的字符(即使启用了expandtab选项,ctrl+v expandtab还是会输入制表符)
ctrl+k char1 char2  以二合字母输入字符,如??就可以使用ctrl+k <<,ctrl+k >>来按出
ctrl+g				显示当前文件的文件名及状态

用命令:digraphs 可以查看二合字母列表,不过输出不太好阅读,也可以用:h digraph-table查看另一个更为有用的列表

操作缓冲区文本的Ex命令
:[range]print 									打印指定范围内的行,显示在命令行,简写为p
:[range]delete [x] 								删除指定范围内的行[到寄存器x中]
:[range]yank [x]								复制指定范围内的行[到寄存器x中]
:[line]put [x]									在指定行粘贴寄存器x中的内容
:[range]copy {address}							把指定范围内的行拷贝到{address}所指定的行之下,简写为t或co
:[range]move {address}							把指定范围内的行移动到{address}把指定的行之下,简写为m
:[range]join									连接指定范围内的行
:[range]normal {commands}						对指定范围内的每一行执行普通模式命令,简写为norm,如normal .
:[range]substitute/{pattern}/{string}/[flags]	把指定范围内出现{pattern}的地方替换为string,简写为s,g标记全替换可在全局进行,而不是每一行的第一个匹配,c可以确认或拒绝每一次修改,n会抑制正常替换行为,而是报告匹配的次数,e用来屏蔽错误提示,&用来重用上一次substitute命令所用过的标志位(在替换哉中表示插入匹配模式的所有内容),在替换域中输入\=可以执行一段表达式脚本,就可以通过\=@a来访问a寄存器中的内容了,当替换命令忘记加%时,可以使用快捷键g&,来对整个文件进行上一次的替换命令,相当于命令:%s//~/&,:&&会重复上一次替换命令,并复用标志位
:[range]global/{pattern}/[cmd]					对指定范围内匹配{pattern}的所有行,在其上执行Ex命令,缺省范围为整个文件,还可以用global!或vglobal来反转,表示没有匹配到的行执行命令
范围range可以进行偏移,偏移一般形式:{address}+n	n为数字,可以为正负数,如果n被省略,缺省为1,address可以是一个行号,一个位置标记,或是一个查找模式
range中%代表当前文件的所有行,即整个文件,%:h代表文件所有路径,$代表文件最后一行,.代表当前行,'<代表高亮选区首行的位置标记,'>代表高亮选区的最后一行位置标记,范围也可以是模式,如/{pattern}/,/{pattern}/p,'m包含位置标记m的行,0虚拟行,位于文件第一行上方
标准格式: :g/pattern/[range][cmd]   若没有cmd,默认为print	可以使用:g/搜索字符串来查看所以匹配的输出,也可以使用快捷键[I来查看当光标下单词的所有匹配
广义开始: :g/{start}/ .,{finish} [cmd]
:g/re/d				可以删除匹配的行
:g/record/yank A	将文件里所有匹配的record行复制到寄存器a里,A必须大写才是追加
:g/record/t$		将所有匹配的行复制到文件末尾

在命令行模式下按ctrl+d可以显示可用的补全列表,<ctrl+r><ctrl+w>映射项会复制光标下的单词到命令行,按ctrl+f可以进入命令行历史的窗口(与正常模式下按q:一样,q/打开查找命令历史的命令行窗口)

在命令行窗口调用shell命令,只需要在命令前加上一个!号

命令模式下可以使用的一些特殊命令:
	:shell					可以打开一个交互式shell
	:read !cmd				会把cmd执行的结果读入当前行下方
	:write !cmd				把缓冲区内容做为指定cmd的标准输入,若写成write! cmd,则会把缓冲区内容强制写入到以cmd命名的文件中
	:lcd {path}				可以设置当前窗口的本地工作目录,如果一个标签页包含了2个或更多个窗口,可以使用命令:windo lcd {path}为所有这些窗口设置本地工作目录
	:tabedit {filename}		可以打开一个新的标签页,如果省略filename,那会会打开一个新标签页,里面包含一个空的缓冲区
	ctrl+w T				可以将一个窗口移到一个新的标签页(当前窗口必须包含2个或以上的窗口)
	:tabclose				关闭当前标签页及其中的所有窗口
	:tabonly				只保留活动标签页,关闭其他所有标签页
	:tabnext [N]			切换到下一个(编号为N)标签页,普通模式命令(N)gt
	:tabprevious			切换到上一个标签页,普通模式命令gT
	:tabmove [N]			可以重新排列标签页,当N为0时,当前标签页会被移到开头,如果省略了N,则会被移到结尾
	:pwd					显示工作目录
	:edit filename			将磁盘上的文件重新读入缓冲区,常用于回滚,后面文件名可以加上绝对路径或相对路径
	:Explore				打开文件管理器,简写为:E,Sexplore/Vexplore分别在一个水平/垂直切分窗口中打开文件管理器,如果在打开文件管理器后想返回刚刚编辑的文件ctrl+^
	:jumps					查看跳转列表
	:changes				查看改变列表
	:delete [register c]	将当前行剪切到寄存器c中
	:put [register c]		将寄存器c中内容粘贴至当前光标行之下
	:reg [register]			可以查看某个寄存器中的内容,若没有接寄存器,则显示所有有值的寄存器中的内容
	
	当一个文件只读时,且当前用户有sudo权限,那么可以通过命令:w !sudo tee % > /dev/null来强制写入
	
	
缓冲区
	:ls				显示被载入到内存的缓冲区列表,%表明哪个缓冲区在当前窗口可见,#符号代表轮换文件,按ctrl+^可在轮换文件与当前文件间切换
	:bnext/bprev	可切换到下一个/上一个缓冲区
	:bfirst/blast	可切换到第一个/最后一个缓冲区
	:buffer n		可切换到编号为n的缓冲区上
	:bdelete N1,N2	删除缓冲区
	:args			记录在启动时作为参数传递给vim的文件列表,也可以通过:args {arglist}来设置参数列表,arglist可以包括文件名,通配符,甚至是一条shell命令的输出结果,*可以匹配0到多个字符,但不会递归匹配子目录,**也是匹配0到多个字符,但是可以进入子目录
	在命令模式中,也会先执行``括起来的命令
	:next/prev		可切换参数列表

vi一些常用命令
	a		在当前光标后进入插入模式
	A		在当前行尾进入插入模式
	i		在当前光标处进入插入模式
	I		在当前行首进入插入模式
	o		在当前行下新增空行进入插入模式
	O		在当前行上新增空行进入插入模式
	s		删除光标下的字符并进入插入模式
	r		替换一个字母后回归正常模式,gr/gR是虚拟替换模式,虚拟替换模式在处理制表符时,会把制表符替换成一个字符,导致宽度变化,虚拟替换则不会
	R		进入替换模式
	cw		删除光标下的单词并进入插入模式
	
	v		进入字符文本可视模式
	V		进入行文本可视模式
	ctrl+v	进入块文本可视模式
	gv		重选上次的高亮选区
	可视模式中按o可以切换高亮选区的活动端,按u/U可以转换大小写
	在上面三种进入可视模式里,按ctrl+g可进入选择模式,在选择模式中输入任何字符,都会替换已经选择的字符并进入插入模式
	在可视模式和待裁决模式中,i和a沿用一个不同的约定,他们会被当做一个文本对象的组成部分,vim中的文本对象由2个字符组成,第一个永远是i或a,后面一个字符通常为(,),[,],<,>成对出现的字符中的一个,it可以选择xml标签内部
	
	db		删除从光标起始位置到单词开头的内容(不包括光标所在位置)
	dw		删除从光标起始位置到单词尾的内容
	daw		删除整个单词,不管光标位于单词的哪个位置,可以理解为delete a word
	x		删除光标下的一个字符,和dl效果一样
	
	zz		将当前行显示到屏幕中间
	zt		将当前行显示到屏幕顶部
	zb		将当前行显示到屏幕底部
	
	ga		查看光标下字符的编码,以十进制,十六进制,八进制显示
	gp/gP	粘贴,与p/P不同的是粘贴完后光标会在复制完内容的最后
	
	%		在一对括号间跳转
	
	[count]ctrl+a	把当前光标之上或之后的数值加上[count],如果光标不在数字上,则会在当前行正向查找一个数字,如果找到了,就跳到那里,再进行加法
	[count]ctrl+x	和上面相反的是做减法操作
	上面2个操作如果对数字07这种数字做操作的话会变成010,因为vim把0开头的数字认为是八进制了,如果想认为都是十进制,则在vimrc里加入set nrformats=
	
	fx(Fx)	移动光标到当前行的下一个(上一个)x处
	tx(Tx)	和上面类似,但是是移动到x的左边(右边)一个位置
	w		正向移动到下一单词的开头
	b		反向移到到当前单词/上一单词的开头
	e		正向移动到当前单词/下一单词的结尾
	ge		反向移动到上一单词的结尾
	上面4条命令除了g都可以改为大写,移动的就是字串,而非单词
	)		移动光标到下一个句子
	(		上一个句子
	ctrl-f	向下移动一屏
	ctrl-b	向上
	ctrl-d	向下移动半屏
	ctrl-u	向上
	G		文件尾
	numG	到num行
	M		移动光标到屏幕中间
	H		上面
	L		下面
	J		将当前行与下一行合并成一行,以空格隔开
	K		用于查看光标下单词的手册页
	*		读取光标处的字符串,并且移动光标到它再次出现的地方,*和#都会加上单词边界,如不想匹配单词边界,可以使用g*与g#
	#		和上面类似,但是往反方向找
	&		重复上次的:substitute命令(替换)
	/text   查找text
	?text	反方向找
	
	m{a-z}	在当前光标的位置标记一个书签,名字为a-z单个字母,只能是小写,大写的为全局书签
	'a		到书签a处所在的行,并把光标置于该行第一个非空白字符上
	`a		到书签a处,行列不变
	`0 -> 跳转至现在编辑的文件中上次退出的位置 (go to last exit in file)
	`` -> 跳转至最后一次跳转的位置 (go to last jump -> go back to last jump)
	`. -> 跳转至上次修改的地方
	`^ -> 跳转至上次插入的地方
	`[ -> 跳转至上次修改或复制的起始位置,相应的`]到结束位置
	'< -> 跳转至上次高亮选区的起始位置,相应的'>到结束位置
	
	g`{mark} -> 跳转到书签 (jump to {mark})

	%		在成对的括号等符号间移动
	;		重复上一个f/F,t/T动作,g;可以反向遍历改变列表,相应的g,可以正向遍历改变列表
	,		重复上一个f/F,t/T动作,相反的方向
	.		重复上次普通模式的修改,@:可以重复上次的Ex命令
	gd		去某个局部变量的定义处
	gi		回到上次退出编辑的地方继续编辑
	gf		打开光标下单词作为文件名的文件,可以理解为go to file
	
	>G		增加当前行到文档末尾处的缩进层级
	
	ci'、ci"、ci(、ci[、ci{、ci< - 分别更改这些配对标点符号中的文本内容
	di'、di"、di(或dib、di[、di{或diB、di< - 分别删除这些配对标点符号中的文本内容
	yi'、yi"、yi(、yi[、yi{、yi< - 分别复制这些配对标点符号中的文本内容
	vi'、vi"、vi(、vi[、vi{、vi< - 分别选中这些配对标点符号中的文本内容
	另外如果把上面的i改成a可以连配对标点一起操作
	
	ctrl +n 关键词自动完成
	
	:undolist  显示撤销分支
	:undo 编号	撤销到某个节点
	:earlier  3m	返回3分钟前的文本状态
	:later	 3m 返回3分钟之后的状态
	g-			返回较早的文本状态
	g+ 			返回较新的文本状态
	gj/gk		移动一屏幕行,j和k移动一实际行

	:sp(split) 文件名  可以水平拆分出一个窗口,上下的,快捷键ctrl+w s
	:vsp(vertical split) 文件名 竖直拆分(如果不加文件名拆分出同一个文件),快捷键ctrl+w v
	:split 命令可以接受个数前缀。如果指定了这个前缀，这个数将作为窗口的高度(行或列数)
	数字n  ctrl+w  -/+    将某个窗口减少或增高n行
	要把一个窗口设置为指定的高度，可以用这个命令：
		{height}CTRL-W _
	要把一个窗口扩展到尽可能大，可以使用无个数前缀的 CTRL-W _ 命令。
	:clo(close) 可以关闭某个窗口,快捷键ctrl+w c
	:on(only) 只保留当前窗口,快捷键ctrl+w o
	:new 	水平新文件
	:vnew 	垂直新文件
	
	ctrl+r ctrl+w	可以在命令行模式中将当前光标下的单词复制到命令里,也可以是搜索模式下
	
	CTRL-W h        跳转到左边的窗口
	CTRL-W j        跳转到下面的窗口
	CTRL-W k        跳转到上面的窗口
	CTRL-W l        跳转到右边的窗口

	CTRL-W t        跳转到最顶上的窗口
	CTRL-W b        跳转到最底下的窗口
	
	CTRL-W w		在相邻的两个窗口间跳转
	
	CTRL-W K		把当前窗口移到最上边
	CTRL-W H        把当前窗口移到最左边
	CTRL-W J        把当前窗口移到最下边
	CTRL-W L        把当前窗口移到最右边
	
	ctrl+w = 		使所有窗口等宽等高
	ctrl+w _		最大化活动窗口的高度
	ctrl+w | 		最大化活动窗口的宽度
	[N]ctrl+w _/|	把高度/宽度设为N行/列
		
	:delm{marks} -> 删除一个书签 (delete a mark) 例如:delma那么就删除了书签a 
	:delm! -> 删除全部书签 (delete all marks)
	
	:marks -> 显示系统全部书签 (show all bookmarks)
	
	打开了几个窗口，现在你想退出 Vim，你可以分别关闭每一个窗口。更快的方法是：
	:qa(qall)
	全部保存
	:wa(wall)
	还有wqa!(wqall!),qa!(qall!)
	
	vimdiff 文件名1  文件名2   可以对比2个文件

引用寄存器可以使用"{register}
1.无名（unnamed）寄存器：""，缓存最后一次操作内容；  是p默认使用的寄存器)

2.数字（numbered）寄存器："0 ～ "9，缓存最近操作内容，复制与删除有别, "0寄存器缓存最近一次复制的内容，"1-"9缓存最近9次删除内容

3.行内删除（small delete）寄存器："-，缓存行内删除内容；（The small delete register）。事实上刚删除的文本并不一定被送到数字寄存器，如果删除的文本不含换行符（不足一整句）则文本被送至这个寄存器。如x、d2h这两条命令删除的文本都会被送到这个寄存器。注意下在这条命令虽然删除了一整行的文本但因不含换行符所以也被送到这个寄存器`0d$‘

4.具名（named）寄存器："a ～ "z或"A - "0Z，指定时可用；

5.只读（read-only）寄存器：":",".","%","#"，分别缓存最近命令、最近插入文本、当前文件名、当前交替文件名；

6.表达式（expression）寄存器："=，只读，用于执行表达式命令；

7.选择及拖拽（selection and drop）寄存器："*, "+, "~，存取GUI选择文本，可用于与外部应用交互，使用前提为系统剪切板（clipboard）可用；

8.黑洞（black hole）寄存器："_，不缓存操作内容（干净删除）；

9.模式寄存器（last search pattern）："/，缓存最近的搜索模式。

10.X11系统剪贴板,"+,X11主剪贴板,用鼠标中键操作,"*

宏
q{register}				开始/停止录制宏,若register为大写的寄存器,则录制的命令会追加到寄存器后,可用来给宏追加命令
@{register}				指行指定寄存器中的内容

并行执行宏可以用可视模式选定一块区域,然后调用末行模式命令normal @{register}来实现

查找模式中使用\c或\C,会强制不区分大小写/区分大小写,不管ignorecase设置与否,可以出现在模式的任意位置
查找模式中输入了一段文件后可以用ctrl+r ctrl+w来补全要查找的内容,但如果启用了\v,则补全会补充完整单词,如car补全变成carcar
查找模式中正则表达式与常用的很不一样,如(,),{,}需要转义才且有特殊功能,可以使用\v启用very magic模式,这样除了_,0-9,大小写字母的其他字符都具有特殊含义,\v必须在开头,\V可启用very nomagic,任何字符都被当作原义
:%s///gn可以统计上次查找的文本出现的次数,n可以抑制替换动作
	.表示当前行,+8表示下8行
查找偏移,可以使用/lan/e偏移到匹配的lan的n处而非l处

vi里的正则表达式
\<与\>			都匹配单词边界
\w				单词类字符
\W				非单词类字符
\zs				标志一个匹配的开始
\ze				标志一个匹配的结束
在圆括号前加%可以不捕获位于括号内部的内容,如%(A)则不会将匹配的A放入分组\1

quickFix窗口
可以显示编译中的错误信息或者grep到的文件信息
:cnext
:cprev
:cfirst
:clast
:cnfile		跳转到下一个文件中的第一项
:cpfile		跳转到上一个文件中的最后一项
:cc N		跳到位置列表的第n项
:copen		打开quickFix窗口
:cclose		关闭quickFix窗口

自动补全
ctrl+n		使用来自补全列表的下一个匹配项
ctrl+p		使用来自补全列表的上一个匹配项
ctrl+y		确认使用当前选中的匹配项
ctrl+e		还原最早输入的文本(从自动补全中exit)
ctrl+h		从当前匹配项中删除一个字符
ctrl+l		从当前匹配项中增加一个字符

ctrl+n			普通关键字
ctrl+x ctrl+n	当前缓冲区关键字
ctrl+x ctrl+i	包含文件关键字
ctrl+x ctrl+]	标签文件关键字
ctrl+x ctrl+k	字典查找
ctrl+x ctrl+l	整行补全
ctrl+x ctrl+f	文件名补全
ctrl+x ctrl+o	全能补全
	
vim里的一些选项
	wildmode   					命令行模式tab补全命令行为
	colorscheme					设置颜色主题
	history						记录的命令条数
	scrollbind/noscrollbind		是否同步滚动
	hidden						当对某个缓冲区做了修改后,切换下个缓冲区时会提醒当前文件已修改未保存,启用了此选项后,不会再有提示
	path						允许我们指定一些目录,当调用:find命令时,vim会在这些目录中进行查找,例set path+=app/**,**会通配app/下的所有子目录
	wrap/nowrap					超出窗口宽度的行是否被回绕显示
	suffixesadd					当试图使用gf打开文件时,会加上的扩展名
	paste						启用系统粘贴命令,即在插入模式下对粘贴的内容不进行自动缩进
	ignorecase					搜索模式不区分大小写
	smartcase					更智能地在搜索模式区分大小写,输入的都是小写字母时,就会按照忽略大小写方式搜索,只要输入一个大写字母,就会区分大小写(必须ignorecase开启)
	wrapscan/nowrapscan			查找到文件尾了是否从头开始重新查找
	hlserarch/nohlsearch		查找的字符串是否高亮匹配
	incsearch  					根据已在查找域中输入的文本,预览第一处匹配的文本
	tags						设置tags文件目录
	spell						启用拼写检查器,所有未在拼写文件中出现的单词都会被高亮显示
	缩进
	'autoindent'    沿用上一行的缩进。
	'smartindent'   类似 'autoindent', 但是可以识别一些 C 语法以能在合适的地方
					增加 / 减少缩进。
	'cindent'       比上面两个更聪明；可以设置不同的缩进风格。
	'indentexpr'    最灵活的一个: 根据表达式来计算缩进。若此选项非空，则将其他选
					项覆盖。参见 |indent-expression|.
