一个算法的最坏情况运行时间是在任何输入下运行时间的一个上界,知道了这一点,就能确保算法的运行时间不会比这一时间更长
如果一个算法的最坏情况运行时间要比另一个算法的低,我们就常常认为它的效率更高

在一趟比较中同时求出最大值与最小值,可从数组第一个数与最后一个数开始循环,这样只需要比较3*(n/2)=1.5n,若从第一个数循环到最后一个数需要比较2*(n-1)=2n-2

求出一个序列中第i小的元素,不需要排完序再求a[i],可以在快速排序中判断i与中间值的大小,另一边不用继续递归了,期望时间可以达到O(n)

二叉搜索树节点的前驱后继节点
前驱节点：节点val值小于该节点val值并且值最大的节点 
后继节点：节点val值大于该节点val值并且值最小的节点

avl--自平衡二叉查找树
	1.本身是一棵二叉搜索树--任意一个节点的左子树都小于这个节点的值,右子树都大于这个节点的值,所以不能插入相同的值
	2.带有平衡条件,每个节点的左右子树的高度之差的绝对值最多为1

插入:
假设有一个节点的平衡因子为2（在AVL树中，最大就是2，因为节点是一个一个地插入到树中的，一旦出现不平衡的状态就会立即进行调整，因此平衡因子最大不可能超过2），那么就需要进行调整。由于任意一个节点最多只有两个儿子，所以当高度不平衡时，只可能是以下四种情况造成的：
1. 对该节点的左儿子的左子树进行了一次插入--右旋,旋转点与旋转点左孩子平衡因子变为0,其他平衡因子不变
2. 对该节点的左儿子的右子树进行了一次插入--将旋转点的左子树进行一次左旋,再从旋转点开始一次右旋
	旋转点(T)左儿子(L)右子树的平衡因子(LR):
	-1:说明LR的右子树较高,左子树较低,最后LR的左子树会变为L的右子树,所以L的平衡因子置1,T和LR的平衡因子置0
	0 :最后三个涉及到旋转的点平衡因子都变为0
	1 :说明LR的左子树较高,右子树较氐,最后LR的右子树会变为T的左子树,所以T的平衡因子置-1,L和LR的平衡因子置0
3. 对该节点的右儿子的左子树进行了一次插入--将旋转点的右子树进行一次右旋,再从旋转点开始一次左旋
	旋转点(T)右儿子(R)左子树的平衡因子(RL):
	-1:说明RL的右子树较高,左子树较低,最后RL的左子树会变为T的右子树,所以T的平衡因子置1,R和RL的平衡因子置0
	0 :最后三个涉及到旋转的点平衡因子都变为0
	1 :说明RL的左子树较高,右子树较低,最后RL的右子树会变为R的左子树,所以R的平衡因子置-1,T和RL的平衡因子置0
4. 对该节点的右儿子的右子树进行了一次插入--左旋,旋转点及旋转点右孩子平衡因子变为0,其他平衡因子不变
情况1和4是关于该点的镜像对称，同样，情况2和3也是一对镜像对称
左旋--逆时针,旋转点的右子树赋值为其右孩子的左子树,其左子树不变,再将旋转点的右孩子的左子树赋值为旋转点,后根节点变为旋转点的右子树
右旋--顺时针,旋转点的左子树赋值为其左孩子的右子树,其右子树不变,再将旋转点的左孩子的右子树赋值为旋转点,后根节点变为旋转点的左子树
旋转点--即第一棵不平衡的二叉树的根节点

删除:
1.叶子节点--直接删除,树变矮
2.左子树或右子树一个为空--删除后将不为空的子树接上去,树变矮
3.左右子树都不为空

红黑树是avl的一种,没有保持绝对平衡,插入最多2次旋转,删除最多3次旋转,确保没有一条路径比其他路径长2倍,因而是接近平衡的,调试最高为2lg(n+1)
	性质1. 每个节点是红色或黑色的
	性质2. 根节点是黑色的
	性质3 每个叶节点（NIL节点是一个假想的或是无实在意思的节点,所有应该指向NULL的指针,都看成指向了NIL节点,包括叶节点的子节点指针或是根节点的父指针）是黑色的
	性质4 每个红色节点的两个子节点都是黑色(从每个叶子到根的所有路径上不能有两个连续的红色节点)
	性质5. 从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点
	性质6. 所有非叶子节点都有两个子节点
	上述条件保证了最深的叶子节点的深度不会大于两倍的最浅叶子节点的深度,所以,红黑树是半平衡的
	
新插入节点一般着红色,保持性质5,分析性质得到在插入一个节点的过程中只可能违反性质2或性质4,性质2可通过判断插入的节点是否为根节点来判断,所以红黑树性质只可能发生在插入一个节点后,其父节点也是红色,这时,需要旋转或重新着色来解决
插入:(假设插入节点是z,p(z)为其父节点,z和p(z)都是红色,z的叔叔节点是y)
	1.z的叔叔节点y是红色,则可以将p(z)和y都着为黑色,以解决z和(pz)都是红色的问题,将p(p(z))着为红色以解决性质4问题,然后把p(p(z))当成新增节点来检查是否符合性质
	2.z的叔叔节点y是黑色,且z是左孩子
		将p(p(z))右旋,p(z)着黑色,p(p(z))着红色即可
	3.z的叔叔节点y是黑色,且z是右孩子
		将p(z)左旋转化为情况2,此时z和p(z)都是红色的,对性质5无影响,无论是直接或间接进入情况2,z的叔叔y总是黑色的
	
动态规划常用于最优化问题,即要做出一组选择以达到一个最优解,在做选择的同时,经常出现同样形式的子问题
分治法将各个问题划分为一些独立的子问题,递归地求解各子问题,然后合并子问题的解得到原问题的解,动态规划适用于子问题不是独立的情况,也就是各子问题包含公共的子问题,这种情况下,用分治法会做许多不必要的工作,动态规划只对每个子问题求解一次,将其结果保存在一张表中,从而避免每次遇到各个子问题重新计算答案,分4个步骤
1.描述最优解的结构
2.递归定义最优解的值
3.按自底向上的方式计算最优解的值
4.由计算出的结果构造一个最优解

贪心算法通常也用于最优级化问题,算法思想是以局部最优来做每一个选择,但是不容易判断贪心法是否有效
与动态规划有一个显著区别,贪心算法是自顶向下的方式使用最优子结构的


MD5功能：
    输入任意长度的信息，经过处理，输出为128位的信息（数字指纹）；
    不同的输入得到的不同的结果（唯一性）；
    根据128位的输出结果不可能反推出输入的信息（不可逆）； 
	
 MD5算法过程：
    对MD5算法简要的叙述可以为：MD5以512位分组来处理输入的信息，且每一分组又被划分为16个32位子分组，经过了一系列的处理后，算法的输出由四个32位分组组成，将这四个32位分组级联后将生成一个128位散列值。

     第一步、填充：如果输入信息的长度(bit)对512求余的结果不等于448，就需要填充使得对512求余的结果等于448。填充的方法是填充一个1和n个0。填充完后，信息的长度就为N*512+448(bit)；

     第二步、记录信息长度：用64位来存储填充前信息长度。这64位加在第一步结果的后面，这样信息长度就变为N*512+448+64=(N+1)*512位。

     第三步、装入标准的幻数（四个整数）：标准的幻数（物理顺序）是（A=(01234567)16，B=(89ABCDEF)16，C=(FEDCBA98)16，D=(76543210)16）。如果在程序中定义应该是（A=0X67452301L，B=0XEFCDAB89L，C=0X98BADCFEL，D=0X10325476L）。有点晕哈，其实想一想就明白了。

     第四步、四轮循环运算：循环的次数是分组的个数（N+1） 

     1）将每一512字节细分成16个小组，每个小组64位（8个字节）
     
     2）先认识四个线性函数(&是与,|是或,~是非,^是异或)
  F(X,Y,Z)=(X&Y)|((~X)&Z)
  G(X,Y,Z)=(X&Z)|(Y&(~Z))
  H(X,Y,Z)=X^Y^Z
  I(X,Y,Z)=Y^(X|(~Z))
    
    3）设Mj表示消息的第j个子分组（从0到15），<<<s表示循环左移s位，则四种操作为：
  FF(a,b,c,d,Mj,s,ti)表示a=b+((a+F(b,c,d)+Mj+ti)<<<s)
  GG(a,b,c,d,Mj,s,ti)表示a=b+((a+G(b,c,d)+Mj+ti)<<<s)
  HH(a,b,c,d,Mj,s,ti)表示a=b+((a+H(b,c,d)+Mj+ti)<<<s)
  II(a,b,c,d,Mj,s,ti)表示a=b+((a+I(b,c,d)+Mj+ti)<<<s)

    4）四轮运算
第一轮
a=FF(a,b,c,d,M0,7,0xd76aa478)
b=FF(d,a,b,c,M1,12,0xe8c7b756)
c=FF(c,d,a,b,M2,17,0x242070db)
d=FF(b,c,d,a,M3,22,0xc1bdceee)
a=FF(a,b,c,d,M4,7,0xf57c0faf)
b=FF(d,a,b,c,M5,12,0x4787c62a)
c=FF(c,d,a,b,M6,17,0xa8304613)
d=FF(b,c,d,a,M7,22,0xfd469501)
a=FF(a,b,c,d,M8,7,0x698098d8)
b=FF(d,a,b,c,M9,12,0x8b44f7af)
c=FF(c,d,a,b,M10,17,0xffff5bb1)
d=FF(b,c,d,a,M11,22,0x895cd7be)
a=FF(a,b,c,d,M12,7,0x6b901122)
b=FF(d,a,b,c,M13,12,0xfd987193)
c=FF(c,d,a,b,M14,17,0xa679438e)
d=FF(b,c,d,a,M15,22,0x49b40821)

第二轮
a=GG(a,b,c,d,M1,5,0xf61e2562)
b=GG(d,a,b,c,M6,9,0xc040b340)
c=GG(c,d,a,b,M11,14,0x265e5a51)
d=GG(b,c,d,a,M0,20,0xe9b6c7aa)
a=GG(a,b,c,d,M5,5,0xd62f105d)
b=GG(d,a,b,c,M10,9,0x02441453)
c=GG(c,d,a,b,M15,14,0xd8a1e681)
d=GG(b,c,d,a,M4,20,0xe7d3fbc8)
a=GG(a,b,c,d,M9,5,0x21e1cde6)
b=GG(d,a,b,c,M14,9,0xc33707d6)
c=GG(c,d,a,b,M3,14,0xf4d50d87)
d=GG(b,c,d,a,M8,20,0x455a14ed)
a=GG(a,b,c,d,M13,5,0xa9e3e905)
b=GG(d,a,b,c,M2,9,0xfcefa3f8)
c=GG(c,d,a,b,M7,14,0x676f02d9)
d=GG(b,c,d,a,M12,20,0x8d2a4c8a)

第三轮
a=HH(a,b,c,d,M5,4,0xfffa3942)
b=HH(d,a,b,c,M8,11,0x8771f681)
c=HH(c,d,a,b,M11,16,0x6d9d6122)
d=HH(b,c,d,a,M14,23,0xfde5380c)
a=HH(a,b,c,d,M1,4,0xa4beea44)
b=HH(d,a,b,c,M4,11,0x4bdecfa9)
c=HH(c,d,a,b,M7,16,0xf6bb4b60)
d=HH(b,c,d,a,M10,23,0xbebfbc70)
a=HH(a,b,c,d,M13,4,0x289b7ec6)
b=HH(d,a,b,c,M0,11,0xeaa127fa)
c=HH(c,d,a,b,M3,16,0xd4ef3085)
d=HH(b,c,d,a,M6,23,0x04881d05)
a=HH(a,b,c,d,M9,4,0xd9d4d039)
b=HH(d,a,b,c,M12,11,0xe6db99e5)
c=HH(c,d,a,b,M15,16,0x1fa27cf8)
d=HH(b,c,d,a,M2,23,0xc4ac5665)

第四轮
a=II(a,b,c,d,M0,6,0xf4292244)
b=II(d,a,b,c,M7,10,0x432aff97)
c=II(c,d,a,b,M14,15,0xab9423a7)
d=II(b,c,d,a,M5,21,0xfc93a039)
a=II(a,b,c,d,M12,6,0x655b59c3)
b=II(d,a,b,c,M3,10,0x8f0ccc92)
c=II(c,d,a,b,M10,15,0xffeff47d)
d=II(b,c,d,a,M1,21,0x85845dd1)
a=II(a,b,c,d,M8,6,0x6fa87e4f)
b=II(d,a,b,c,M15,10,0xfe2ce6e0)
c=II(c,d,a,b,M6,15,0xa3014314)
d=II(b,c,d,a,M13,21,0x4e0811a1)
a=II(a,b,c,d,M4,6,0xf7537e82)
b=II(d,a,b,c,M11,10,0xbd3af235)
c=II(c,d,a,b,M2,15,0x2ad7d2bb)
d=II(b,c,d,a,M9,21,0xeb86d391)

    5）每轮循环后，将A，B，C，D分别加上a，b，c，d，然后进入下一循环。
	
图形推理的两大规律:数量和旋转