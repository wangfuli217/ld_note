以下均为IA-32指令平台汇编内容

IA-32指令码由四个主要部分组成
1: 	可选的指令前缀
	可以包含1个到4个修改操作码行为的1字节前缀,被分为4个组,每个组前缀一次只能使用一个,因此最多有4字节
		锁定前缀和重复前缀
			锁定前缀表示指令独占使用共享内存区域,对于多处理器和超线和系统非常重要
			重复前缀用于表示重复的功能(常常在处理字符串时使用)
		段覆盖前缀和分支提示前缀
			段覆盖前缀定义可以覆盖定义了的段寄存器值的指令
			分支提示前缀尝试向处理器提供程序在条件跳转语句中最可能的路径的搜索
		操作数长度覆盖前缀
			操作数长度覆盖前缀通知处理器,程序将切换16位和32位的操作数长度
		地址长度覆盖前缀
			地址长度覆盖前缀通知处理器,程序将切换16位和32位的内存地址
		
2:	操作码(opcode,必需)
3:	可选的修饰符
	一些操作码需要另外的修饰符来定义执行的功能中涉及到什么寄存器和内存位置,包含在3个单独的值中
		寻址方式说明符(ModR/M)字节,由3个字段的信息构成
			7-6			5-3			2-0
			Mod		reg/opcode		r/m
			2位			3位			3位
			mod与r/m一起使用,用于定义指定中使用的寄存器或者寻址模式,寻址模式可能有24个,加上8个通用寄存器,所以有32个可能值
			reg/opcode字段用于允许使用更多的3位进一步定义操作码功能	(比如操作码子功能),或者可以用于定义寄存器值
			r/m字段用于定义该功能的操作数的另一个寄存器,或者与mod组合使用,定义寻址模式
		比例-索引-基址(SIB)字节,由3个字段的信息构成
			7-6			5-3			2-0
			比例		索引		基址
			2位			3位			3位
			比例字段指定操作的比例因子
			索引字段指定内存中用作索引寄存器的寄存器
			基址字段指定用作内存访问的基址寄存器的寄存器
			ModR/M和SIB字节的组合创建一个表,它可以定义用于访问数据的众多可能的寄存器组合和内存模式
		移位字节
			用来指定对于ModR/M和SIB字节中定义的内存位置的偏移量
			
		1,2或者4个的地址移位字节
4:	可选的数据元素
						
指令前缀	操作码		ModR/M		SIB			移位		数据元素	(ModR/M到移位为修饰符)
0-4字节		1-3字节		0-1字节		0-1字节		0-4字节		0-4字节

8个通用寄存器,虽然大多数通用寄存器都可以用于存储任何类型的数据,但是其中一些具有专门的用途,它们在汇编语言程序中以一致的方式使用
EAX		用于操作数和结果数据的累加器
EBX		指向数据内存段中的数据的指针
ECX		字符串和循环操作的计数器
EDX		I/O指针
ESP		堆栈指针
EBP		堆栈数据指针
ESI		用于字符串操作的源的数据指针
EDI		用于字符串操作的目标的数据指针

AL/AH 以H或者L结尾的是8位寄存器.
AX/BX以X结尾的是16位寄存器.
EAX/EBX 以E加到某X寄存器前面是32位寄存器.
RAX/RBX以R加到某X寄存器前面的是64位寄存器.

段寄存器专门用于引用内存位置,IA-32处理器平台允许3种不同的访问系统内存的方法
平坦内存模式
	将全部系统内存表示为连续的地址空间,所有指令,数据和堆栈都包含在相同的地址空间中,通过称为线性地址的特定地址访问每个内存位置
分段内存模式
	将系统内存划分为独立段的组,通过位于段寄存器中的指针进行引用,每个段用于包含特定类型的数据
实地址模式

段中的内存位置是通过逻辑地址定义的,逻辑地址由段地址和偏移地址构成,处理器把逻辑地址转换为相应的纯性地址以便访问内存
CS		代码段
DS		数据段
SS		堆栈段
ES		附加段指针
FS		附加段指针
GS		附加段指针

eip		指令指针寄存器,有时候也称程序计数器,不能直接修改

控制寄存器,不能直接访问
CR0		控制操作模式和处理器状态的系统标志
CR1		当前没有使用
CR2		内存页面错误信息
CR3		内存页面目录信息
CR4		支持处理器特性和说明处理器特性能力的标志

标志对于汇编语言程序是重要的,因为它们是可以用于确定程序的功能是否成功执行的唯一途径
标志被分为三组
状态标志
	用于表明处理器进行数学操作的结果
		CF		位0		进位标志
		PF		位2		奇偶校验标志
		AF		位4		辅助进位标志
		ZF		位6		零标志
		SF		位7		符号标志
		OF		位11	溢出标志
控制标志
	当前只定义了一个控制标志DF-方向标志,用于控制处理器处理字符串的方式,当被设置为1,字符串指令自动递减内存地址以达到字符串下一个字节,当被设置为0,字符串指令自动递增内存以达到下一个字节
系统标志
	用于控制操作系统级别的操作,应用程序绝不应该试图修改系统标志
		TF		位8				陷阱标志,被设置为1时启用单步模式,在单步模式中,处理器每次执行一条指令,然后等待下一条指令,在调试汇编语言时非常有用
		IF		位9				中断使能标志,控制处理器如何响应从外部源接收到的信号
		IOPL	位12和位13		I/O特权级别标志,表明当前正在运行的任务的I/O特权级别,特权字段值必须小于或者等于访问I/O地址空间所必需的访问级别,否则,请求会被拒绝
		NT		位14			嵌套任务标志,控制当前正在运行的任务是否链接到前一个执行的任务,用于链接被中断和被调用的任务
		RF		位16			恢复标志,控制处理器在调试模式中如何响应异常
		VM		位17			虚拟8086模式标志,表明处理器在虚拟8086模式中进行操作,而不是保护模式或者实模式
		AC		位18			对准检查标志(和CR0控制寄存器中的AM位一起)用于启用内存引用的对准检查
		VIF		位19			虚拟中断标志,当处理器在虚拟模式中进行操作时,虚拟中断标志起IF标志的作用
		VIP		位20			虚拟中断挂起标志,当处理器在虚拟模式中进行操作时,虚拟中断挂起标志用于表示一个中断正被挂起
		ID		位21			识别标志,表示处理器是否支持CPUID指令,如果处理器能够设置或者清零这个标志,它就支持CPUID指令,否则就不支持		

gas是GNU项目的汇编器,命令行中使用as来使用他,对于不同的硬件平台,as的命令行参数是不同的,对于所有平台都适用的命令行参数如下
-a						指定输出中包含哪些清单
-D						包含它用于向下兼容,但是被忽略了
--defsym				在汇编源代码之前定义符号和值
-f						快速汇编,跳过注释和空白
--gstabs				包含每行源代码的调试信息,在使用gdb调试时break命令的格式:break * label+offset,label为标签名
--gstabs+				包含专门的gdb调试信息
-I						指定搜索包含文件的目录
-J						不警告带符号溢出
-K						包含它用于向下兼容,但是被忽略了
-L						在符号表中保存本地符号
--listing-lhs-width		设置输出数据列的最大宽度
--listing-lhs-width2	设置连续行的输出数据列的最大宽度
--listing-rhs-width		设置输入源代码行的最大宽度
--listing-cont-lines	设置输入的单一行在清单中输出的最大行数
-o						指定输出目标文件的名称
-R						把数据段整合进文本段
--statistics			显示汇编使用的最大空间和总时间
-v						显示as版本号
-W						不显示警告信息
--						对于源文件使用标准输入
--32					声明为32位程序( ld  -lc -m elf_i386 -dynamic-linker /lib/ld-linux.so.2 2.o -L /usr/lib/)

Intel与AT&T汇编语法主要区别:
AT&T使用$表示立即操作数,而Intel的立即操作数是不需界定的,因此,使用AT&T引用十进制数字4时,使用$4,使用Intel只需使用4
AT&T在寄存器名称前面加上前缀%,而Intel不这样做
AT&T语法处理源和目标操作数时使用相反的顺序,把十进制值4传送给EAX寄存器,AT&T的语法是movl $4,%eax,而Intel语法是mov eax,4
AT&T语法在助记符后面使用一个单独的字符来引用操作中使用的数据长度,而Intel语法中数据长度被声明为单独的操作数,AT&T的指令movl $test,%eax 等同于Intel语法的mov eax,dword ptr test
长调用和跳转使用不同语法定义段和偏移值,AT&T语法使用ljump和lcall,Intel使用jmp和call

ld	*.o				连接器  例:ld -o 2 -lc(c为库名称)  -dynamic-linker /lib/ld-linux.so.2(运行时加载动态的动态库)
-o					指定输出目标文件名称
-b					指定目标代码输入文件的格式
-Bstatic			只使用静态库
-Bdynamic			只使用动态库
-Bsymbolic			把引用捆绑到共享库中的全局符号
-c					从指定的命令文件读取命令
--cref				创建跨引用表
-d					设置空格给通用符号,即使指定了可重定位输出
-defsym				在输出文件中创建指定的全局符号
--demangle			在错误消息中还原符号名称
-e					使用指定的符号作为程序的初始执行点
-E					对于ELF格式文件,把所有符号添加到动态符号表
-f					对于ELF格式共享对象,设置DT_AUXILIARY名称
-F					对于ELF格式共享对象,DT_FILTER名称
-format				和-b相同
-g					被忽略,用于提供和其他工具的兼容性
-h					对于ELF格式共享对象,设置DT_SONAME名称
-i					执行增量连接
-I					把指定的存档文件添加到要连接的文件清单
-L					把指定的路径添加到搜索库的目录清单
-M					显示连接映射,用于诊断目的
-Map				创建指定的文件来包含连接映射
-m					模拟指定的连接器
-N					指定读取/写入文本和数据段
-n					设置文本段为只读
-noinhibit-exec		生成输出文件,即使出现非致命连接错误
-no-keep-memory		为内存使用优化连接
-no-warn-mismatch	允许连接不匹配的目标文件
-O					生成优化了的输出文件
-oformat			指定输出文件的二进制格式
-R					从指定的文件读取符号名称和地址
-r					生成可重定位的输出(称为部分连接)
-rpath				把指定的目录添加到运行时库搜索路径
-rpath-link			指定搜索运行时共享库的目录
-S					忽略来自输出文件的调试器的符号信息
-s					忽略来自输出文件的调试器的所有符号信息
-shared				创建共享库
-sort-common		在输出文件中不按照长度对符号进行排序
-split-by-reloc		按照指定的长度在输出文件中中创建额外的段
-split-by-file		为每个目标文件在输出文件中创建额外的段
--section-start		在输出文件中指定的地址定位指定的段
-T					指定命令文件(和-c相同)
-Ttext				使用指定的地址作为文本段的起始点
-Tdata				使用指定的地址作为数据段的起始点
-Tbss				使用指定的地址作为bss段的起始点
-t					在处理输入文件时显示它们的名称
-u					强制指定符号在输出文件中作为未定义符号
-warn-common		当一个通用符号和另一个通用符号结合时发出警告
-warn-constructors	如果没有使用任何全局构造器,则发出警告
-warn-once			对于每个未定义符号只发出一次警告
-warn-section-align	如果为了对齐而改动了输出段地址,则发出警告
--whole-archive		对于指定的存档文件,在存档中包含所有文件
-X					删除所有本地临时符号
-x					删除所有本地符号

gcc					编译c语言
-c					编译或者汇编代码,但是不进行连接
-S					编译后停止,但是不进行汇编
-E					预处理后停止,但是不进行编译
-o					指定要输出的文件名
-v					显示每个编译阶段使用的命令
-std				指定使用的语言标准
-g					生成调试信息
-pg					生成gprof制作简档要使用的额外代码
-O					优化可执行代码
-W					设置编译器警告消息级别
-pedantic			按照C标准发布强制性诊断清单
-I					指定包含文件的目录
-L					指定库文件的目录,只在编译时有效,若要在运行时有效,可以在编译时加上-Wl,rpath=<your_lib_dir>
-D					预定义源代码中使用的宏
-U					取消任何定义了的宏
-f					指定用于控制编译器行为的选项
-m					指定与硬件相关的选项
-Wl					告诉编译器将后面的参数传递给链接器,如-Wl,-rpath ./(指定运行时搜索动态库路径为当前目录);-Wl,-soname
-rpath=				指定运行时搜索动态库的路
-soname				指定简单共享名(short of shared object name),这使得程序的升级非常容易,因为只需要替换soname的库,以前的旧库不必替换
-shared				生成动态库

objdump				反汇编目标文件或可执行文件的命令
-a					如果任何文件是存档文件,则显示存档头信息
-b					指定目标代码文件的目标代码格式
-C					将低级符号还原为用户级别的名称
-d					将目标代码反汇编为指令码
-D					将所有段汇编为指令码,包括数据
-EB					指定大尾数目标文件
-EL					指定小尾数目标文件
-f					显示每个文件头的摘要信息
-G					显示调试段的内容
-h					显示每文件段头的摘要信息
-i					显示所有架构和目标格式的清单
-j					只显示指定段的信息
-l					使用源代码行号标记输出
-m					指定进行反汇编时使用的架构
-p					显示目标文件格式特有的信息
-r					显示文件中的重定位条目
-R					显示文件中的动态重定位条目
-s					显示指定段的完整内容
-S					交错显示源代码和反汇编后的代码
-t					显示文件的符号表条目
-T					显示文件的动态符号表条目
-x					显示文件所有可用的头信息
--start-address		开始显示在指定地址上的数据
--stop-address		停止显示在指定地址上的数据

gprof				用于分析程序的执行和确定应用程序的热点在什么位置,需要在编译或链接时使用-pg选项,只能分析主线程
参数分为3组
输出格式参数
	-A						显示所有函数的源代码,或者只显示指定函数的
	-b						不显示解释分析字段的详细输出
	-C						显示所有函数的总计数,或者只显示指定函数的
	-i						显示简档数据文件的摘要信息
	-I						指定查找源文件的搜索目录清单
	-J						不显示注释的源代码
	-L						显示源文件名的完整路径名称
	-p						显示所有函数的一般简档,或者只显示指定函数的
	-P						不输出所有函数的一般简档,或者不显示指定函数的
	-q						显示调用图表分析
	-Q						不显示调用图表分析
	-y						在单独的输出文件中生成注释的源代码
	-Z						不显示函数的总计数和被调用的次数
	--function-reordering	按照分析显示建议的函数的重排序
	--file-ordering			按照分析显示建议的目标文件重排序
	-T						按照传统的BSD样式显示输出
	-w						设置输出行的宽度
	-x						在函数之内显示被注释的源代码中的每一行
	--demangle				在显示输出时C++符号被还原
分析参数
	-a						不分析静态声明(私有)函数的信息
	-c						分析程序中永远不会被调用的子函数的信息
	-D						忽略已知不是函数的符号(只在Solaris和HP操作系统上)
	-k						不分析匹配开头和结尾的symspec的函数
	-l						控告 分析程序,而不是按函数
	-m						只分析被调用超过指定次数的函数
	-n						只分析指定的函数的时间
	-N						不分析指定的函数的时间
	-z						分析所有函数,即使是从不被调用的那些
杂项参数
	-d						使gprof处于调试模式中,指定数字化的调试级别
	-O						指定简档数据文件的格式
	-s						使gprof只在简档数据文件中汇总数据
	-v						输出gprof的版本
	

strace 可执行程序		在程序运行时跟踪其中使用的系统调用
-c			统计每个系统调用的时间,调用和错误
-d			显示strace的一些调试输出
-e			指定输出的过滤表达式,例trace=getpid(跟踪系统调用getpid)
-f			在创建子进程的时候跟踪它们
-ff			如果写入到输出文件,则把每个子进程写入到单独的文件中
-i			显示执行系统调用时的指令指针
-o			将输出写入到指定的文件
-p			附加到由pid指定的现有进程
-q			抑制关于附加和分离的消息
-r			对每个系统调用显示一个相对的时间戳
-t			把时间添加到每一行
-tt			把时间添加到每一行,包括微秒
-ttt		添加epoch形式的时间(从1970年1月1日开始的秒数),包括微秒
-T			显示每个系统调用花费的时间
-v			显示系统调用的不经省略的版本(详细的)
-x			以十六进制格式显示所有的非ASCII字符
-xx			以十六进制格式显示所有字符串

.section	语句声明段的类型,bss段应该总是安排在文本前面,数据段可以移动到文本段之后
.section .data	声明数据段
.section .bss	声明bss段
.section .text	声明文本段

cpuid指令用于收集程序正在其上运行的处理器的信息

汇编语言源程序有3个部分
操作码助记符
数据段
命令

为特定数据元素类型保留内存的不同命令
.ascii 		文本字符串
.asciz		以空字符结尾的文本字符串
.byte		字节值
.double		双精度浮点值
.float		单精度浮点值
.int		32位整数
.long		32位整数(和.int相同)
.octa		16字节整数
.quad		8字节整数
.short		16位整数
.single		单精度浮点数(和.float相同)

.equ		用于将常量值设为可以在文本段中使用的符号(声明的静态数据符号会保留在数据段)
例:	.equ  factor,3		引用静态数据元素需要在符号前加$->$factor

在bss段中声明数据元素和在数据段中定义有些不同,无须声明特定的数据类型,只要声明为所需目的保留的原始内存部分即可
在bss段中声明数据的一个好处是数据不包含在可执行程序中,在数据段中定义数据时,它必须被包含在可执行程序中,因为必须使用特定值初始化它,因为不使用程序数据初始化bss段中声明的数据区域,所以内存区域被保留在运行时使用

GNU汇编器使用两个命令声明缓冲区
.comm	symbol,length	声明未初始化的数据的通用内存区域,.comm buffer,1000,buffer是标签,1000是长度,表示1000个字节的内存分配给buffer
.lcomm	symbol,length	声明未初始化的数据的本地通用内存区域

movx 	source,destination		数据传送指令,x也可以是以下值
pushx	source					将某个数据压入堆栈
popx	destination				将某个数据从堆栈弹出
source和destination可以是内存地址,存储在内存中的数据值,指令语句中定义的数据值,或者是寄存器
gnu汇编器为mov添加了另一维度,在其中必须声明要传送的数据元素的长度,通过一个附加字符添加到mov后来实现,就变成了movx,x可以是以下值
q		用于64位的长字值
l		用于32位的长字值
w		用于16位的字值
b		用于8位的值
mov指令有非常特殊的规则,只有某些位置可以传送给其他位置,组合如下
	把立即数据元素传给通用寄存器
	把立即数据元素传给内存位置
	把通用寄存器传送给另一个通用寄存器
	把通用寄存器传送给段寄存器
	把段寄存器传送给通用寄存器
	把通用寄存器传送给控制寄存器
	把控制寄存器传送给通用寄存器
	把通用寄存器传送给调试寄存器
	把调试寄存器传送给通用寄存器
	把内存位置传送给通用寄存器
	把内存位置传送给段寄存器
	把通用寄存器传送给内存位置
	把段寄存器传送给内存位置
	
pusha/popa		压入或者弹出所有16位通用寄存器
pushad/popad	压入或者弹出所有32位通用寄存器
pushf/popf		压入或者弹出EFLAGS寄存器的低16位
pushfd/popfd	压入或者弹出EFLAGS寄存器的全部32位	

leax	source,destination			加载source的有效地址到destination

cmovx	source,destination			其中x是一个或2个字母的代码,表示将解发传送操作的条件,条件取决于EFLAGS寄存器的当前值
movzx	source,destination			将长度小的无符号整数值(可以在内存,也可以在寄存器中)传递给长度大的无符号整数值(只能在寄存器中)
movsx	source,destination			扩展带符号数值,可以传送字符串,隐含的source是esi寄存器,隐含的destination是edi寄存器
在每次执行完movsx指令后,esi和edi寄存器会自动改变,为另一次传送做准备,可能自动递增,也可能递减,取决于EFLAGS的DF标志,如果被设置,那么递减,但是movsx还是向前获取字符串
CLD		将DF标志清零
STD		设置DF标志
rep前缀,自己不执行什么操作,用于按特定次数重复执行字符串指令,次数由ecx寄存器控制,直到ecx清零
repe		包括本行及下面3行,不仅使用了ecx寄存器,还使用了zf标志,等于时重复
repne		不等于时重复
repnz		不为零时重复
repz		为零时重复

lodsx		用于将内存中的字符串值传送到eax寄存器,使用esi寄存器作为隐含的源操作数
stosx		将eax寄存器中的值传送到esi寄存器,使用edi寄存器作为隐含的目标操作数

cmpsx		比较字符串,使用esi和edi作为源和目标寄存器,根据DF标志递增或递减字符串,用源字符串减去目标字符串,并且适当地设置EFLAGS寄存器标志位

scasx		扫描字符串,比较edi(目标操作寄存器)和eax中的值,会相应地设置EFLAGS寄存器标志位

EFLAGS位
CF		进位(Carry)标志(第0位)
OF		溢出(Overflow)标志(第11位)
PF		奇偶检验(Parity)标志(第2位)
SF		符号(Sign)标志(第7位)
ZF		零(Zero)标志(第6位)
条件传送指令分为带符号操作的指令和无符号操作的指令,带符号操作涉及使用符号标志的比较,而无符号操作涉及忽略符号标志的比较
无符号条件传送指令
	cmova/cmovbe		大于/不小于或者等于			(CF或ZF)=0
	cmovae/cmovnb		大于或者等于/不小于			CF=0
	cmovnc				无进位						CF=0
	cmovb/cmovnae		小于/不大于或者等于			CF=1
	cmovc				进位						CF=1
	cmovbe/cmovna		小于或者等于/不大于			(CF或ZF)=1
	cmove/cmovz			等于零						ZF=1
	cmovne/cmovnz		不等于/不为零				ZF=0
	cmovp/cmovpe		奇偶检验/偶检验				PF=1
	cmovnp/cmovpo		非奇偶检验/奇检验			PF=0
带符号条件传送指令
	cmovge/cmovnl		大于或者等于/不小于			(SF异或OF)=0
	cmovl/cmovnge		小于/不大于或者等于			(SF异或OF)=1
	cmovle/cmovng		小于或者等于/不大于			((SF异或OF)或ZF)=1
	cmovo				溢出						OF=1
	cmovno				未溢出						OF=0
	cmovs				带符号(负)					SF=1
	cmovns				无符号(非负)				SF=0
	
数据交换指令
	xchg						在两个寄存器之间或者寄存器和内存位置之间交换值
	bswap						反转一个32位寄存器中的字节顺序
	xadd	source,destination	交换两个值并且把总和存储在目标操作数中,其中source必须是寄存器,destination可以是寄存器,也可以是内存位置
	cmpxchg	source,destination	把一个值和一个外部值进行比较,并且交换它和另一个值,比较destination和EAX,AX或AL寄存器中的值,如果相等,就把soruce的值加载到destination中,如果不等,就把destination中的值加载到EAX或AX或AL寄存器中
	cmpxchg8b		destination			比较两个64位值并且交换它们,比较并交换8字节,比较EDX:EAX中的64位值与操作数(目标操作数).如果这两个值相等,则将ECX:EBX中的64 位值存储到目标操作数.否则,将目标操作数的值加载到EDX:EAX.目标操作数是8字节内存位置.

内存位置由下列因素确定:
基址
添加到基址上的偏移地址
数据元素的长度
确定选择哪个数据元素的变址
表达式的格式:
base_address(offset_address,index,size)   =>数据值位于base_address+offset_address+index*size
offset_address和index必须是寄存器,但size的值可以是数值,例:movl $2,%edi movl values(,%edi,4)

使用标签引用内存中包含的数据值时,可以通过在指令中的标签前面加上美元符号$获得数据值的内存位置的地址
movl $value,%edi	用于把value标签引用的内存地址传送给EDI寄存器,符号$指示汇编器使用内存地址,而不是位于这个地址的值
movl %ebx,(%edi)是间接寻址的另一种,如果edi寄存器外面没有括号,那么指令只是把ebx寄存器中的值加载到edi寄存器中,如果edi寄存器外面加上了括号,那么指令把EBX寄存器中的值传送给EDI寄存器中包含的内存位置,还可以使用movl %ebx,4(%edi),movl %ebx,-4(%ebx),用于把EBX寄存器中的值传给EDI寄存器指向的位置之后/之前4个字节的内存位置中

无条件分支
	跳转	jmp 	location
	调用	call 	address
	中断
条件跳转	分为2种跳转类型,短跳转和近跳转,短跳转使用8位带符号地址偏移量,近跳转使用16或32位带符号地址偏移量
条件跳转不支持分段模式下的远跳转
	jxx 	address
xx是1到3个字符的条件代码
ja		如果大于(above),则跳转			CF=0与ZF=0
jae		如果大于(above)或等于,则跳转	CF=0
jb		如果小于(below),则跳转			CF=1
jbe		如果小于(below)或等于,则跳转	CF=1或ZF=1
jc		如果进位,则跳转					CF=1
jcxz	如果CX寄存器为0,则跳转
jecxz	如果ECX寄存器为0,则跳转
je		如果相等,则跳转					ZF=1
jg		如果大于,则跳转					ZF=0与SF=OF
jge		如果大于或等于,则跳转			SF=OF
jl		如果小于,则跳转					SF<>OF
jle		如果小于或等于,则跳转			ZF=1或SF<>OF
jna		如果不大于,则跳转				CF=1或ZF=1
jnae	如果不大于或等于,则跳转			CF=1
jnb		如果不小于,则跳转				CF=0
jnbe	如果不小于或等于,则跳转			CF=0与ZF=0
jnc		如果无进位,则跳转				CF=0
jne		如果不等于,则跳转				ZF=0
jng		如果不大于,则跳转				ZF=1或SF<>OF
jnge	如果不大于或等于,则跳转			SF<>OF
jnl		如果不小于,则跳转				SF=OF
jnle	如果不小于或等于,则跳转			ZF=0与SF=OF
jno		如果不溢出,则跳转				OF=9
jnp		如果不奇偶校验,则跳转			PF=0
jns		如果无符号,则跳转				SF=0
jnz		如果非零,则跳转					ZF=0
jo		如果溢出,则跳转					OF=1
jp		如果奇偶校验,则跳转				PF=1
jpe		如果偶校验,则跳转				PF=1
jpo		如果奇校验,则跳转				PF=0
js		如果带符号,则跳转				SF=1
jz		如果为零,则跳转					ZF=1

以下循环只支持8位偏移量,所以只能进行短跳转,每循环一次,ecx会自动递减一次,就算到达0,也不会影响EFLAGS标志位,它首先将ecx中的值减1,再判断是否为0
loop			循环直到ecx寄存器为0
loope/loopz		循环直到ecx寄存器为0,或者没有设置ZF标志
loopne/loopnz	循环直到ecx寄存器为0,或者设置了ZF标志
loop	address		格式
	
函数形式
function_label:
	pushl %ebp
	movl %esp,%ebp
	...
	movl %ebp,%esp
	popl %ebp
	ret
	
比较指令cmp,比较两个值并相应地设置EFLAGS寄存器
cmp		operand1,operand2		在背后对两个操作数执行减法操作,operand2-operand1

ret		将栈顶的返回地址弹出到eip,然后按照eip此时指示的指令地址继续执行流程
leave	将栈指针指向帧指针，然后POP备份的原帧指针到%EBP,即等价于movl %ebp %esp	popl %ebp

int $0x80		系统调用,eax寄存器中为调用的功能号,ebx,ecx,edx,esi,edi等等寄存器依次为参数1,2,3,4,5..,系统调用的返回值也存放在eax寄存器中
所有可用的系统调用    /usr/include/asm/unistd.h

clc			清空进位标志(设置为0)
cmc			对进位标志求反(把它改变为相反的值)
stc			设置进位标志(设置为1)
	
addx source,destination		加法,source可以是立即值,内存位置或寄存器,destination可以是寄存器或内存位置(但不能同时使用内存位置作为源和目标)
x可以是b 8位,w 16位,l 32位
addcx	source,destination	当32位寄存器放不下一个值时,可以用多个寄存器分开存放一个数字,前面产生的进位会被加入这个加法里面
subx source,destination		减法,destination-source放入destination
sbbx source,destination		用于解决借位问题

dec destination				destination可以是8,16,32位寄存器,或者内存中的值,主要用于无符号整数,递减
inc destination				递增

mul	source					source可以是8,16,32位寄存器,根据源操作数的长度,另一个操作数必须存放在al,ax,或者eax,rax寄存器中,因为乘法可能产生很的的数,所以目标寄存器长度必须是源操作数2倍,当source是32位时,目标位置使用EDX:EAX寄存器对(64位不确定有没有使用rax),无符号整数乘法

imul								带符号整数乘法,有3种不同的指令格式
imul	source						和mul格式一样
imul	source,destination			source可以是16或32位寄存器或内存中的值,destination必须是16位或者32位通用寄存器
imul multiplier,source,destination	multiplier是一个立即值,source可以是16或32位寄存器或内存中的值,destination必须是通用寄存器,multiplier是一个带符号整数,乘以source,结果放入destination

div		divisor				无符号整数除法,divisor是除数,可以是8,16,32位寄存器或内存中的值,被除数必须已经存储到ax寄存器(对于16位值),除数的最大值取决于被除数的位数,对于32位被除数,除数只能是16位,以此类推,商和余数被保存在al和ah里(对于16位值),其他情况也以此类推
idiv	divisor		带符号整数除法,用法和div一样

sal		向左算术移位,逻辑左移和算术左移右边都填充0
shl		向左逻辑移位,这2个指令执行相同的操作,并且可以互换,有3种不同的格式,所有格式中,目标操作数可以是8位,16位或32位寄存器中的值
sal		destination						将destination的值向左移一位,等同于使值乘以2
sal		%cl,destination					将destination中的值向左移动cl寄存器中指定的位数
sal		shifter,destination				将destination中的值向左移动shifter值指定的位数

shr		清空移位造成的空位,所以只能用于无符号数右移
sar		根据整数的符号位,要么清空,要么设置移位造成的空位,适用于有符号数右移

rol		向左循环移位,循环的意思是被移出的第7位填入到第0位,格式和上面移位指令相同,支持3种
ror		向右循环移位
rcl		向左循环移位,并且包含进位标志,使用进位标志作为附加位,来支持9位移位
rcr		向右循环移位,并且包含进位标志

以下4条指令为操作BCD编码指令
AAA		调整加法操作结果
AAS		调整减法操作结果
AAM		调整乘法操作结果
AAD		准备除法操作的被除数
这些指令必须和一般的无符号整数指令ADD,ADC,SUB,SBB,MUL和DIV组合使用,AAA,AAS和AAM在它们的各自操作之后使用,将二进制结果转化为不打包BCD格式,AAD指令有些不同,在DIV指令之前使用它,用于准备被除数以便生成不打包BCD结果,这些指令都使用一个隐含的操作数,AL寄存器,AAA,AAS,AAM假设前一个操作的结果存放在AL寄存器中,并且把这个值转化为不打包BCD格式,AAD指令假设被除数以不打包BCD格式存放在AX寄存器中,并且把它转化为DIV指令要处理的二进制格式,结果是正确的一个不打包BCD值,AL寄存器中的商和AH寄存器中的余数(按照不打包BCD格式),AAA,AAS,AAM都把AH寄存器和进位标志一起使用来表明何时需要进位

以下2条指令为操作压缩BCD编码指令,其他特性和上面操作不打包BCD编码指令一样
DAA		调整ADD或者ADC指令的结果
DAS		调整SUB或者SBB指令的结果

布尔逻辑
AND,OR和XOR指令使用相同的格式,清空寄存器最高效方式是使用xor指令对寄存器和它本身进行异或操作
and source,destination	其中source可以是8,16,32位立即值,寄存器或内存中的值,destination可以是8,16,32位寄存器或内存中的值(但不能同时为内存值)
not source				source即是源值,也是目标结果的位置

test	格式和and相同,但不将结果写入destination

fpu(floating-point unit)寄存器是一个自持单元,它使用与标准处理器分离的一组寄存器处理浮点操作,附加的fpu寄存器包括8个80位数据寄存器和3个16位寄存器,称为控制(control),状态(status)和标记(tag)寄存器,fpu寄存器称为r0到r7(但不使用这些名称访问他们),它们连接在一起形成一个堆栈,和内存中的堆栈不同,fpu寄存器堆栈是循环的,堆栈顶部的寄存器是在fpu的控制寄存器中定义的,名为st(0),除了顶部寄存器外的其他寄存器名称是st(x),x可以是1到7,gdb中调试打印p $st0...
当数据被加载到fpu堆栈时,堆栈顶部沿着8个寄存器向下移动,当8个值被加载到堆栈中之后,所有8个fpu数据寄存器就都被使用了,如果把第9个数据加载到堆栈中,堆栈指针回绕到第一个寄存器,并且使用新的值替换这个寄存器中的值,这会产生fpu异常错误

fpu寄存器
数据寄存器		用于浮点数据的8个80位寄存器
状态寄存器		报告FPU状态的16位寄存器
控制寄存器		控制FPU精度的16位寄存器
标记寄存器		描述8个数据寄存器的内容的16位寄存器
FIP寄存器		指向下一条fpu指令的48位fpu指令指针
FDP寄存器		指向内存中的数据的48位fpu数据指针
操作码寄存器	保存fpu处理的最后指令的11位寄存器

finit		初始化fpu,将控制和状态寄存器设置为它们的默认值,不改变fpu数据寄存器中的内容

因为fpu独立于主处理器,所以它一般不使用EFLAGS寄存器来表示结果和确定行为,fpu包含自己的寄存器组来执行这些功能,状态寄存器,控制寄存器,标记寄存器用于存取fpu的特性和确定fpu的状态
状态寄存器(fstat,默认值全0)表明fpu的操作情况,它包含在一个16位寄存器中
0		非法操作异常标志
1		非规格化操作数异常标志
2		除数为0异常标志
3		溢出异常标志
4		下溢异常标志
5		精度异常标志
6		堆栈错误
7		错误汇总状态
8		条件代码为0(C0)
9		条件代码为1(C1)
10		条件代码为2(C2)
11-13	堆栈顶部指针
14		条件代码为3(C3)
15		FPU繁忙标志
4个条件代码标志位(8,9,10,14)一起使用,表示浮点操作结果的特定错误代码,它们经常和异常标志一起使用,表示特定异常情况,堆栈顶部位用于表示哪个fpu数据寄存器被设置为st0寄存器
fstsw	destination		可以把状态寄存器读取到一个双字内存位置或AX寄存器中

控制寄存器(fctrl)控制fpu内的浮点功能,使用一个16位寄存器,默认为0x037F
0		非法操作异常标志
1		非规格化操作数异常标志
2		除数为0异常标志
3		溢出异常标志
4		下溢异常标志
5		精度异常标志
6-7		保留
8-9		精度控制 00=>单精度  -1=>示使用	 10=>双精度		11=>扩展双精度(默认情况,最精确但也最耗时间)
10-11	舍入控制 00=>舍入到最近值(默认情况)	01=>向下舍入	10=>向上舍入   11=>向零舍入
12		无穷大控制
13-15	保留
控制寄存器前6位用于控制使用状态寄存器中的哪些异常标志,当这些位中的一些被设置时,就会防止状态寄存器中对应的异常标志被设置,即屏蔽异常
fstcw	destination		将控制寄存器读取到一个双字内存位置
fldcw	destination		将双字内存值加载到控制寄存器

标记寄存器(ftag)用于标识8个80位fpu数据寄存器中的值,使用16位(每个寄存器2位)标识每个fpu数据寄存器中的内容
fpu数据寄存器可以包含下面内容
一个合法的扩展双精度值(代码00)
零值(代码01)
特殊的浮点值(代码10)
无内容(空,代码11)


in-32平台使用IEEE标准754的单精度和精度浮点格式之外,还使用它自己的80位格式,称为扩展双精度浮点格式
浮点式格式假设有效数字的整数值永远是1,并且不在有效数字值中使用它,所以有效数字位需要加1位
数据类型	长度	有效数字位		指数位		范围
单精度		32		24				8			1.18*10^-38到3.40*10^38
双精度		64		53				11			2.23*10^-308到1.79*10^308
扩展双精度	80		64				15			3.37*10^-4932到1.18*10^4932

fld		source		用于把浮点值传送入和传送出fpu寄存器,其中source可以是32,64或者80位内存位置,flds加载单精度,fldl加载双精度
fst		destination	用于获取fpu寄存器堆栈中顶部的值,并且把这个值放入内存位置中,fsts获取单精度,fstl获取双精度

IA-32指令集包含一些预置的浮点值,可以把它们加载到FPU寄存器堆栈中
fld1		把+1.0压入fpu堆栈中
fldl2t		把10的对数(底数2)压入fpu堆栈中
fldl2e		把e的对数(底数2)压入fpu堆栈
fldpi		把pi的值压入fpu堆栈中
fldlg2		把2的对数(底数10)压入fpu堆栈中
fldln2		把2的对数(底数e)压入fpu堆栈中
fldz		把+0.0压入fpu堆栈中,在学点数据中,+0.0和-0.0是有区别的,对于大多数操作,被认为是相同的值,但是用在除法中,产生不同的值(正无穷和负无穷)

多媒体扩展(multimedia extension,MMX)是支持Intel的单指令多数据(Single Instruction,Multiple Data,SIMD)的第一种技术,可以实现复杂的整数算术运算
MMX环境包含处理器可以处理的3种新的整数数据类型,MMX技术引入8个fpu寄存器作为专用寄存器,被命名为MM0-MM7,用于对64位打包的整数进行整数算术运算
64位打包的字节整数
64位打包的字整数
64位打包的双字整数

64位MM寄存器（MM0~MM7）：__m64。
128位SSE寄存器（XMM0~XMM15）：__m128、__m128d、__m128i。
256位AVX寄存器（YMM0~YMM15）：__m256、__m256d、__m256i。

流化SIMD扩展(Streaming SIMD extension,SSE)增加了经常用于3D图形,动态视频和视频会议的复杂浮点算术运算的功能
SSE中可以使用128位打包单精度浮点,SSE2中可以使用128位打包双精度浮点数据类型

SSE中可以使用的指令
movaps		把4个对准的打包单精度浮点值传送到XMM寄存器或内存
movups		把4个不对准的打包单精度浮点值传送到XMM寄存器或内存
movss		把1个单精度值传送到内存或者寄存器的低双字
movlps		把2个单精度值传送到内存或者寄存器的低四字
movhps		把2个单精度值传送到内存或者寄存器的高四字
movlhps		把2个单精度值从低四字传送到高四字
movhlps		把2个单精度值从高四字传送到低四字

SSE2指令
movapd		把2个对准的双精度值传送到XMM寄存器或内存
movupd		把2个不对准的双精度值传送到XMM寄存器或内存
movsd		把1个双精度值传送到内存或者寄存器的低四字
movhpd		把1个双精度值传送到内存或者寄存器的高四字
movlpd		把1个双精度值传送到内存或者寄存器的低四字

SSE3指令
movshdup	从内存或者XMM寄存器传送128位值,复制第2个和第4个32位数据元素,因此,传送32位单精度浮点值DCBA构成的数据元素将创建由DDBB构成的128位打包单精度浮点值
movsldup	从内存或者XMM寄存器传送128位值,复制第1个和第3个32位数据元素,因此,传送32位单精度浮点值DCBA构成的数据元素将创建由CCAA构成的128位打包单精度浮点值
movddup		从内存或者XMM寄存器传送64位双精度浮点值,把它复制到128位XMM寄存器中,因此,传送64位双精度浮点值A构成的数据元素将创建由AA构成的128位打包双精度浮点值

转换指令
cvtdq2pd		打包双字整数到打包双精度FP(XMM)
cvtdq2ps		打包双字整数到打包单精度FP(XMM)
cvtpd2dq		打包双精度FP到打包双字整数(XMM)
cvtpd2pi		打包双精度FP到打包双字整数(MMX)
cvtpd2ps		打包双精度FP到打包单精度FP(XMM)
cvtpi2pd		打包双字整数到打包双精度FP(XMM)
cvtpi2ps		打包双字整数到打包单精度FP(XMM)
cvtps2dq		打包单精度FP到打包双字整数(XMM)
cvtps2pd		打包单精度FP到打包双精度FP(XMM)
cvtps2pi		打包单精度FP到打包双字整数(MMX)
cvttpd2pi		打包双精度FP到打包双字整数(MMX,截断)
cvttpd2dq		打包双精度FP到打包双字整数(XMM,截断)
cvttps2dq		打包单精度FP到打包双字整数(XMM,截断)
cvttps2pi		打包单精度FP到打包双字整数(MMX,截断)

浮点运算
faddx		浮点加法,s用于32位,l用于双精度
fdiv		浮点除法
fdivr		反向浮点除法
fmul		浮点乘法
fsub		浮点减法
fsubr		反向浮点减法

fadd	source	内存中32位或64位值和st0相加
fadd source destination  source和destination相加,结果放入destination
faddp		st0和st1相加,放入st1,加完后弹出st0
fiadd	source	16或32位整数值和st(0)相加,结果放入st0
fild	source	将source整数转换为fp80浮点数并压入st0

高级浮点运算
f2xm1		计算2的乘方(次数为st0中的值)减去1
fabs		计算st0中的值的绝对值
fchs		改变st0中的值的符号
fcos		计算st0中的值的余弦
fpatan		计算st0中的值的部分反正切
fprem		计算st0中的值除以st1中的值的部分余数
fprem1		计算st0中的值除以st1中的值的ieee部分余数
fptan		计算st0中的值的部分正切
prndint		把st0中的值舍入到最近的整数
fscale		计算st0乘以2的st1次乘方
fsin		计算st0中的值的正弦
fsincos		计算st0中的值的正弦和余弦
fsqrt		计算st0中的值的平方根
fyl2x		计算st1*logST0(以2为基数)
fyl2xp1		计算st1*log(ST0+1)(以2为基数)

浮点条件分支
fcom		比较st0和st1寄存器
fcom st(x)	比较st0和别一个寄存器
fcom source	比较st0和32位或64位内存值
fcomp		比较完st0与st1后,弹出st0
fcompp		比较st0和st1寄存器,并且2次弹出堆栈
ftst		比较st0和0.0
比较的结果设置在c0,c2,c3条件代码中,比较可能产生的值在下列表
条件			c3	c2	c1
st0>source		0	 0	 0
st0<source		0	 0	 1
st0=source		1 	 0	 0

sahf指令把ah寄存器的第0,2,4,6,7位分别传送到进位,奇偶校验位,对准,零和符号标志,不影响eflags其他标志

fcomi指令系统将执行浮点比较并且把结果存放到EFLAGS寄存器中的进位,奇偶校验和零标志,局性限在于只能比较两个fpu寄存器中的值
fcomip	比较后st0出栈
fucomip 在比较之前检查无序值,比较后st0弹出栈

fcmov指令系列,浮点值的条件传送
fcmovx 	source,destination		source是st(x)寄存器,destination是st(0)寄存器

fcmovb 			如果st(0)小于st(x),则进行传送
fcmove			如果st(0)等于st(x),则进行传送
fcmovbe			如果st(0)小于或者等于st(x),则进行传送
fcmovu			如果st(0)小于或者等于st(x),则进行传送
fcmovnb			如果st(0)不小于st(x),则进行传送
fcmovne			如果st(0)不等于st(x),则进行传送
fcmovnbe		如果st(0)不小于或者等于st(x),则进行传送
fcmovnu			如果st(0)非无序,则进行传送

fstenv(不保存数据寄存器)指令用于把fpu环境存储到一个内存块中,控制,状态,标记寄存器,fpu指令指针偏移量,fpu数据指针,fpu最后执行的操作码将被存储到一个28字节的内存块中
fldenv指令用于把内存块的值加载回fpu环境

fsave将所有fpu寄存器复制到一个108字节的内存位置,然后初始化fpu状态
frstor恢复fpu时,所有fpu寄存器都被恢复为执行fsave时的状态

浮点异常等待是指上一条浮点运算如果产生异常必须先处理掉异常,才继续下一条处理
非等待指令
fnclex		清空浮点异常标志
fnsave		把fpu状态保存到内存中
fnstcw		保存fpu控制寄存器
fnstenv		把fpu操作环境保存到内存中
fnstsw		把fpu状态寄存器保存到内存或者ax寄存器中

定义汇编函数有3个步骤,不同汇编器使用不同的方法定义函数
.type	funcl,@function		.type命令通知gnu汇编器,func1标签定义函数的开始,funcl标签后面的第一条指令是函数的开头,函数结束由ret定义
funcl:
1.定义需要的输入值
	使用寄存器
	使用全局变量
	使用堆栈
2.定义对输入值执行的操作
3.定义如何生成输出值以及如何将输出值传递给发出调用的程序
	将结果存储在一个或多个寄存器中
	将结果存储在全局变量的内存位置
调用函数使用call function

内联汇编代码
asm{"assembly code"};gnu的c编译器使用关键字asm指出使用汇编语言编写的源代码段落,指令必须在引号里,有时候是宏__asm__
如果不希望优化,可以使用asm volatile{"assembly code"}来定义

扩展asm格式
asm{"assembly code":output locations:input operands:changed registers};
由4部分组成
汇编代码:使用和基本asm格式相同的语法的内联汇编代码
输出位置:包含内联汇编代码的输出值的寄存器和内存位置的列表
输入操作数:包含内联汇编代码的输入值的寄存器和内存位置的列表
改动的寄存器:内联代码改变的任何其他寄存器的列表

cfi(calling frame info,Call Frame Instructions)的作用是出现异常时stack的回滚(unwind)
cfa(canonical frame address)是标准框架地址, 它被定义为在前一个调用框架中调用当前函数时的栈顶指针
.cfi_startproc和.cfi_endproc标示着函数的起止。被包围的函数将在最终生成的程序的.eh_frame段中包含该函数的CFI记录
.cfi_def_cfa_offset 8一句。该指令表示: 此处距离CFA地址为8字节
.cfi_offset 5, -8一句.第5号寄存器[4]原先的值保存在距离CFA - 8的位置
.cfi_def_cfa_register 5一句.该指令是位于movl %esp, %ebp之后。它的意思是: 从这里开始, 使用ebp作为计算CFA的基址寄存器(前面用的是esp)
.cfi_restore 5和.cfi_def_cfa 4, 4这两句结合起来看。注意它们位于leave指令之后,前一句意思是: 现在第5号寄存器恢复到函数开始的样子。第二句意思则是: 现在重新定义CFA, 它的值是第4号寄存器(esp)所指位置加4字节。这两句其实表述的就是尾声指令所做的事。意义亦很明显