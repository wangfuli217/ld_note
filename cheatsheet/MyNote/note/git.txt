git config      实际是git-config,不过可以像前面这样使用,用来配取或读取相应的工作环境变量
                这些变量可以存放在三个不同的地方
                /etc/gitconfig          系统中所有用户都普遍适用的变量,使用git config时用 --system选项,读写的就是这个文件
                ~/.gitconfig            用户目录下的配置文件只适用于该用户,使用git config时用 --global选项,读取的就是这个文件
                .git/config             即工作目录下的配置文件,仅针对当前项目有效
        user.name   "hellspwj"          指定个人用户名
        user.email  "***@.com"          指定邮箱
        core.editor emacs               指定文件编辑器为emacs
        merget.tool vimdiff             指定差异分析工具,如vimdiff
        --list                          查看已有的配置信息
        alias.co     checkout           别名,以后只要使用git即可
		http.sslVerify  false			关闭ssl证书认证

git help         查看帮助信息

git init            对现有的某个项目启用git管理,初始化后,会在当前目录下产生一个.git文件夹,所有数据和资源都存放在这个目录里,但仅仅是按照既有框架初始化好了里面的文件和目录,还没有开始追踪任何一个文件
                    若在init后面加上名字,表示建立这个名字的本地仓库
    --bare          建立裸仓库,因为这样创建的仓库并不包含工作区,也就是说,不能在这个目录下执行一般的git命令,裸仓库可以被正常clone和push更新,裸仓库中不能直接提交更新,一般作为远程中心仓库存在
git add             添加对某些文件的跟踪,可以使用通配符或者目录,第二个功能是把已跟踪已修改的文件放到暂存区,裸仓库名字后一般加.git后缀
git clone  url      克隆某个仓库,如果要指定新的名称,可以在url后加一个空格,再加上新项目名称       
git clone --bare my_project my_project.git
    将现在有仓库导出为裸仓库,相当于执行cp -Rf my_project/.git my_project.git
git status          查看当前文件状态,不加文件,默认当前目录
git diff            比较工作目录当前文件和暂存区域快照之间的差异,就是修改之后没有暂存起来的内容
git diff --cached   比较已经暂存起来的文件和上一个版本之间的差异,git1.6.1以上版本还允许用 git diff --staged,效果相同
git diff master...contrib	可以将...加在原始分支(拥有共同祖先)和当前分支之间,比较contrib分支与master共同祖先之间的差异
git commit          提交到本地仓库
    -m     "说明"   直接添加声明
    -a              默认提交的都是已暂存的文件,加上-a后,会自动把所有已经跟踪过的文件暂存起来一起提交
    --amend         此命令使用当前的暂存区域作为快照,如果刚才的提交完没有做任何改动,直接运行此命令的话,相当于有机会重新编辑提交说明
git rm              移除某个文件,并会删除,还需要提交,如果删除之前修改过并且已经放到暂存区域的话,则必须用强制删除选项-f,以防止删除文件后丢失修改的内容
    --cached        从git仓库中删除,但工作目录保留
    例: git rm \*.log    会递归匹配,若不加\,也可以执行,但不会递归,因为git本就支持*,不用shell去扩展
git reset           将文件状态从已暂存变为已修改,未暂存
git checkout -- 文件名 所有对文件的修改都重置   
git mv              改名,相当于执行3条命令,mv->git rm->git add
git log             查看提交历史
    -p              展开每次提交的内容差异,再加上-2则显示最近的两次更新,-2是显示最近的2次提交
    --stat          仅显示简要的增改行数统计
    --since=2.weeks 显示最近2周内的提交,可以给出各种格式,如具体某一天"2008-01-05",或者是多久以前,"2 years 1 day 3 minutes ago",--after:显示的是时间点之后的提交
    --until,        --before 仅显示指定时间之前的提交。
    --autoor        仅显示指定作者相关的提交
    --committer     仅显示指定提交者相关的提交

    --pretty        将每个提交放在一行显示,这在提交数很大时有用,--pretty=format:"%h - %an,%ar : %s",可以定制格式
    选项	 说明
    %H	提交对象（commit）的完整哈希字串    
    %h	提交对象的简短哈希字串    
    %T	树对象（tree）的完整哈希字串    
    %t	树对象的简短哈希字串    
    %P	父对象（parent）的完整哈希字串    
    %p	父对象的简短哈希字串    
    %an	作者（author）的名字    
    %ae	作者的电子邮件地址    
    %ad	作者修订日期（可以用 -date= 选项定制格式）   
    %ar	作者修订日期，按多久以前的方式显示    
    %cn	提交者(committer)的名字    
    %ce	提交者的电子邮件地址    
    %cd	提交日期    
    %cr	提交日期，按多久以前的方式显示    
    %s	提交说明

文件 .gitignore 的格式规范如下：
● 所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。
● 可以使用标准的 glob 模式匹配。 * 匹配模式最后跟反斜杠（/）说明要忽略的是目录。 * 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。
所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。星号（*）匹配零个或多个任意字符；
[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）只匹配一个任意字符；
如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如[0-9] 表示匹配所有 0 到 9 的数字）。

git remote      查看当前配置的有哪些远程仓库,显示简短名字,在克隆完某个仓库后,至少可以看到一个origin远程仓库,Git默认使用这个名字来标识所克隆的原始仓库
    -v(verbose) 显示远程仓库的地址
git remote add  [shortname] [url]       指定一个简单的名字,以便将来引用
git fetch   [remote-name]               从远程仓库抓取数据到本地,如果是克隆了一个仓库，此命令会自动将远程仓库归于 origin 名下。所以，git fetch origin 会抓取从你上次克隆以来别人上传到此远程仓库中的所有更新（或是上次 fetch 以来别人提交的更新）
git push [remote-name] [branch-name]    将数据推送到远程仓库
git pull [options] [<repository> [<refspec>…]]  取回远程主机某个分支的更新，再与本地的指定分支合并
            git pull使用给定的参数运行git fetch，并调用git merge将检索到的分支头合并到当前分支中。 使用--rebase，它运行git rebase而不是git merge
git remote show [remote-name]           查看某个远程仓库的详细信息
git remote rename                       命令修改某个远程仓库在本地的简短名称
git remote rm                           碰到远端仓库服务器迁移，或者原来的克隆镜像不再使用，又或者某个参与者不再贡献代码，那么需要移除对应的远端仓库
git request-pull origin/master myfork	request-pull 命令接受两个参数，第一个是本地特性分支开始前的原始分支，第二个是请求对方来抓取的 Git 仓库 URL（译注：即下面myfork 所指的，自己可写的公共仓库）

git tag         列出所有标签

Git 使用的标签有两种类型：轻量级的（lightweight）和含附注的（annotated）。
轻量级标签就像是个不会变化的分支，实际上它就是个指向特 定提交对象的引用。
而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标 签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。
一般我们都建议使用含附注型的标签，以便保留相关信息；当然，如果只是临时性加注标签，或者不需要旁注额外信息，用轻量级标签也没问题

git tag -a -m "V1.4"          创建一个含附注的标签,可以使用git show V1.4来查看,若在当时忘了加标签,后面也可以补标签,只需要在后面加上某次提交的检验和(或者前几位)
git tag V1.4                  创建了一个轻量级标签
git push origin [tagname]     推送标签
    --tags                    一次推送所有标签


git branch 分支名             创建一个新的分支,保存着一个名为HEAD的特别指针,它是一个指向正在工作的本地分支的指针,并没有转到新建的分支,不加任何参数可以显示所有的分支
	-d	   分支名			  删除某个分支
	-D	   分支名			  强制删除某个分支,因为用-d删除分支时,如果分支没有合并到主分支,表示有尚未合并进来的工作成果,会提示错误
	--merged				  查看哪些分支被合并到了当前分支,也就是说哪些分支是当前分支的直接上游
	--no-merged				  查看尚未合并的分支
	-a						  查看本地及远程分支
	
git checkout 分支名           转换分支,如果加上-b参数,表示新建分支并切换,如果在-b参数后加上远程仓库名/分支名,表示用后面的分支来创建新的分支

merge的原理是将2个分支最新的快照和共同祖先进行合并,产生一个新的提交对象
git merge	分支名			  将当前分支与另一分支合并,如果顺着一个分支走下去可以到达另一个分支的话，那么 Git 在合并两者时，只会简单地把指针右移，因为这种单线的历史分支不存在任何需要解决的分歧，所以这种合并过程可以称为快进（Fast forward）。
git push    远程仓库名   分支名:远程分支名     将本地分支推送到远程服务器上,若远程分支名不指定的话,还是本地分支名
	-u      指定一个默认主机
git push    远程仓库名   :远程分支名           删除远程分支

远程分支无法修改,必须本地checkout一个本地分支,这种分支称为跟踪分支,跟踪分支是一种和远程分支有直接联系的分支,在跟踪分支里输入git push,Git会自动推断应该向哪个服务器的哪个分支推送数据
反过来,在这些分支里输入git pull会获取所有远程索引,并把他们的数据都合并到本地分支中

rebase的原理是回到2个分支共同的祖先,根据当前分支后续的历次提交对象,生成一系列文件补丁,然后以基底(也就是主干分支master)最后一个提交对象为新的出发点,逐个应用之前准备好的补丁文件,生成一个新的提交对象
使得当前分支直接成为master的直接下游
git rebase master
git rebase --onto master server client      取出 client 分支，找出 client 分支和 server 分支的共同祖先之后的变化，然后把它们在master 上重演一遍
git rebase [主分支] [特性分支]              命令会先取出特性分支server，然后在主分支 master 上重演
一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行衍合操作

git apply	*.patch			如果收到的补丁文件是用 git diff 或由其它 Unix 的 diff 命令生成，就该用 git apply 命令来应用补丁,事务型,要么补丁全打上去,要么全没打上去
git am		*.patch			应用format-patch生成的补丁

git cherry-pick				挑拣,如果某个特性分支上有多个commints,而又只想合并一个commints到主分支上,可以使用此命令

如果出现fatal: unable to access...时,执行命令 git config --global http.sslVerify false
