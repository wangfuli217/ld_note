set nocompatible                    "不要用兼容模式,用vim自己模式
set ts=4                            "设置tabstop为4个空格的距离
"set autoindent                      "自动缩进    (indentexpr > cindent > smartindent > autoindent),只有一个起作用
"set smartindent                     "智能缩进
set shiftwidth=4                    "缩进时的距离为4
"set cindent                         "c语言的缩进方式
"set expandtab                       "将tab转换为等量的空格

set wildmode=longest,list			"设定命令行模式补全行为
set history=200						"记录100条命令

syntax on						"语法高亮
"if has('gui_running')
"	set background=light
"else
"	set background=light
"	set t_Co=256
"endif
"colorscheme solarized

filetype plugin indent on           "检测文件类型,执行相应的脚本和对应的缩进
"set ruler                           "在状态行上显示光标所在的行与列
"set laststatus=0
set rulerformat=%100(%=%3*%f\ %m%r\ %l\ %c\ %p%%\ %b\ %n\ %y%)       "设置ruler显示模式
set backspace=2                     "有些linux版本不允许使用BackSpace删除,设置为2的意思是可以删除任意值,0或1时,仅可删除刚输入的字
set noerrorbells					"不要发出嘀嘀声

set encoding=utf-8                                           "缓冲区buffer的编码方式
set fileencoding=utf-8                                          "新建文件时,保存时用的编码方式,若不是新建文件,则为当前文件的编码方式
set fileencodings=utf-8,gb18030,ucs-bom,gbk,gb2312,cp936,latin1       "用vi打开文件时,默认检测文件编码的顺序
set termencoding=utf-8

"设置允许使用鼠标,类似windows的鼠标定位
"set mouse=a
"set selection=inclusive
"set selectmode=mouse,key

set report=0

let  mapleader='['

"set nowrap							 "不要换行
let Tlist_Use_Right_Window = 1		 "在右侧显示窗口

set nohlsearch                       "设置搜索时所有字符不高亮显示
:nmap   <leader>hs   :set hlsearch<CR>        "映射hl为搜索高亮显示
:nmap   <leader><leader>hs  :set nohlsearch<CR>

"编辑/载入vimrc文件
:nmap   <leader>v   :vi ~/.vimrc<CR>
:nmap   <leader>sv   :source ~/.vimrc<CR>

set nu                              "显示行号
:nmap	<leader>n	 :set nu<CR>
:nmap	<leader><leader>n	 :set nonu<CR>

"搜索时忽略大小写
set ignorecase                  
"智能搜索区分大小写
set smartcase	"必须上面选项开起

set incsearch	"根据已在查找域中输入的文本,预览第一处匹配的文本

:nmap 	<leader>ic :set ic<CR>
:nmap 	<leader><leader>ic :set noic<CR>

"设置为粘贴模式
:nmap	<leader>p   :set paste<CR>
:nmap	<leader><leader>p  :set nopaste<CR>

"显示所有特殊字符
:nmap 	<leader>l	:set list<CR>
:nmap	<leader><leader>l  :set nolist<CR>

"去除行尾空白
:nmap   <leader>dts	:%s/\s\s*$//<CR>

"去除行尾^M符号
:nmap	<leader>dtm	:%s/\r$//<CR>

"去除空行
:nmap	<leader>dsl :g/^\s*$/d<CR>

"自动对齐整个文件
:nmap   <leader>=     gg=G

"搜索时从尾部回到头部
set wrapscan
:nmap  	<leader>ws  :set wrapscan<CR>
:nmap  	<leader><leader>ws   :set nowrapscan<CR>

"设定折叠模式为缩进,更多的缩进表示更高级别的折叠(manual 手工定义折叠,expr 表达式折叠,syntax 语法高亮定义折叠,diff 对没有更改的文本进行折叠,marker 对文中的标志折叠)
set foldmethod=indent	"zM 关闭所有折叠 zR 打开所有折叠 zf 创建折叠 zc 关闭相应折叠 zo 打开相应折叠 za 自动打开或关闭相应的折叠
set foldlevel=99		"定义折叠级别

"set scrollbind			"拆分窗口后同步滚动(scrollup scrolldown scrollcursor scroll-horizontal scroll-mouse-wheel)
nmap <leader>sb 	:set scrollbind<CR>
nmap <leader><leader>sb 	:set noscrollbind<CR>

"autocmd VimEnter * NERDTree   "自动打开NERDTree
nmap <silent><F3> :exe 'NERDTreeToggle'<CR>
nmap <silent><F4> :TagbarToggle<CR>
let g:tagbar_ctags_bin='/data02/JFDEV/panwj/mysoft/bin/ctags'
let g:tagbar_width=60

" C的编译和运行
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
	exec "w"
	exec "!gcc % -o %<"
	exec "! ./%<"
endfunc

" C++的编译和运行
map <F6> :call CompileRunGpp()<CR>
func! CompileRunGpp()
	exec "w"
	exec "!g++ % -o %<"
	exec "! ./%<"
endfunc

" shell脚本的运行
map <F7> :call CompileRunSH()<CR>
func! CompileRunSH()
	exec "w"
	exec "!chmod a+x %"
	exec "!./%"
endfunc

" lua脚本的运行
map <F8> :call CompileRunLua()<CR>
func! CompileRunLua()
	exec "w"
	exec "!chmod a+x %"
	exec "! ./%"
endfunc

"设置tags文件目录
"set  cscopetag					"ctrl+]显示tag列表
"set autochdir 	"和下面的set tags=tags;一起使用会实现自动向上递归查找tags文件的功能,分号不能省略
set tags=tags,/data02/JFDEV/panwj/crt-vs2010/crt/src,/data02/JFDEV/panwj/work/trunk/openbilling60_ta_1.7.x_shanghai_mdbcloud/tags,${OB_REL}/include/tags,/data02/JFDEV/panwj/work/trunk/openbilling60_cmcc/tags    "默认tags目录
nmap <leader>zj :set tags=tags,/data02/JFDEV/panwj/work/trunk/openbilling60_ta_1.7.x_shanghai_mdbcloud/tags,/data02/JFDEV/panwj/work/trunk/openbilling50/openbilling50/tags<CR>
nmap <leader>60 :set tags=tags,/data02/JFDEV/panwj/work/trunk/openbilling60_ta_1.7.x_shanghai_mdbcloud/tags,/data02/JFDEV/panwj/ob_rel_co/include/tags,/data02/JFDEV/panwj/work/trunk/openbilling60_cmcc/tags<CR>
nmap <leader>hn :set tags=tags,/data02/JFDEV/panwj/work/trunk/openbilling60_ta_1.7.x_shanghai_mdbcloud/tags,${OB_REL}/include/tags,/data02/JFDEV/panwj/work/trunk/hunan/openboss60/tags<CR>

set inde=GetMyIndent(v:lnum)
function GetMyIndent(lnum)
	if a:lnum=1
		return 0
	endif

	let llnum=prevnonblank(a:lnum-1)    "上一非空行
	if llnum=0
		return 0
	endif

	let frontLine=getline(llnum)
	if(getline(a:lnum)=~'^\s*{\s*')
		let diff=0
	elseif getline(a:lnum)=~'^\s*}\s*'  && frontLine!~'\s*{\s*'
		let diff=-1
	elseif getline(a:lnum)=~'^\s*}\s*'  && frontLine=~'\s*{\s*'
		let diff=0
	elseif frontLine=~'^\s*{\s*'
		let diff=1
	else
		let diff=0
	endif
	return indent(llnum)+diff*&sw
endfunction

"powerline
"set guifont=/data02/JFDEV/panwj/.vim/vim-powerline-develop/fontpatcher
"set t_Co=256
"let g:Powerline_symbols = 'fancy'
