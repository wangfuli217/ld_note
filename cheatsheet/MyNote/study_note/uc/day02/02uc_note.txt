环境变量的概念和使用
	环境 变量 的概念
		表示存放编程环境/系统环境相关信息的变量 叫做环境变量
		PATH/Path就是一个环境变量，存放各种路径，在PATH/Path中存放路径的程序不需要再增加路径就可以直接运行
	环境 变量 的配置
		Windows Xp系统中的配置
			我的电脑－右键，选择属性－高级－环境变量－系统变量－选中PATH，点击编辑－在PATH值的最后增加分号（；）再增加新的路径(千万不要发动之前的变量值)－一路点击确定即可
		Linux系统下的配置
			export PATH=$PATH:.
			export表示导入/修改的意思
			$PATH 表示获取PATH变量之前的值
			:表示路径的分隔符，类似于Windows系统中的分号
			.表示当前目录
		如果需要设置环境变量为永久有效，则执行以下指令
			vi ~/.bashrc
			在文件末尾增加代码： export PATH=$PATH:.
			sourc	~/.bashrc

编程相关的环境变量
	CPATH/C_INCLUDE_PATH - 主要表示c语言中头文件所在的路径
	CPLUS_INCLUDE_PATH - 主要表示c++头文件所在的路径
	LIBRARY_PATH - 编译链接时查找静态库和共享库的路径
	LD_LIBRARY_PATH - 运行时查找共享库的路径

查找头文件的方式
#include<>
	表示去系统默认的路径中查找指定的头文件 /usr/include
#include" "
	表示去当前工作目录中进行查找
配置环境变量CPATH进行查找
	export CPATH=$CPATH:头文件所在的路径
使用编译选项进行查找(重点)
	gcc/cc xxx.c -I 头文件所在的路径

注意
	查找头文件1,2步骤的缺陷，头文件路径发生改变，必须修改源程序
	查找头文件的3步骤的缺陷，同时构建多个工程时，容易引发冲突
	查找头文件的方案4的特点，既不需要修改源程序，也不会有任何的冲突,所有推荐使用此方法

库文件的概念和使用
	为了调用者使用方便,一般程序不会直接提供.c文件/.o文件,而是需要把相关的.o文件进行打包,可以根据不同的功能打包成一个或者多个库文件，给调用者提供库文件和对应的头文件即可

分类的比较
	分类:
		库文件主要分成两种:静态库 和 共享库文件
	比较:
		静态库文件
			静态库文件在使用时，直接将所调用的功能代码复制到目标文件
			缺点：造成目标文件比较大，不利于修改
			优点：不需要跳转，所以效率比较高，不依赖于静态库文件
		共享库文件
			共享库文件在使用时，将所调用功能代码在共享库文件的偏移地址拷贝到目标文件中
			缺点：需要跳转，所以效率比较低，依赖于共享库文件的存在
			优点：目标文件比较小，修改和维护都比较方便

静态库的生成和调用
	静态库文件的生成步骤:
		编写源程序xxx.c
		只编译不链接，生成目标文件xxx.o
		使用ar -r命令来生成静态库文件
		ar -r/*插入*/ lib库名.a 目标文件
		注意：
			注意区分库名和静态库文件名
	静态库文件的调用步骤:
		编写调用库文件的源程序xxx.c(main.c)
		只编译不链接生成目标文件xxx.o(main.o)
		连接测试程序和库文件,方法主要有三种:
			1.直接连接
				gcc main.o libadd.a
			2.通过编译器选项进行间接连接(重点掌握)
				gcc main.o -l 库名 -L 库文件所在的路径
			3.配置环境变量LIBRARY_PATH进行连接
				export LIBRARY_PATH=$LIBRARY_PATH:路径
				gcc main.o -l 库名

共享库的生成和调用步骤
	共享库的生成步骤:
		编写源程序xxx.c(add.c)
		只编译不链接,生成目标文件xxx.o(add.o)
		gcc -c [-fpic]/*小模式，希望生成的目标文件越小越好*/  add.c
		生成共享库文件
		gcc/cc -shared xxx.o -o lib库名.so
	动态库文件的调用步骤:
		编写调用库文件的源程序xxx.c(main.c)
		只编译不链接生成目标文件xxx.o(main.o)
		连接测试程序和库文件,方法主要有三种:
			1.直接连接
				gcc main.o libadd.a
			2.通过编译器选项进行间接连接(重点掌握)
				gcc main.o -l 库名 -L 库文件所在的路径
			3.配置环境变量LIBRARY_PATH进行连接
				export LIBRARY_PATH=$LIBRARY_PATH:路径
				gcc main.o -l 库名
			注意
				共享库文件的时候需要配置新的环境变量
				export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:路径

共享库的动态加载
	dlopen函数
	#include<dlfcn.h>
	void *dlopen(const char* filename,int flag);
	第一个参数:字符串形式的共享库文件名
	第二个参数:加载的标志
		RTLD_LAZY	延迟加载
		RTLD_NOW	立即加载
	函数功能:表示加载参数filename指定的共享库文件，返回该共享库所对应的句柄

	dlerror函数
		char *dlerror(void);
		函数功能:
			表示获取调用dlopen/dlsym/dlclose函数期间产生的最后一个错误信息，通过该函数的返回值返回,没有产生错误则返回NULL

	dlsym函数
		void *dlsym(void *handle, const char *symbol);
		第一个参数：共享库的句柄,dlopen的返回值
		第二个参数：字符串类型的符号，也就是函数名
		函数功能
			根据参数指定的句柄和符号(函数名)，返回函数名所对应的内存地址

	dlclose函数
		函数功能
		表示关闭参数指定的共享库句柄
	注意
		编译链接的时候记得使用: -ldl
