文件的相关操作
	标C函数和UC函数的比较
	标C文件操作函数：fread()/fwrite()/fopen()/fclose/fseek()
	UC文件操作函数 ：open()/close/read()/write()/lseek()
	例子：
		分别使用标C函数/UC函数向文件中写入1~100万之间的整数
	使用命令time查看程序的执行时间，如time a.out
									real	真实时间
									user	用户态时间
									sys		内核态时间
	根据标C和UC文件操作的比较结果可知：标C文件处理函数的速度比UC操作效率高，本质是因为标C函数提供了缓冲区，当缓冲区满了之后才会访问内核，写入数据
	对于UC的文件操作函数来说，可以通过自定义缓冲区来提高效率

文件描述符
	文件描述符本质就是一个整数，可以代表一个打开的文件，但是文件的信息并不是保存在文件描述符中,而是存在文件表的结构中，使用open函数打开一个文件时，会把文件的信息放入文件表等结构中，但是处于安全和效率等因素，文件表等结构不适合直接操作，而是给文件表对应一个编号，使用编号进行操作，这个编号就是文件描述符
	系统会管理文件描述符的总表，在每个进程中都有一张描述符总表，当有新的文件描述符需要时，会去总表中查找未使用的最小值并返回，文件描述符本质就是非负整数，也就是从0开始，一直到OPEN_MAX(在linux系统中一般是255)，其中0 1 2被系统占用，分别代表标准输入 标准输出 标准错误
	注意
		打开不同的文件时对应的文件表信息和V结点表信息都不同，而多次打开相同的文件时，V结点信息表相同，文件表不同
	close()函数的工作方式：先把文件描述符与文件表的对应关系解除，不一定会删除文件表，只有当文件表没有与其它描述符对应时才会删除文件表(一个文件表可以对应多个描述符),close()函数也不会修改描述符的整数值，但是会让一个描述符无法代表一个文件

dup/dup2函数
	#include<unistd.h>
	int dup(int oldfd);
	函数功能
		表示根据参数指定的文件描述符进行拷贝，成功返回新的文件描述符，失败返回-1
	注意	
		文件描述符的复制本质就是让多个文件描述符对应同一个文件表，也就是对应同一个文件
	int dup2(int oldfd,int newfd);
	函数功能
		表示将参数newfd作为参数oldfd的拷贝,如果有必要，则先关闭newfd,成功返回新描述符，也就是newfd，失败返回-1

fcntl()函数(重点,复杂)
	include <unistd.h>
    #include <fcntl.h>
	int fcntl(int fd, int cmd, ... /* arg */ );
	第一个参数：文件描述符
	第二个参数：操作的命令
				F_DUPFD		复制文件描述符的功能，寻找最小的有效的大于等于第三个参数arg的一个描述符作为新的描述符，与dup2()函数所不同的是，不会强制关闭已经被占用的描述符
				F_GETFD/F_SETFD		获取/设置文件描述符的标志
				F_GETFL/F_SETFL		获取/设置文件状态的标志
				F_SETLK/F_SETLKW/F_GETLK	加锁/解锁/锁是否存在
	第三个参数：可变长参数
				参数是否需要，主要取决于参数cmd
	返回值
		F_DUPFD  成功返回新的文件描述符
		F_GETFD	 成功返回文件描述符的标志值
		F_GETFL	 成功返回文件状态的标志值
		其他操作成功返回0，所有的操作失败返回-1
	函数功能：主要表示根据文件描述符对文件执行的操作
		1.复制文件描述符(了解)
		2.设置/获取文件描述符的标志(了解)
		3.设置/获取文件状态的标志(了解)
		4.实现文件锁的功能(掌握)

使用fcntl函数实现文件锁的功能
	当使用多个进程同时读写文件时，可能会引发文件的混乱问题，如果所有的进程都是读文件，则可以同时进行，但是只要有一个进程执行写操作，则多个进程应该串行操作而不是并行，使用文件锁可以实现上面的功能，文件锁就是读写锁：一把读锁和一把写锁，其中读锁是一把共享锁，允许其他进程加读锁，不允许加写锁，写锁是一把互斥锁，不允许其他进程加读锁和写锁

	使用文件锁的功能时,第二个参数的娶个:
	F_SETLK/F_SETLKW/F_GETLK - 加锁/解锁/测试锁是否存在
	第三个参数的取值:
		指向以下结构体类型的指针，也就是变量的地址
	truct flock {
		...
		short l_type;    /* Type of lock: F_RDLCK,				//锁的类型
								F_WRLCK, F_UNLCK */	
		short l_whence;  /* How to interpret l_start:			//从什么地方开始
							SEEK_SET, SEEK_CUR, SEEK_END */		
		off_t l_start;   /* Starting offset for lock */			//偏移量
		off_t l_len;     /* Number of bytes to lock */			//锁定的字节数
		pid_t l_pid;     /* PID of process blocking our lock	//加锁的进程号(F_GETLK only),用不到时给-1
							(F_GETLK only) */
		...
	};

F_SETLK的使用
	主要用于加锁/解锁的功能

作业
	vi 06lock.c文件，给文件a.txt中前5个字节加一个读锁，占用20秒,vi 06test.c文件，向文件a.txt文件中写入字符串"hello",然后在06lock.c程序运行的情况下，执行06test.c,观察数据是否写入成功，如果写入成功则思考如何实现在加锁情况下写入数据失败？

明日预报
	文件操作
	目录操作
