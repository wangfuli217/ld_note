进程的管理
	进程的等待
		waitpid函数
			pid_t waitpid(pid_t pid,int *status,int options);
			第一个参数：进程号
						<-1		等待进程组ID为PID绝对值的任意一个子进程(了解)
						-1		等待任意一个子进程
						0		等待和调用进程在同一个进程组的任意一个子进程(了解)
						>0		等待进程号为pid的进程
			第二个参数：指针参数，获取进程的退出状态信息
			第三个参数：选项，默认给0即可
			返回值		成功返回状态发生改变的进程号,失败返回-1
			函数功能
				挂起当前正在运行的进程，直到指定进程状态发生改变为止
			注意
				wait(&status)等同于waitpid(-1,&status,0);

进程管理的其他处理函数
	vfork函数
		#include <sys/types.h>
		#include <unistd.h>
		pid_t vfork(void);
		函数功能
			功能与fork()函数基本一样，所不同的是不会拷贝父进程的内存区域，而是直接占用，导致父进程进入阻塞状态，直到子进程终止，或者调用exec系列函数跳出为止,对于子进程的终止建议使用_exit()函数
		注意
			对于vfork创建的父子进程来说，保证子进程先运行

exec系列函数
	int execl(const char *path,const char *arg,...);
	第一个参数：执行的文件路径以及文件名
	第二个参数：执行的选项，一般给可执行文件的执行方式
	第三个参数：可变长参数
	函数功能：
		主要用于实现跳转的功能
	如
		使用execl函数执行ls命令的实现
		excel("bin/ls","ls","-l",NULL);

	注意	
		vfork函数本身没有太大的实际意义，一般与exec系列函数搭配使用，fork函数也可以和exec系列函数搭配使用，但是基本不会这样使用

system函数
	#include <stdlib.h>
     int system(const char *command);
	 函数功能
		主要用于执行指定的shell命令以及shell脚本

shell脚本编写流程
	1.vi xxx.sh文件
	2.编写shell指令到文件中
	3.给xxx.sh文件增加执行权限
	4.执行xxx.sh文件

中断的概念
	中断就是指暂时停止当前程序的执行转而去执行新的程序，或者处理出现的意外情况
	中断分为：软件中断 和 硬件中断

信号的概念和处理
	基本概念和分类
		信号本质上就是软件中断,信号既可以作为进程间通信的一种方式，更重要的是，信号总是中断一个进程的正常运行，而信号更多的是用于处理一些非正常情况
		如ctrl+c就是一个信号
	特点
		信号是异步的，进程并不知道信号何时会到来
		进程既可以发送信号，也可以处理信号
		每个信号都有一个名字,这些名字以SIG开头
	命令和分类
		使用命令:kill -l用于查看当前操作系统所支持的信号
	掌握信号
		信号2	SIGINT	使用ctrl+c产生此信号
		信号3	SIGQUIT 使用ctrl+\产生此信号
		信号9	SIGKILL	使用kill -9 进程号 发送此信号(该信号不能被用户捕捉)

	一般来说,在linux系统中信号是从1～64，不保证连续，其中1～31之间的信号叫做不可靠信号，也就是信号不支持排队，可能会丢失，其中34～64之间的信号叫做可靠信号，也就是信号支持排队，不会丢失
	不可靠信号又叫做非实时信号，可靠信号又叫做实时信号

	信号的处理方式
		默认处理，绝大多数信号的处理方式都是终止进程
		忽略处理
		自定义处理
	信号的处理函数
	#include <signal.h>
	typedef void (*sighandler_t)(int);
	sighandler_t signal(int signum, sighandler_t handler);

	typedef void (*sighandler_t)(int);  =>  typedef void(*p)(int)  sighandler_t;
	void (*)(int) signal(int signum,void (*)(int)handler);
	void (*)(int) signal(int signum,void (*handler)(int));
	void (*signal(int signum,void(*handler)(int)))(int);
	首先singal是一个函数
	具有两个参数的函数，第一个参数是int类型，第二个参数是函数指针类型
	函数的返回值类型也是函数指针类型
	函数指针类型是一个指向具有int类型参数和void作为返回值类型的函数的指针

	函数功能解析
		第一个参数：信号值/信号名称(处理哪个信号)
		第二个参数：信号的处理方式(如何进行处理)
				SIG_IGN - 忽略
				SIG_DFL - 默认处理
				自定义函数地址-自定义处理
		返回值：成功返回之前的处理方式，失败返回SIG_ERROR
		函数功能：设置指定信号的指定处理方式
		练习：
			编程实现对父进程中信号2进行自定义处理，对信号3进行忽略，然后使用fork函数创建子进程，子进程打印进程号，然后进行无限循环，父进程直接结束即可，使用kill命令对子进程分别发送信号2，信号3，以及信号9，观察子进程对这三个信号的处理方式

父子进程对信号的处理方式比较
	1.对于fork函数创建的父子进程来说，子进程完全照搬父进程对信号的处理方式，也就是父进程忽略，则子进程也忽略；父进程自定义处理，则子进程中也自定处理；父进程中默认，则子进程中也默认处理

	对于vfork()和execl()搭配创建的父子进程来说，父进程默认处理，则子进程也默认处理，父进程采用忽略处理，则子进程也忽略处理，父进程中自定义处理，则子进程采用默认处理

发送信号的方式
	键盘发送信号(只能发送一些比较特殊的信号)
	ctrl+c =>信号2 SIGINT
	ctrl+\ =>信号3 SIGQUIT
	...
	程序出错(只能发送一些比较特殊的信号)
	段错误 =>信号11 SIGSEGV
	总线错误=>信号7 SIGBUS
	...
	采用kill命令发送信号
	kill -信号值 进程号 =>所有信号都能发

	采用一些系统函数发送信号
	raise()/kill()/alarm()/sigqueue()

发送信号的系统函数
	raise函数
		  #include <signal.h>
		  int raise(int sig);
		  函数功能
			主要用于给正在运行的进程/线程发送参数sig指定的信号
	
	#include<unistd.h>
	unsigned int sleep(unsigned int seconds);
	函数功能
		主要用于按照参数指定的秒数让正在运行的线程进入睡眠状态，直到参数指定的秒数睡够了，或者被一个不能忽略的信号打断，如果睡醒了则返回0，否则返回没有来得及睡的秒数

	kill函数
	#include <sys/types.h>
	#include <signal.h>
	int kill(pid_t pid, int sig);
	第一个参数：进程号（表示给谁发信号）
				>0	表示给进程号为pid的进程发信号（掌握）
				0	表示给与调用进程同一个进程组的每个进程都发信号（了解）
				-1	表示将信号发送给每一个允许调用进程发送信号的进程,进程1（init）除外（了解）
				<-1	表示将信号发送给进程组id为负的pid的每一个进程（了解）
	第二个参数：信号值（发一个什么样的信号）
				0	判断进程/进程组是否存在，不会发送信号
	函数功能：主要用于给指定的进程发送指定的信号


