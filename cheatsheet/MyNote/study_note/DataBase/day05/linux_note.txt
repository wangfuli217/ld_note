vi一些常用命令
	一般模式
	fx(Fx)	移动光标到当前行的下一个(上一个)x处
	tx(Tx)	和上面类似,但是是移动到x的左边(右边)一个位置
	b(w)	光标往前(后)移动一个词
	)		移动光标到下一个句子
	(		上一个句子
	ctrl-f	向下移动一屏
	ctrl-b	向上
	ctrl-d	向下移动半屏
	ctrl-u	向上
	G		文件尾
	numG	到num行
	M		移动光标到屏幕中间
	H		上面
	L		下面
	*		读取光标处的字符串,并且移动光标到它再次出现的地方
	#		和上面类似,但是往反方向找
	/text   查找text
	?text	反方向找
	m{a-z}	在当前光标的位置标记一个书签,名字为a-z单个字母,只能是小写
	`a		到书签a处
	`		到上次编辑文件的地方
	%		在成对的括号等符号间移动
	;		重复上一个动作
	编辑模式:
		ctrl +n 关键词自动完成
	指令列模式
		.	重复输入的上一个命令
Ctrl+Alt+BackSpace				重启X Window
Ctrl+Alt+[F1~F6]/F7				文件接口/图形接口
startx							启动图形接口

man page 数字意义
1.使用者可以操作的指令或可执行文件
2.系统核心可呼叫的函数与工具等
3.一些常用的函数(function)与函式库(library)
4.装置档案的说明
5.设定档或者是某些档案的格式
6.游戏
7.惯例与协议等，例如Linux标准档案系统、网络协议、ASCII code等等的说明内容
8.系统管理员可用的管理指令
9.跟kernel有关的文件

man -f 名字  显示名字一样的指令或可执行文件
man -k 名字	 显示包含名字的指令或可执行文件

fsck  参数	装置名称   检查与修正硬盘错误
-t	fsck可以检查好几种不现的filesystem,而fsck只是一支综合程序而已
	个别的filesystem的检验程序都在/sbin底下,可以使用 ls -l /sbin/fsck*检验看看
	指定文件系统名称
-A	依据/etc/fstab的内容,将所有装置都扫描一次(通常开机过程中就会执行此一指令)
-a	自动修复检查到的有问题的扇区,所以不用一直按y
-r	一定要主使用者决定是否需要修复,与上一个-a刚好相反
-y	与-a类似,但某些filesystem仅支持-y
-C	可以在检验的过程中,使用一个长条图来显示进度
-f	强制检查,强制进入细部检查

sync	把内存里的内容写入硬盘
shutdown	参数 	[时间] [警告信息]         //时间参数必须加入,否则会进入单人维护模式,reboot,halt,poweroff
-t sec:-t后面加秒数,即过几秒关机的意思
-k	  :不要真的关机，只是发送警告信息
-r	  :在将系统的服务停掉后重启
-h	  :在将系统的服务停掉后关机
-n	  :不经过init程序,直接以shutdown的功能关机
-f	  :关机并开机之后，强制略过fsck的磁盘检查
-F	  :系统重新开机之后,强制进行fsck的磁盘检查
-c	  :取消已经在进行的shutdown指令内容

chgrp  群组	档案或目录
-R	递归,连同目录下所有档案,目录
chown  用户	档案或目录
-R  递归
chmod  权限	档案或目录
-R  递归

档案种类
-				正规档案,二进制文件(binary),纯文字文件(ASCII),数据格式文件(data)
d(directory)	目录
b(block)		区块设备,就是一些存储数据,以提供系统存取的接口设备,硬盘就是
c(character)	字符设备档,亦即是一些串行端口的接口设备,如键盘、鼠标
l(link)			连结档,亦即是Windows下的快捷方式
s(socket)		资料接口文件,这种类型的档案通常被用在网络上的数据承接,在/var/run这个目录中可以看到这种档案
p(FIFO,pipe)	数据输送文件,主要的目的在解决多个程序同时存取一个档案所造成的错误问题

dumpe2fs 参数  /dev/sda1	显示磁盘inode table,block group等信息

df	参数  目录或文件名		显示磁盘分区容量和类型,挂载点
-a	列出所有的档案系统,包括系统特有的/proc等档案系统
-k	以KBytes的容量显示各档案系统
-m	以MBytes
-h	以人们较易阅读的GBytes,MBytes,KBytes等格式自行显示
-H	以M=1000K取代M=1024的进位方式
-T	连同该partition的filesystem名称(例如ext3)也列出
-i	不用硬盘容量,而以inode的数量来显示

du	参数  目录或文件名
-a	列出所有的档案与目录容量,因为预设仅统计目录底下的档案量而已
-h	以人们较易读的容量格式(G/M)显示
-s	列出总量而已,而不列出每个各别的目录战胜容量
-k	以KBytes列出容量显示
-m	以MBytes

ln  参数  来源文件  目标文件
-s	如果ln不加任何参数就进行连结,那就是hard link,-s就是symbolic link
-f	如果目标文件存在时,就主动的将目标文件直接移除后再建立

fdisk  参数	 装置名称    分割磁盘
-l	输出后面接的装置所有的partition内容,若仅有fdisk -l时,则系统会把整个系统内能够搜寻到的装置的partition均列出来

mke2fs  参数  装置名称
-b	可以设定每个block的大小，目前支持1024,2048,4096 bytes三种
-i	多少容量给一个inode
-c	检查磁盘错误,仅下达一次-c时,会进行快速读取测试
	如果下达再次-c -c时,会进行读取测试,会很慢
-L	可以接表头名称(Label)
-j	本来mke2fs建立的是EXT2,加上-J后会主动加入journal而成为EXT3

mount	参数  装置名称代号  挂载点
-a	依照/etc/fstab的内容将所有相关的磁盘都挂上来
-n	一般来说,当我们挂载档案系统到Linux上头时,Linux会主动将目前的partition与filesystem还有对应的挂载点,都记录到/etc/mtab档案中,不过有些时刻(例如不正常关机导致一些问题,而进入单人维护模式)系统
-L	取表头名称,可以用来挂载
-t	指定挂载的系统类型(如ext3,ext2)
--bind	将某个目录挂到另一个目录下面
-o	额外参数
	async/sync		异步/同步
	auto/noauto		开机是否自动挂载
	rw/ro			只写/只读
	exec/noexec		限制在此档案系统内是否可以进行[执行]的工作
	user/nouser		是否允许使用者使用mount指令来挂载
	suid/nosuid		该档案系统是否允许suid存在
	usrquota		是否支持硬盘配额模式
	grpquota		是否支持群组硬盘配额模式
	defaults		同时具有rw,suid,dev,exec,auto,nouser,async等参数
umount	装置或挂载点	卸载
/etc/fstab			开机时按照这个文件里的内容可以自动挂载
/etc/mtab /proc/mounts	实际filesystem的挂载记录
partition id为82的是swap文件,mkswap /dev/sd[a-d][1-16],再启动,swapon /dev/sd[a-d][1-16]   swapoff 关闭虚拟内存

e2label	 装置名称  新的label名称

tune2fs  参数	装置代号
-j	将ext2的filesystem转换为ext3的档案系统
-l	类似dumpe2fs -h的功能～将superblock内的数据读出来
-L	类似e2label的功能,可以修改filesystem的Label

hdparm	参数	装置名称
-d	-d1启用dma模式
	-d0关闭dma模式

cd		变换目录
pwd		显示目前的目录
-P	显示确实的路径,而非连续的路径
mkdir	建立一个新的目录
-m	设定档案的权限,不需要看预设权限(umask)
-p	直接将所需要的目录递归建立起来
rmdir	删除一个空的目录
-p	连同上层[空的]目录一起删除
ls	参数	目录名称
-a	全部的档案,连同隐藏档
-A	全部的档案,但不包括.与..这两个目录
-d	仅列出目录本身,而不是列出目录内的档案数据
-f	直接列出结果,而不进行排序(ls预设会以档名排序)
-F	根据档案、目录等信息，给予附加数据结构,如
	*	可执行档
	/	代表目录
	＝	代表socket档案
-h	将档案容量以人较易阅读的方式列出来
-i	列出inode位置,而非列出档案属性
-l	长数据串行出,包含档案的属性等数据
-n	列出UID与GID而非使用者与群组名称
-r	将排序结果反射输出
-R	连同子目录内容一起列出来
-S	以档案容量大小排序
-t	依时间排序
--color=never	不要依据档案特性给予颜色显示
--color=auto	让系统自行依据设定来判断是否给予颜色显示
--color=always	显示颜色
--full-time		以完整时间模式(包含年、月、日、时、分)输出
--time={atime,ctime}	输出access时间或改变权限属性时间(ctime),而非内容改变时间

cp	参数  来源档  目的档	拷贝档案或目录
-a	相当于-pdr的意思
-d	若来源文件为连结文件的属性,则复制连结文件属性而非档案本身
-f	为强制的意思,若有重复或其它疑问,不会询问使用者,而强制复制
-i	若目的档已经存在时,在覆盖时会先询问是否真的动作
-l	进行硬式连结(hard link)的连结档建立,而非复制档案本身
-p	连同档案的属性一起复制进去,而非使用预设属性
-r	递归持续复制,用于目录的复制行为
-s	复制成为符号连结文件(symbolic link)
-u	若目的档比来源档旧才更新

rm	参数  档案或目录	删除档案或目录
-f	强制
-i	互动模式,询问是否动作
-r	递归删除

mv	参数  来源	目的		移动档案或目录,或更名
-f	强制
-i	若目标档案已经存在时,就会询问是否覆盖
-u	若目标档案已经存在时,且来源比较新,才会更新(update)

basename  路径
取得最后的名字
dirname	  路径
取得除最后的名字外的其他

cat		由第一行开始显示档案内容
-A	相当于-vET
-E	将结尾的断行字符$显示出来
-n	打印行号
-T	将tab键以^I显示出来
-v	列出一些看不出来的特殊字符
tac		由最后一行开始显示
nl		显示的时候,顺道输出行号
-b	指定行号指定的方式,主要有两种
	-b a 表示不论是否为空行,也同样列出行号
	-b t 如果有空行,空的那一行不要列出行号
-n	列出行号表示的方法,主要有三种
	-n ln 行号在屏幕的最左方显示
	-n rn 行号在自己字段的最右方显示,且不加0
	-n rz 行号在自己字段的最右方显示,且加0
-w	行号字段的占用的位数
more	一页一页的显示档案内容
less	与more类似,但是比more更好,可以往前翻页
head -n	只看头几行
tail -n	只看尾几行
od		以二进制的方式读取档案内容
-t	后面可以接各种类型
	a	利用预设的字符来输出
	c	使用ASCII字符来输出
	d[size]	利用十进制来输出,每个占用size bytes
	f[size]	利用浮点数
	o[size]	利用八进制
	x[size]	利用十六进制

touch	修改档案时间与建置新档
-a	仅修订access time
-c	仅修改时间,而不建立档案
-d	后面可以接日期,也可以使用--date="日期或时间"
-m	仅修改mtime
-t	后面可以接时间,格式为[YYMMDDhhmm]

umask	目前使用者在建立档案或目录时候的属性默认值  若想永久有效,必须去修改~/.bashrc或/etc/bashrc
-S	以r,w,x显示
直接接数字就可以更改预设权限

chattr	参数  档案或目录名称	设定档案隐藏属性
+	增加某一个特殊参数,其他原本存在参数则不动
-	移除某一个特殊参数,其它原本存在参数则不动
=	设定一定,且仅有反而接的参数
A	当设定了A这个属性后,这个档案(或目录)的存取时间atime将不可被修改
S	这个功能有点类似sync的功能!就是会将数据同步写入磁盘当中,可以有效的避免数据流失
a	当设定a之后,这个档案只能增加数据,而不能删除,只有root才能设定这个属性	c	这个属性设定之后,将会自动的将此档案压缩,在读取的时候将会自动解压缩,但是在存储的时候会先压缩再存储(对大档案很有用)
d	当dump(备份)程序被执行的时候,设定d属性将可使该档案(或目录)不具有dump功能
i	可以让一个档案(不能被删除、改名、设定连续也无法写入或新增资料),对于系统安全性有相当大的帮助
j	当使用ext3这个档案系统格式时,设定j属性将会使档案在写入时先记录在jouranl中!但是当filesystem设定参数为data=journalled时,由于系统已经设定了日志,所以这个属性无效
s	当档案设定了s参数时,他将会被完全的移除出这个硬盘
u	与s相反,当使用u来设定档案时,则数据内容其实还存在硬盘中,可以使用undeletion
lsattr	参数  档案或目录名称
-a	将隐藏文件的属性也显示出来
-R	连同子目录的数据也一并列出来

档案的特殊权限	
Set UID		仅可以用在binary file,不能够用在批次档,让一般使用者在执行某些程序的时候,能够暂时的具有该程序拥有者的权限 s
Set GID		若用在binary file上,则不论使用者是谁,在执行该程序时,他的有效群组将会变成该程序的群组所有人,若设定在目录上,则在该目录内所建立的档案或目录的group会变成此A目录的group s
Sticky Bit	目前只针对目录有效,对于档案已经没有效果了,在具有SBit的目录下,使用者若在该目录下具有w及x的权限,则当使用者在该目录下建立档案或目录时,只有档案拥有者与root才有权力删除 t

file	档案	查阅档案的类型

which  参数	command  寻找执行档     在PATH中查找
-a	将所有可以找到的指令均列出,而不止第一个被找到的指令
whereis	参数	档案或目录名  寻找特定档案		在PATH中查找
-b	只找binary的档案
-m	只找在说明文件manual路径下的档案
-s	只找source来源档案
-u	没有说明档的档案
locate	档案或目录名	在数据库中查找  updatedb 更新数据库
find  路径 参数 要查找的文件或目录名	
-atime n:n为数字,意义在n天之前的[一天之内]被access过的档案
-ctime n:被change过状态的档案
-mtime n:被modefication过的档案
-new file:file为一个存在的档案,意思是说,只要档案比file还要新,就会被列出来
-uid n:n为数字,这个数字是使用者的账号ID,亦即UID,这个UID是记录在/etc/passwd里的
-gid n:
-user name:账号名称
-group name:群组名称
-nouser:寻找档案的拥有者不存在/etc/passwd的人
-nogroup:寻找档案的拥有群组不存在/etc/group的档案
-name file:搜寻名称为filename的档案
-size [+-]SIZE:搜寻比SIZE还要大(+)或小(-)的档案,c代表byte
-type TYPE:搜寻档案的类型为TYPE的,类型主要有:一般正规档案(f),装置档案(b,c),目录(d),连结档(l),socket(s),及FIFO(p)等属性
-perm mode:搜寻档案属性[刚好等于]mode的档案,四位数的属性
-perm -mode:搜寻档案属性[必须要全部囊括mode的属性]的档案
-perm +mode:搜寻档案属性[包含任一mode的属性]
-exec command:command为其它指令,-exec后面可再接额外的指令来处理搜寻到的结果
-print 将结果打印到屏幕,这个动作是预设的
-newer	file :比file新的文件就列出

compress  参数	档案或目录  .Z
-d(uncompress)	解压缩 
-r  可以连同目录下的档案也同时给予压缩
-c	将压缩数据输出成为到屏幕
gzip,zcat	参数	档名	zcat:可以将压缩档案的内容读出来 .gz  .z
-c	将压缩的数据输出到屏幕上,可透过数据流重导向来处理
-d	解压缩
-t	可以用来检验一个压缩档的一致性,看看档案有无错误
-#  压缩等级,-1最快,但是压缩比最差,-9最慢,但是压缩比最好,预设是6
bzip2,bzcat  参数  档名   .bz2 .bz  .tbz  .tbz2
-c	将压缩的过程产生的数据输出到屏幕上
-d	解压缩的参数
-z	压缩的参数
-#	同上
tar  参数	档案与目录
-c	建立一个压缩档案
-x  解开一个压缩档案
-t	查看tarfile里面的档案
-z	是否同时具有gzip的属性
-j	是否同时具有bzip2的属性
-v	压缩的过程中显示档案
-f	使用档名
-p	使用原档案的原来属性
-P	可使用绝对路径来压缩
-N	比后面接的日期(yyyy/mm/dd)还要新的才会被打包进新建的档案中
--exclude	文件或目录名	压缩时不加这个档案

dd	if=输入		of=输出		bs=block_size	 count=number
if	也可以是装置
of	也可以是装置
bs	规划的一个block的大小,如果没有设定时,预设是512bytes
count  多少个bs的意思

dos2unix [-kn]	file [newfile]
unix2dow [-kn]	file [nesfile]
-k	保留该档案原本的mtime格式
-n	保留原本的旧档,将转换后的内容输出到新档案

/etc/shells		记录系统可以用的shell

type [-tpa] name
:	不加任何参数时,则type会显示出那个name是外部指令还是bash内建的指令
-t	当加入-t参数时,type会将name以底下这些字眼显示出他的意义
	file : 外部指令
	alias: 该指令为命令别名设定的名称
	builtin: 该指令为bash内建指令
-P  如果后面接的name为指令时,会显示完整文件名(外部指令)或显示为内建指令
-a	会将由PATH变量定义的路径中,将所有含有name的指令都列出来,包括alias

echo 显示变量内容,变量名称前加$,双引号内的特殊字符可以保有变量特性,单绰号内的特殊字符仅为一般字符,\跳脱字符,也可${变量名}
 -e	 可以对转义字符做出解释,否则仅当一般字符处理
 -n	 不输出行尾的换行符

unset 变量名称  取消变量
env		列出目前shell下的所有环境变量和内容
$RANDOM 随机数变量
set	除了列出环境变量外,还列出自定义的变量
$	本shell的pid
?	上个指令的回传码	用$?可显示,成功返回0,失败返回非0
export 变量	将自定义变量转换成环境变量

read [-pt]  variable	读取来自键盘输入的变量
-p	后面可以接提示字符
-t	等待的秒数
declare [-aixr] variable
-a	将后面的variable定义成为数组
-i	将后面接的variable定义成为整数数字
-x	用法与export一样,将后面的变量变成环境变量
-r	将变量设定成为readonly,该变量不可被更改内容,也不能unset
ulimit  [-SHacdflmnpstuv]  配额	限制使用者的某些系统资源
-H	hard limit,严格的设定,必定不能超过设定的值
-S	soft limit,警告的设定,可以超过这个设定值,但是会有警告讯息,并且,还是无法超过hard limit
-a	列出所有的限制额度
-c	可建立的最大核心档案容量
-d	程序数据可使用的最大容量
-f	些shell可以建立的最大档案容量,单位为kbytes
-l	可用于锁定的内存量
-p	可用以管线处理的数量
-t	可使用的最大CPU时间(单位为秒)
-u	单一使用者可以使用的最大程序数量

在 ${variable}的使用方法中
${variable##/*/}	#从前面开始对比,两个代表删除最长的一段/*/
${variable#/*/}	一个代表删除最短的一段/*/
${variable%%/*/}	%从最后面开始对比
${variable%/*/}	一个代表删除最短的一段
${variable/testing/TEST}	将variable中的testing取代为TEST,一个/代表取代第一个找到的testing,两个//代表所有找到的testing
${variable//testig/TEST}
变量设定方式		str没有设定			str为空字符串		str已设定非空字符串
var=${str-expr}		var=expr			var=				var=$str
var=${str:-expr}	var=expr			var=expr			var=$str
var=${str+expr}		var=expr			var=expr			var=expr
var=${str:+expr}	var=expr			var=				var=expr
var=${str=expr}		str=expr			str不变				str不变
					var=expr			var=				var=$str
var=${str:=expr}	str=expr			str=expr			str不变
					var=expr			var=expr			var=$str
var=${str?expr}		expr输出至stderr	var=				var=str
var=${str:?expr}	expr输出至stderr	expr输出至stderr	var=str

alias ls='ls -l'	设定命令别名
unlias ls			取消命令别名

history [n]
n	数字,意思是列出最近n笔命令的意思
-c	将目前的shell中的所有history内容全部删除
-a	将目前新增的history指令新增入histfiles中,若没有histfiles，则预设写入~/.bash_history
-r	将histfiles的内容读到目前这个shell的history记忆中
-w	将目前的history记忆内容写入histfiles中
!number	执行第几笔指令
!!		执行上一个指令

/etc/issue	终端机登机的提示信息
\d	本地端时间的日期
\l	显示第几个终端接口
\m	显示硬件的等级(i386/i486/i586...)
\n	显示主机的网络名称
\o	显示domain name
\r  操作系统的版本(相当于uname -r)
\t	显示本地端时间的时间
\s	操作系统的名称
\v	操作系统的版本
/etc/issue.net	显示给telnet登录的提示信息
/etc/motd	里面的字符会在登录时显示在终端上,如果想要让大家都知道,可以写在这个文件里

/etc/profile	设定了几个重要的变量,例如PATH USER MAIL HOSTNAME等等,这个档案也规划出/etc/profile.d及/etc/inputrc这两个目录与档案
/etc/bashrc	这个档案规划出umask的功能,也同时规划出提示字符的内容(PS1)
/etc/profile.d/*.sh  是一个目录,里面针对bash及C_shell规划了一些数据
/etc/man.config	规范了使用man的时候,man page的路径去哪里寻找

~/.bash_profile,~/.bash_login,~/.profile
这三个档案通常只要一个就够了，一般预设是以~/.bash_profile的档名存在,这个档案可以定义个人化的路径(PATH)与环境变量等,bash启动时,会先去读取~/.bash_profile,找不到时,就去读取~/.bash_login,然后才是~/.profile

~/.bashrc	个人化设定值一般写在这,这个档案每次执行shell script的时候都会被重新使用一遍,所以是最完整的,而上面的~/.bash_profile则只有在登入的时候会被读取一次

~/.bash_history	历史命令记录的档案

～/.bash_logout	这个档案记录了当我注销后bash后,系统再帮我做完什么动作后才离开

source 或小数点 文件名可以立即加载设定文件

stty -a		列出所有终端设置	
eof		end of file 结束输入的意思
erase	向后删除字符
intr	送出一个interrupt(中断)的讯号给目前正在run的程序
kill	删除在目前指令列上的所有文字
quit	送出五个quit的讯号给目前正在run的程序
start	在某个程序停止后,重新启动他的output
stop	停止目前屏幕的输出
susp	送出一个terminal stop的讯号给正在run的程序
stty erase ^h	改为用ctrl+h来删除
^?		代表backspace键

万用字符与特殊符号
*	万用字符,代表0个或多个字符(或数字)
?	万用字符,代表一定有一个字母
#	批注
\	跳脱符号,将特殊字符或万用字符还原成一般字符
|	分隔两个管线命令的界定
;	连续命令的界定
~	使用者的家目录
$	变量之前需要加的变量取代值
!	逻辑运算符上的非的意思
/	路径分隔的符号
>,>>	输出导向,分别是取代与累加
,	单引号,不具有变量转换的功能
"	具有变量转换的功能
()	在中间为子shell的起始与结束
[]	在中间为字符的组合
{}	在中间为区块的组合

标准输入(stdin)			代码为0,使用<或<<    <简单来说就是将原本需要由键盘输入的数据,经由档案来读入,<<代表结束的输入字符 例cat > catfile <<eof输入eof结束
标准输出(stdout)		代码为1,使用>或>>
标准错误输出(stderr)	代码为2,使用2>或2>>       /dev/null	类似一个垃圾桶,任何东西放入这个档案就会消失不见
要将标准输出与标准错误输出写入同一个文件  2>&1	而不能用 2>同一个文件

&&		代表前一个命令没有错误就执行下一个命令
||		代表前一个命令有错误才执行下一个命令
|		管线命令,仅能处理前一个命令传来的正确的信息,也就是stdout

cut -d '分隔字符' -f number1,number2    以行为处理单位,取出一行的部分
cut -c num1-num2	取出第num1和num2间的字符
-d 后面接分隔字符,与-f一起使用
-f	依据-d的分隔字符将一段信息分割成数段,用-f取出第几段的意思
-c	以字符的单位取出固定字符区间

grep -acinv '搜寻字符串' filename
-a	将binary档案以text档案的方式搜寻数据
-c	计算找到'搜寻字符串'的次数
-i	忽略大小写的不同,所以大小写视为相同
-n	顺便输出行号
-v	反向选择,亦即显示出没有'搜寻字符串'内容的那一行

sort  -fbMnrtuk  file or stdin
-f	忽略大小写的差异,例如A与a视为编码相同
-b	忽略最前面的空格符部分
-M	以月份的名字来排序,例如JAN,DEC等等的排序方法
-n	使用纯数字进行排序(预设是以文字开型态来排序的
-r	反向排序
-u	就是uniq,相同的数据中,仅出现一行代表
-t	分隔符,预设是tab键
-k	以那个区间(field)来进行排序的意思

uniq  -ic	排序完成后,对重复资料仅列出一个显示
-i	忽略大小写字符的不同
-c	进行计算

wc -lwm
-l	仅列出行
-w	仅列出多少字(英文单字)
-m	多少字符

tee	-a file		双向重导向
-a	以累加的方式将数据加入file中
如	last | tee last.list 屏幕上也会有一份显示

tr  -ds  SET1   可以用来删除一段讯息当中的文字,默认是替换
-d	删除讯息当中的SET1这个字符串
-s	取代掉重复的字符

col -x
-x	将tab键转换成对等的空格键
expand  -t file
-t 后面可以接数字,一般来说,一个tab按键可以用8个空格键取代。我们可以自定义一个tab按键代表多少个字符

join	-ti12  file1 file2
-t	join预设以空格符分隔数据,并且对比第一个字段的数据,如果两个档案相同,刚将两笔数据联成一行,且第一个字段放在第一个
-i	忽略大小写
-1	代表第一个档案要用那个字段来分析的意思
-2	代表第二个档案要用那个字段来分析的意思

paste	-d file1 file2
-d	后面可以接分隔字符,预设是以tab来分隔的
-	如果file部分写成-,表示来自standard input

split -bl file PREFIX 将一个大档案分割成几个小档案
-b	后面可以接欲分割的档案大小,可加单位,例如b,k,m等
-l	以行数来进行分割

正则表达法(grep支持)
[]	[]里不论有几个字符,都代表一个
^	在[]里代表非,在[]外代表行首
$	行尾
.	代表绝对有一个任意字符
*	代表重复0个或多个前面的字符,o*代表的是空字符或1个o以上的字符
\{\} 限定连续字符范围,如'o\{2\}',重复2个o
						'o\{2,5\}',重复2-5个o
						'o\{2,\}',重复2个以上o

延伸正则表示法(egrep支持)
+	重复一个或一个以上的前一个字符
?	零个或一个的前一个字符
|	用或的方式找出数个字符串
()	找出群组字符串
	例(xyz)代表包括xyz三个的字符串

printf '打印格式' 实际内容	
\a	警告声音输出
\b	退格键
\f	清除屏幕
\n	输出新的一行
\r  亦即Enter按键
\t  水平的tab键
\v	垂直的tab键
\xNN	NN为两位数的数字,可以转换数字成为字符
关于C程序语言内,常见的格式
%ns
%ni
%N.nf

sed  -nefr  动作
-n	使用安静模式,在一般sed的用法中,所有来自STDIN的数据一般都会被列出到屏幕上,但如果加上-n参数后,则只有经过sed特殊处理的那一行(或者动作)才会被列出来
-e	直接在指令列模式上进行sed的动作编辑
-f	直接将sed的动作写在一个档案内,-f filename刚可以执行filename内的sed动作
-r	sed的动作支持的是延伸型正规表示法的语法(预设是基础正规表示语法)
动作说明
	[n1[,n2]]function
	n1,n2不见得会存在,一般代表选择进行动作的行数,如需要在10到20行进行动作,则[10,20[动作行为]]
	function有以下行为 
	a	新增,a的后面可以接字符串,而这些字符串会在新的一行出现(目前的下一行),\可以接多行
	c	取代,c的后面可以接字符串,这些字符串可以取代n1,n2之间的行
	d	删除,因为是删除啊,所以d后面通常不接任何东西
	i	插入,i的后面可以接字符串,而这些字符串会在新的一行出现(目前的上一行)
	p	打印,亦即将某个选择的数据印出,通常p会与参数sed -n一起运作
	s	取代,可以直接进行取代的工作,通常这个s的动作可以搭配正规表示法,例如1,20s/old/new/g就是

awk	'条件类型1{动作1}  条件类型2{动作2}...'	filename	处理每一行的字段内的数据,预设的字段分隔符为"空格键"或“[tab]键”
	例last | awk '{prin $1 "\t" $3}',$1代表第一列,$0代表一行
awk处理流程
	1.读入第一行,并将第一行的资料填入$0,$1,$2...等变量中
	2.依据"条件类型"的限制,判断是否需要进行后面的动作
	3.做完所有的动作与条件类型
	4.若还有后续的行的数据,则重复上面1~3的步骤
awk内建变量
	NF   每一行($0)拥有的字段总数
	NR	 目前awk所处理的是第几行数据
	FS	 目前的分隔字符,预设是空格键
	当改变FS时第一行不会处理,因为先读入第一行后是按照预设的分隔符分隔的,FS还没有起作用
	可以用BEGIN这个关键词
	例	cat /etc/passwd | awk "BEGIN {FS=":"} $3<10 {print $1 "\t" $3}'
	在{}内有多个动作时可以利用;来分隔,或者直接enter来分隔
	与bash shell的变量不同,在awk当中,变量可以直接使用,不用加上$符号

diff	-bBi	from-file  to-file	对比两个档案的差异,还可以对比两个目录的差异,以行为单位对比
from-file	一个档名,作为原始比对档案的档名
to-file		一个档名,作为目的比对档案的档名
-b			忽略一行当中,仅有多个空白的差异(例如"about me"与"about   me"视为相同
-B			忽略空白行的差异
-i			忽略大小写的不同
-Naur	old/ new/ test.pach		制作修补档案,升级可以使用
patch	-pN<patch_file
-p			后面接取消几层目录的意思
cmp  -s file1 file2  主要利用位单位去比,所以可以比对二进制档案	
-s			将所有的不同点的位处都列出来,因为cmp预设仅会输出第一个发现的不同点
pr	file	档案打印准备

netstat	-tuln	查询目前主机所有已经启动的服务
80:www
22:ssh
21:ftp
25:mail

shell scripts的编写
第一行#!/bin/bash宣告这个script使用的shell名称

在数字运算上可以作用declare -i total=$first*$second,也可以这样$((运算内容))

test	file  测试file是否存在
-e		该档名是否存在
-f		该档名是否为档案
-d		该文件名是否为目录名
-b		该文件名是否为一个block device装置
-c		该文件名是否为一个character device装置
-S		该档名是否为一个Socket档案
-p		该档名是否为一个FIFO档案
-L		该档名是否为一个连结档

-r		侦测该文件名是否具有可读的属性
-w
-x
-u		侦测该文件名是否具有SUID的属性
-g		SGID
-k		Sticky bit
-s		侦测该档名是否为非空白档案

test file1 -nt file2
-nt		(new than)判断file1是否比file2新
-ot		(loder than)判断file是否比file2旧
-ef		判断file1与file2是否为同一个档案,可用在hard link的判定上,主要意义在判定,两个档案是否均指向同一个inode

判断两个整数
-eq		两数值相等(equal)
-ne		两数值不等(not equal)
-gt		n1大于n2(greater than)
-lt		n1小于n2(less than)
-ge		n1大于等于n2(greater than or equal)
-le		n1小于等于n2(less than or equal)

判定字符串的数据
test -z string	判定字符串是否为0?若string为空字符串,则为true
test -n string	判定字符串是否为非0?若string为空字符串,则为false,-n可省略
test str1 = str2	判定str1是否等于str2,若相等,则回传true
test str1 != str2	判定str1是否不等于str2,若相等,则回传false

多重条件判定  例如test -r filename -a -x filename
-a		(and)两状况同时成立,例如test -r file -a -x file,则file同时具有r与x权限时,才回传true
-o		(or)两状况任何一个成立!
!		反相状态,如test ! -x file,当file不具有x时,回传true

判断符号[],例如test -z可以这样写[ -z "$HOME" ],每个组键都必须以空格来分开	测试HOME变量是否为空,在中括号内的变量,最好都以双引号来设定,在中括号内的常数,最好都以单或双引号设定,中括号的使用方法几乎与test一模一样

if	[ 条件判断式 ];	then
	当条件判断式成立时,可以进行的指令内容
elif [条件判断式2];then
	...
else
...
fi
注意:
当有多个条件要写入一个中括号时,除了用-a或-o选项隔开之外,还可以用多个中括号来隔开,在这里面,&&代表AND,||代表or

case $变量名称 in
"第一个变量内容")
	程序段
	;;
"第二个变量内容")
	程序段
	;;
*)
	不包含第一个变量内容与第二个变量内容的其它
	exit 1
	;;
esac

函数功能
function fname(){
	程序段
}
注意
	在shell script当中,function的设定一定要在程序的最前面

循环
while [ condition ]   当condition条件成立时,就进行循环
do
	程序段落
done

until [ condition ]   当condition条件成立时,就终止循环,否则就持续进行循环
do
	程序段落
done

for ((初始值;限制值;执行步阶))
do
	程序段
done

for var in con1 con2 con3...	第一次循环时,$var的内容为con1;第二次...
do
	程序段
done

sh	-nvx	scripts.sh
	-n		不要执行script,仅查询语法的问题
	-v		在执行script前,先将scripts的内容输出到屏幕上
	-x		将使用到的script内容显示到屏幕上

UID		
	0:			代表这个账号是系统管理员
	1~499:		保留给系统使用的ID,一般来说,1~99会保留给系统预设的账号,另外100~499则保留给一些服务来使用
	500~65535	给一般使用者的

/etc/shadow
	1.账号名称
	2.加密后的密码,如果是*或!,表示这个账号不会被登入
	3.最近更动密码的日期,1970年1月1日为1,每天累加1
	4.密码不可被更动的天数,如果为0表示随时可以更动
	5.密码需要重新变更的天数,如果为99999的话,表示不需要更动密码
	6.密码需要变更前的警告期限
	7.密码过期的恕限时间
	8.账号失效日期,和3一样都是从1970年1月1日到某天的天数
	9.保留,看以后有没有新功能加入
	
/etc/group		记录群组与gid的关系
	1.群组名称
	2.密码,通常不需要
	3.GID
	4.支持的账号名称
	
初始群组:
	/etc/passwd里记录的就是初始群组,一登入系统就会取得这个群组的权限,所以并不用写进/etc/group

groups		查看当前使用者的群组,第一个输出的为有效群组(建立文件或档案时的群组拥有者)
newgrp	群组名称	切换有效群组,离开有效群组输入exit就可以了

/etc/gshadow
	1.群组名称
	2.密码栏
	3.群组管理员的账号
	4.该群组的所属账号

useradd	-u UID -g initial_group -G other_group -Mm -c 说明栏 -d home -s shell username	新增使用者
	-u	UID
	-g	初始GID
	-G	可以支持的群组
	-M	强制,不要建立使用者家目录
	-m	强制,要建立使用者家目录
	-c	这个是/etc/passwd的第五栏的说明内容
	-d	指定某个目录成为家目录,而不使用默认值
	-r	建立一个系统的账号,这个账号的UID会有限制
	-s	后面接一个shell,预设是/bin/bash
	注意
		使用useradd新增使用者时,这个使用者的/etc/shadow密码栏是不可登入的,因此还需要用passwd来给用户一个密码,/etc/default/useradd里的内容是预设内容,使用者家目录/etc/,关于UID和GID的设定会参考/etc/login.defs

passwd	用户名	更改密码
	-l	将这个账号的密码锁住
	-u	将-l的lock解开
	-n	接天数,即/etc/shadow内的第四栏
	-x	第五栏
	-w	第六栏
	-S	显示用户的相关信息

usermod		参数	用户名		对账户进行一些修改
	-c	后面接账号的说明
	-d	后面接账号的家目录
	-e	后面接日期,格式是YYYY-MM-DD
	-g	后面接group name
	-G	接支持的群组
	-l	后面接账号名称,亦即修改账号名称
	-s	后面接shell的实际档案
	-u	后面接UID数字
	-L	暂时将使用者的密码冻结,让他无法登入
	-U	解冻

userdel	用户名		删除使用者
	-r	连同使用者的家目录一起删除 

chsh	-ls 
	-l	列出目前系统上面可用的shell
	-s	设定修改自己的shell

chfn	-foph
	-f	后面接完整的名字
	-o	办公室的房间号码
	-p	办公室的电话号码
	-h	家里的电话号码

id	用户名	列出UID,GID....

groupadd  参数
	-g	后面接某个特定的GID
	-r	建立系统群组

groupmod	参数	群组名
	-g	修改既有的GID数字
	-n	修改既有的群组名称

groupdel	群组名	删除群组

su	-lcm	用户名
	-	使用su -时,表示该使用者想变换身份成为root,且使用root的环境设定参数档
	-l	后面可以接使用者,可以使用欲换身份者的环境设定档
	-m	-m与-p是一样的,表示使用目前的环境设定档,而不重新读取新使用者的设定档
	-c	仅进行一次指令,所以-c后面可以加上指令 

sudo	参数	command		/etc/sudoers(使用者的账号(前加%的话代表群组) 登入的主机(可以变换的身份)可以下达的指令)
	-u	后面接使用者账号名称,或者是UID(-u #1000)  

write	用户名	发送消息给另一个用户
mese y/n	打开/关闭write功能
wall  "消息内容"	发送给所有人一个消息(mesg y)
mail	username@localhost -s "邮件标题" (输入小数点结束)
mail	代表收信

pwck	检查/etc/passwd内的信息与实际的家目录是否存在等信息,还可比对/etc/passwd与/etc/shadow内的信息是否一致
pwconv	将/etc/passwd内的账号与密码移到/etc/shadow内
chpasswd	读入未加密前的密码并经过加密再写入到/etc/shadow内

quota	磁盘限额
	-u	后面可以接username,表示显示出该使用者的quota限值,若不接username表示显示出执行者的quotq限制值
	-g	后面可以接groupname,表示显示出该群组的quota限制值
	-v	显示每人filesystem的quota值
	-s	可选择以inode或磁盘容量的限制值来显示
	-l	仅显示目前本机上面的filesystem的quota值

quotacheck  -avug  /mount_point
	-a	扫描所有在/etc/mtab内,含有quota支持的filesystem,加上此参数后,/mount_point可不必写,因为扫描是扫描所有的filesystem
	-u	仅针对使用者扫描档案与目录的使用情况,会建立aquota.user
	-g	针对群组扫描档案与目录的使用情况,会建立aquota.group
	-v	显示扫描过程的信息
	-M	强制进行quotacheck的扫描

edquota -u username -g groupname
edquota -t	修改恕限时间
edquota -p	username_demo -u username
	-u	后面接账号名称
	-g	后面接群组名称
	-t	可以修改恕限时间
	-p	复制范本.意义为将username_demo这个人的quotq限制值复制给username

quotaon	-avug
quotaon -vug	/mount_point
	-u	针对使用者启动quota(aquota.user)
	-g	针对群组启动quota(aquota.group)
	-v	显示启动过程的相关讯息
	-a	根据/etc/mtab内的filesystem设定启动有关的quota,若不加a的话,则后面就需要加上特定的那个filesystem

quotaoff -a
quotaoff -ug /mount_point
	-a	全部的filesystem的quota都关闭(根据/etc/mtab)
	-u	仅针对后面接的那个/mount_point关闭user quota
	-g	仅针对后面接的那个/mount_point关闭group quota

repquota -a -vug
	-a	直接到/etc/mtab搜寻具有quotq标志的filesystem,并报告quotq的结果
	-v	输出所有的quota结果,而非仅下达指令自己的quotq值
	-u	显示出使用者的quotq限值(这是默认值)
	-g	显示出个别群组的quota值

at		这个工作仅执行一次就从linux系统的排程中取消
cron	这个工作将持续例行性的作下去

at
	/etc/init.d/atd restart  启动atd服务

	先搜寻/etc/at.allow,写在这个档案中的使用者才能使用at,没有在这个档案中的使用者不能使用at
	如果没有/etc/at.allow就寻找/etc/at.deny这个档案,若写在这个at.deny的使用者则不能使用at,而没有在这个at.deny档案中的使用者,就可以使用at
	如果两个档案都不存在,那么只有root可以使用at这个指令

	at -m TIME
	-m	当at的工作完成后,以email的方式通知使用者该工作完成
	TIME:时间格式,这里可以定义出什么时候进行at这项工作的时间,格式有:
		HH:MM		例04:00
		在今日的HH:MM时刻进行,若该时刻已超过,则明天的HH:MM进行此工作
		HH:MM YYYY-MM-DD   例04:00 2005-12-03
		强制规定在某年某月的某一天的特殊时刻进行该工作
		HH:MM[am|pm] [Month] [Date]	例04pm December 3
		也是一样,强制在某年某月某日的某时刻进行
		HH:MM[am|pm]+number [minutes][hours][days][weeks]
		例now+5minutes,04pm+3days
		就是说,在某个时间点再加几个小时后才进行
		ctrl+d结束
	atq	查询目前主机上面有多少的at工作排程
	atrm num	移除num代表的工作排程

cron	
	/etc/cron.allow,/etc/cron.deny,cron.allow优先级比cron.deny高

	crontab  -u name -l|-e|-r
		-u	只有root才能进行这个任务,亦即帮其它使用者建立/移除 crontab
		-e	编辑crontab的工作内容
		-l	查询crontab的工作内容
		-r	移除crontab的工作内容,移除所有crontab工作,若要移除一项工作,要作用-e
		wq存储离开
		0	   12    *		 *		*		mail hells -s "at 12:00" < /home/hells/.bashrc
		分	   时	 日		 月		周		|<===============指令串=====================>|
		0-59   0-23	 1-31	 1-12	0-7		*代表任何时刻都接受		,代表分隔时段,例如下达的时间是3:00与6:00,就会是0 3,6 * * * command  -代表一段时间范围		*/n代表每隔n单位间隔的意思
	/etc/crontab 是系统的例行性任务
		有时候需要重新启动crond这个服务,因为有些系统是把crontab文件计入内存中的
		/etc/init.d/crond restart
工作管理
	在指令后加&表示在背景中执行的意思
	ctrl+z	将某项工作丢到背景中暂停的意思
	jobs	参数	观察目前的背景工作状态
		-l	除了列出job numbwr之外,同时列出PID
		-r	仅列出正在背景run的工作
		-s	仅列出正在背景当中暂停的工作
	fg %jobnumber	将背景工作拿到前景来处理,预设取胜+号那个number
	bg %jobnumber	将背景工作下停止运行的程序运行起来
	kill -signal %jobnumber
		-l	这个是L的小写,列出目前kill能够使用的讯号有哪些
		-1	重新读取一次参数的设定档
		-2	代表由键盘输入ctrl+c同样的动作
		-9	立刻强制删除一个工作
		-15	以正常的程序方式终止一项工作

ps aux
ps -lA
ps axjf
	输出格式规划
		-A	所有的process均显示出来,与-e具有同样的效用
		-a	不与terminal有关的所有process
		-u	有效使用者相关的process
		x	通常与a这个参数一起使用,可列出较完整信息
	输出格式规划
		l	较长,较详细的将该PID的信息列出
		j	工作的格式
		-f	做一个更为完整的输出
		
top -d | top -bnp
	-d	后面可以接秒数,就是整个程序画面更新的秒数,预设是5秒
	-b	以批次档的方式执行top,通常会搭配数据流重导向来将批次的结果输出成为档案
	-n	与-b搭配,意义是,需要进行几次top的输出结果
	-p	指定某些个PID来进行观察侦测
	在top执行过程当中可以使用的按键指令
		?:	显示在top当中可以输入的按键指令
		P:	以CPU的使用资源排序显示
		M:	以Memory的使用资源排序显示
		N:	以PID来排序
		T:	由该Process使用的CPU时间累积排序
		k:	给予某个PID一个讯号(signal)
		r:	给予某个PID重新制订一个nice值

pstree  -Aup
	-A	各程序树之间的连接以ASCII字符来连接
	-p	并同时列出每个process的PID
	-u	并同时列出每个process的所属账号名称

killall	-ile  command name
	-i	interactive的意思,交互式的,若需要删除时,会出现提示字符给使用者
	-e	exact的意思,表示后面接的command name要一致,但整个完整的指令不能超过15个字符
	-l	指令名称(可能含参数)忽略大小写

free -b|-k|-m|-g   -t
	-b	直接输入free时,显示的单位是Kbytes,可以使用b(bytes),m(Mbytes),k(kbytes),g(Gbytes)来显示单位
	-t	在输出的最终结果,显示物理内存与swap的总量

uname -asrmpi
	-a	所有系统相关的信息
	-s	系统核心名称
	-r	核心的版本
	-m	本系统硬件的名称 
	-p	CPU的类型
	-i	硬件的平台(ix86)

uptime	显示系统已经开机多久了,以及1,5,15分钟的平均负载,就是top画面的最上面的一行

netstat	 -[atunlp]
	-a	将目前系统上所有的联机,监听,Socket数据都列出来
	-t	列出tcp网络封包的数据
	-u	列出udp网络封包的数据
	-n	不显示程序的服务名称,以端口号来显示
	-l	列出目前正在网络监听的服务
	-p	列出该网络服务的程序PID

dmesg	查询所有的核心开机时的信息

一般使用者的nice值为0~19,仅可将nice值越调越高,仅能调整自己的程序的nice值
root可用的nice值为-20~19

nice -n command
	-n	后面接一个数值,数值的范围-20~19
renice  number  PID

fuser -ki  -signal  file/dir  找出使用档案/目录的进程的PID
	-k	找出使用该档案/目录的PID,并试图以SIKKILL这个信号给予PID;
	-i	必须与-k配合,在删除PID之前会先询问使用者意愿
	PID后面字符的意义
		c   在当前的目录下
		e	可以被执行的
		f	是一个被开启的档案
		r	代表root directory

lsof	-Uu  +d		列出已经被开启的档案与装置
	-a	多项数据需要同时成立才显示出结果时
	-U	仅列出Unix like系统的socket的档案类型
	-u	后面接username,列出该使用者相关程序所开启的档案
	+d	后面接目录,亦即找出某个目录底下已经被开启的档案

pidof	-sx		program_name
	-s	仅列出一个PID而不列出所有的PID
	-x	同时列出该program name可能的PPID那个程序的PID

run level:
	0	-halt(系统直接关机)
	1	-single user mode(单人维护模式,用在系统出问题时的维护)
	2	-类似下面的3,但无NFS服务
	3	-完整的含有网络功能的纯文字模式
	4	-系统保留功能
	5	-与3类似,但使用X Window
	6	-reboot(重新开机)
reunlevel	查看当前的run lenvel;

lsmod	查看目前核心加载了多少模块

modinfo -adln	module_name|filename
	-a	仅列出作者名称
	-d	公列出该modules的说明(description)
	-l	仅列出授权
	-n	仅列出该模块的详细路径

grup-install  [--root-directory=DIR] INSTALL_DEVICE  例grub-install /dev/sda
	--root-directory=DIR 那个DIR为实际的目录,使用grup-install预设会将grub所有的档案都复制到/boot/grub/*当中,但如果想要复制到其它目录与装置去,就得用这个参数

grub	进入grub shell
	root (hdx,x)	选择含有/boot目录的那个partition代号
	用 find /boot/grub/stagel  看看能否找到安装信息档案
	用 find /boot/vmlinuz	   看看能否找到kernel file
	用 setup (hdx,x)或setup (hdx)将grub安装在super block或MBR
	用 quit离开grub shell

开机过程中按下	
	e:	进入grub shell
	o:	在游标所在行底下再新增一行
	d:	将游标所在行删除
	b:	boot,可以用当前行开机

makefile
	里面可以用变量
	$@代表目前的目标,就是:前面的标号
	./configure   建立Makefile
	make clean
	make
	make install

./configure  --help |more	查询帮助
			 --prefix=/path	表示这个软件要安装到哪里,预设是/usr/local

在/etc/ld.so.conf里面写入[想要读入高速缓存当中的动态函式库所在的目录]
用ldconfig这个执行档将/etc/ld.so.conf的资料读入快取中
同时也将数据记录一份在/etc/ld.so.cache这个档案中

ldconfig -f conf -C cache -p
	-f conf:那个conf指的是某个文件名称,使用conf作为libarary,而不以/etc/ld.so.conf
	-C cache:那个cache指的是某个文件名称,使用cache作为快取暂存的函式库,而不以/etc/ld.so.cache为默认值
	-p		:列出目前有的所有函式库资料内容(在/etc/ld.so.cache内的资料)

ldd  [-vdr]  filename   判断某个可执行的binary档案含有什么动态函式库
	-v	列出所有内容信息
	-d	重新将资料有遗失的link点显示出来
	-r	将ELF有关的错误内容显示出来

md5sum -bct filename
md5sum --status|--warn  --check filename
	-b	使用binary的读档方式
	-c	检验md5sum档案指纹
	-t	以文字形态来读取md5sum的档案指纹

rpm -ivh  package_name	安装软件
	-i	install的意思
	-v	察看更细部的安装信息画面
	-h	以安装信息列显示安装进度
rpm -ivh  网址   由网络上面的某个档案安装
	--nodeps		不检查信赖,直接强制安装,可能造成软件无法正常使用
	--nomd5			不想检查RPM档案所含的MD5信息
	--noscripts		不想让该软件自行启用或者自行执行某些系统指令
	--replacefiles	如果在安装的过程中出现[某个档案已经被安装在系统上面]的信息,又或许出现版本不合的信息时,可以使用这个参数来直接覆盖档案
	--replacepkgs	重新安装某个已经安装过的软件
	--force			是上面两个的综合体
	--test			测试一下该软件是否可以被安装到使用者的linux环境当中

rpm -Uvh	名称 后面接的软件若是没有安装过,则系统直接安装,若后面接的软件有安装过,则系统自动更新至新版
	-Fvh    后面接的软件或是没有安装过,则该软件不会被安装

rpm  -qa		查询软件信息
rpm  -q[licdR]  已安装的软件的名称
rmp  -qf		存在于系统上面的某个档案
rpm	 -qp[licdR]	未安装的某个文件名称
	
	-q			仅查询,后面接的软件是否有安装
	-qa			列出所有的,已经安装在本机系统上面的软件
	-qi			列出该软件的详细信息,包含开发商,版本与说明
	-ql			列出该软件的所有的档案与目录所在完整文件名
	-qc			列出该软件的所有设定档
	-qd			列出该软件的所有说明档
	-qR			列出与该软件有关的依赖的软件的档案
	-qf			由后面接的文件名称,找出该档案属于哪一个已安装的软件
	-qp[icdlR]	与上一致,但用途仅在找出某个RPM档案内的信息,而非已安装的软件的信息

rpm -Va    验证软件是否有数据丢失
	-V	   已安装的软件名称
	-Vp	   某个RPM档案的档名
	-Vf	   在系统上面的某个档案

	-V		若该软件所含的档案被更动过,才会列出来
	-Va		列出目前系统上面所有可能被更动过的档案
	-Vp		后面加的是文件名称,列出该软件内可能被更动过的档案
	-Vf		列出某个档案是否被更动过

rpm -e 名称   解安装软件
rpm --rebuilddb   重建数据库

daemon
	stand_alone  独立启动,常驻在内存,响应速度快,放置在/etc/init.d这个目录里,路径 start,service 服务 start
	super daemon 由统一的一个daemon来负责唤起该服务,当有数据来时,会先交给xinet这个服务,然后xinet根据封包内容(IP与port)发给相应的服务,然后服务再启动,不会一直占用系统资源,但速度秒慢,xinet或inet

super daemon又分为
	multi-threaded
		数据全部接收,再处理
	single-threaded
		来一个数据,处理一次,再接下一个数据

与服务有关的端口对应资料:  /etc/services
