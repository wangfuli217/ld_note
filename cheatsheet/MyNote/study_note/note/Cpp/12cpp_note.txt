模板起源
	C/C++语言的静态类型系统,在满足效率与安全性要求的同时,很大程度上也成为阻碍程序员编写通用代码的桎梏,它迫使人们不得不为每一种数据类型编写完全或几乎完全相同的实现,虽然它们在抽象层面上是一致的

宏定义只是在预处理器的作用下,针对源代码的文本替换,其本身并不具备函数主义,因此借助于参数宏(宏函数)可以在某种程序上使程序的编写者摆脱那些源于类型的约束和限制,但同时也因此丧失了类型的安全性
	利用宏定义构建通用代码的框架,让预处理器将其扩展为针对不同类型的具体版本,将宏的一般性和函数的类型安全性完美地结合起来

函数模板
	函数模板的定义	
		template<typename 类型形参1,typename 类型形参2...>
		返回类型 函数模板名(调用形参表)
		{
			函数体;
		}

函数模板的使用
	模板实例化
		通常而言,并不是把模板本身编译成一个处理任何类型的单一实体,而是对于实例化模板参数的每种类型,都从模板产生出一个不同的实体,这种用具体类型代替模板参数的过程叫做实例化,它所产生的实体被称为该模板的一个实例
	只要调用函数模板,编译器就会自动引发实例化的过程,程序员不需要额外要求对函数模板做实例化
	在使用函数模板的时候,一般把写在尖括号里的参数称为模板参数,而把写在圆括号中的参数称为调用参数
	::max<int>(123,456)
		   |      \ /
		 模板参数  调用参数
	二次编译
		当编译器看到函数模板的定义时,首先做第一次编译,进行与类型无关的语法检查,如果检查通过,则在编译器内部生成一个关于该模板的内部表示(内部数据结构),当编译器看到使用该函数模板时,会将所提供的模板实参结合到之前生成的内部表示中,进行与类型参数相关的语法检查,如果检查通过,则生成针对具体实例的二进制指令

函数模板的隐式推断
	根据调用参数推断模板参数
		如果函数模板调用参数的类型相关于该模板的模板参数,那么在调用该函数模板时,即使不显式指定模板参数,编译器也有能力根据调用参数的类型隐式推断出正确的模板参数,以获得与普通函数调用一致的语法表达

	不能隐式推断的三种情况
		不是全部模板参数都与调用参数的类型相关
		隐式推断的同时不允许发生隐式类型转换
		返回类型不参与隐式推断

函数模板的重载
	
