
名字空间定义
	namespace 名字空间名
	{
		名字空间成员１;
		名字空间成员２;
	}

名字空间合并
	名字空间名一样会自动合并

声明定义分开
	
作用域限定符
	名字空间名::成员

名字空间指令
	using namespace 名字空间名;

名字空间声明
	using 名字空间名::名字空间成员名;

无名名字空间
	::名字空间名

名字空间的嵌套
	
名字空间别名
	namespace ns123=ns1::ns2::ns3;

为什么需要名字空间
	划分逻辑单元,发送程序的可读性和可维护性
	避免名字冲突
	什么是名字空间
		定义
			namespace　名字空间名{...}
		合并
			同名名字空间,无论是在同一个源文件中,还是分页于不同的源文件,编译器都会把它们合并到一个名字空间中
		声明和定义可以分开
			定义语句必须带有作用域限定

怎样使用名字空间
	作用域限定符
		cout<<ns::x<<endl;
		ns::foo();
	名字空间指令
		using namespace ns;　　//使ns中的标识符在以下代码中可见
		cout<<x<<endl;
		foo();
		只有在不发生名字冲突的前提下,才可以使用这种语法

名字空间声明
	using ns::x; //将ns中的x引入到当前作用域中,只有在不发生名字冲突的情况下,才可以使用
	cout<<x<<endl;

无名(匿名)名字空间
	不属于任何有名名字空间的标识符,会被编译器自动地放入无名名字空间

对无名名字空间的访问
	直接在该成员名前使用"::"号

名字空间嵌套和别名
	多层名字空间
		namespace ns1
		{
			namespace ns2
			{
				namesapce ns3
				{
					...
				}
			}
		}

访问内层名字空间的成员
	cout<<ns1::ns2::ns3::x<<endl;
	using namespace ns1::ns2::ns3;

名字空间别名
	namespace ns123=ns1::ns2::ns3;
	cout<<ns123::x<<endl;
	ns123::foo();

结构　联合和枚举
	Ｃ++中的结构,联合和枚举弄变量在声明时可以省略struct union和enum关键字
	Ｃ++中的结构中可以包含成员函数,在成员函数中可以直接访问同一个结构体中的成员变量,结构的成员函数必须通过结构类型的变量或者指针加上.或才->运算符调用
	Ｃ++中可以使用匿名联合,将其中包含的变量约束为以内存共享的方式布局
	Ｃ++中的枚举是独立的数据类型,不能从整型隐式转换,但可以被隐式转换为整型

字符串
	类型
		string 
	实例化
		string a;
		string b("字符串");
		C<->C++
			c->c++		隐式转换
				string s="abc";
			c++->c		
				string::c_str()  ->char const*

字符串运算
	赋值:=
	拼接:+
	复合赋值:+=
	关系:>　>=　<　<=　==　!=
	下标:[]

字符串的大小
	string::size()  string::length();
	sizeof获取字符串对象本身的字节数而非字符串的长度
	resize clear empty
	
