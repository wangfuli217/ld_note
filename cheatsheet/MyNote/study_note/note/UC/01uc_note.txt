UC阶段课程介绍
课程简介
	Unix基础命令 － 基于Unix/linux系统的命令
	标准C编程 － 主要学习C语言的基本语法，不依赖于具体的操作系统
	数据结构和算法 － 主要学习编程的思想和方法，不依赖于具体的编程语言，也不依赖于具体的操作系统
	Unix/linux系统下的高级C编程 － 主要学习Unix/Linux系统下的API编程接口，基于C语言的编程,15天左右
	目前市场上主流的主机操作系统:Unix/Linux/Windows系统
	windows系列:xp/Vista/Win7/Win8/Win8.1/Win10
	目前市场上主流的移动终端操作系统：Android/Ios/Windos phone

UC课程的主要内容
	Unix/linux系统的基本概述
	Unix/linux系统下编程的基础和开发方式
	Unix/linux系统下的内存管理
	Unix/linux系统下的文件管理和目录操作
	Unix/linux系统下的进程管理
	Unix/linux系统下的信号处理
	Unix/linux系统下的进程间通信
	Unix/linux系统下的网络编程
	Unix/linux系统下的多线程编程

gcc的基本使用
	gcc的原名叫做GNU C语言 编译器(gnu c Compiler),只能编译C语言程序，后来很快就做了扩展，支持了更多的编程语言，比如C++,object-c,改名为GNU 编译器套件(GNU Compiler Collection)，支持很多的硬件和操作系统

	基本使用
		gcc/cc xxx.c 可以编译链接C源程序生成一个可执行文件a.out，整个过程可以划分为以下的4步流程：
		1.预处理/预编译  :主要用于包含头文件，以及执行宏替换等
		2.编译: 主要用于将高级语言程序翻译成汇编语言，得到汇编文件
		3.汇编: 主要用于将汇编语言翻译成机器指令，得到目标文件
		4.链接: 主要用于将目标文件和标准库链接，得到可执行文件

练习:
	vi 01print.c文件,在main函数中任意打印一句话即可！

	常见的编译选项
	-E  实现预处理的执行，默认将处理结果输出到控制台，可以通过-o选项指定输出到xxx.i文件中，预处理文件中包含了很多头文件，类型的别名，以及各种函数的声明等等
	-S  实现编译的处理,得到一个.s为后缀的汇编文件
	-c  实现汇编的处理，得到一个.o为后缀的目标文件
	gcc/cc xxx.o 实现链接的处理，默认生成a.out文件，可以通过选项-o来指定输出文件名
	-v	查看编译器的版本等信息
	-std 表示指定执行的标准
	-Wall 尽可能产生警告信息
	-Werror 将警告当作错误处理

	-g	产生调试信息
	-O	表示进行具体的优化
	-x	表示指定源代码的具体语言

常见的C程序相关文件后缀
	.h 头文件
	.c 源文件
	.i 预处理文件
	.s 汇编文件
	.o 目标文件

	.a 静态库文件
	.so 共享库文件

多文件结构的编程
多文件结构
	.h － 头文件，主要包含结构体的定义，变量和函数的申明等
	.c － 源文件，主要包含变量和函数的定义等
	
	.a － 静态库文件，主要是对功能函数的打包
	.so－ 共离库文件，主要是对功能函数的打包

头文件中的详细内容
	头文件的卫士
		#ifndef xxx_H (采用头文件的文件名,小写换大写,点换下划线)
		#define xxx_H	
		#endif
	包含其他头文件
		#include<stdio.h>
	进行宏定义
		#define PI 3.1415926
	自定义数据类型
		struct Person
		{
			char name[20];
			int age;
		}
	可以给数据类型起别名
		typedef struct Person P;
	外部变量/函数声明
		extern int num;
		void show(void);
	
预处理指令
	复习标C中的预处理指令
	#include : 表示将指定文件的内容包含进来
	#define	 : 表示定义一个宏
	#undef	 : 表示取消一个宏
	#if		 : 表示如果
	#ifdef	 : 表示如果定义
	#ifndef	 : 表示如果没有定义
	#else	 : 表示否则...与#if/#ifdef/#ifndef搭配使用
	#elif	 : 表示否则如果...与#if/#ifdef/#ifnedef搭配使用
	#endif	 : 表示结束判断

常用的新指令
	#line 整数n  => 表示修改代码的行数/指定行号,修改下一行的行号为n
	#error 字符串 => 表示产生一个错误信息
	#warning 字符串 => 表示产生一个警告信息

注意：
	#if=>主要用于编译期间的检查和判断
	if =>主要用于程序运行期间的检查和判断

	#pragma GCC dependency "文件名" =>当前文件依赖于指定的文件，如果当前文件的最后一次修改时间早于依赖的文件，则产生警告信息
	#pragma GCC poison 标识符 =>表示将后面的标识符设置成毒药的意思,一旦使用标识符，则产生错误或者警告信息
	#pragma pack(整数n) =>按照整数n的倍数对结构体进行对齐和补齐


预定义宏
	__FILE__ 获取所在的文件名 %s
	__BASE_FILE__ 获取正在编译的源文件名 %s
	__LINE__ 获取所在的行号 %d
	__FUNCTION__/__func__ 获取所在的函数名 %s
	__DATE__ 获取日期信息
	__TIME__ 获取时间信息

