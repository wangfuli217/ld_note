c语言中通过使用返回值来表示是否出错，根据返回值来进行具体的错误处理
	如果返回值类型是int类型，并且返回的值不可能是负数时，则使用-1代表出错，其他数据表示正常返回
	如果返回值类型是int类型，并且返回的数据可能是负数时，则需要使用指针取出返回的数据，返回值仅仅表示是否出错，-1表示出错，0表示正常返回
	如果返回值是指针类型，则返回NULL代表出错
	如果不考虑出错，返回值类型使用void即可

错误编号和错误信息(为什么错了)
	错误编号
		#include<errno.h>
		errno 是一个全局变量，当函数调用失败时会将具体的错误编号设置到errno中，可以通过errno来获取错误的原因
		/etc/passwd 存储了用户的用户名和密码等信息
		tarena:x:1000:1000:tarena,,,:/home/tarena:/bin/bash
		用户名:密码:用户id:用户组id:注释:家目录:shell类型
		/etc/shadow 存储了用户的密码信息

错误信息
	strerror函数
			#include<string.h>
			char *strerror(int errno);
			函数功能
				主要用于将参数指定的错误编号翻译成对应的错误信息返回
	perror函数(重点)
			#include<stdio.h>
			perror(const char *);
				表示将最后一个错误信息打印出来，参数s不为空时原样输出，后面追加一个冒号和空格，再跟着错误信息以及换行	
	printf函数
		printf("%m"); 打印错误信息
		注意
			判断函数的调用是否成功，还是需要根据返回值进行判断，而在确定已经调用失败的情况下，这时可以通过errno来获取错误的原因，也就是不能直接使用errno来判断函数的调用是否成功

环境表的概念和使用
	环境表的概念
		环境表 就是指环境变量的集合，而每个进程都拥有一张独立的环境表，来保存和当前进程相关的环境变量信息
		环境表采用字符指针数组来存储所有的环境变量，使用全局变量char** environ来记录环境表的首地址，使用NULL来代表环境表的结束，所以访问环境表则需要借助environ变量
	环境表相关的处理函数
	getenv函数
		#include<stdlib.h>
		char *getenv(const char* name);
	函数功能
		表示根据参数指定的环境变量名去环境表中进行查找，返回该环境变量所对应的环境值，查找失败则返回NULL
	setenv函数
		#include<stdlib.h>
		int setenv(const char *name,const char *value,int overwrite);
		第一个参数:环境变量名
		第二个参数:环境变量值
		第三个参数:是否修改
		函数功能:
			如果参数指定的环境变量不存在则增加，如果存在并且overwrite是非0,则修改环境变量值，否则环境变量不变,成功返回0，失败返回-1
	putenv函数
		#include<stdlib.h>
		int putenv(char *string);
		函数功能
			表示按照参数的内容增加/修改环境变量，其中string的格式为:name=value，如果不存在则添加，存在则修改
	unsetenv函数
		#include<stdlib.h>
		int unsetenv(const char *name);
		函数功能
			表示根据参数指定的环境变量去环境表中进行删除
	clearenv函数
		#include<stdlib.h>
		int clearenv(void);
		函数功能
			表示清空整个环境表

主函数的原型
	int main(int argc,char *argv[],char* envp[]{})
	第一个参数:命令行参数的个数
	第二个参数:命令行参数的地址信息
	第三个参数:环境表的首地址

内存管理
	程序和进程的概念
		程序：表示存放在硬盘上的可执行文件
		进程：表示在内存中正在运行的程序
	进程中的内存区域划分
		BSS段-主要存放没有初始化的全局变量和static修饰的局部变量，BSS段会在main函数执行之前自动清零
		栈区-主要存放局部变量(包括函数的形参),const修饰的局部变量，以及块变量，该内存区域由操作系统自动管理
		堆区-主要表示使用malloc/calloc/realloc等手动申请的动态内存,内存由程序员手动申请和手动释放
		代码区-存放程序功能代码的区域，比如:函数名
		只读常量区-主要存放字符串常量和const修饰的全局变量
		全局区-主要存放已经初始化的全局变量和static修饰的局部变量

作业:
	预习内存管理的知识
明日预报:
	内存管理
