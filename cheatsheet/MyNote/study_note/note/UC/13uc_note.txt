络编程 - 基本常识
网络编程 - 一对一的通信模型
网络编程 - 基于TCP协议的编程模型

1.网络的基本常识
	
七层网络协议
	由ISO将网络从逻辑上划分为七层:
		应用层			为用户的应用程序提供各种网络服务(将数据交给应用程序)
		表示层			将不同数据格式转换为一种通用格式(将数据按照统一的格式进行封装)
		会话层			建立,管理和终止通信主机间的对话(控制对话的开始和结束等)
		传输层			提供端到端的流量控制维持可靠传输(使用具体的传输协议检查和传输数据)
		网络层			路径选择,路由,IP寻址,建立连接(主要进行路径的选择和传递数据)
		数据链路层		物理寻址,网络拓扑结构,错误检测(将数据转换为高低电平信号传递)
		物理层			高低电平(主要借助网卡驱动,交换机设备等传递)

常见的协议
	TCP - 传输控制协议,一种面向连接的协议,类似打电话
	UDP - 用户数据报协议,一种非面向连接的协议,类似发短信
	IP  - 互联网协议,TCP/UDP的底层协议
	
IP地址
	IP地址 - 互联网中唯一的地址标识,本质上就是一个32位的整数(IPV4),目前也有IPV6(128位二进制)
	日常生活中,采用点分十进制表示法来描述一个具体的IP地址,也就是说将每一个字节计算出一个十进制的整数,多个十进制整数之间采用小数点分隔

	IP地址主要分为两部分:网络地址+主机地址
	IP地址分为以下4类:
		A类:0+7位网络地址+24位主机地址
		B类:10+14位网络地址+16位主机地址
		C类:110+21位网络地址+8位主机地址
		D类:1110+28位多播地址

查看IP地址的基本命令
	Windows系列操作系统:ipconfig ipconfig/all
	Unix/Linux:		ifconfig	/sbin/ifconfig

子网掩码
	一般与IP地址搭配使用,主要用于指定一个IP地址中具体的网络地址和主机地址,也就是说主要用于判断两个IP地址是否在同一个子网中

物理地址
	物理地址,又叫做Mac地址,本质就是硬件网卡的地址
	通过绑定Mac地址来实现上网设备的控制

端口号
	IP地址-主要用于定位具体的某一台主机
	端口号 - 主要用于定位该主机中具体的某一个进程
	端口号的数据类型:unsigned short类型,取值范围是:0~65535,其中0~1024之间的端口号由系统占用,自己指定端口号从1025以上开始

字节序
	如0X12345678
	小端系统: 低位内存地址存放低位数据的系统,0x78 0x56 0x34 0x12
	大端系统: 低位内存地址存放高位数据的系统,0x12 0x34 0x56 0x78
	网络字节序:主要描述数据在网络中传递时的字节顺序,而网络字节序本质上就是大端系统的字节序
	主机字节序:主要描述数据在本地系统中存放的字节顺序

	建议:
		当发送数据时转换为网络字节序再发送,而对接收到的数据先转换为主机字节序,然后再解析

基于Socket的一对一通信模型
	基本概念
		Socket 网络通信的载体	使用Socket可以实现两个进程/两个主机之间的通信

	通信的基本模型
		服务器:
			创建socket,使用socket函数
			准备通信地址,使用结构体类型
			绑定socket和通信地址,使用bind函数
			进行读写操作,使用read/write函数
			关闭socket,使用close函数
		客户端:
			创建socket,使用socket函数
			准备通信地址,使用结构体类型(服务器的地址)
			连接socket和通信地址,使用connect函数
			进行读写操作,使用read/write函数
			关闭socket,使用close函数

相关函数的解析
	socket函数
	   #include <sys/types.h>          /* See NOTES */
       #include <sys/socket.h>
       int socket(int domain, int type, int protocol);
	   第一个参数:域/协议族,决定本地通信还是网络通信
			AF_UNIX/AF_LOCAL - 本地通信
			AF_INET - 基于IPv4的网络通信
			AF_INET6 - 基于IPv6的网络通信
		第二个参数:类型,决定彩何种协议进行通信
			SOCK_STREAM - 数据流的方式,基于TCP的通信协议
			SOCK_DGRAM - 数据报的方式,基于UDP的通信协议
		第三个参数:特殊协议,给0即可
		函数功能:主要用于创建一个通信点,成功返回一个描述符,失败返回-1

	通信地址的数据类型
		通用的通信地址
		struct sockaddr {
			sa_family_t sa_family;    协议族
			char        sa_data[14];	数据内容
		}
		注意:该通信地址通常用于函数的参数类型,用于各种通信地址之间的转换

		本地通信的结构体类型
		#include<sys/un.h>
		struct sockaddr_un
		{
			sa_family_t  sun_family  Address family.  //地址族,和socket函数参数一相同
			char         sun_path[]  Socket pathname.	//socket文件的路径和文件名
		};
		
		网络通信的结构体类型
		#include<netinet/in.h>
		struct sockaddr_in
		{
			sa_family_t     sin_family   AF_INET.
			in_port_t       sin_port     Port number. //端口号
			struct in_addr  sin_addr     IP address.
		}
		struct in_addr
		{
			in_addr_t s_addr;
		};

	bind函数
		 #include <sys/types.h>          /* See NOTES */
	     #include <sys/socket.h>
	     int bind(int sockfd, const struct sockaddr *addr,socklen_t addrlen);
		 第一个参数:socket描述符,socket函数的返回值
		 第二个参数:结构体类型的指针(&通信地址)
		 第三个参数:通信地址的大小
		 函数功能:主要用于绑定指定的socket和通信地址

	connect函数
		 #include <sys/types.h>          /* See NOTES */
	     #include <sys/socket.h>
	     int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
		 函数功能:主要用于socket和通信地址之间的连接,参数同上

字节序转换函数
	#include <arpa/inet.h>
	
	uint32_t htonl(uint32_t hostlong);   //主要用于将unsigned int的主机字节序转换为网络字节序
	
	uint16_t htons(uint16_t hostshort);  //主要用于将unsigned short的主机字节序转换为网络字节序
	
	uint32_t ntohl(uint32_t netlong);  //主要用于将unsigned int的网络字节序转换为主机字节序
	
	uint16_t ntohs(uint16_t netshort); //主要用于将unsigned short的网络字节序转换为主机字节序
	
IP地址转换函数
	   #include <sys/socket.h>
       #include <netinet/in.h>
       #include <arpa/inet.h>
		
		in_addr_t inet_addr(const char *cp);  
		函数功能:
			主要用于将字符串类型的IP地址转换为整数
		
