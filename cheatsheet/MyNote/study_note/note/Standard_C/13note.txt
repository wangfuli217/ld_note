结构体变量可以作为函数的形式参数使用，但是这样会导致时间和空间的浪费
可以使用结构体指针作为形式参数，这样可以避免上述问题
可以给函数指定一个结构体类型的返回值，但是这样也会造成时间和空间的浪费
可以使用结构体指针类型返回值避免上述问题
不可以把局部结构体变量的地址赋值给指针类型的返回值

一个存储区的地址一定是它自身大小的整数倍（双精度浮点类型的地址只需要是4的整数倍就可以了）
这个规则叫做数据对齐
结构体内部的每个存储区通常也需要遵守这个规则
数据对齐可能造成结构体内部各存储区之间有浪费的字节
结构体的大小一定是内部最大基本类型存储区大小的整数倍
这个规则叫数据补齐
数据补齐可能造成结构体最后有一些浪费的字节

枚举也可以用来声明新的数据类型
枚举类型中只能包含有限个整数，每个整数可以用来代表一个名称（例如性别类型）
枚举类型也需要先声明再使用
声明枚举的时候需要使用enum关键字
声明枚举类型时直接用名称代替它里面包含的整数
计算机用整数0代表枚举类型中第一个名称，后面的名称依次递增
可以在声明枚举类型的时候指定某个名字用某个整数表示（这个时候后面的名字也会随之改变）
使用宏可以实现和枚举类似的效果（要明确表示用宏）

联合也可以用来表示声明新的数据类型
声明联合的时候需要使用union关键字
联合里同样包含多个不同的存储区，这些存储区的地址都一样
联合里不同存储区的内存是重叠的，修改了任何一个其他的会受影响
联合的大小是其中最大部分存储区的大小

二级指针用来记录指针变量存储区的地址
一级指针用来记录普通变量存储区的地址
二级指针声明的时候需要加两个*号

二级指针变量名称可以代表它自己的存储区或里面的数据
二级指针变量名称前加*号代表捆绑一级指针存储区
二级指针变量名称前加**号代表和它捆绑的一级指针存储区所捆绑的普通变量存储区

二级指针不能用来代替二维数组

二级指针可以用来代替指针数组

无类型指针有可能实际代表一个二级指针

二级指针作为函数的形式参数可以让被调用函数使用其他函数的指针类型存储区

C语言中函数也有地址
可以在C语言程序中使用函数名称表示函数的地址
函数指针用来记录函数的地址
函数指针也需要先声明再使用
函数指针声明可以根据函数声明变化得到

不同格式的函数适合与不同类型的函数指针捆绑


预习：
1.回调函数
2.动态内存分配
3.C语言标准函数

作业：
1.使用函数改造昨天的作业

