数组不可以作为返回值使用

为了从调用函数向被调用函数传递数据也需要被调函数提供一组存储区，这些存储区的个数和类型任意

在函数名称后小括号里声明一组变量，这些变量用来代表上面所说的存储区
这些变量叫做形式参数，小括号里的整体叫做形式参数列表
每个形式参数必须有自己的类型名称，不同形式参数声明之间用逗号分隔
在函数开始工作的时候计算机会向所有形式参数里放数字，这是它们和普通变量的唯一区别
如果一个函数不使用形式参数则应该用void作为形式参数列表
如果形式参数列表什么都没写表示函数可以提供任意多个任意类型的形式参数
函数调用语句的小括号里提供的数字叫做实际参数，它们决定形式参数所代表的数字
能当作数字使用的都可以当做实际参数使用

数组可以作为形式参数使用
数组作为形式参数的时候它里面包含的存储区一定不是被调用函数提供的
使用数组作为形式参数可以让被调用函数使用其他函数提供的存储区
数组形式参数可以实现双向数据传递，这种参数叫做输入输出参数
数组形式参数声明的时候可以省略存储区个数
数组作为形式参数的时候需要另外一个整数类型格式参数表示数组中包含的存储区个数

函数可以分成函数声明和函数体两部分，函数声明可以单独写成一条语句，这个时候可以省略形式参数的名称

如果被调用函数写在调用函数后面则编译器会猜测被调用函数的格式，这叫做函数的隐式声明。
隐式声明可能和实际情况不一致，这时就会出错
可以把调用函数的声明单独写在文件开头，这叫做函数的显式声明
除了主函数以外的所有函数都应该进行显式声明

return关键字构成的语句会结束函数
可以在return关键字后加一个数字，这个数字将作为函数的返回值使用

exit标准函数可以在任何地方结束程序的执行
为了使用这个标准函数需要包含stdlib.h文件
这个函数使用参数告诉别的程序自己是否正常结束

会调用自己的函数叫做递归函数
如果一个问题可以被分解成几个小问题，其中某些小问题和原来的问题本质一样只是难度小一些，这种问题可以采用递归函数解决

递归函数编写步骤
1.编写语句描述问题的分解方式（假设递归函数已经完成）
2.在递归函数开关编写分支处理不能分解的情况，这个分支必须保证函数可以结束

采用递归函数解决问题的思路叫递归
彩用循环解决同样问题的思路叫递推

预习：
1.作用域，全局变量，局部变量
2.指针

作业：
1.采用递归和递推两种方法计算某个给定正整数到1之间所有整数的求和结果

