能使用某个变量的语句总和叫做这个变量的作用域
声明在函数内部的变量叫做局部变量，它的作用域只包含函数内部的所有语句
声明在函数之外的变量叫全局变量，它们的作用域包含程序中所有语句
没有初始化的全局变量自动被初始化为0

如果函数A的工作时间完整包含函数B的工作时间，则函数B可以使用函数A的存储区。反过来不可以。
一个存储区可以被使用的时间范围叫做它的生命周期。局部变量的生命周期就是函数某一次的执行时间范围。

声明局部变量的时候可以使用static关键字，这种变量叫做静态局部变量，它的存储区可以被所有函数使用
没有初始化的静态局部变量自动被初始化成0
静态局部变量的初始化只在程序开始时执行一次
目前掌握的跨函数使用存储区的办法有两种，一种是被调函数可以使用调用函数的存储区，另外一种是静态局部变量存储区可以被任意使用
静态全局变量的作用域只包含声明它的那个文件内部的所有语句

全局变量和局部变量可以重名，这个时候语句会优先使用局部变量

指针变量是一种变量，它负责记录一个地址数据
指针变量的使用方法和普通变量区别很大
如果一个指针变量记录了某个存储区的地址则可以根据这个指针变量找到那个存储区
**只有捆绑过的指针才可以使用

指针也是分类型的，不同类型存储区的地址适合记录在不同类型的指针里

可以在一条语句中声明多个指针变量，每个指针变量名称前都要加*
这个地址的数值是0
所有没捆绑的指针必须记录空地址（NULL），如果一个指针既没有捆绑过也没有记录空地址则称为野指针
程序中应该避免出现野指针

指针初始化的时候*号没有参与赋值过程

如果指针记录了数组中第一个存储区的地址则可以通过这个指针找到数组中每个存储区
这个时候可以把指针当作数组名称使用，给指针增加一个下标就可以用来表示数组中的某个存储区了

地址数据可以参与如下计算过程
地址＋整数
地址－整数
地址－地址

地址数据加减整数n实际数值变化是n个捆绑存储区的大小
地址之间做减法得到一个整数，它代表两个地址之间所包含的捆绑存储区个数

计算机对下标的处理是把地址加上下标得到下标对应存储区的地址，然后加*找到对应的存储区

指针和数组名称的区别
1.数组名称不可以被赋值，指针变量可以被赋值
2.它们的sizeof计算结果不同
3.它们取地址操作的结果不同

数组作为函数形式参数的时候真正的形式参数是一个指针变量
任何地址数据都可以作为实际参数和指针形式参数配合使用
指针形式参数可以让被调用函数使用其他函数的存储区

声明指针时可以使用const关键字
如果把const关键字写在指针类型名称前就表示不可以通过这个指针修改捆绑存储区的内容
这种指针本身的内容仍然可以修改

如果把const关键字写在指针变量名称前就表示指针本身的内容不可修改，但是可以修改指针捆绑存储区的内容

如果函数执行过程中不会修改指针形式参数所捆绑的存储区，则应该在声明指针形式参数的时候加const关键字（const关键字应该加在类型名称前）

声明指针的时候如果用void作为类型名称则指针叫做无类型指针，无法通过这种指针知道捆绑存储区的类型
这种指针既不能在前边加*号也不可以进行加减计算
这种指针必须首先强制类型转换成有类型的指针然后才能使用

预习：
1.字符串

作业：
1.编写循环对数组中每个存储区进行赋值，要求使用指针实现，然后再使用一个循环把所能存储区的内容打印在屏幕上，也要求使用指针实现
2.编写函数把一个数组中所有数字前后颠倒，要求使用指针实现
