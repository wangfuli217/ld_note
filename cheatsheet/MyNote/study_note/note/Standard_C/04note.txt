用逻辑操作符编写的表达式叫做逻辑表达式
逻辑表达式的计算结果一定是布尔值（真或者假）
!是一个单目逻辑操作符，它表示求反操作
这个操作符应该写在一个布尔值的前面，它可以把假变成真，也可以把真变成假

双目逻辑操作符包括==（等于），!=（不等于），>（大于），>=（大于等于）,<（小于）和（小于等于）

如果一个逻辑表达式中同时包含多个双目逻辑操作符则它们之间会互相影响
最多包含一个双目逻辑操作符的表达式叫做简单逻辑表达式
复杂的逻辑表达式可以使用与（&&）和或（||)合并多个简单逻辑表达式得到

如果两个逻辑表达式中至少有一个的结果是真用或（||）合并后的逻辑表达式结果也是真

只有两个逻辑表达式都为真用与(&&)连续后的结果才是真

与和或都具有短路特征，如果前一个逻辑表达式的结果可以决定整个表达式的结果则计算机会忽略后面的逻辑表达式

位操作符可以直接操作二进制数位
～是一个单目位操作符，它可以把二进制中每一个数位变成相反内容
这个操作符叫做按位求反操作符

双目位操作符包括&按位与，|按位或，^按位异或
它们可以把两个数字的对应二进制数位进行计算

按位与把对应数位内容做与计算
只有对应数位都是1的时候结果才是1
按位或把对应数位内容做或计算
只有对应数位都是0的时候结果才是0
按位异或把对应数位内容进行异或计算
如果对应数位内容一样则结果为0，否则结果为1

移位操作符可以把二进制数字每个数位统一向或者向右移动n个位置
移位操作符会得到一个新数字而不会修改原有数字
>>表示向右移位操作
<<表示向左移位操作
操作符左边的数字是将要进行移位的数字
操作符右边的数字是移动的位数
向左移动时右边空出来的位置上一定补充0
无符号类型右移时左边补充0
有符号类型右移时左边补充符号位内容

一般来说向左移动n位相当于乘以2的n次方，向右移动n位相当于除以2的n次方

＆也可以作为单目操作符使用，这个时候它可以用来计算一个存储区的地址
这个操作符必须写在一个代表存储区内容的前面
可以采用%p做占位符把地址数据打印在屏幕上
在我们的计算机上所有地址数据都是32个二进制数位

＊也可以做为单目操作符使用，这个时候它可以根据一个地址数据找到对应的存储区
这个操作符应该写在一个地址数据前面

三目操作符可以在两个不同的计算规则中选择一个
三目操作符的格式如下
布尔值？公式1:公式2
如果布尔值为真则采用公式一计算结果，否则，采用公式二计算结果

如果一个表达式中包含多个不同类型的数字，则计算机首先把它们转换成同一个类型然后再计算，这个转换过程叫隐式类型转换，由计算机自动完成
如果多个数据在内存中占的字节个数不同，则一定会把占字节个数少的类型转换成字节个数多的类型

如果不同数据在内存中所占的字节个数一样则把整数类型转换成浮点类型，把有符号类型转换成无符号类型

可以在程序中给数字指定一个类型，这叫做强制类型转换
语法如下
(char)num
强制类型转换可能会导致数据内容丢失

分支语句可以在程序运行的时候从几组语句中选择一组执行
利用分支可以让程序在不同的时候得到不同的效果

利用if关键字可以编写分支语句
利用if关键字编写的分支可以利用一个逻辑表达式的计算结果控制一组语句是否要执行。如果逻辑表达式的结果是真则对应语句执行，否则不执行。

如果多个分支中任意两个都不可能同时执行就可以采用else关键字进行合并

如果已经合并好的多个分支不可能都不执行则可以把最后一个逻辑表达式连同if关键字一起省略

一个合并好的分支中不同逻辑表达式之间有前后顺序，只有当前面的逻辑表达式结果为假时才计算后面的逻辑表达式

可以在编写分支的时候利用这一点简化后面的逻辑表达式

不可以把合并好的分支拆分成多个无关分支来理解
switch...case语句也可以用来编写分支
如果一个分支里包含有限个整数，每个整数需要使用一组语句进行处理。这种分支就可以采用switch...case方式实现

预习：
1.for循环
2.多重循环

作业：
1.编写程序判断用户给定的年份是不是闰年，并把结果打印在屏幕上。如果年份数字可以被4整除但是不能被100整除则它是闰年，如果年份数字可以被400整除则它也是闰年


