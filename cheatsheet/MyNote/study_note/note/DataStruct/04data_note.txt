二叉树(Binary Tree)
基本概念
	在计算机中,二叉树是指每个结点最多有两个子节点的树结构
	其中，起始的节点叫做根节点，整棵树只有一个根节点;除去根结点之外的每个节点有且仅有一个父节点;其中没有任何子节点的节点叫做叶子节点,叶子节点有父结点但是没有子节点
	除了根节点和叶子节点之外，剩下的节点叫做枝节点，枝节点有父结点也有子结点
	如果该二叉树中每层节点树均达到最大值,且所有的枝节点都有两个子节点，那么该二叉树就叫做满二叉树
	如果除了最后一层之外，各层节点数均达到最大值，并且最后一层的节点都连续集中在左边，则叫做完全二叉树

基本特征
	二叉树具有递归嵌套式的空间结构特征，因此采用递归的方法处理二叉树问题可以使得算法变得更加简洁，处理的一般形式如下
	处理(二叉树)
	{
		if(二叉树为空) {直接处理}
		else
		{
			处理根结点;
			处理左子树;  =>使用递归的方法处理 小二叉树
			处理右子树;	 =>使用递归的方法处理 小二叉树
		}
	}
二叉树的存储结构
采用顺序结构进行存储
	一般情况下，从上到下，从左到右，依次存放所有的节点，对于非完全二叉树来说，需要采用虚节点补成完全二叉树
采用链式结构进行存储
	一般情况下，每个节点包含三个部分，其中一个是存储数据的内容，另外两个则用于存储左右子结点的地址

typedef struct node
{
	int data ; //存储具体的数据内容
	struct node *left; //存储有左子节点的地址
	struct node *right; //存储右子节点的地址
}node;

基本操作
创建 销毁 插入节点 删除节点 遍历节点 修改节点 查找节点 判断二叉树是否为空
判断二叉树是否为满 计算节点的个数 获取根节点的元素值

遍历方式
前序遍历(DLR-Data Left Right)
	对于从根开始的每一棵子树,先处理根节点的数据，再处理它的左子树，最后处理它的右子树，又叫做先根遍历

中序遍历(LDR-Left Data Right)  =>重点掌握
	对于从根开始的每一棵子树，先处理它的左子树，再处理它的根节点中的数据，最后处理它的右子树

后序遍历(LRD-Left Right Data)
	对于从根开始的每一棵子树，先处理它的左子树，再处理它的右子树，最后处理它的根节点数据，又叫做后根遍历

有序二叉树
	一般来说，如果左子树非空，则左子树所有的节点值都小于根节点元素值，如果右子树不为空，则右子树上所有的节点值都大于等于根节点的元素值，这样的非空二叉树叫做有序二叉树


实际应用
	有序二叉树是一种最简单的二叉树，主要用于搜索和遍历的应用中，查找数据非常方便，又叫做二叉查找树/二叉有序树



作业：
	在01binarytree,c中实现以下功能函数：
	编写modifyData函数用于修改指定的元素值为新值
	编写empty函数判断二叉树是否为空
	编写full函数判断二叉树是否为满
	编写size函数计算二叉树中节点的个数
	编写get_root函数用于获取根节点元素值

明日预报
	查找算法和排序算法
